
AES_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b90  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00003b90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002c4  2000000c  00003b9c  0002000c  2**2
                  ALLOC
  3 .stack        00002000  200002d0  00003e60  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   00026125  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000358f  00000000  00000000  000461b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005be9  00000000  00000000  00049741  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000510  00000000  00000000  0004f32a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000560  00000000  00000000  0004f83a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00006320  00000000  00000000  0004fd9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000af45  00000000  00000000  000560ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00084cb1  00000000  00000000  00060fff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000ec0  00000000  00000000  000e5cb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d0 22 00 20 21 1c 00 00 1d 1c 00 00 1d 1c 00 00     .". !...........
	...
      2c:	1d 1c 00 00 00 00 00 00 00 00 00 00 1d 1c 00 00     ................
      3c:	1d 1c 00 00 1d 1c 00 00 1d 1c 00 00 1d 1c 00 00     ................
      4c:	1d 1c 00 00 1d 1c 00 00 1d 1c 00 00 1d 1c 00 00     ................
      5c:	1d 1c 00 00 1d 1c 00 00 1d 1c 00 00 1d 1c 00 00     ................
      6c:	1d 1c 00 00 1d 1c 00 00 1d 1c 00 00 1d 1c 00 00     ................
      7c:	1d 1c 00 00 1d 1c 00 00 1d 1c 00 00 1d 1c 00 00     ................
      8c:	1d 1c 00 00 1d 1c 00 00 00 00 00 00 00 00 00 00     ................
      9c:	1d 1c 00 00 1d 1c 00 00 00 00 00 00 1d 1c 00 00     ................
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000000c 	.word	0x2000000c
      d4:	00000000 	.word	0x00000000
      d8:	00003b90 	.word	0x00003b90

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000010 	.word	0x20000010
     108:	00003b90 	.word	0x00003b90
     10c:	00003b90 	.word	0x00003b90
     110:	00000000 	.word	0x00000000

00000114 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     114:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     116:	2207      	movs	r2, #7
     118:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     11a:	421a      	tst	r2, r3
     11c:	d1fc      	bne.n	118 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     11e:	4770      	bx	lr

00000120 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     120:	b5f0      	push	{r4, r5, r6, r7, lr}
     122:	46d6      	mov	lr, sl
     124:	464f      	mov	r7, r9
     126:	4646      	mov	r6, r8
     128:	b5c0      	push	{r6, r7, lr}
     12a:	b08a      	sub	sp, #40	; 0x28
     12c:	0006      	movs	r6, r0
     12e:	000f      	movs	r7, r1
     130:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     132:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     134:	0008      	movs	r0, r1
     136:	4b97      	ldr	r3, [pc, #604]	; (394 <i2c_master_init+0x274>)
     138:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     13a:	4a97      	ldr	r2, [pc, #604]	; (398 <i2c_master_init+0x278>)
     13c:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     13e:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     140:	2301      	movs	r3, #1
     142:	40ab      	lsls	r3, r5
     144:	430b      	orrs	r3, r1
     146:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     148:	a909      	add	r1, sp, #36	; 0x24
     14a:	7b23      	ldrb	r3, [r4, #12]
     14c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     14e:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     150:	b2c5      	uxtb	r5, r0
     152:	0028      	movs	r0, r5
     154:	4b91      	ldr	r3, [pc, #580]	; (39c <i2c_master_init+0x27c>)
     156:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     158:	0028      	movs	r0, r5
     15a:	4b91      	ldr	r3, [pc, #580]	; (3a0 <i2c_master_init+0x280>)
     15c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     15e:	7b20      	ldrb	r0, [r4, #12]
     160:	2100      	movs	r1, #0
     162:	4b90      	ldr	r3, [pc, #576]	; (3a4 <i2c_master_init+0x284>)
     164:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     166:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     168:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     16a:	079b      	lsls	r3, r3, #30
     16c:	d505      	bpl.n	17a <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     16e:	b00a      	add	sp, #40	; 0x28
     170:	bc1c      	pop	{r2, r3, r4}
     172:	4690      	mov	r8, r2
     174:	4699      	mov	r9, r3
     176:	46a2      	mov	sl, r4
     178:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     17a:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     17c:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     17e:	07db      	lsls	r3, r3, #31
     180:	d4f5      	bmi.n	16e <i2c_master_init+0x4e>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     182:	2314      	movs	r3, #20
     184:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     186:	6833      	ldr	r3, [r6, #0]
     188:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     18a:	0018      	movs	r0, r3
     18c:	4b81      	ldr	r3, [pc, #516]	; (394 <i2c_master_init+0x274>)
     18e:	4798      	blx	r3
     190:	0005      	movs	r5, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     192:	2380      	movs	r3, #128	; 0x80
     194:	aa08      	add	r2, sp, #32
     196:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     198:	2300      	movs	r3, #0
     19a:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     19c:	2201      	movs	r2, #1
     19e:	a908      	add	r1, sp, #32
     1a0:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
     1a2:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
     1a4:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     1a6:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     1a8:	2800      	cmp	r0, #0
     1aa:	d100      	bne.n	1ae <i2c_master_init+0x8e>
     1ac:	e0af      	b.n	30e <i2c_master_init+0x1ee>
	pin_conf.mux_position = pad0 & 0xFFFF;
     1ae:	ab08      	add	r3, sp, #32
     1b0:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     1b2:	2302      	movs	r3, #2
     1b4:	aa08      	add	r2, sp, #32
     1b6:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     1b8:	0c00      	lsrs	r0, r0, #16
     1ba:	b2c0      	uxtb	r0, r0
     1bc:	0011      	movs	r1, r2
     1be:	4b7a      	ldr	r3, [pc, #488]	; (3a8 <i2c_master_init+0x288>)
     1c0:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     1c2:	2f00      	cmp	r7, #0
     1c4:	d100      	bne.n	1c8 <i2c_master_init+0xa8>
     1c6:	e0a7      	b.n	318 <i2c_master_init+0x1f8>
	pin_conf.mux_position = pad1 & 0xFFFF;
     1c8:	ab08      	add	r3, sp, #32
     1ca:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     1cc:	2302      	movs	r3, #2
     1ce:	aa08      	add	r2, sp, #32
     1d0:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     1d2:	0c3f      	lsrs	r7, r7, #16
     1d4:	b2f8      	uxtb	r0, r7
     1d6:	0011      	movs	r1, r2
     1d8:	4b73      	ldr	r3, [pc, #460]	; (3a8 <i2c_master_init+0x288>)
     1da:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     1dc:	8aa3      	ldrh	r3, [r4, #20]
     1de:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     1e0:	8ae3      	ldrh	r3, [r4, #22]
     1e2:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     1e4:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     1e6:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     1e8:	2b00      	cmp	r3, #0
     1ea:	d104      	bne.n	1f6 <i2c_master_init+0xd6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     1ec:	4b6f      	ldr	r3, [pc, #444]	; (3ac <i2c_master_init+0x28c>)
     1ee:	789b      	ldrb	r3, [r3, #2]
     1f0:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     1f2:	0fdb      	lsrs	r3, r3, #31
     1f4:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     1f6:	68a1      	ldr	r1, [r4, #8]
     1f8:	6923      	ldr	r3, [r4, #16]
     1fa:	430b      	orrs	r3, r1
     1fc:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     1fe:	2224      	movs	r2, #36	; 0x24
     200:	5ca2      	ldrb	r2, [r4, r2]
     202:	2a00      	cmp	r2, #0
     204:	d002      	beq.n	20c <i2c_master_init+0xec>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     206:	2280      	movs	r2, #128	; 0x80
     208:	05d2      	lsls	r2, r2, #23
     20a:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     20c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     20e:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     210:	222c      	movs	r2, #44	; 0x2c
     212:	5ca2      	ldrb	r2, [r4, r2]
     214:	2a00      	cmp	r2, #0
     216:	d103      	bne.n	220 <i2c_master_init+0x100>
     218:	2280      	movs	r2, #128	; 0x80
     21a:	0492      	lsls	r2, r2, #18
     21c:	4291      	cmp	r1, r2
     21e:	d102      	bne.n	226 <i2c_master_init+0x106>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     220:	2280      	movs	r2, #128	; 0x80
     222:	0512      	lsls	r2, r2, #20
     224:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     226:	222d      	movs	r2, #45	; 0x2d
     228:	5ca2      	ldrb	r2, [r4, r2]
     22a:	2a00      	cmp	r2, #0
     22c:	d002      	beq.n	234 <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     22e:	2280      	movs	r2, #128	; 0x80
     230:	0412      	lsls	r2, r2, #16
     232:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     234:	222e      	movs	r2, #46	; 0x2e
     236:	5ca2      	ldrb	r2, [r4, r2]
     238:	2a00      	cmp	r2, #0
     23a:	d002      	beq.n	242 <i2c_master_init+0x122>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     23c:	2280      	movs	r2, #128	; 0x80
     23e:	03d2      	lsls	r2, r2, #15
     240:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     242:	4642      	mov	r2, r8
     244:	6812      	ldr	r2, [r2, #0]
     246:	4313      	orrs	r3, r2
     248:	4642      	mov	r2, r8
     24a:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     24c:	2380      	movs	r3, #128	; 0x80
     24e:	005b      	lsls	r3, r3, #1
     250:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     252:	0028      	movs	r0, r5
     254:	3014      	adds	r0, #20
     256:	b2c0      	uxtb	r0, r0
     258:	4b55      	ldr	r3, [pc, #340]	; (3b0 <i2c_master_init+0x290>)
     25a:	4798      	blx	r3
     25c:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     25e:	23fa      	movs	r3, #250	; 0xfa
     260:	009b      	lsls	r3, r3, #2
     262:	6822      	ldr	r2, [r4, #0]
     264:	435a      	muls	r2, r3
     266:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     268:	6863      	ldr	r3, [r4, #4]
     26a:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     26c:	4d51      	ldr	r5, [pc, #324]	; (3b4 <i2c_master_init+0x294>)
     26e:	47a8      	blx	r5
     270:	9000      	str	r0, [sp, #0]
     272:	9101      	str	r1, [sp, #4]
     274:	464b      	mov	r3, r9
     276:	0058      	lsls	r0, r3, #1
     278:	47a8      	blx	r5
     27a:	9002      	str	r0, [sp, #8]
     27c:	9103      	str	r1, [sp, #12]
     27e:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     280:	47a8      	blx	r5
     282:	9004      	str	r0, [sp, #16]
     284:	9105      	str	r1, [sp, #20]
     286:	4f4c      	ldr	r7, [pc, #304]	; (3b8 <i2c_master_init+0x298>)
     288:	4a4c      	ldr	r2, [pc, #304]	; (3bc <i2c_master_init+0x29c>)
     28a:	4b4d      	ldr	r3, [pc, #308]	; (3c0 <i2c_master_init+0x2a0>)
     28c:	9800      	ldr	r0, [sp, #0]
     28e:	9901      	ldr	r1, [sp, #4]
     290:	47b8      	blx	r7
     292:	0002      	movs	r2, r0
     294:	000b      	movs	r3, r1
     296:	9804      	ldr	r0, [sp, #16]
     298:	9905      	ldr	r1, [sp, #20]
     29a:	47b8      	blx	r7
     29c:	4e49      	ldr	r6, [pc, #292]	; (3c4 <i2c_master_init+0x2a4>)
     29e:	2200      	movs	r2, #0
     2a0:	4b49      	ldr	r3, [pc, #292]	; (3c8 <i2c_master_init+0x2a8>)
     2a2:	47b0      	blx	r6
     2a4:	9004      	str	r0, [sp, #16]
     2a6:	9105      	str	r1, [sp, #20]
     2a8:	4648      	mov	r0, r9
     2aa:	47a8      	blx	r5
     2ac:	0002      	movs	r2, r0
     2ae:	000b      	movs	r3, r1
     2b0:	9804      	ldr	r0, [sp, #16]
     2b2:	9905      	ldr	r1, [sp, #20]
     2b4:	47b8      	blx	r7
     2b6:	0002      	movs	r2, r0
     2b8:	000b      	movs	r3, r1
     2ba:	4d44      	ldr	r5, [pc, #272]	; (3cc <i2c_master_init+0x2ac>)
     2bc:	9800      	ldr	r0, [sp, #0]
     2be:	9901      	ldr	r1, [sp, #4]
     2c0:	47a8      	blx	r5
     2c2:	9a02      	ldr	r2, [sp, #8]
     2c4:	9b03      	ldr	r3, [sp, #12]
     2c6:	47b0      	blx	r6
     2c8:	2200      	movs	r2, #0
     2ca:	4b41      	ldr	r3, [pc, #260]	; (3d0 <i2c_master_init+0x2b0>)
     2cc:	47a8      	blx	r5
     2ce:	9a02      	ldr	r2, [sp, #8]
     2d0:	9b03      	ldr	r3, [sp, #12]
     2d2:	4d40      	ldr	r5, [pc, #256]	; (3d4 <i2c_master_init+0x2b4>)
     2d4:	47a8      	blx	r5
     2d6:	4b40      	ldr	r3, [pc, #256]	; (3d8 <i2c_master_init+0x2b8>)
     2d8:	4798      	blx	r3
     2da:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     2dc:	2380      	movs	r3, #128	; 0x80
     2de:	049b      	lsls	r3, r3, #18
     2e0:	68a2      	ldr	r2, [r4, #8]
     2e2:	429a      	cmp	r2, r3
     2e4:	d01e      	beq.n	324 <i2c_master_init+0x204>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     2e6:	0003      	movs	r3, r0
     2e8:	2040      	movs	r0, #64	; 0x40
     2ea:	2dff      	cmp	r5, #255	; 0xff
     2ec:	d900      	bls.n	2f0 <i2c_master_init+0x1d0>
     2ee:	e73e      	b.n	16e <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     2f0:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     2f2:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     2f4:	25ff      	movs	r5, #255	; 0xff
     2f6:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     2f8:	0624      	lsls	r4, r4, #24
     2fa:	4325      	orrs	r5, r4
     2fc:	0400      	lsls	r0, r0, #16
     2fe:	23ff      	movs	r3, #255	; 0xff
     300:	041b      	lsls	r3, r3, #16
     302:	4018      	ands	r0, r3
     304:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     306:	4643      	mov	r3, r8
     308:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     30a:	2000      	movs	r0, #0
     30c:	e72f      	b.n	16e <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     30e:	2100      	movs	r1, #0
     310:	4640      	mov	r0, r8
     312:	4b32      	ldr	r3, [pc, #200]	; (3dc <i2c_master_init+0x2bc>)
     314:	4798      	blx	r3
     316:	e74a      	b.n	1ae <i2c_master_init+0x8e>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     318:	2101      	movs	r1, #1
     31a:	4640      	mov	r0, r8
     31c:	4b2f      	ldr	r3, [pc, #188]	; (3dc <i2c_master_init+0x2bc>)
     31e:	4798      	blx	r3
     320:	0007      	movs	r7, r0
     322:	e751      	b.n	1c8 <i2c_master_init+0xa8>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     324:	26fa      	movs	r6, #250	; 0xfa
     326:	00b6      	lsls	r6, r6, #2
     328:	4653      	mov	r3, sl
     32a:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     32c:	9800      	ldr	r0, [sp, #0]
     32e:	9901      	ldr	r1, [sp, #4]
     330:	0002      	movs	r2, r0
     332:	000b      	movs	r3, r1
     334:	4c23      	ldr	r4, [pc, #140]	; (3c4 <i2c_master_init+0x2a4>)
     336:	47a0      	blx	r4
     338:	9000      	str	r0, [sp, #0]
     33a:	9101      	str	r1, [sp, #4]
     33c:	0030      	movs	r0, r6
     33e:	4b1d      	ldr	r3, [pc, #116]	; (3b4 <i2c_master_init+0x294>)
     340:	4798      	blx	r3
     342:	2200      	movs	r2, #0
     344:	4b26      	ldr	r3, [pc, #152]	; (3e0 <i2c_master_init+0x2c0>)
     346:	47b8      	blx	r7
     348:	0002      	movs	r2, r0
     34a:	000b      	movs	r3, r1
     34c:	9800      	ldr	r0, [sp, #0]
     34e:	9901      	ldr	r1, [sp, #4]
     350:	4c20      	ldr	r4, [pc, #128]	; (3d4 <i2c_master_init+0x2b4>)
     352:	47a0      	blx	r4
     354:	2200      	movs	r2, #0
     356:	4b1e      	ldr	r3, [pc, #120]	; (3d0 <i2c_master_init+0x2b0>)
     358:	4c1c      	ldr	r4, [pc, #112]	; (3cc <i2c_master_init+0x2ac>)
     35a:	47a0      	blx	r4
     35c:	4b1e      	ldr	r3, [pc, #120]	; (3d8 <i2c_master_init+0x2b8>)
     35e:	4798      	blx	r3
     360:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     362:	d00c      	beq.n	37e <i2c_master_init+0x25e>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     364:	0031      	movs	r1, r6
     366:	9807      	ldr	r0, [sp, #28]
     368:	4b1e      	ldr	r3, [pc, #120]	; (3e4 <i2c_master_init+0x2c4>)
     36a:	4798      	blx	r3
     36c:	3802      	subs	r0, #2
     36e:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     370:	002b      	movs	r3, r5
     372:	2dff      	cmp	r5, #255	; 0xff
     374:	d80c      	bhi.n	390 <i2c_master_init+0x270>
     376:	28ff      	cmp	r0, #255	; 0xff
     378:	d9bc      	bls.n	2f4 <i2c_master_init+0x1d4>
     37a:	2040      	movs	r0, #64	; 0x40
     37c:	e6f7      	b.n	16e <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     37e:	0071      	lsls	r1, r6, #1
     380:	1e48      	subs	r0, r1, #1
     382:	9b07      	ldr	r3, [sp, #28]
     384:	469c      	mov	ip, r3
     386:	4460      	add	r0, ip
     388:	4b16      	ldr	r3, [pc, #88]	; (3e4 <i2c_master_init+0x2c4>)
     38a:	4798      	blx	r3
     38c:	3801      	subs	r0, #1
     38e:	e7ef      	b.n	370 <i2c_master_init+0x250>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     390:	2040      	movs	r0, #64	; 0x40
     392:	e6ec      	b.n	16e <i2c_master_init+0x4e>
     394:	00000a5d 	.word	0x00000a5d
     398:	40000400 	.word	0x40000400
     39c:	00001ac5 	.word	0x00001ac5
     3a0:	00001a39 	.word	0x00001a39
     3a4:	00000899 	.word	0x00000899
     3a8:	00001bbd 	.word	0x00001bbd
     3ac:	41002000 	.word	0x41002000
     3b0:	00001ae1 	.word	0x00001ae1
     3b4:	000038b5 	.word	0x000038b5
     3b8:	00002d21 	.word	0x00002d21
     3bc:	e826d695 	.word	0xe826d695
     3c0:	3e112e0b 	.word	0x3e112e0b
     3c4:	00002099 	.word	0x00002099
     3c8:	40240000 	.word	0x40240000
     3cc:	00003221 	.word	0x00003221
     3d0:	3ff00000 	.word	0x3ff00000
     3d4:	000026b9 	.word	0x000026b9
     3d8:	0000384d 	.word	0x0000384d
     3dc:	000008e5 	.word	0x000008e5
     3e0:	40080000 	.word	0x40080000
     3e4:	00001f2d 	.word	0x00001f2d

000003e8 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     3e8:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     3ea:	7e1a      	ldrb	r2, [r3, #24]
     3ec:	0792      	lsls	r2, r2, #30
     3ee:	d507      	bpl.n	400 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     3f0:	2202      	movs	r2, #2
     3f2:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     3f4:	8b5b      	ldrh	r3, [r3, #26]
     3f6:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     3f8:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     3fa:	17db      	asrs	r3, r3, #31
     3fc:	4018      	ands	r0, r3
}
     3fe:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     400:	8b5a      	ldrh	r2, [r3, #26]
     402:	0752      	lsls	r2, r2, #29
     404:	d506      	bpl.n	414 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     406:	6859      	ldr	r1, [r3, #4]
     408:	22c0      	movs	r2, #192	; 0xc0
     40a:	0292      	lsls	r2, r2, #10
     40c:	430a      	orrs	r2, r1
     40e:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     410:	2018      	movs	r0, #24
     412:	e7f4      	b.n	3fe <_i2c_master_address_response+0x16>
	return STATUS_OK;
     414:	2000      	movs	r0, #0
     416:	e7f2      	b.n	3fe <_i2c_master_address_response+0x16>

00000418 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     418:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     41a:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     41c:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     41e:	2401      	movs	r4, #1
     420:	2502      	movs	r5, #2
     422:	7e11      	ldrb	r1, [r2, #24]
     424:	4221      	tst	r1, r4
     426:	d10b      	bne.n	440 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     428:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     42a:	4229      	tst	r1, r5
     42c:	d106      	bne.n	43c <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     42e:	3301      	adds	r3, #1
     430:	b29b      	uxth	r3, r3
     432:	8901      	ldrh	r1, [r0, #8]
     434:	4299      	cmp	r1, r3
     436:	d8f4      	bhi.n	422 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     438:	2012      	movs	r0, #18
     43a:	e002      	b.n	442 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     43c:	2000      	movs	r0, #0
     43e:	e000      	b.n	442 <_i2c_master_wait_for_bus+0x2a>
     440:	2000      	movs	r0, #0
}
     442:	bd30      	pop	{r4, r5, pc}

00000444 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     444:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     446:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     448:	6862      	ldr	r2, [r4, #4]
     44a:	2380      	movs	r3, #128	; 0x80
     44c:	02db      	lsls	r3, r3, #11
     44e:	4313      	orrs	r3, r2
     450:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     452:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     454:	4b02      	ldr	r3, [pc, #8]	; (460 <_i2c_master_send_hs_master_code+0x1c>)
     456:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     458:	2301      	movs	r3, #1
     45a:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     45c:	bd10      	pop	{r4, pc}
     45e:	46c0      	nop			; (mov r8, r8)
     460:	00000419 	.word	0x00000419

00000464 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     464:	b5f0      	push	{r4, r5, r6, r7, lr}
     466:	46de      	mov	lr, fp
     468:	4657      	mov	r7, sl
     46a:	464e      	mov	r6, r9
     46c:	4645      	mov	r5, r8
     46e:	b5e0      	push	{r5, r6, r7, lr}
     470:	b083      	sub	sp, #12
     472:	0006      	movs	r6, r0
     474:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     476:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     478:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     47a:	682b      	ldr	r3, [r5, #0]
     47c:	011b      	lsls	r3, r3, #4
     47e:	0fdb      	lsrs	r3, r3, #31
     480:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     482:	7a4b      	ldrb	r3, [r1, #9]
     484:	2b00      	cmp	r3, #0
     486:	d12b      	bne.n	4e0 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     488:	686b      	ldr	r3, [r5, #4]
     48a:	4a58      	ldr	r2, [pc, #352]	; (5ec <_i2c_master_read_packet+0x188>)
     48c:	4013      	ands	r3, r2
     48e:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     490:	464b      	mov	r3, r9
     492:	7a1b      	ldrb	r3, [r3, #8]
     494:	2b00      	cmp	r3, #0
     496:	d127      	bne.n	4e8 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     498:	464b      	mov	r3, r9
     49a:	881b      	ldrh	r3, [r3, #0]
     49c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     49e:	464a      	mov	r2, r9
     4a0:	7a52      	ldrb	r2, [r2, #9]
     4a2:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     4a4:	4313      	orrs	r3, r2
     4a6:	2201      	movs	r2, #1
     4a8:	4313      	orrs	r3, r2
     4aa:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     4ac:	0030      	movs	r0, r6
     4ae:	4b50      	ldr	r3, [pc, #320]	; (5f0 <_i2c_master_read_packet+0x18c>)
     4b0:	4798      	blx	r3
     4b2:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     4b4:	4653      	mov	r3, sl
     4b6:	2b00      	cmp	r3, #0
     4b8:	d003      	beq.n	4c2 <_i2c_master_read_packet+0x5e>
     4ba:	464b      	mov	r3, r9
     4bc:	885b      	ldrh	r3, [r3, #2]
     4be:	2b01      	cmp	r3, #1
     4c0:	d03b      	beq.n	53a <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     4c2:	686b      	ldr	r3, [r5, #4]
     4c4:	4a49      	ldr	r2, [pc, #292]	; (5ec <_i2c_master_read_packet+0x188>)
     4c6:	4013      	ands	r3, r2
     4c8:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     4ca:	9b01      	ldr	r3, [sp, #4]
     4cc:	2b00      	cmp	r3, #0
     4ce:	d03a      	beq.n	546 <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     4d0:	9801      	ldr	r0, [sp, #4]
     4d2:	b003      	add	sp, #12
     4d4:	bc3c      	pop	{r2, r3, r4, r5}
     4d6:	4690      	mov	r8, r2
     4d8:	4699      	mov	r9, r3
     4da:	46a2      	mov	sl, r4
     4dc:	46ab      	mov	fp, r5
     4de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     4e0:	7a89      	ldrb	r1, [r1, #10]
     4e2:	4b44      	ldr	r3, [pc, #272]	; (5f4 <_i2c_master_read_packet+0x190>)
     4e4:	4798      	blx	r3
     4e6:	e7cf      	b.n	488 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
     4e8:	464b      	mov	r3, r9
     4ea:	881b      	ldrh	r3, [r3, #0]
     4ec:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     4ee:	464a      	mov	r2, r9
     4f0:	7a52      	ldrb	r2, [r2, #9]
     4f2:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     4f4:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     4f6:	2280      	movs	r2, #128	; 0x80
     4f8:	0212      	lsls	r2, r2, #8
     4fa:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     4fc:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     4fe:	0030      	movs	r0, r6
     500:	4b3b      	ldr	r3, [pc, #236]	; (5f0 <_i2c_master_read_packet+0x18c>)
     502:	4798      	blx	r3
     504:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     506:	686b      	ldr	r3, [r5, #4]
     508:	4a38      	ldr	r2, [pc, #224]	; (5ec <_i2c_master_read_packet+0x188>)
     50a:	4013      	ands	r3, r2
     50c:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
     50e:	2800      	cmp	r0, #0
     510:	d1de      	bne.n	4d0 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
     512:	0030      	movs	r0, r6
     514:	4b38      	ldr	r3, [pc, #224]	; (5f8 <_i2c_master_read_packet+0x194>)
     516:	4798      	blx	r3
     518:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
     51a:	2800      	cmp	r0, #0
     51c:	d1d8      	bne.n	4d0 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     51e:	464b      	mov	r3, r9
     520:	881b      	ldrh	r3, [r3, #0]
     522:	0a1b      	lsrs	r3, r3, #8
     524:	2278      	movs	r2, #120	; 0x78
     526:	4313      	orrs	r3, r2
     528:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     52a:	464a      	mov	r2, r9
     52c:	7a52      	ldrb	r2, [r2, #9]
     52e:	0392      	lsls	r2, r2, #14
     530:	2101      	movs	r1, #1
     532:	430a      	orrs	r2, r1
     534:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     536:	626b      	str	r3, [r5, #36]	; 0x24
     538:	e7b8      	b.n	4ac <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     53a:	686a      	ldr	r2, [r5, #4]
     53c:	2380      	movs	r3, #128	; 0x80
     53e:	02db      	lsls	r3, r3, #11
     540:	4313      	orrs	r3, r2
     542:	606b      	str	r3, [r5, #4]
     544:	e7c1      	b.n	4ca <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
     546:	0030      	movs	r0, r6
     548:	4b2b      	ldr	r3, [pc, #172]	; (5f8 <_i2c_master_read_packet+0x194>)
     54a:	4798      	blx	r3
     54c:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     54e:	2800      	cmp	r0, #0
     550:	d1be      	bne.n	4d0 <_i2c_master_read_packet+0x6c>
     552:	3c01      	subs	r4, #1
     554:	b2a4      	uxth	r4, r4
     556:	4680      	mov	r8, r0
		while (tmp_data_length--) {
     558:	4b28      	ldr	r3, [pc, #160]	; (5fc <_i2c_master_read_packet+0x198>)
     55a:	469b      	mov	fp, r3
     55c:	e015      	b.n	58a <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     55e:	2c01      	cmp	r4, #1
     560:	d020      	beq.n	5a4 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
     562:	0030      	movs	r0, r6
     564:	4b26      	ldr	r3, [pc, #152]	; (600 <_i2c_master_read_packet+0x19c>)
     566:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     568:	4643      	mov	r3, r8
     56a:	1c5f      	adds	r7, r3, #1
     56c:	b2bf      	uxth	r7, r7
     56e:	2328      	movs	r3, #40	; 0x28
     570:	5ceb      	ldrb	r3, [r5, r3]
     572:	464a      	mov	r2, r9
     574:	6852      	ldr	r2, [r2, #4]
     576:	4641      	mov	r1, r8
     578:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
     57a:	0030      	movs	r0, r6
     57c:	4b1c      	ldr	r3, [pc, #112]	; (5f0 <_i2c_master_read_packet+0x18c>)
     57e:	4798      	blx	r3
     580:	3c01      	subs	r4, #1
     582:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
     584:	2800      	cmp	r0, #0
     586:	d115      	bne.n	5b4 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
     588:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
     58a:	455c      	cmp	r4, fp
     58c:	d014      	beq.n	5b8 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     58e:	8b6b      	ldrh	r3, [r5, #26]
     590:	069b      	lsls	r3, r3, #26
     592:	d527      	bpl.n	5e4 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     594:	7af3      	ldrb	r3, [r6, #11]
     596:	2b00      	cmp	r3, #0
     598:	d0e3      	beq.n	562 <_i2c_master_read_packet+0xfe>
     59a:	4653      	mov	r3, sl
     59c:	2b00      	cmp	r3, #0
     59e:	d1de      	bne.n	55e <_i2c_master_read_packet+0xfa>
     5a0:	2c00      	cmp	r4, #0
     5a2:	d1de      	bne.n	562 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     5a4:	686a      	ldr	r2, [r5, #4]
     5a6:	2380      	movs	r3, #128	; 0x80
     5a8:	02db      	lsls	r3, r3, #11
     5aa:	4313      	orrs	r3, r2
     5ac:	606b      	str	r3, [r5, #4]
     5ae:	3c01      	subs	r4, #1
     5b0:	b2a4      	uxth	r4, r4
     5b2:	e7ea      	b.n	58a <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
     5b4:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
     5b6:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     5b8:	7ab3      	ldrb	r3, [r6, #10]
     5ba:	2b00      	cmp	r3, #0
     5bc:	d109      	bne.n	5d2 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
     5be:	0030      	movs	r0, r6
     5c0:	4b0f      	ldr	r3, [pc, #60]	; (600 <_i2c_master_read_packet+0x19c>)
     5c2:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     5c4:	2328      	movs	r3, #40	; 0x28
     5c6:	5cea      	ldrb	r2, [r5, r3]
     5c8:	464b      	mov	r3, r9
     5ca:	685b      	ldr	r3, [r3, #4]
     5cc:	4641      	mov	r1, r8
     5ce:	545a      	strb	r2, [r3, r1]
     5d0:	e77e      	b.n	4d0 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
     5d2:	0030      	movs	r0, r6
     5d4:	4b0a      	ldr	r3, [pc, #40]	; (600 <_i2c_master_read_packet+0x19c>)
     5d6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     5d8:	686a      	ldr	r2, [r5, #4]
     5da:	23c0      	movs	r3, #192	; 0xc0
     5dc:	029b      	lsls	r3, r3, #10
     5de:	4313      	orrs	r3, r2
     5e0:	606b      	str	r3, [r5, #4]
     5e2:	e7ec      	b.n	5be <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
     5e4:	2341      	movs	r3, #65	; 0x41
     5e6:	9301      	str	r3, [sp, #4]
     5e8:	e772      	b.n	4d0 <_i2c_master_read_packet+0x6c>
     5ea:	46c0      	nop			; (mov r8, r8)
     5ec:	fffbffff 	.word	0xfffbffff
     5f0:	00000419 	.word	0x00000419
     5f4:	00000445 	.word	0x00000445
     5f8:	000003e9 	.word	0x000003e9
     5fc:	0000ffff 	.word	0x0000ffff
     600:	00000115 	.word	0x00000115

00000604 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     604:	b5f0      	push	{r4, r5, r6, r7, lr}
     606:	46de      	mov	lr, fp
     608:	4657      	mov	r7, sl
     60a:	464e      	mov	r6, r9
     60c:	4645      	mov	r5, r8
     60e:	b5e0      	push	{r5, r6, r7, lr}
     610:	b083      	sub	sp, #12
     612:	0006      	movs	r6, r0
     614:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     616:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     618:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     61a:	4b32      	ldr	r3, [pc, #200]	; (6e4 <_i2c_master_write_packet+0xe0>)
     61c:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     61e:	7a7b      	ldrb	r3, [r7, #9]
     620:	2b00      	cmp	r3, #0
     622:	d11d      	bne.n	660 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     624:	686b      	ldr	r3, [r5, #4]
     626:	4a30      	ldr	r2, [pc, #192]	; (6e8 <_i2c_master_write_packet+0xe4>)
     628:	4013      	ands	r3, r2
     62a:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     62c:	7a3b      	ldrb	r3, [r7, #8]
     62e:	2b00      	cmp	r3, #0
     630:	d01b      	beq.n	66a <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     632:	883b      	ldrh	r3, [r7, #0]
     634:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     636:	7a7a      	ldrb	r2, [r7, #9]
     638:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     63a:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     63c:	2280      	movs	r2, #128	; 0x80
     63e:	0212      	lsls	r2, r2, #8
     640:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     642:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     644:	0030      	movs	r0, r6
     646:	4b29      	ldr	r3, [pc, #164]	; (6ec <_i2c_master_write_packet+0xe8>)
     648:	4798      	blx	r3
     64a:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     64c:	2800      	cmp	r0, #0
     64e:	d013      	beq.n	678 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     650:	9801      	ldr	r0, [sp, #4]
     652:	b003      	add	sp, #12
     654:	bc3c      	pop	{r2, r3, r4, r5}
     656:	4690      	mov	r8, r2
     658:	4699      	mov	r9, r3
     65a:	46a2      	mov	sl, r4
     65c:	46ab      	mov	fp, r5
     65e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     660:	7ab9      	ldrb	r1, [r7, #10]
     662:	0030      	movs	r0, r6
     664:	4b22      	ldr	r3, [pc, #136]	; (6f0 <_i2c_master_write_packet+0xec>)
     666:	4798      	blx	r3
     668:	e7dc      	b.n	624 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     66a:	883b      	ldrh	r3, [r7, #0]
     66c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     66e:	7a7a      	ldrb	r2, [r7, #9]
     670:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     672:	4313      	orrs	r3, r2
     674:	626b      	str	r3, [r5, #36]	; 0x24
     676:	e7e5      	b.n	644 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
     678:	0030      	movs	r0, r6
     67a:	4b1e      	ldr	r3, [pc, #120]	; (6f4 <_i2c_master_write_packet+0xf0>)
     67c:	4798      	blx	r3
     67e:	1e03      	subs	r3, r0, #0
     680:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     682:	d1e5      	bne.n	650 <_i2c_master_write_packet+0x4c>
     684:	46a0      	mov	r8, r4
     686:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     688:	3320      	adds	r3, #32
     68a:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     68c:	4b15      	ldr	r3, [pc, #84]	; (6e4 <_i2c_master_write_packet+0xe0>)
     68e:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     690:	4b16      	ldr	r3, [pc, #88]	; (6ec <_i2c_master_write_packet+0xe8>)
     692:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     694:	4544      	cmp	r4, r8
     696:	d015      	beq.n	6c4 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     698:	8b6b      	ldrh	r3, [r5, #26]
     69a:	464a      	mov	r2, r9
     69c:	4213      	tst	r3, r2
     69e:	d01d      	beq.n	6dc <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
     6a0:	0030      	movs	r0, r6
     6a2:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     6a4:	687b      	ldr	r3, [r7, #4]
     6a6:	5d1a      	ldrb	r2, [r3, r4]
     6a8:	2328      	movs	r3, #40	; 0x28
     6aa:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
     6ac:	0030      	movs	r0, r6
     6ae:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
     6b0:	2800      	cmp	r0, #0
     6b2:	d106      	bne.n	6c2 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     6b4:	8b6b      	ldrh	r3, [r5, #26]
     6b6:	3401      	adds	r4, #1
     6b8:	075b      	lsls	r3, r3, #29
     6ba:	d5eb      	bpl.n	694 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
     6bc:	231e      	movs	r3, #30
     6be:	9301      	str	r3, [sp, #4]
     6c0:	e000      	b.n	6c4 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
     6c2:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     6c4:	7ab3      	ldrb	r3, [r6, #10]
     6c6:	2b00      	cmp	r3, #0
     6c8:	d0c2      	beq.n	650 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
     6ca:	0030      	movs	r0, r6
     6cc:	4b05      	ldr	r3, [pc, #20]	; (6e4 <_i2c_master_write_packet+0xe0>)
     6ce:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     6d0:	686a      	ldr	r2, [r5, #4]
     6d2:	23c0      	movs	r3, #192	; 0xc0
     6d4:	029b      	lsls	r3, r3, #10
     6d6:	4313      	orrs	r3, r2
     6d8:	606b      	str	r3, [r5, #4]
     6da:	e7b9      	b.n	650 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
     6dc:	2341      	movs	r3, #65	; 0x41
     6de:	9301      	str	r3, [sp, #4]
     6e0:	e7b6      	b.n	650 <_i2c_master_write_packet+0x4c>
     6e2:	46c0      	nop			; (mov r8, r8)
     6e4:	00000115 	.word	0x00000115
     6e8:	fffbffff 	.word	0xfffbffff
     6ec:	00000419 	.word	0x00000419
     6f0:	00000445 	.word	0x00000445
     6f4:	000003e9 	.word	0x000003e9

000006f8 <i2c_master_read_packet_wait>:
{
     6f8:	b510      	push	{r4, lr}
	module->send_stop = true;
     6fa:	2301      	movs	r3, #1
     6fc:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     6fe:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     700:	4b01      	ldr	r3, [pc, #4]	; (708 <i2c_master_read_packet_wait+0x10>)
     702:	4798      	blx	r3
}
     704:	bd10      	pop	{r4, pc}
     706:	46c0      	nop			; (mov r8, r8)
     708:	00000465 	.word	0x00000465

0000070c <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     70c:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
     70e:	2300      	movs	r3, #0
     710:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     712:	3301      	adds	r3, #1
     714:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
     716:	4b01      	ldr	r3, [pc, #4]	; (71c <i2c_master_write_packet_wait_no_stop+0x10>)
     718:	4798      	blx	r3
}
     71a:	bd10      	pop	{r4, pc}
     71c:	00000605 	.word	0x00000605

00000720 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     720:	b5f0      	push	{r4, r5, r6, r7, lr}
     722:	46de      	mov	lr, fp
     724:	4657      	mov	r7, sl
     726:	464e      	mov	r6, r9
     728:	4645      	mov	r5, r8
     72a:	b5e0      	push	{r5, r6, r7, lr}
     72c:	b087      	sub	sp, #28
     72e:	4680      	mov	r8, r0
     730:	9104      	str	r1, [sp, #16]
     732:	0016      	movs	r6, r2
     734:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     736:	2200      	movs	r2, #0
     738:	2300      	movs	r3, #0
     73a:	2100      	movs	r1, #0
     73c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     73e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     740:	2001      	movs	r0, #1
     742:	0021      	movs	r1, r4
     744:	9600      	str	r6, [sp, #0]
     746:	9701      	str	r7, [sp, #4]
     748:	465c      	mov	r4, fp
     74a:	9403      	str	r4, [sp, #12]
     74c:	4644      	mov	r4, r8
     74e:	9405      	str	r4, [sp, #20]
     750:	e013      	b.n	77a <long_division+0x5a>
     752:	2420      	movs	r4, #32
     754:	1a64      	subs	r4, r4, r1
     756:	0005      	movs	r5, r0
     758:	40e5      	lsrs	r5, r4
     75a:	46a8      	mov	r8, r5
     75c:	e014      	b.n	788 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     75e:	9c00      	ldr	r4, [sp, #0]
     760:	9d01      	ldr	r5, [sp, #4]
     762:	1b12      	subs	r2, r2, r4
     764:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     766:	465c      	mov	r4, fp
     768:	464d      	mov	r5, r9
     76a:	432c      	orrs	r4, r5
     76c:	46a3      	mov	fp, r4
     76e:	9c03      	ldr	r4, [sp, #12]
     770:	4645      	mov	r5, r8
     772:	432c      	orrs	r4, r5
     774:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     776:	3901      	subs	r1, #1
     778:	d325      	bcc.n	7c6 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     77a:	2420      	movs	r4, #32
     77c:	4264      	negs	r4, r4
     77e:	190c      	adds	r4, r1, r4
     780:	d4e7      	bmi.n	752 <long_division+0x32>
     782:	0005      	movs	r5, r0
     784:	40a5      	lsls	r5, r4
     786:	46a8      	mov	r8, r5
     788:	0004      	movs	r4, r0
     78a:	408c      	lsls	r4, r1
     78c:	46a1      	mov	r9, r4
		r = r << 1;
     78e:	1892      	adds	r2, r2, r2
     790:	415b      	adcs	r3, r3
     792:	0014      	movs	r4, r2
     794:	001d      	movs	r5, r3
		if (n & bit_shift) {
     796:	9e05      	ldr	r6, [sp, #20]
     798:	464f      	mov	r7, r9
     79a:	403e      	ands	r6, r7
     79c:	46b4      	mov	ip, r6
     79e:	9e04      	ldr	r6, [sp, #16]
     7a0:	4647      	mov	r7, r8
     7a2:	403e      	ands	r6, r7
     7a4:	46b2      	mov	sl, r6
     7a6:	4666      	mov	r6, ip
     7a8:	4657      	mov	r7, sl
     7aa:	433e      	orrs	r6, r7
     7ac:	d003      	beq.n	7b6 <long_division+0x96>
			r |= 0x01;
     7ae:	0006      	movs	r6, r0
     7b0:	4326      	orrs	r6, r4
     7b2:	0032      	movs	r2, r6
     7b4:	002b      	movs	r3, r5
		if (r >= d) {
     7b6:	9c00      	ldr	r4, [sp, #0]
     7b8:	9d01      	ldr	r5, [sp, #4]
     7ba:	429d      	cmp	r5, r3
     7bc:	d8db      	bhi.n	776 <long_division+0x56>
     7be:	d1ce      	bne.n	75e <long_division+0x3e>
     7c0:	4294      	cmp	r4, r2
     7c2:	d8d8      	bhi.n	776 <long_division+0x56>
     7c4:	e7cb      	b.n	75e <long_division+0x3e>
     7c6:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     7c8:	4658      	mov	r0, fp
     7ca:	0019      	movs	r1, r3
     7cc:	b007      	add	sp, #28
     7ce:	bc3c      	pop	{r2, r3, r4, r5}
     7d0:	4690      	mov	r8, r2
     7d2:	4699      	mov	r9, r3
     7d4:	46a2      	mov	sl, r4
     7d6:	46ab      	mov	fp, r5
     7d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000007da <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     7da:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     7dc:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     7de:	2340      	movs	r3, #64	; 0x40
     7e0:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     7e2:	4281      	cmp	r1, r0
     7e4:	d202      	bcs.n	7ec <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     7e6:	0018      	movs	r0, r3
     7e8:	bd10      	pop	{r4, pc}
		baud_calculated++;
     7ea:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     7ec:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     7ee:	1c63      	adds	r3, r4, #1
     7f0:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     7f2:	4288      	cmp	r0, r1
     7f4:	d9f9      	bls.n	7ea <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     7f6:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     7f8:	2cff      	cmp	r4, #255	; 0xff
     7fa:	d8f4      	bhi.n	7e6 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     7fc:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     7fe:	2300      	movs	r3, #0
     800:	e7f1      	b.n	7e6 <_sercom_get_sync_baud_val+0xc>
	...

00000804 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     804:	b5f0      	push	{r4, r5, r6, r7, lr}
     806:	b083      	sub	sp, #12
     808:	000f      	movs	r7, r1
     80a:	0016      	movs	r6, r2
     80c:	aa08      	add	r2, sp, #32
     80e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     810:	0004      	movs	r4, r0
     812:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     814:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     816:	42bc      	cmp	r4, r7
     818:	d902      	bls.n	820 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     81a:	0010      	movs	r0, r2
     81c:	b003      	add	sp, #12
     81e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     820:	2b00      	cmp	r3, #0
     822:	d114      	bne.n	84e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     824:	0002      	movs	r2, r0
     826:	0008      	movs	r0, r1
     828:	2100      	movs	r1, #0
     82a:	4c19      	ldr	r4, [pc, #100]	; (890 <_sercom_get_async_baud_val+0x8c>)
     82c:	47a0      	blx	r4
     82e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     830:	003a      	movs	r2, r7
     832:	2300      	movs	r3, #0
     834:	2000      	movs	r0, #0
     836:	4c17      	ldr	r4, [pc, #92]	; (894 <_sercom_get_async_baud_val+0x90>)
     838:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     83a:	2200      	movs	r2, #0
     83c:	2301      	movs	r3, #1
     83e:	1a12      	subs	r2, r2, r0
     840:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     842:	0c12      	lsrs	r2, r2, #16
     844:	041b      	lsls	r3, r3, #16
     846:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     848:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     84a:	2200      	movs	r2, #0
     84c:	e7e5      	b.n	81a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     84e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     850:	2b01      	cmp	r3, #1
     852:	d1f9      	bne.n	848 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     854:	000a      	movs	r2, r1
     856:	2300      	movs	r3, #0
     858:	2100      	movs	r1, #0
     85a:	4c0d      	ldr	r4, [pc, #52]	; (890 <_sercom_get_async_baud_val+0x8c>)
     85c:	47a0      	blx	r4
     85e:	0002      	movs	r2, r0
     860:	000b      	movs	r3, r1
     862:	9200      	str	r2, [sp, #0]
     864:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     866:	0038      	movs	r0, r7
     868:	2100      	movs	r1, #0
     86a:	4c0a      	ldr	r4, [pc, #40]	; (894 <_sercom_get_async_baud_val+0x90>)
     86c:	47a0      	blx	r4
     86e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     870:	2380      	movs	r3, #128	; 0x80
     872:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     874:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     876:	4298      	cmp	r0, r3
     878:	d8cf      	bhi.n	81a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     87a:	0f79      	lsrs	r1, r7, #29
     87c:	00f8      	lsls	r0, r7, #3
     87e:	9a00      	ldr	r2, [sp, #0]
     880:	9b01      	ldr	r3, [sp, #4]
     882:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     884:	00ea      	lsls	r2, r5, #3
     886:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     888:	b2d2      	uxtb	r2, r2
     88a:	0352      	lsls	r2, r2, #13
     88c:	432a      	orrs	r2, r5
     88e:	e7db      	b.n	848 <_sercom_get_async_baud_val+0x44>
     890:	00002045 	.word	0x00002045
     894:	00000721 	.word	0x00000721

00000898 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     898:	b510      	push	{r4, lr}
     89a:	b082      	sub	sp, #8
     89c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     89e:	4b0e      	ldr	r3, [pc, #56]	; (8d8 <sercom_set_gclk_generator+0x40>)
     8a0:	781b      	ldrb	r3, [r3, #0]
     8a2:	2b00      	cmp	r3, #0
     8a4:	d007      	beq.n	8b6 <sercom_set_gclk_generator+0x1e>
     8a6:	2900      	cmp	r1, #0
     8a8:	d105      	bne.n	8b6 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     8aa:	4b0b      	ldr	r3, [pc, #44]	; (8d8 <sercom_set_gclk_generator+0x40>)
     8ac:	785b      	ldrb	r3, [r3, #1]
     8ae:	4283      	cmp	r3, r0
     8b0:	d010      	beq.n	8d4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     8b2:	201d      	movs	r0, #29
     8b4:	e00c      	b.n	8d0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     8b6:	a901      	add	r1, sp, #4
     8b8:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     8ba:	2013      	movs	r0, #19
     8bc:	4b07      	ldr	r3, [pc, #28]	; (8dc <sercom_set_gclk_generator+0x44>)
     8be:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     8c0:	2013      	movs	r0, #19
     8c2:	4b07      	ldr	r3, [pc, #28]	; (8e0 <sercom_set_gclk_generator+0x48>)
     8c4:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     8c6:	4b04      	ldr	r3, [pc, #16]	; (8d8 <sercom_set_gclk_generator+0x40>)
     8c8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     8ca:	2201      	movs	r2, #1
     8cc:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     8ce:	2000      	movs	r0, #0
}
     8d0:	b002      	add	sp, #8
     8d2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     8d4:	2000      	movs	r0, #0
     8d6:	e7fb      	b.n	8d0 <sercom_set_gclk_generator+0x38>
     8d8:	20000028 	.word	0x20000028
     8dc:	00001ac5 	.word	0x00001ac5
     8e0:	00001a39 	.word	0x00001a39

000008e4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     8e4:	4b40      	ldr	r3, [pc, #256]	; (9e8 <_sercom_get_default_pad+0x104>)
     8e6:	4298      	cmp	r0, r3
     8e8:	d031      	beq.n	94e <_sercom_get_default_pad+0x6a>
     8ea:	d90a      	bls.n	902 <_sercom_get_default_pad+0x1e>
     8ec:	4b3f      	ldr	r3, [pc, #252]	; (9ec <_sercom_get_default_pad+0x108>)
     8ee:	4298      	cmp	r0, r3
     8f0:	d04d      	beq.n	98e <_sercom_get_default_pad+0xaa>
     8f2:	4b3f      	ldr	r3, [pc, #252]	; (9f0 <_sercom_get_default_pad+0x10c>)
     8f4:	4298      	cmp	r0, r3
     8f6:	d05a      	beq.n	9ae <_sercom_get_default_pad+0xca>
     8f8:	4b3e      	ldr	r3, [pc, #248]	; (9f4 <_sercom_get_default_pad+0x110>)
     8fa:	4298      	cmp	r0, r3
     8fc:	d037      	beq.n	96e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     8fe:	2000      	movs	r0, #0
}
     900:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     902:	4b3d      	ldr	r3, [pc, #244]	; (9f8 <_sercom_get_default_pad+0x114>)
     904:	4298      	cmp	r0, r3
     906:	d00c      	beq.n	922 <_sercom_get_default_pad+0x3e>
     908:	4b3c      	ldr	r3, [pc, #240]	; (9fc <_sercom_get_default_pad+0x118>)
     90a:	4298      	cmp	r0, r3
     90c:	d1f7      	bne.n	8fe <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     90e:	2901      	cmp	r1, #1
     910:	d017      	beq.n	942 <_sercom_get_default_pad+0x5e>
     912:	2900      	cmp	r1, #0
     914:	d05d      	beq.n	9d2 <_sercom_get_default_pad+0xee>
     916:	2902      	cmp	r1, #2
     918:	d015      	beq.n	946 <_sercom_get_default_pad+0x62>
     91a:	2903      	cmp	r1, #3
     91c:	d015      	beq.n	94a <_sercom_get_default_pad+0x66>
	return 0;
     91e:	2000      	movs	r0, #0
     920:	e7ee      	b.n	900 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     922:	2901      	cmp	r1, #1
     924:	d007      	beq.n	936 <_sercom_get_default_pad+0x52>
     926:	2900      	cmp	r1, #0
     928:	d051      	beq.n	9ce <_sercom_get_default_pad+0xea>
     92a:	2902      	cmp	r1, #2
     92c:	d005      	beq.n	93a <_sercom_get_default_pad+0x56>
     92e:	2903      	cmp	r1, #3
     930:	d005      	beq.n	93e <_sercom_get_default_pad+0x5a>
	return 0;
     932:	2000      	movs	r0, #0
     934:	e7e4      	b.n	900 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     936:	4832      	ldr	r0, [pc, #200]	; (a00 <_sercom_get_default_pad+0x11c>)
     938:	e7e2      	b.n	900 <_sercom_get_default_pad+0x1c>
     93a:	4832      	ldr	r0, [pc, #200]	; (a04 <_sercom_get_default_pad+0x120>)
     93c:	e7e0      	b.n	900 <_sercom_get_default_pad+0x1c>
     93e:	4832      	ldr	r0, [pc, #200]	; (a08 <_sercom_get_default_pad+0x124>)
     940:	e7de      	b.n	900 <_sercom_get_default_pad+0x1c>
     942:	4832      	ldr	r0, [pc, #200]	; (a0c <_sercom_get_default_pad+0x128>)
     944:	e7dc      	b.n	900 <_sercom_get_default_pad+0x1c>
     946:	4832      	ldr	r0, [pc, #200]	; (a10 <_sercom_get_default_pad+0x12c>)
     948:	e7da      	b.n	900 <_sercom_get_default_pad+0x1c>
     94a:	4832      	ldr	r0, [pc, #200]	; (a14 <_sercom_get_default_pad+0x130>)
     94c:	e7d8      	b.n	900 <_sercom_get_default_pad+0x1c>
     94e:	2901      	cmp	r1, #1
     950:	d007      	beq.n	962 <_sercom_get_default_pad+0x7e>
     952:	2900      	cmp	r1, #0
     954:	d03f      	beq.n	9d6 <_sercom_get_default_pad+0xf2>
     956:	2902      	cmp	r1, #2
     958:	d005      	beq.n	966 <_sercom_get_default_pad+0x82>
     95a:	2903      	cmp	r1, #3
     95c:	d005      	beq.n	96a <_sercom_get_default_pad+0x86>
	return 0;
     95e:	2000      	movs	r0, #0
     960:	e7ce      	b.n	900 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     962:	482d      	ldr	r0, [pc, #180]	; (a18 <_sercom_get_default_pad+0x134>)
     964:	e7cc      	b.n	900 <_sercom_get_default_pad+0x1c>
     966:	482d      	ldr	r0, [pc, #180]	; (a1c <_sercom_get_default_pad+0x138>)
     968:	e7ca      	b.n	900 <_sercom_get_default_pad+0x1c>
     96a:	482d      	ldr	r0, [pc, #180]	; (a20 <_sercom_get_default_pad+0x13c>)
     96c:	e7c8      	b.n	900 <_sercom_get_default_pad+0x1c>
     96e:	2901      	cmp	r1, #1
     970:	d007      	beq.n	982 <_sercom_get_default_pad+0x9e>
     972:	2900      	cmp	r1, #0
     974:	d031      	beq.n	9da <_sercom_get_default_pad+0xf6>
     976:	2902      	cmp	r1, #2
     978:	d005      	beq.n	986 <_sercom_get_default_pad+0xa2>
     97a:	2903      	cmp	r1, #3
     97c:	d005      	beq.n	98a <_sercom_get_default_pad+0xa6>
	return 0;
     97e:	2000      	movs	r0, #0
     980:	e7be      	b.n	900 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     982:	4828      	ldr	r0, [pc, #160]	; (a24 <_sercom_get_default_pad+0x140>)
     984:	e7bc      	b.n	900 <_sercom_get_default_pad+0x1c>
     986:	4828      	ldr	r0, [pc, #160]	; (a28 <_sercom_get_default_pad+0x144>)
     988:	e7ba      	b.n	900 <_sercom_get_default_pad+0x1c>
     98a:	4828      	ldr	r0, [pc, #160]	; (a2c <_sercom_get_default_pad+0x148>)
     98c:	e7b8      	b.n	900 <_sercom_get_default_pad+0x1c>
     98e:	2901      	cmp	r1, #1
     990:	d007      	beq.n	9a2 <_sercom_get_default_pad+0xbe>
     992:	2900      	cmp	r1, #0
     994:	d023      	beq.n	9de <_sercom_get_default_pad+0xfa>
     996:	2902      	cmp	r1, #2
     998:	d005      	beq.n	9a6 <_sercom_get_default_pad+0xc2>
     99a:	2903      	cmp	r1, #3
     99c:	d005      	beq.n	9aa <_sercom_get_default_pad+0xc6>
	return 0;
     99e:	2000      	movs	r0, #0
     9a0:	e7ae      	b.n	900 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9a2:	4823      	ldr	r0, [pc, #140]	; (a30 <_sercom_get_default_pad+0x14c>)
     9a4:	e7ac      	b.n	900 <_sercom_get_default_pad+0x1c>
     9a6:	4823      	ldr	r0, [pc, #140]	; (a34 <_sercom_get_default_pad+0x150>)
     9a8:	e7aa      	b.n	900 <_sercom_get_default_pad+0x1c>
     9aa:	4823      	ldr	r0, [pc, #140]	; (a38 <_sercom_get_default_pad+0x154>)
     9ac:	e7a8      	b.n	900 <_sercom_get_default_pad+0x1c>
     9ae:	2901      	cmp	r1, #1
     9b0:	d007      	beq.n	9c2 <_sercom_get_default_pad+0xde>
     9b2:	2900      	cmp	r1, #0
     9b4:	d015      	beq.n	9e2 <_sercom_get_default_pad+0xfe>
     9b6:	2902      	cmp	r1, #2
     9b8:	d005      	beq.n	9c6 <_sercom_get_default_pad+0xe2>
     9ba:	2903      	cmp	r1, #3
     9bc:	d005      	beq.n	9ca <_sercom_get_default_pad+0xe6>
	return 0;
     9be:	2000      	movs	r0, #0
     9c0:	e79e      	b.n	900 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9c2:	481e      	ldr	r0, [pc, #120]	; (a3c <_sercom_get_default_pad+0x158>)
     9c4:	e79c      	b.n	900 <_sercom_get_default_pad+0x1c>
     9c6:	481e      	ldr	r0, [pc, #120]	; (a40 <_sercom_get_default_pad+0x15c>)
     9c8:	e79a      	b.n	900 <_sercom_get_default_pad+0x1c>
     9ca:	481e      	ldr	r0, [pc, #120]	; (a44 <_sercom_get_default_pad+0x160>)
     9cc:	e798      	b.n	900 <_sercom_get_default_pad+0x1c>
     9ce:	481e      	ldr	r0, [pc, #120]	; (a48 <_sercom_get_default_pad+0x164>)
     9d0:	e796      	b.n	900 <_sercom_get_default_pad+0x1c>
     9d2:	2003      	movs	r0, #3
     9d4:	e794      	b.n	900 <_sercom_get_default_pad+0x1c>
     9d6:	481d      	ldr	r0, [pc, #116]	; (a4c <_sercom_get_default_pad+0x168>)
     9d8:	e792      	b.n	900 <_sercom_get_default_pad+0x1c>
     9da:	481d      	ldr	r0, [pc, #116]	; (a50 <_sercom_get_default_pad+0x16c>)
     9dc:	e790      	b.n	900 <_sercom_get_default_pad+0x1c>
     9de:	481d      	ldr	r0, [pc, #116]	; (a54 <_sercom_get_default_pad+0x170>)
     9e0:	e78e      	b.n	900 <_sercom_get_default_pad+0x1c>
     9e2:	481d      	ldr	r0, [pc, #116]	; (a58 <_sercom_get_default_pad+0x174>)
     9e4:	e78c      	b.n	900 <_sercom_get_default_pad+0x1c>
     9e6:	46c0      	nop			; (mov r8, r8)
     9e8:	42001000 	.word	0x42001000
     9ec:	42001800 	.word	0x42001800
     9f0:	42001c00 	.word	0x42001c00
     9f4:	42001400 	.word	0x42001400
     9f8:	42000800 	.word	0x42000800
     9fc:	42000c00 	.word	0x42000c00
     a00:	00050003 	.word	0x00050003
     a04:	00060003 	.word	0x00060003
     a08:	00070003 	.word	0x00070003
     a0c:	00010003 	.word	0x00010003
     a10:	001e0003 	.word	0x001e0003
     a14:	001f0003 	.word	0x001f0003
     a18:	000d0002 	.word	0x000d0002
     a1c:	000e0002 	.word	0x000e0002
     a20:	000f0002 	.word	0x000f0002
     a24:	00110003 	.word	0x00110003
     a28:	00120003 	.word	0x00120003
     a2c:	00130003 	.word	0x00130003
     a30:	003f0005 	.word	0x003f0005
     a34:	003e0005 	.word	0x003e0005
     a38:	00520005 	.word	0x00520005
     a3c:	00170003 	.word	0x00170003
     a40:	00180003 	.word	0x00180003
     a44:	00190003 	.word	0x00190003
     a48:	00040003 	.word	0x00040003
     a4c:	000c0002 	.word	0x000c0002
     a50:	00100003 	.word	0x00100003
     a54:	00530005 	.word	0x00530005
     a58:	00160003 	.word	0x00160003

00000a5c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     a5c:	b530      	push	{r4, r5, lr}
     a5e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     a60:	4b0b      	ldr	r3, [pc, #44]	; (a90 <_sercom_get_sercom_inst_index+0x34>)
     a62:	466a      	mov	r2, sp
     a64:	cb32      	ldmia	r3!, {r1, r4, r5}
     a66:	c232      	stmia	r2!, {r1, r4, r5}
     a68:	cb32      	ldmia	r3!, {r1, r4, r5}
     a6a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     a6c:	9b00      	ldr	r3, [sp, #0]
     a6e:	4283      	cmp	r3, r0
     a70:	d00b      	beq.n	a8a <_sercom_get_sercom_inst_index+0x2e>
     a72:	2301      	movs	r3, #1
     a74:	009a      	lsls	r2, r3, #2
     a76:	4669      	mov	r1, sp
     a78:	5852      	ldr	r2, [r2, r1]
     a7a:	4282      	cmp	r2, r0
     a7c:	d006      	beq.n	a8c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a7e:	3301      	adds	r3, #1
     a80:	2b06      	cmp	r3, #6
     a82:	d1f7      	bne.n	a74 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     a84:	2000      	movs	r0, #0
}
     a86:	b007      	add	sp, #28
     a88:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a8a:	2300      	movs	r3, #0
			return i;
     a8c:	b2d8      	uxtb	r0, r3
     a8e:	e7fa      	b.n	a86 <_sercom_get_sercom_inst_index+0x2a>
     a90:	000039d4 	.word	0x000039d4

00000a94 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     a94:	b5f0      	push	{r4, r5, r6, r7, lr}
     a96:	46de      	mov	lr, fp
     a98:	4657      	mov	r7, sl
     a9a:	464e      	mov	r6, r9
     a9c:	4645      	mov	r5, r8
     a9e:	b5e0      	push	{r5, r6, r7, lr}
     aa0:	b091      	sub	sp, #68	; 0x44
     aa2:	0005      	movs	r5, r0
     aa4:	000c      	movs	r4, r1
     aa6:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     aa8:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     aaa:	0008      	movs	r0, r1
     aac:	4bad      	ldr	r3, [pc, #692]	; (d64 <usart_init+0x2d0>)
     aae:	4798      	blx	r3
     ab0:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     ab2:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     ab4:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     ab6:	07db      	lsls	r3, r3, #31
     ab8:	d506      	bpl.n	ac8 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     aba:	b011      	add	sp, #68	; 0x44
     abc:	bc3c      	pop	{r2, r3, r4, r5}
     abe:	4690      	mov	r8, r2
     ac0:	4699      	mov	r9, r3
     ac2:	46a2      	mov	sl, r4
     ac4:	46ab      	mov	fp, r5
     ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     ac8:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     aca:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     acc:	079b      	lsls	r3, r3, #30
     ace:	d4f4      	bmi.n	aba <usart_init+0x26>
     ad0:	49a5      	ldr	r1, [pc, #660]	; (d68 <usart_init+0x2d4>)
     ad2:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     ad4:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     ad6:	2301      	movs	r3, #1
     ad8:	40bb      	lsls	r3, r7
     ada:	4303      	orrs	r3, r0
     adc:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     ade:	a90f      	add	r1, sp, #60	; 0x3c
     ae0:	272d      	movs	r7, #45	; 0x2d
     ae2:	5df3      	ldrb	r3, [r6, r7]
     ae4:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     ae6:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     ae8:	b2d3      	uxtb	r3, r2
     aea:	9302      	str	r3, [sp, #8]
     aec:	0018      	movs	r0, r3
     aee:	4b9f      	ldr	r3, [pc, #636]	; (d6c <usart_init+0x2d8>)
     af0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     af2:	9802      	ldr	r0, [sp, #8]
     af4:	4b9e      	ldr	r3, [pc, #632]	; (d70 <usart_init+0x2dc>)
     af6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     af8:	5df0      	ldrb	r0, [r6, r7]
     afa:	2100      	movs	r1, #0
     afc:	4b9d      	ldr	r3, [pc, #628]	; (d74 <usart_init+0x2e0>)
     afe:	4798      	blx	r3
	module->character_size = config->character_size;
     b00:	7af3      	ldrb	r3, [r6, #11]
     b02:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     b04:	2324      	movs	r3, #36	; 0x24
     b06:	5cf3      	ldrb	r3, [r6, r3]
     b08:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     b0a:	2325      	movs	r3, #37	; 0x25
     b0c:	5cf3      	ldrb	r3, [r6, r3]
     b0e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     b10:	7ef3      	ldrb	r3, [r6, #27]
     b12:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     b14:	7f33      	ldrb	r3, [r6, #28]
     b16:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     b18:	682b      	ldr	r3, [r5, #0]
     b1a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b1c:	0018      	movs	r0, r3
     b1e:	4b91      	ldr	r3, [pc, #580]	; (d64 <usart_init+0x2d0>)
     b20:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b22:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     b24:	2200      	movs	r2, #0
     b26:	230e      	movs	r3, #14
     b28:	a906      	add	r1, sp, #24
     b2a:	468c      	mov	ip, r1
     b2c:	4463      	add	r3, ip
     b2e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     b30:	8a32      	ldrh	r2, [r6, #16]
     b32:	9202      	str	r2, [sp, #8]
     b34:	2380      	movs	r3, #128	; 0x80
     b36:	01db      	lsls	r3, r3, #7
     b38:	429a      	cmp	r2, r3
     b3a:	d100      	bne.n	b3e <usart_init+0xaa>
     b3c:	e09f      	b.n	c7e <usart_init+0x1ea>
     b3e:	d90f      	bls.n	b60 <usart_init+0xcc>
     b40:	23c0      	movs	r3, #192	; 0xc0
     b42:	01db      	lsls	r3, r3, #7
     b44:	9a02      	ldr	r2, [sp, #8]
     b46:	429a      	cmp	r2, r3
     b48:	d100      	bne.n	b4c <usart_init+0xb8>
     b4a:	e093      	b.n	c74 <usart_init+0x1e0>
     b4c:	2380      	movs	r3, #128	; 0x80
     b4e:	021b      	lsls	r3, r3, #8
     b50:	429a      	cmp	r2, r3
     b52:	d000      	beq.n	b56 <usart_init+0xc2>
     b54:	e101      	b.n	d5a <usart_init+0x2c6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     b56:	2303      	movs	r3, #3
     b58:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     b5a:	2300      	movs	r3, #0
     b5c:	9307      	str	r3, [sp, #28]
     b5e:	e008      	b.n	b72 <usart_init+0xde>
	switch (config->sample_rate) {
     b60:	2380      	movs	r3, #128	; 0x80
     b62:	019b      	lsls	r3, r3, #6
     b64:	429a      	cmp	r2, r3
     b66:	d000      	beq.n	b6a <usart_init+0xd6>
     b68:	e0f7      	b.n	d5a <usart_init+0x2c6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     b6a:	2310      	movs	r3, #16
     b6c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     b6e:	3b0f      	subs	r3, #15
     b70:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     b72:	6833      	ldr	r3, [r6, #0]
     b74:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
     b76:	68f3      	ldr	r3, [r6, #12]
     b78:	9304      	str	r3, [sp, #16]
		config->sample_adjustment |
     b7a:	6973      	ldr	r3, [r6, #20]
     b7c:	469a      	mov	sl, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     b7e:	7e33      	ldrb	r3, [r6, #24]
     b80:	9305      	str	r3, [sp, #20]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     b82:	2326      	movs	r3, #38	; 0x26
     b84:	5cf3      	ldrb	r3, [r6, r3]
     b86:	9303      	str	r3, [sp, #12]
	transfer_mode = (uint32_t)config->transfer_mode;
     b88:	6873      	ldr	r3, [r6, #4]
     b8a:	4699      	mov	r9, r3
	switch (transfer_mode)
     b8c:	2b00      	cmp	r3, #0
     b8e:	d100      	bne.n	b92 <usart_init+0xfe>
     b90:	e0a1      	b.n	cd6 <usart_init+0x242>
     b92:	2380      	movs	r3, #128	; 0x80
     b94:	055b      	lsls	r3, r3, #21
     b96:	4599      	cmp	r9, r3
     b98:	d100      	bne.n	b9c <usart_init+0x108>
     b9a:	e085      	b.n	ca8 <usart_init+0x214>
	if(config->encoding_format_enable) {
     b9c:	7e73      	ldrb	r3, [r6, #25]
     b9e:	2b00      	cmp	r3, #0
     ba0:	d002      	beq.n	ba8 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     ba2:	7eb3      	ldrb	r3, [r6, #26]
     ba4:	4642      	mov	r2, r8
     ba6:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     ba8:	682a      	ldr	r2, [r5, #0]
     baa:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     bac:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     bae:	2b00      	cmp	r3, #0
     bb0:	d1fc      	bne.n	bac <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     bb2:	330e      	adds	r3, #14
     bb4:	aa06      	add	r2, sp, #24
     bb6:	4694      	mov	ip, r2
     bb8:	4463      	add	r3, ip
     bba:	881b      	ldrh	r3, [r3, #0]
     bbc:	4642      	mov	r2, r8
     bbe:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     bc0:	465b      	mov	r3, fp
     bc2:	9a04      	ldr	r2, [sp, #16]
     bc4:	4313      	orrs	r3, r2
     bc6:	4652      	mov	r2, sl
     bc8:	4313      	orrs	r3, r2
     bca:	464a      	mov	r2, r9
     bcc:	4313      	orrs	r3, r2
     bce:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     bd0:	9b05      	ldr	r3, [sp, #20]
     bd2:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     bd4:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     bd6:	9b03      	ldr	r3, [sp, #12]
     bd8:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     bda:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     bdc:	2327      	movs	r3, #39	; 0x27
     bde:	5cf3      	ldrb	r3, [r6, r3]
     be0:	2b00      	cmp	r3, #0
     be2:	d101      	bne.n	be8 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     be4:	3304      	adds	r3, #4
     be6:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     be8:	7e73      	ldrb	r3, [r6, #25]
     bea:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     bec:	7f32      	ldrb	r2, [r6, #28]
     bee:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     bf0:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     bf2:	7f72      	ldrb	r2, [r6, #29]
     bf4:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     bf6:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     bf8:	2224      	movs	r2, #36	; 0x24
     bfa:	5cb2      	ldrb	r2, [r6, r2]
     bfc:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     bfe:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     c00:	2225      	movs	r2, #37	; 0x25
     c02:	5cb2      	ldrb	r2, [r6, r2]
     c04:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     c06:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     c08:	7ab1      	ldrb	r1, [r6, #10]
     c0a:	7af2      	ldrb	r2, [r6, #11]
     c0c:	4311      	orrs	r1, r2
     c0e:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     c10:	8933      	ldrh	r3, [r6, #8]
     c12:	2bff      	cmp	r3, #255	; 0xff
     c14:	d100      	bne.n	c18 <usart_init+0x184>
     c16:	e082      	b.n	d1e <usart_init+0x28a>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     c18:	2280      	movs	r2, #128	; 0x80
     c1a:	0452      	lsls	r2, r2, #17
     c1c:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     c1e:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     c20:	232c      	movs	r3, #44	; 0x2c
     c22:	5cf3      	ldrb	r3, [r6, r3]
     c24:	2b00      	cmp	r3, #0
     c26:	d103      	bne.n	c30 <usart_init+0x19c>
     c28:	4b53      	ldr	r3, [pc, #332]	; (d78 <usart_init+0x2e4>)
     c2a:	789b      	ldrb	r3, [r3, #2]
     c2c:	079b      	lsls	r3, r3, #30
     c2e:	d501      	bpl.n	c34 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     c30:	2380      	movs	r3, #128	; 0x80
     c32:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     c34:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     c36:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     c38:	2b00      	cmp	r3, #0
     c3a:	d1fc      	bne.n	c36 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
     c3c:	4643      	mov	r3, r8
     c3e:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     c40:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     c42:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     c44:	2b00      	cmp	r3, #0
     c46:	d1fc      	bne.n	c42 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
     c48:	4643      	mov	r3, r8
     c4a:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     c4c:	ab0e      	add	r3, sp, #56	; 0x38
     c4e:	2280      	movs	r2, #128	; 0x80
     c50:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c52:	2200      	movs	r2, #0
     c54:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
     c56:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     c58:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     c5a:	6b33      	ldr	r3, [r6, #48]	; 0x30
     c5c:	930a      	str	r3, [sp, #40]	; 0x28
     c5e:	6b73      	ldr	r3, [r6, #52]	; 0x34
     c60:	930b      	str	r3, [sp, #44]	; 0x2c
     c62:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     c64:	930c      	str	r3, [sp, #48]	; 0x30
     c66:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     c68:	9302      	str	r3, [sp, #8]
     c6a:	930d      	str	r3, [sp, #52]	; 0x34
     c6c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     c6e:	ad0a      	add	r5, sp, #40	; 0x28
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     c70:	4e42      	ldr	r6, [pc, #264]	; (d7c <usart_init+0x2e8>)
     c72:	e063      	b.n	d3c <usart_init+0x2a8>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     c74:	2308      	movs	r3, #8
     c76:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     c78:	3b07      	subs	r3, #7
     c7a:	9307      	str	r3, [sp, #28]
     c7c:	e779      	b.n	b72 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     c7e:	6833      	ldr	r3, [r6, #0]
     c80:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
     c82:	68f3      	ldr	r3, [r6, #12]
     c84:	9304      	str	r3, [sp, #16]
		config->sample_adjustment |
     c86:	6973      	ldr	r3, [r6, #20]
     c88:	469a      	mov	sl, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     c8a:	7e33      	ldrb	r3, [r6, #24]
     c8c:	9305      	str	r3, [sp, #20]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     c8e:	2326      	movs	r3, #38	; 0x26
     c90:	5cf3      	ldrb	r3, [r6, r3]
     c92:	9303      	str	r3, [sp, #12]
	transfer_mode = (uint32_t)config->transfer_mode;
     c94:	6873      	ldr	r3, [r6, #4]
     c96:	4699      	mov	r9, r3
	switch (transfer_mode)
     c98:	2b00      	cmp	r3, #0
     c9a:	d018      	beq.n	cce <usart_init+0x23a>
     c9c:	2380      	movs	r3, #128	; 0x80
     c9e:	055b      	lsls	r3, r3, #21
     ca0:	4599      	cmp	r9, r3
     ca2:	d001      	beq.n	ca8 <usart_init+0x214>
	enum status_code status_code = STATUS_OK;
     ca4:	2000      	movs	r0, #0
     ca6:	e025      	b.n	cf4 <usart_init+0x260>
			if (!config->use_external_clock) {
     ca8:	2327      	movs	r3, #39	; 0x27
     caa:	5cf3      	ldrb	r3, [r6, r3]
     cac:	2b00      	cmp	r3, #0
     cae:	d000      	beq.n	cb2 <usart_init+0x21e>
     cb0:	e774      	b.n	b9c <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     cb2:	6a33      	ldr	r3, [r6, #32]
     cb4:	001f      	movs	r7, r3
     cb6:	b2c0      	uxtb	r0, r0
     cb8:	4b31      	ldr	r3, [pc, #196]	; (d80 <usart_init+0x2ec>)
     cba:	4798      	blx	r3
     cbc:	0001      	movs	r1, r0
     cbe:	220e      	movs	r2, #14
     cc0:	ab06      	add	r3, sp, #24
     cc2:	469c      	mov	ip, r3
     cc4:	4462      	add	r2, ip
     cc6:	0038      	movs	r0, r7
     cc8:	4b2e      	ldr	r3, [pc, #184]	; (d84 <usart_init+0x2f0>)
     cca:	4798      	blx	r3
     ccc:	e012      	b.n	cf4 <usart_init+0x260>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     cce:	2308      	movs	r3, #8
     cd0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     cd2:	2300      	movs	r3, #0
     cd4:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     cd6:	2327      	movs	r3, #39	; 0x27
     cd8:	5cf3      	ldrb	r3, [r6, r3]
     cda:	2b00      	cmp	r3, #0
     cdc:	d00e      	beq.n	cfc <usart_init+0x268>
				status_code =
     cde:	9b06      	ldr	r3, [sp, #24]
     ce0:	9300      	str	r3, [sp, #0]
     ce2:	9b07      	ldr	r3, [sp, #28]
     ce4:	220e      	movs	r2, #14
     ce6:	a906      	add	r1, sp, #24
     ce8:	468c      	mov	ip, r1
     cea:	4462      	add	r2, ip
     cec:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     cee:	6a30      	ldr	r0, [r6, #32]
     cf0:	4f25      	ldr	r7, [pc, #148]	; (d88 <usart_init+0x2f4>)
     cf2:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     cf4:	2800      	cmp	r0, #0
     cf6:	d000      	beq.n	cfa <usart_init+0x266>
     cf8:	e6df      	b.n	aba <usart_init+0x26>
     cfa:	e74f      	b.n	b9c <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     cfc:	6a33      	ldr	r3, [r6, #32]
     cfe:	001f      	movs	r7, r3
     d00:	b2c0      	uxtb	r0, r0
     d02:	4b1f      	ldr	r3, [pc, #124]	; (d80 <usart_init+0x2ec>)
     d04:	4798      	blx	r3
     d06:	0001      	movs	r1, r0
				status_code =
     d08:	9b06      	ldr	r3, [sp, #24]
     d0a:	9300      	str	r3, [sp, #0]
     d0c:	9b07      	ldr	r3, [sp, #28]
     d0e:	220e      	movs	r2, #14
     d10:	a806      	add	r0, sp, #24
     d12:	4684      	mov	ip, r0
     d14:	4462      	add	r2, ip
     d16:	0038      	movs	r0, r7
     d18:	4f1b      	ldr	r7, [pc, #108]	; (d88 <usart_init+0x2f4>)
     d1a:	47b8      	blx	r7
     d1c:	e7ea      	b.n	cf4 <usart_init+0x260>
		if(config->lin_slave_enable) {
     d1e:	7ef3      	ldrb	r3, [r6, #27]
     d20:	2b00      	cmp	r3, #0
     d22:	d100      	bne.n	d26 <usart_init+0x292>
     d24:	e77c      	b.n	c20 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     d26:	2380      	movs	r3, #128	; 0x80
     d28:	04db      	lsls	r3, r3, #19
     d2a:	431f      	orrs	r7, r3
     d2c:	e778      	b.n	c20 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     d2e:	0020      	movs	r0, r4
     d30:	4b16      	ldr	r3, [pc, #88]	; (d8c <usart_init+0x2f8>)
     d32:	4798      	blx	r3
     d34:	e007      	b.n	d46 <usart_init+0x2b2>
     d36:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     d38:	2f04      	cmp	r7, #4
     d3a:	d00c      	beq.n	d56 <usart_init+0x2c2>
     d3c:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     d3e:	00bb      	lsls	r3, r7, #2
     d40:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
     d42:	2800      	cmp	r0, #0
     d44:	d0f3      	beq.n	d2e <usart_init+0x29a>
		if (current_pinmux != PINMUX_UNUSED) {
     d46:	1c43      	adds	r3, r0, #1
     d48:	d0f5      	beq.n	d36 <usart_init+0x2a2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     d4a:	a90e      	add	r1, sp, #56	; 0x38
     d4c:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     d4e:	0c00      	lsrs	r0, r0, #16
     d50:	b2c0      	uxtb	r0, r0
     d52:	47b0      	blx	r6
     d54:	e7ef      	b.n	d36 <usart_init+0x2a2>
	return status_code;
     d56:	2000      	movs	r0, #0
     d58:	e6af      	b.n	aba <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     d5a:	2310      	movs	r3, #16
     d5c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     d5e:	2300      	movs	r3, #0
     d60:	9307      	str	r3, [sp, #28]
     d62:	e706      	b.n	b72 <usart_init+0xde>
     d64:	00000a5d 	.word	0x00000a5d
     d68:	40000400 	.word	0x40000400
     d6c:	00001ac5 	.word	0x00001ac5
     d70:	00001a39 	.word	0x00001a39
     d74:	00000899 	.word	0x00000899
     d78:	41002000 	.word	0x41002000
     d7c:	00001bbd 	.word	0x00001bbd
     d80:	00001ae1 	.word	0x00001ae1
     d84:	000007db 	.word	0x000007db
     d88:	00000805 	.word	0x00000805
     d8c:	000008e5 	.word	0x000008e5

00000d90 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     d90:	79c3      	ldrb	r3, [r0, #7]
		return STATUS_ERR_DENIED;
     d92:	221c      	movs	r2, #28
	if (!(module->transmitter_enabled)) {
     d94:	2b00      	cmp	r3, #0
     d96:	d101      	bne.n	d9c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     d98:	0010      	movs	r0, r2
     d9a:	4770      	bx	lr
	SercomUsart *const usart_hw = &(module->hw->USART);
     d9c:	6803      	ldr	r3, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE)) {
     d9e:	7e18      	ldrb	r0, [r3, #24]
		return STATUS_BUSY;
     da0:	3a17      	subs	r2, #23
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE)) {
     da2:	07c0      	lsls	r0, r0, #31
     da4:	d5f8      	bpl.n	d98 <usart_write_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
     da6:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     da8:	2a00      	cmp	r2, #0
     daa:	d1fc      	bne.n	da6 <usart_write_wait+0x16>
	usart_hw->DATA.reg = tx_data;
     dac:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     dae:	2102      	movs	r1, #2
     db0:	7e1a      	ldrb	r2, [r3, #24]
     db2:	420a      	tst	r2, r1
     db4:	d0fc      	beq.n	db0 <usart_write_wait+0x20>
	return STATUS_OK;
     db6:	2200      	movs	r2, #0
     db8:	e7ee      	b.n	d98 <usart_write_wait+0x8>

00000dba <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     dba:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     dbc:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     dbe:	2a00      	cmp	r2, #0
     dc0:	d101      	bne.n	dc6 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     dc2:	0018      	movs	r0, r3
     dc4:	4770      	bx	lr
	SercomUsart *const usart_hw = &(module->hw->USART);
     dc6:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     dc8:	7e10      	ldrb	r0, [r2, #24]
		return STATUS_BUSY;
     dca:	3b17      	subs	r3, #23
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     dcc:	0740      	lsls	r0, r0, #29
     dce:	d5f8      	bpl.n	dc2 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
     dd0:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     dd2:	2b00      	cmp	r3, #0
     dd4:	d1fc      	bne.n	dd0 <usart_read_wait+0x16>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     dd6:	8b53      	ldrh	r3, [r2, #26]
     dd8:	b2db      	uxtb	r3, r3
	if (error_code) {
     dda:	0698      	lsls	r0, r3, #26
     ddc:	d01d      	beq.n	e1a <usart_read_wait+0x60>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     dde:	0798      	lsls	r0, r3, #30
     de0:	d503      	bpl.n	dea <usart_read_wait+0x30>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     de2:	2302      	movs	r3, #2
     de4:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     de6:	3318      	adds	r3, #24
     de8:	e7eb      	b.n	dc2 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     dea:	0758      	lsls	r0, r3, #29
     dec:	d503      	bpl.n	df6 <usart_read_wait+0x3c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     dee:	2304      	movs	r3, #4
     df0:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     df2:	331a      	adds	r3, #26
     df4:	e7e5      	b.n	dc2 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     df6:	07d8      	lsls	r0, r3, #31
     df8:	d503      	bpl.n	e02 <usart_read_wait+0x48>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     dfa:	2301      	movs	r3, #1
     dfc:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     dfe:	3312      	adds	r3, #18
     e00:	e7df      	b.n	dc2 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     e02:	06d8      	lsls	r0, r3, #27
     e04:	d503      	bpl.n	e0e <usart_read_wait+0x54>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     e06:	2310      	movs	r3, #16
     e08:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     e0a:	3332      	adds	r3, #50	; 0x32
     e0c:	e7d9      	b.n	dc2 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     e0e:	069b      	lsls	r3, r3, #26
     e10:	d503      	bpl.n	e1a <usart_read_wait+0x60>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     e12:	2320      	movs	r3, #32
     e14:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     e16:	3321      	adds	r3, #33	; 0x21
     e18:	e7d3      	b.n	dc2 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
     e1a:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     e1c:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     e1e:	2300      	movs	r3, #0
     e20:	e7cf      	b.n	dc2 <usart_read_wait+0x8>
	...

00000e24 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     e24:	b5f0      	push	{r4, r5, r6, r7, lr}
     e26:	46ce      	mov	lr, r9
     e28:	4647      	mov	r7, r8
     e2a:	b580      	push	{r7, lr}
     e2c:	b083      	sub	sp, #12
     e2e:	0005      	movs	r5, r0
     e30:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     e32:	2017      	movs	r0, #23
	if (length == 0) {
     e34:	2a00      	cmp	r2, #0
     e36:	d104      	bne.n	e42 <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     e38:	b003      	add	sp, #12
     e3a:	bc0c      	pop	{r2, r3}
     e3c:	4690      	mov	r8, r2
     e3e:	4699      	mov	r9, r3
     e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
     e42:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
     e44:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
     e46:	2b00      	cmp	r3, #0
     e48:	d0f6      	beq.n	e38 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
     e4a:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     e4c:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     e4e:	2b00      	cmp	r3, #0
     e50:	d1fc      	bne.n	e4c <usart_write_buffer_wait+0x28>
	while (length--) {
     e52:	3a01      	subs	r2, #1
     e54:	b293      	uxth	r3, r2
     e56:	4699      	mov	r9, r3
     e58:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     e5a:	2701      	movs	r7, #1
	while (length--) {
     e5c:	4b1f      	ldr	r3, [pc, #124]	; (edc <usart_write_buffer_wait+0xb8>)
     e5e:	4698      	mov	r8, r3
     e60:	e011      	b.n	e86 <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
     e62:	1c73      	adds	r3, r6, #1
     e64:	b29b      	uxth	r3, r3
     e66:	9a01      	ldr	r2, [sp, #4]
     e68:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     e6a:	796a      	ldrb	r2, [r5, #5]
     e6c:	2a01      	cmp	r2, #1
     e6e:	d017      	beq.n	ea0 <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
     e70:	b289      	uxth	r1, r1
     e72:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
     e74:	0028      	movs	r0, r5
     e76:	4b1a      	ldr	r3, [pc, #104]	; (ee0 <usart_write_buffer_wait+0xbc>)
     e78:	4798      	blx	r3
	while (length--) {
     e7a:	464b      	mov	r3, r9
     e7c:	3b01      	subs	r3, #1
     e7e:	b29b      	uxth	r3, r3
     e80:	4699      	mov	r9, r3
     e82:	4543      	cmp	r3, r8
     e84:	d013      	beq.n	eae <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     e86:	7e23      	ldrb	r3, [r4, #24]
     e88:	423b      	tst	r3, r7
     e8a:	d1ea      	bne.n	e62 <usart_write_buffer_wait+0x3e>
     e8c:	4b13      	ldr	r3, [pc, #76]	; (edc <usart_write_buffer_wait+0xb8>)
     e8e:	7e22      	ldrb	r2, [r4, #24]
     e90:	423a      	tst	r2, r7
     e92:	d1e6      	bne.n	e62 <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
     e94:	2b01      	cmp	r3, #1
     e96:	d019      	beq.n	ecc <usart_write_buffer_wait+0xa8>
     e98:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     e9a:	2b00      	cmp	r3, #0
     e9c:	d1f7      	bne.n	e8e <usart_write_buffer_wait+0x6a>
     e9e:	e7e0      	b.n	e62 <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
     ea0:	3602      	adds	r6, #2
     ea2:	b2b6      	uxth	r6, r6
     ea4:	9a01      	ldr	r2, [sp, #4]
     ea6:	5cd3      	ldrb	r3, [r2, r3]
     ea8:	021b      	lsls	r3, r3, #8
     eaa:	4319      	orrs	r1, r3
     eac:	e7e2      	b.n	e74 <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     eae:	7e23      	ldrb	r3, [r4, #24]
     eb0:	079b      	lsls	r3, r3, #30
     eb2:	d40d      	bmi.n	ed0 <usart_write_buffer_wait+0xac>
     eb4:	4b09      	ldr	r3, [pc, #36]	; (edc <usart_write_buffer_wait+0xb8>)
     eb6:	2102      	movs	r1, #2
     eb8:	7e22      	ldrb	r2, [r4, #24]
     eba:	420a      	tst	r2, r1
     ebc:	d10a      	bne.n	ed4 <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
     ebe:	2b01      	cmp	r3, #1
     ec0:	d00a      	beq.n	ed8 <usart_write_buffer_wait+0xb4>
     ec2:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     ec4:	2b00      	cmp	r3, #0
     ec6:	d1f7      	bne.n	eb8 <usart_write_buffer_wait+0x94>
	return STATUS_OK;
     ec8:	2000      	movs	r0, #0
     eca:	e7b5      	b.n	e38 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
     ecc:	2012      	movs	r0, #18
     ece:	e7b3      	b.n	e38 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
     ed0:	2000      	movs	r0, #0
     ed2:	e7b1      	b.n	e38 <usart_write_buffer_wait+0x14>
     ed4:	2000      	movs	r0, #0
     ed6:	e7af      	b.n	e38 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
     ed8:	2012      	movs	r0, #18
     eda:	e7ad      	b.n	e38 <usart_write_buffer_wait+0x14>
     edc:	0000ffff 	.word	0x0000ffff
     ee0:	00000d91 	.word	0x00000d91

00000ee4 <aes132c_calculate_crc>:
 * \param[in] length number of bytes in data buffer
 * \param[in] data pointer to data
 * \param[out] crc pointer to calculated CRC (high byte at crc[0])
 */
void aes132c_calculate_crc(uint8_t length, uint8_t *data, uint8_t *crc)
{
     ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ee6:	46de      	mov	lr, fp
     ee8:	4657      	mov	r7, sl
     eea:	464e      	mov	r6, r9
     eec:	4645      	mov	r5, r8
     eee:	b5e0      	push	{r5, r6, r7, lr}
     ef0:	4693      	mov	fp, r2
	uint8_t crc_low = 0, crc_high = 0, crc_carry;
	uint8_t poly_low = 0x05, poly_high = 0x80;
	uint8_t shift_register;
	uint8_t data_bit, crc_bit;

	for (counter = 0; counter < length; counter++) {
     ef2:	2800      	cmp	r0, #0
     ef4:	d036      	beq.n	f64 <aes132c_calculate_crc+0x80>
     ef6:	3801      	subs	r0, #1
     ef8:	b2c0      	uxtb	r0, r0
     efa:	3001      	adds	r0, #1
     efc:	468a      	mov	sl, r1
     efe:	4482      	add	sl, r0
     f00:	2300      	movs	r3, #0
     f02:	2000      	movs	r0, #0
			crc_low <<= 1;
			crc_high <<= 1;
			crc_high |= crc_carry;

			if ((data_bit ^ crc_bit) != 0) {
				crc_low ^= poly_low;
     f04:	2205      	movs	r2, #5
     f06:	4690      	mov	r8, r2
				crc_high ^= poly_high;
     f08:	2280      	movs	r2, #128	; 0x80
     f0a:	4252      	negs	r2, r2
     f0c:	4694      	mov	ip, r2
     f0e:	4652      	mov	r2, sl
     f10:	468a      	mov	sl, r1
     f12:	465e      	mov	r6, fp
     f14:	4691      	mov	r9, r2
     f16:	e01f      	b.n	f58 <aes132c_calculate_crc+0x74>
		for (shift_register = 0x80; shift_register > 0x00; shift_register >>= 1) {
     f18:	0849      	lsrs	r1, r1, #1
     f1a:	3c01      	subs	r4, #1
     f1c:	2c00      	cmp	r4, #0
     f1e:	d015      	beq.n	f4c <aes132c_calculate_crc+0x68>
			crc_bit = crc_high >> 7;
     f20:	09da      	lsrs	r2, r3, #7
			crc_carry = crc_low >> 7;
     f22:	09c6      	lsrs	r6, r0, #7
			crc_low <<= 1;
     f24:	0040      	lsls	r0, r0, #1
     f26:	b2c0      	uxtb	r0, r0
			crc_high <<= 1;
     f28:	005b      	lsls	r3, r3, #1
     f2a:	b2db      	uxtb	r3, r3
			crc_high |= crc_carry;
     f2c:	4333      	orrs	r3, r6
     f2e:	b2db      	uxtb	r3, r3
			data_bit = (data[counter] & shift_register) ? 1 : 0;
     f30:	000e      	movs	r6, r1
     f32:	402e      	ands	r6, r5
     f34:	1e77      	subs	r7, r6, #1
     f36:	41be      	sbcs	r6, r7
			if ((data_bit ^ crc_bit) != 0) {
     f38:	b2d2      	uxtb	r2, r2
     f3a:	42b2      	cmp	r2, r6
     f3c:	d0ec      	beq.n	f18 <aes132c_calculate_crc+0x34>
				crc_low ^= poly_low;
     f3e:	4642      	mov	r2, r8
     f40:	4050      	eors	r0, r2
     f42:	b2c0      	uxtb	r0, r0
				crc_high ^= poly_high;
     f44:	4662      	mov	r2, ip
     f46:	4053      	eors	r3, r2
     f48:	b2db      	uxtb	r3, r3
     f4a:	e7e5      	b.n	f18 <aes132c_calculate_crc+0x34>
     f4c:	465e      	mov	r6, fp
     f4e:	2201      	movs	r2, #1
     f50:	4693      	mov	fp, r2
     f52:	44da      	add	sl, fp
	for (counter = 0; counter < length; counter++) {
     f54:	45ca      	cmp	sl, r9
     f56:	d007      	beq.n	f68 <aes132c_calculate_crc+0x84>
			data_bit = (data[counter] & shift_register) ? 1 : 0;
     f58:	4652      	mov	r2, sl
     f5a:	7815      	ldrb	r5, [r2, #0]
     f5c:	2408      	movs	r4, #8
     f5e:	2180      	movs	r1, #128	; 0x80
     f60:	46b3      	mov	fp, r6
     f62:	e7dd      	b.n	f20 <aes132c_calculate_crc+0x3c>
	uint8_t crc_low = 0, crc_high = 0, crc_carry;
     f64:	0003      	movs	r3, r0
     f66:	e000      	b.n	f6a <aes132c_calculate_crc+0x86>
     f68:	46b3      	mov	fp, r6
			}
		}
	}
	crc[0] = crc_high;
     f6a:	465a      	mov	r2, fp
     f6c:	7013      	strb	r3, [r2, #0]
	crc[1] = crc_low;
     f6e:	7050      	strb	r0, [r2, #1]
}
     f70:	bc3c      	pop	{r2, r3, r4, r5}
     f72:	4690      	mov	r8, r2
     f74:	4699      	mov	r9, r3
     f76:	46a2      	mov	sl, r4
     f78:	46ab      	mov	fp, r5
     f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000f7c <aes132c_reset_io_address>:

/** \brief This function resets the command and response buffer address.
 * \return status of the operation
 */
uint8_t aes132c_reset_io_address(void)
{
     f7c:	b510      	push	{r4, lr}
	return aes132p_write_memory_physical(0, AES132_RESET_ADDR, (void *) 0);
     f7e:	2200      	movs	r2, #0
     f80:	4902      	ldr	r1, [pc, #8]	; (f8c <aes132c_reset_io_address+0x10>)
     f82:	2000      	movs	r0, #0
     f84:	4b02      	ldr	r3, [pc, #8]	; (f90 <aes132c_reset_io_address+0x14>)
     f86:	4798      	blx	r3
}
     f88:	bd10      	pop	{r4, pc}
     f8a:	46c0      	nop			; (mov r8, r8)
     f8c:	0000ffe0 	.word	0x0000ffe0
     f90:	000011bd 	.word	0x000011bd

00000f94 <aes132c_resync>:

/** \brief This function resynchronizes communication with the device.
 * \return status of the operation
 */
uint8_t aes132c_resync()
{
     f94:	b510      	push	{r4, lr}
	uint8_t aes132_lib_return = aes132p_resync_physical();
     f96:	4b04      	ldr	r3, [pc, #16]	; (fa8 <aes132c_resync+0x14>)
     f98:	4798      	blx	r3
	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS)
     f9a:	2800      	cmp	r0, #0
     f9c:	d000      	beq.n	fa0 <aes132c_resync+0xc>
		return aes132_lib_return;

	return aes132c_reset_io_address();
}
     f9e:	bd10      	pop	{r4, pc}
	return aes132c_reset_io_address();
     fa0:	4b02      	ldr	r3, [pc, #8]	; (fac <aes132c_resync+0x18>)
     fa2:	4798      	blx	r3
     fa4:	e7fb      	b.n	f9e <aes132c_resync+0xa>
     fa6:	46c0      	nop			; (mov r8, r8)
     fa8:	0000127d 	.word	0x0000127d
     fac:	00000f7d 	.word	0x00000f7d

00000fb0 <aes132c_wait_for_status_register_bit>:
 * \param[in] is_set specifies whether to wait until bit is set (#AES132_BIT_SET) or reset (#AES132_BIT_SET)
 * \param[in] n_retries 16-bit number that indicates the number of retries before stopping to poll.
 * \return status of the operation
 */
uint8_t aes132c_wait_for_status_register_bit(uint8_t mask, uint8_t is_set, uint16_t n_retries)
{
     fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
     fb2:	46c6      	mov	lr, r8
     fb4:	b500      	push	{lr}
     fb6:	b082      	sub	sp, #8
     fb8:	4680      	mov	r8, r0
     fba:	000d      	movs	r5, r1
     fbc:	0016      	movs	r6, r2
	uint8_t aes132_lib_return;
	uint8_t device_status_register;

	do {
		aes132_lib_return = aes132p_read_memory_physical(1, AES132_STATUS_ADDR, &device_status_register);
     fbe:	466b      	mov	r3, sp
     fc0:	1ddc      	adds	r4, r3, #7
     fc2:	4f0f      	ldr	r7, [pc, #60]	; (1000 <aes132c_wait_for_status_register_bit+0x50>)
     fc4:	e009      	b.n	fda <aes132c_wait_for_status_register_bit+0x2a>
			// The device is busy. Continue polling until "n_retries" is depleted.
			continue;

		if (is_set == AES132_BIT_SET) {
			// Wait for the mask bit(s) being set.
			if ((device_status_register & mask) == mask)
     fc6:	7823      	ldrb	r3, [r4, #0]
     fc8:	4642      	mov	r2, r8
     fca:	4013      	ands	r3, r2
     fcc:	4598      	cmp	r8, r3
     fce:	d012      	beq.n	ff6 <aes132c_wait_for_status_register_bit+0x46>
				return aes132_lib_return;
		}

		// Device is busy, or "mask" pattern does not yet match the device status register value.
		// Continue polling.
	} while (n_retries-- > 0);
     fd0:	1e73      	subs	r3, r6, #1
     fd2:	b29b      	uxth	r3, r3
     fd4:	2e00      	cmp	r6, #0
     fd6:	d00d      	beq.n	ff4 <aes132c_wait_for_status_register_bit+0x44>
     fd8:	001e      	movs	r6, r3
		aes132_lib_return = aes132p_read_memory_physical(1, AES132_STATUS_ADDR, &device_status_register);
     fda:	0022      	movs	r2, r4
     fdc:	4909      	ldr	r1, [pc, #36]	; (1004 <aes132c_wait_for_status_register_bit+0x54>)
     fde:	2001      	movs	r0, #1
     fe0:	47b8      	blx	r7
		if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS)
     fe2:	2800      	cmp	r0, #0
     fe4:	d1f4      	bne.n	fd0 <aes132c_wait_for_status_register_bit+0x20>
		if (is_set == AES132_BIT_SET) {
     fe6:	2d01      	cmp	r5, #1
     fe8:	d0ed      	beq.n	fc6 <aes132c_wait_for_status_register_bit+0x16>
			if ((device_status_register & mask) == 0)
     fea:	7823      	ldrb	r3, [r4, #0]
     fec:	4642      	mov	r2, r8
     fee:	4213      	tst	r3, r2
     ff0:	d1ee      	bne.n	fd0 <aes132c_wait_for_status_register_bit+0x20>
     ff2:	e000      	b.n	ff6 <aes132c_wait_for_status_register_bit+0x46>

	// The mask pattern was not found in the device status register after "n_retries" polling
	// iterations. Return timeout error.
	return AES132_FUNCTION_RETCODE_TIMEOUT;
     ff4:	20e7      	movs	r0, #231	; 0xe7
}
     ff6:	b002      	add	sp, #8
     ff8:	bc04      	pop	{r2}
     ffa:	4690      	mov	r8, r2
     ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ffe:	46c0      	nop			; (mov r8, r8)
    1000:	00001225 	.word	0x00001225
    1004:	0000fff0 	.word	0x0000fff0

00001008 <aes132c_wait_for_device_ready>:

/** \brief This function waits for the Write-In-Progress (WIP) bit in the device status register to be cleared.
 * \return status of the operation
 */
uint8_t aes132c_wait_for_device_ready(void)
{
    1008:	b510      	push	{r4, lr}
	return aes132c_wait_for_status_register_bit(AES132_WIP_BIT, AES132_BIT_CLEARED, AES132_RETRY_COUNT_DEVICE_READY);
    100a:	2296      	movs	r2, #150	; 0x96
    100c:	0112      	lsls	r2, r2, #4
    100e:	2100      	movs	r1, #0
    1010:	2001      	movs	r0, #1
    1012:	4b01      	ldr	r3, [pc, #4]	; (1018 <aes132c_wait_for_device_ready+0x10>)
    1014:	4798      	blx	r3
}
    1016:	bd10      	pop	{r4, pc}
    1018:	00000fb1 	.word	0x00000fb1

0000101c <aes132c_wait_for_response_ready>:

/** \brief This function waits for the Response-Ready (RRDY) bit in the device status register to be set.
 * \ return status of the operation
 */
uint8_t aes132c_wait_for_response_ready(void)
{
    101c:	b510      	push	{r4, lr}
	return aes132c_wait_for_status_register_bit(AES132_RESPONSE_READY_BIT, AES132_BIT_SET, AES132_RETRY_COUNT_RESPONSE_READY);
    101e:	4a03      	ldr	r2, [pc, #12]	; (102c <aes132c_wait_for_response_ready+0x10>)
    1020:	2101      	movs	r1, #1
    1022:	2040      	movs	r0, #64	; 0x40
    1024:	4b02      	ldr	r3, [pc, #8]	; (1030 <aes132c_wait_for_response_ready+0x14>)
    1026:	4798      	blx	r3
}
    1028:	bd10      	pop	{r4, pc}
    102a:	46c0      	nop			; (mov r8, r8)
    102c:	000006fc 	.word	0x000006fc
    1030:	00000fb1 	.word	0x00000fb1

00001034 <aes132c_receive_response>:
 * \param[in] size number of bytes to retrieve (<= response buffer size allocated by caller)
 * \param[out] response pointer to retrieved response
 * \return status of the operation
 */
uint8_t aes132c_receive_response(uint8_t size, uint8_t *response)
{
    1034:	b5f0      	push	{r4, r5, r6, r7, lr}
    1036:	46ce      	mov	lr, r9
    1038:	b500      	push	{lr}
    103a:	b084      	sub	sp, #16
    103c:	9001      	str	r0, [sp, #4]
    103e:	000d      	movs	r5, r1
    1040:	2702      	movs	r7, #2
	uint8_t crc[AES132_CRC_SIZE];
	uint8_t crc_index;
	uint8_t count_byte;

	do {
		aes132_lib_return = aes132c_wait_for_response_ready();
    1042:	4e29      	ldr	r6, [pc, #164]	; (10e8 <aes132c_receive_response+0xb4>)
    1044:	47b0      	blx	r6
    1046:	1e04      	subs	r4, r0, #0
		if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
    1048:	d00a      	beq.n	1060 <aes132c_receive_response+0x2c>
			// Waiting for the Response-Ready bit timed out. We might have lost communication.
			// Re-synchronize and retry.
			// Do not override the return value from the call to aes132c_wait_for_response_ready.
			(void) aes132c_resync();
    104a:	4b28      	ldr	r3, [pc, #160]	; (10ec <aes132c_receive_response+0xb8>)
    104c:	4798      	blx	r3
    104e:	3f01      	subs	r7, #1
    1050:	b2ff      	uxtb	r7, r7

		// Do not override aes132_lib_return.
		(void) aes132c_resync();

		// Retry if communication failed, or CRC did not match.
	} while ((aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) && (--n_retries > 0));
    1052:	2f00      	cmp	r7, #0
    1054:	d1f6      	bne.n	1044 <aes132c_receive_response+0x10>

	// Even after re-synchronizing and retrying, we could not receive a consistent response packet.
	return aes132_lib_return;
}
    1056:	0020      	movs	r0, r4
    1058:	b004      	add	sp, #16
    105a:	bc04      	pop	{r2}
    105c:	4691      	mov	r9, r2
    105e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		aes132_lib_return = aes132p_read_memory_physical(1, AES132_IO_ADDR, &response[AES132_COMMAND_INDEX_COUNT]);
    1060:	002a      	movs	r2, r5
    1062:	21fe      	movs	r1, #254	; 0xfe
    1064:	0209      	lsls	r1, r1, #8
    1066:	2001      	movs	r0, #1
    1068:	4b21      	ldr	r3, [pc, #132]	; (10f0 <aes132c_receive_response+0xbc>)
    106a:	4798      	blx	r3
    106c:	1e04      	subs	r4, r0, #0
		if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
    106e:	d10c      	bne.n	108a <aes132c_receive_response+0x56>
		count_byte = response[AES132_RESPONSE_INDEX_COUNT];
    1070:	782b      	ldrb	r3, [r5, #0]
    1072:	4699      	mov	r9, r3
		if (count_byte > size) {
    1074:	9b01      	ldr	r3, [sp, #4]
    1076:	4599      	cmp	r9, r3
    1078:	d80a      	bhi.n	1090 <aes132c_receive_response+0x5c>
		if ((count_byte < AES132_RESPONSE_SIZE_MIN) || (count_byte > AES132_RESPONSE_SIZE_MAX)) {
    107a:	464b      	mov	r3, r9
    107c:	3b04      	subs	r3, #4
    107e:	2b30      	cmp	r3, #48	; 0x30
    1080:	d90a      	bls.n	1098 <aes132c_receive_response+0x64>
			(void) aes132c_resync();
    1082:	4b1a      	ldr	r3, [pc, #104]	; (10ec <aes132c_receive_response+0xb8>)
    1084:	4798      	blx	r3
			aes132_lib_return = AES132_FUNCTION_RETCODE_COUNT_INVALID;
    1086:	24e4      	movs	r4, #228	; 0xe4
			continue;
    1088:	e7e1      	b.n	104e <aes132c_receive_response+0x1a>
			(void) aes132c_resync();
    108a:	4b18      	ldr	r3, [pc, #96]	; (10ec <aes132c_receive_response+0xb8>)
    108c:	4798      	blx	r3
			continue;
    108e:	e7de      	b.n	104e <aes132c_receive_response+0x1a>
			(void) aes132c_resync();
    1090:	4b16      	ldr	r3, [pc, #88]	; (10ec <aes132c_receive_response+0xb8>)
    1092:	4798      	blx	r3
			aes132_lib_return = AES132_FUNCTION_RETCODE_SIZE_TOO_SMALL;
    1094:	24a2      	movs	r4, #162	; 0xa2
			continue;
    1096:	e7da      	b.n	104e <aes132c_receive_response+0x1a>
		aes132_lib_return = aes132p_read_memory_physical(count_byte - 1, AES132_IO_ADDR, &response[AES132_RESPONSE_INDEX_RETURN_CODE]);
    1098:	1c6a      	adds	r2, r5, #1
    109a:	464b      	mov	r3, r9
    109c:	1e58      	subs	r0, r3, #1
    109e:	b2c0      	uxtb	r0, r0
    10a0:	21fe      	movs	r1, #254	; 0xfe
    10a2:	0209      	lsls	r1, r1, #8
    10a4:	4b12      	ldr	r3, [pc, #72]	; (10f0 <aes132c_receive_response+0xbc>)
    10a6:	4798      	blx	r3
    10a8:	1e04      	subs	r4, r0, #0
		if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
    10aa:	d002      	beq.n	10b2 <aes132c_receive_response+0x7e>
			(void) aes132c_resync();
    10ac:	4b0f      	ldr	r3, [pc, #60]	; (10ec <aes132c_receive_response+0xb8>)
    10ae:	4798      	blx	r3
			continue;
    10b0:	e7cd      	b.n	104e <aes132c_receive_response+0x1a>
		crc_index = count_byte - AES132_CRC_SIZE;
    10b2:	464c      	mov	r4, r9
    10b4:	3c02      	subs	r4, #2
    10b6:	b2e4      	uxtb	r4, r4
		aes132c_calculate_crc(crc_index, response, crc);
    10b8:	ab03      	add	r3, sp, #12
    10ba:	4699      	mov	r9, r3
    10bc:	001a      	movs	r2, r3
    10be:	0029      	movs	r1, r5
    10c0:	0020      	movs	r0, r4
    10c2:	4b0c      	ldr	r3, [pc, #48]	; (10f4 <aes132c_receive_response+0xc0>)
    10c4:	4798      	blx	r3
		if ((crc[0] == response[crc_index]) && (crc[1] == response[crc_index + 1]))
    10c6:	464b      	mov	r3, r9
    10c8:	781a      	ldrb	r2, [r3, #0]
    10ca:	5d2b      	ldrb	r3, [r5, r4]
    10cc:	429a      	cmp	r2, r3
    10ce:	d003      	beq.n	10d8 <aes132c_receive_response+0xa4>
		(void) aes132c_resync();
    10d0:	4b06      	ldr	r3, [pc, #24]	; (10ec <aes132c_receive_response+0xb8>)
    10d2:	4798      	blx	r3
		aes132_lib_return = AES132_FUNCTION_RETCODE_BAD_CRC_RX;
    10d4:	24e5      	movs	r4, #229	; 0xe5
    10d6:	e7ba      	b.n	104e <aes132c_receive_response+0x1a>
		if ((crc[0] == response[crc_index]) && (crc[1] == response[crc_index + 1]))
    10d8:	192c      	adds	r4, r5, r4
    10da:	ab03      	add	r3, sp, #12
    10dc:	785a      	ldrb	r2, [r3, #1]
    10de:	7863      	ldrb	r3, [r4, #1]
    10e0:	429a      	cmp	r2, r3
    10e2:	d1f5      	bne.n	10d0 <aes132c_receive_response+0x9c>
			return response[AES132_RESPONSE_INDEX_RETURN_CODE];
    10e4:	786c      	ldrb	r4, [r5, #1]
    10e6:	e7b6      	b.n	1056 <aes132c_receive_response+0x22>
    10e8:	0000101d 	.word	0x0000101d
    10ec:	00000f95 	.word	0x00000f95
    10f0:	00001225 	.word	0x00001225
    10f4:	00000ee5 	.word	0x00000ee5

000010f8 <aes132c_access_memory>:
{
    10f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    10fa:	46c6      	mov	lr, r8
    10fc:	b500      	push	{lr}
    10fe:	b086      	sub	sp, #24
    1100:	9002      	str	r0, [sp, #8]
    1102:	9101      	str	r1, [sp, #4]
    1104:	9203      	str	r2, [sp, #12]
    1106:	4698      	mov	r8, r3
    1108:	2701      	movs	r7, #1
			aes132_lib_return = aes132c_wait_for_device_ready();
    110a:	4e1e      	ldr	r6, [pc, #120]	; (1184 <aes132c_access_memory+0x8c>)
{
    110c:	2502      	movs	r5, #2
			aes132_lib_return = aes132c_wait_for_device_ready();
    110e:	47b0      	blx	r6
    1110:	1e04      	subs	r4, r0, #0
			if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS)
    1112:	d131      	bne.n	1178 <aes132c_access_memory+0x80>
			if (read == 0) {
    1114:	4643      	mov	r3, r8
    1116:	2b00      	cmp	r3, #0
    1118:	d11a      	bne.n	1150 <aes132c_access_memory+0x58>
				aes132_lib_return = aes132p_write_memory_physical(count, word_address, data);
    111a:	9a03      	ldr	r2, [sp, #12]
    111c:	9901      	ldr	r1, [sp, #4]
    111e:	9802      	ldr	r0, [sp, #8]
    1120:	4b19      	ldr	r3, [pc, #100]	; (1188 <aes132c_access_memory+0x90>)
    1122:	4798      	blx	r3
    1124:	1e04      	subs	r4, r0, #0
				if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS)
    1126:	d11a      	bne.n	115e <aes132c_access_memory+0x66>
				if	(word_address >= AES132_IO_ADDR)
    1128:	4b18      	ldr	r3, [pc, #96]	; (118c <aes132c_access_memory+0x94>)
    112a:	9a01      	ldr	r2, [sp, #4]
    112c:	429a      	cmp	r2, r3
    112e:	d904      	bls.n	113a <aes132c_access_memory+0x42>
}
    1130:	0020      	movs	r0, r4
    1132:	b006      	add	sp, #24
    1134:	bc04      	pop	{r2}
    1136:	4690      	mov	r8, r2
    1138:	bdf0      	pop	{r4, r5, r6, r7, pc}
				aes132c_wait_for_response_ready();
    113a:	4b15      	ldr	r3, [pc, #84]	; (1190 <aes132c_access_memory+0x98>)
    113c:	4798      	blx	r3
				aes132_lib_return = aes132c_receive_response(sizeof(response_buffer), response_buffer);
    113e:	a905      	add	r1, sp, #20
    1140:	2004      	movs	r0, #4
    1142:	4b14      	ldr	r3, [pc, #80]	; (1194 <aes132c_access_memory+0x9c>)
    1144:	4798      	blx	r3
    1146:	1e04      	subs	r4, r0, #0
				if (aes132_lib_return == AES132_FUNCTION_RETCODE_SUCCESS)
    1148:	d1f2      	bne.n	1130 <aes132c_access_memory+0x38>
					return response_buffer[AES132_RESPONSE_INDEX_RETURN_CODE];
    114a:	ab05      	add	r3, sp, #20
    114c:	785c      	ldrb	r4, [r3, #1]
    114e:	e7ef      	b.n	1130 <aes132c_access_memory+0x38>
				aes132_lib_return = aes132p_read_memory_physical(count, word_address, data);
    1150:	9a03      	ldr	r2, [sp, #12]
    1152:	9901      	ldr	r1, [sp, #4]
    1154:	9802      	ldr	r0, [sp, #8]
    1156:	4b10      	ldr	r3, [pc, #64]	; (1198 <aes132c_access_memory+0xa0>)
    1158:	4798      	blx	r3
    115a:	1e04      	subs	r4, r0, #0
				if (aes132_lib_return == AES132_FUNCTION_RETCODE_SUCCESS)
    115c:	d0e8      	beq.n	1130 <aes132c_access_memory+0x38>
    115e:	3d01      	subs	r5, #1
    1160:	b2ed      	uxtb	r5, r5
		} while (--n_retries_memory_access > 0);
    1162:	2d00      	cmp	r5, #0
    1164:	d1d3      	bne.n	110e <aes132c_access_memory+0x16>
		if (--n_retries_resync == 0)
    1166:	2f00      	cmp	r7, #0
    1168:	d0e2      	beq.n	1130 <aes132c_access_memory+0x38>
		(void) aes132c_resync();
    116a:	4b0c      	ldr	r3, [pc, #48]	; (119c <aes132c_access_memory+0xa4>)
    116c:	4798      	blx	r3
	} while (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS);
    116e:	2c00      	cmp	r4, #0
    1170:	d0de      	beq.n	1130 <aes132c_access_memory+0x38>
    1172:	3f01      	subs	r7, #1
    1174:	b2ff      	uxtb	r7, r7
    1176:	e7c9      	b.n	110c <aes132c_access_memory+0x14>
		if (--n_retries_resync == 0)
    1178:	2f00      	cmp	r7, #0
    117a:	d0d9      	beq.n	1130 <aes132c_access_memory+0x38>
		(void) aes132c_resync();
    117c:	4b07      	ldr	r3, [pc, #28]	; (119c <aes132c_access_memory+0xa4>)
    117e:	4798      	blx	r3
    1180:	e7f7      	b.n	1172 <aes132c_access_memory+0x7a>
    1182:	46c0      	nop			; (mov r8, r8)
    1184:	00001009 	.word	0x00001009
    1188:	000011bd 	.word	0x000011bd
    118c:	0000fdff 	.word	0x0000fdff
    1190:	0000101d 	.word	0x0000101d
    1194:	00001035 	.word	0x00001035
    1198:	00001225 	.word	0x00001225
    119c:	00000f95 	.word	0x00000f95

000011a0 <aes132m_write_memory>:
 * \param[in] word_address word address
 * \param[in] data pointer to tx data
 * \return status of the operation
 */
uint8_t aes132m_write_memory(uint8_t count, uint16_t word_address, uint8_t *data)
{
    11a0:	b510      	push	{r4, lr}
	return aes132c_access_memory(count, word_address, data,  AES132_WRITE);
    11a2:	2300      	movs	r3, #0
    11a4:	4c01      	ldr	r4, [pc, #4]	; (11ac <aes132m_write_memory+0xc>)
    11a6:	47a0      	blx	r4
}
    11a8:	bd10      	pop	{r4, pc}
    11aa:	46c0      	nop			; (mov r8, r8)
    11ac:	000010f9 	.word	0x000010f9

000011b0 <aes132p_enable_interface>:
	I2C_READ  = (uint8_t) 0x01   //! read command id
};

/** \brief This function initializes and enables the I2C hardware peripheral. */
void aes132p_enable_interface(void)
{
    11b0:	b510      	push	{r4, lr}
	i2c_enable_phys();
    11b2:	4b01      	ldr	r3, [pc, #4]	; (11b8 <aes132p_enable_interface+0x8>)
    11b4:	4798      	blx	r3
}
    11b6:	bd10      	pop	{r4, pc}
    11b8:	000012e1 	.word	0x000012e1

000011bc <aes132p_write_memory_physical>:
 * \param[in] word_address word address to write to
 * \param[in] data pointer to tx buffer
 * \return status of the operation
 */
uint8_t aes132p_write_memory_physical(uint8_t count, uint16_t word_address, uint8_t *data)
{
    11bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11be:	af00      	add	r7, sp, #0
    11c0:	0014      	movs	r4, r2
	// In both, big-endian and little-endian systems, we send MSB first.
	uint8_t word_address_buffer[2] = {(uint8_t) (word_address >> 8), (uint8_t) (word_address & 0xFF)};
	uint8_t data_buffer[2+count];
    11c2:	1c85      	adds	r5, r0, #2
    11c4:	0003      	movs	r3, r0
    11c6:	3309      	adds	r3, #9
    11c8:	08db      	lsrs	r3, r3, #3
    11ca:	00db      	lsls	r3, r3, #3
    11cc:	466a      	mov	r2, sp
    11ce:	1ad3      	subs	r3, r2, r3
    11d0:	469d      	mov	sp, r3
    11d2:	466e      	mov	r6, sp
	uint8_t word_address_buffer[2] = {(uint8_t) (word_address >> 8), (uint8_t) (word_address & 0xFF)};
    11d4:	0a0b      	lsrs	r3, r1, #8
    11d6:	7033      	strb	r3, [r6, #0]
    11d8:	7071      	strb	r1, [r6, #1]
			memcpy(&data_buffer[0], word_address_buffer, 2);
			memcpy(&data_buffer[2], data, count);
    11da:	466b      	mov	r3, sp
    11dc:	3302      	adds	r3, #2
    11de:	0002      	movs	r2, r0
    11e0:	0021      	movs	r1, r4
    11e2:	0018      	movs	r0, r3
    11e4:	4b0b      	ldr	r3, [pc, #44]	; (1214 <aes132p_write_memory_physical+0x58>)
    11e6:	4798      	blx	r3
	uint8_t aes132_lib_return = i2c_send_slave_address(I2C_WRITE);
    11e8:	2000      	movs	r0, #0
    11ea:	4b0b      	ldr	r3, [pc, #44]	; (1218 <aes132p_write_memory_physical+0x5c>)
    11ec:	4798      	blx	r3
    11ee:	1e04      	subs	r4, r0, #0
	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS)
    11f0:	d002      	beq.n	11f8 <aes132p_write_memory_physical+0x3c>
		return aes132_lib_return;
	}
	
	// success
	return i2c_send_stop();
}
    11f2:	0020      	movs	r0, r4
    11f4:	46bd      	mov	sp, r7
    11f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	aes132_lib_return = i2c_send_bytes(sizeof(data_buffer), (uint8_t *) data_buffer);
    11f8:	b2e8      	uxtb	r0, r5
    11fa:	4669      	mov	r1, sp
    11fc:	4b07      	ldr	r3, [pc, #28]	; (121c <aes132p_write_memory_physical+0x60>)
    11fe:	4798      	blx	r3
    1200:	1e04      	subs	r4, r0, #0
	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
    1202:	d103      	bne.n	120c <aes132p_write_memory_physical+0x50>
	return i2c_send_stop();
    1204:	4b06      	ldr	r3, [pc, #24]	; (1220 <aes132p_write_memory_physical+0x64>)
    1206:	4798      	blx	r3
    1208:	0004      	movs	r4, r0
    120a:	e7f2      	b.n	11f2 <aes132p_write_memory_physical+0x36>
		(void) i2c_send_stop();
    120c:	4b04      	ldr	r3, [pc, #16]	; (1220 <aes132p_write_memory_physical+0x64>)
    120e:	4798      	blx	r3
		return aes132_lib_return;
    1210:	e7ef      	b.n	11f2 <aes132p_write_memory_physical+0x36>
    1212:	46c0      	nop			; (mov r8, r8)
    1214:	000039a9 	.word	0x000039a9
    1218:	00001445 	.word	0x00001445
    121c:	000013b5 	.word	0x000013b5
    1220:	00001395 	.word	0x00001395

00001224 <aes132p_read_memory_physical>:
 * \param[in] word_address word address to read from
 * \param[out] data pointer to rx buffer
 * \return status of the operation
 */
uint8_t aes132p_read_memory_physical(uint8_t size, uint16_t word_address, uint8_t *data)
{
    1224:	b570      	push	{r4, r5, r6, lr}
    1226:	b082      	sub	sp, #8
    1228:	0005      	movs	r5, r0
    122a:	0016      	movs	r6, r2
	// Random read:
	// Start, I2C address with write bit, word address,
	// Start, I2C address with read bit

	// In both, big-endian and little-endian systems, we send MSB first.
	const uint8_t word_address_buffer[2] = {(uint8_t) (word_address >> 8), (uint8_t) (word_address & 0x00FF)};
    122c:	ab01      	add	r3, sp, #4
    122e:	0a0a      	lsrs	r2, r1, #8
    1230:	701a      	strb	r2, [r3, #0]
    1232:	7059      	strb	r1, [r3, #1]

	uint8_t aes132_lib_return = i2c_send_slave_address(I2C_WRITE);
    1234:	2000      	movs	r0, #0
    1236:	4b0d      	ldr	r3, [pc, #52]	; (126c <aes132p_read_memory_physical+0x48>)
    1238:	4798      	blx	r3
    123a:	1e04      	subs	r4, r0, #0
	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS)
    123c:	d002      	beq.n	1244 <aes132p_read_memory_physical+0x20>
	aes132_lib_return = i2c_send_slave_address(I2C_READ);
	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS)
		return aes132_lib_return;

	return i2c_receive_bytes(size, data);
}
    123e:	0020      	movs	r0, r4
    1240:	b002      	add	sp, #8
    1242:	bd70      	pop	{r4, r5, r6, pc}
	aes132_lib_return = i2c_send_bytes(2, (uint8_t *) word_address_buffer);
    1244:	a901      	add	r1, sp, #4
    1246:	2002      	movs	r0, #2
    1248:	4b09      	ldr	r3, [pc, #36]	; (1270 <aes132p_read_memory_physical+0x4c>)
    124a:	4798      	blx	r3
    124c:	1e04      	subs	r4, r0, #0
	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
    124e:	d10a      	bne.n	1266 <aes132p_read_memory_physical+0x42>
	aes132_lib_return = i2c_send_slave_address(I2C_READ);
    1250:	2001      	movs	r0, #1
    1252:	4b06      	ldr	r3, [pc, #24]	; (126c <aes132p_read_memory_physical+0x48>)
    1254:	4798      	blx	r3
    1256:	1e04      	subs	r4, r0, #0
	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS)
    1258:	d1f1      	bne.n	123e <aes132p_read_memory_physical+0x1a>
	return i2c_receive_bytes(size, data);
    125a:	0031      	movs	r1, r6
    125c:	0028      	movs	r0, r5
    125e:	4b05      	ldr	r3, [pc, #20]	; (1274 <aes132p_read_memory_physical+0x50>)
    1260:	4798      	blx	r3
    1262:	0004      	movs	r4, r0
    1264:	e7eb      	b.n	123e <aes132p_read_memory_physical+0x1a>
		(void) i2c_send_stop();
    1266:	4b04      	ldr	r3, [pc, #16]	; (1278 <aes132p_read_memory_physical+0x54>)
    1268:	4798      	blx	r3
		return aes132_lib_return;
    126a:	e7e8      	b.n	123e <aes132p_read_memory_physical+0x1a>
    126c:	00001445 	.word	0x00001445
    1270:	000013b5 	.word	0x000013b5
    1274:	000013f5 	.word	0x000013f5
    1278:	00001395 	.word	0x00001395

0000127c <aes132p_resync_physical>:

/** \brief This function resynchronizes communication.
 * \return status of the operation
 */
uint8_t aes132p_resync_physical(void)
{
    127c:	b510      	push	{r4, lr}
    127e:	b082      	sub	sp, #8
	uint8_t nine_clocks = 0xFF;
    1280:	22ff      	movs	r2, #255	; 0xff
    1282:	466b      	mov	r3, sp
    1284:	71da      	strb	r2, [r3, #7]
	uint8_t n_retries = 2;
	uint8_t aes132_lib_return;

	do {
		aes132_lib_return = i2c_send_start();
    1286:	4b0e      	ldr	r3, [pc, #56]	; (12c0 <aes132p_resync_physical+0x44>)
    1288:	4798      	blx	r3
		if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
    128a:	2800      	cmp	r0, #0
    128c:	d10a      	bne.n	12a4 <aes132p_resync_physical+0x28>
		// Retry creating a Start condition if it failed.
	} while(aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS);

	// Do not evaluate the return code which most likely indicates error,
	// since nine_clocks is unlikely to be acknowledged.
	(void) i2c_send_bytes(1, &nine_clocks);
    128e:	466b      	mov	r3, sp
    1290:	1dd9      	adds	r1, r3, #7
    1292:	2001      	movs	r0, #1
    1294:	4b0b      	ldr	r3, [pc, #44]	; (12c4 <aes132p_resync_physical+0x48>)
    1296:	4798      	blx	r3

	return i2c_send_stop();
    1298:	4b0b      	ldr	r3, [pc, #44]	; (12c8 <aes132p_resync_physical+0x4c>)
    129a:	4798      	blx	r3
    129c:	0004      	movs	r4, r0
}
    129e:	0020      	movs	r0, r4
    12a0:	b002      	add	sp, #8
    12a2:	bd10      	pop	{r4, pc}
			i2c_disable_phys();
    12a4:	4b09      	ldr	r3, [pc, #36]	; (12cc <aes132p_resync_physical+0x50>)
    12a6:	4798      	blx	r3
			i2c_enable_phys();
    12a8:	4b09      	ldr	r3, [pc, #36]	; (12d0 <aes132p_resync_physical+0x54>)
    12aa:	4798      	blx	r3
		aes132_lib_return = i2c_send_start();
    12ac:	4b04      	ldr	r3, [pc, #16]	; (12c0 <aes132p_resync_physical+0x44>)
    12ae:	4798      	blx	r3
    12b0:	1e04      	subs	r4, r0, #0
		if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
    12b2:	d0f4      	beq.n	129e <aes132p_resync_physical+0x22>
			i2c_disable_phys();
    12b4:	4b05      	ldr	r3, [pc, #20]	; (12cc <aes132p_resync_physical+0x50>)
    12b6:	4798      	blx	r3
			i2c_enable_phys();
    12b8:	4b05      	ldr	r3, [pc, #20]	; (12d0 <aes132p_resync_physical+0x54>)
    12ba:	4798      	blx	r3
    12bc:	e7ef      	b.n	129e <aes132p_resync_physical+0x22>
    12be:	46c0      	nop			; (mov r8, r8)
    12c0:	00001391 	.word	0x00001391
    12c4:	000013b5 	.word	0x000013b5
    12c8:	00001395 	.word	0x00001395
    12cc:	0000136d 	.word	0x0000136d
    12d0:	000012e1 	.word	0x000012e1

000012d4 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    12d4:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    12d6:	2207      	movs	r2, #7
    12d8:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    12da:	421a      	tst	r2, r3
    12dc:	d1fc      	bne.n	12d8 <_i2c_master_wait_for_sync+0x4>
}
    12de:	4770      	bx	lr

000012e0 <i2c_enable_phys>:


/** \brief This function initializes and enables the I2C peripheral.
 * */
void i2c_enable_phys(void)
{
    12e0:	b530      	push	{r4, r5, lr}
    12e2:	b08f      	sub	sp, #60	; 0x3c
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    12e4:	aa01      	add	r2, sp, #4
    12e6:	4b1b      	ldr	r3, [pc, #108]	; (1354 <i2c_enable_phys+0x74>)
    12e8:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    12ea:	2300      	movs	r3, #0
    12ec:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    12ee:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    12f0:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    12f2:	2180      	movs	r1, #128	; 0x80
    12f4:	0389      	lsls	r1, r1, #14
    12f6:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    12f8:	2101      	movs	r1, #1
    12fa:	4249      	negs	r1, r1
    12fc:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    12fe:	61d3      	str	r3, [r2, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    1300:	6213      	str	r3, [r2, #32]
	config->scl_low_timeout  = false;
    1302:	3125      	adds	r1, #37	; 0x25
    1304:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    1306:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    1308:	3108      	adds	r1, #8
    130a:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    130c:	3101      	adds	r1, #1
    130e:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    1310:	3101      	adds	r1, #1
    1312:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    1314:	33d7      	adds	r3, #215	; 0xd7
    1316:	8613      	strh	r3, [r2, #48]	; 0x30
	//! [init_conf]
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
	//! [init_conf]

	config_i2c_master.baud_rate = 400;
    1318:	33b9      	adds	r3, #185	; 0xb9
    131a:	9301      	str	r3, [sp, #4]

	/* Change buffer timeout to something longer. */
	//! [conf_change]
	config_i2c_master.buffer_timeout = 10000;
    131c:	4b0e      	ldr	r3, [pc, #56]	; (1358 <i2c_enable_phys+0x78>)
    131e:	82d3      	strh	r3, [r2, #22]
	//! [conf_change]

	/* Initialize and enable device with config. */
	//! [init_module]
	i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);
    1320:	4d0e      	ldr	r5, [pc, #56]	; (135c <i2c_enable_phys+0x7c>)
    1322:	490f      	ldr	r1, [pc, #60]	; (1360 <i2c_enable_phys+0x80>)
    1324:	0028      	movs	r0, r5
    1326:	4b0f      	ldr	r3, [pc, #60]	; (1364 <i2c_enable_phys+0x84>)
    1328:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    132a:	682c      	ldr	r4, [r5, #0]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    132c:	0028      	movs	r0, r5
    132e:	4b0e      	ldr	r3, [pc, #56]	; (1368 <i2c_enable_phys+0x88>)
    1330:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1332:	6823      	ldr	r3, [r4, #0]
    1334:	2202      	movs	r2, #2
    1336:	4313      	orrs	r3, r2
    1338:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    133a:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    133c:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    133e:	2110      	movs	r1, #16
    1340:	8b62      	ldrh	r2, [r4, #26]
    1342:	420a      	tst	r2, r1
    1344:	d104      	bne.n	1350 <i2c_enable_phys+0x70>
		timeout_counter++;
    1346:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1348:	4283      	cmp	r3, r0
    134a:	d3f9      	bcc.n	1340 <i2c_enable_phys+0x60>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    134c:	2310      	movs	r3, #16
    134e:	8363      	strh	r3, [r4, #26]
	//! [init_module]

	//! [enable_module]
	i2c_master_enable(&i2c_master_instance);
	//! [enable_module]
}
    1350:	b00f      	add	sp, #60	; 0x3c
    1352:	bd30      	pop	{r4, r5, pc}
    1354:	00000d48 	.word	0x00000d48
    1358:	00002710 	.word	0x00002710
    135c:	20000138 	.word	0x20000138
    1360:	42001000 	.word	0x42001000
    1364:	00000121 	.word	0x00000121
    1368:	000012d5 	.word	0x000012d5

0000136c <i2c_disable_phys>:


/** \brief This function disables the I2C peripheral. */
void i2c_disable_phys(void)
{
    136c:	b510      	push	{r4, lr}
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    136e:	4806      	ldr	r0, [pc, #24]	; (1388 <i2c_disable_phys+0x1c>)
    1370:	6804      	ldr	r4, [r0, #0]
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    1372:	4b06      	ldr	r3, [pc, #24]	; (138c <i2c_disable_phys+0x20>)
    1374:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    1376:	2383      	movs	r3, #131	; 0x83
    1378:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    137a:	7623      	strb	r3, [r4, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    137c:	6823      	ldr	r3, [r4, #0]
    137e:	2202      	movs	r2, #2
    1380:	4393      	bics	r3, r2
    1382:	6023      	str	r3, [r4, #0]
	//! [enable_module]
	i2c_master_disable(&i2c_master_instance);
	//! [enable_module]
}
    1384:	bd10      	pop	{r4, pc}
    1386:	46c0      	nop			; (mov r8, r8)
    1388:	20000138 	.word	0x20000138
    138c:	000012d5 	.word	0x000012d5

00001390 <i2c_send_start>:
 * */
uint8_t i2c_send_start(void)
{
	// Do nothing
	return I2C_FUNCTION_RETCODE_SUCCESS;
}
    1390:	2000      	movs	r0, #0
    1392:	4770      	bx	lr

00001394 <i2c_send_stop>:

/** \brief This function creates a Stop condition (SCL high, then SDA high).
 * \return status of the operation
 * */
uint8_t i2c_send_stop(void)
{
    1394:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(i2c_master_instance.hw->I2CM);
    1396:	4805      	ldr	r0, [pc, #20]	; (13ac <i2c_send_stop+0x18>)
    1398:	6804      	ldr	r4, [r0, #0]

	/* Send stop command unless arbitration is lost. */
	_i2c_master_wait_for_sync(&i2c_master_instance);
    139a:	4b05      	ldr	r3, [pc, #20]	; (13b0 <i2c_send_stop+0x1c>)
    139c:	4798      	blx	r3
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    139e:	6862      	ldr	r2, [r4, #4]
    13a0:	23c0      	movs	r3, #192	; 0xc0
    13a2:	029b      	lsls	r3, r3, #10
    13a4:	4313      	orrs	r3, r2
    13a6:	6063      	str	r3, [r4, #4]
	return I2C_FUNCTION_RETCODE_SUCCESS;
}
    13a8:	2000      	movs	r0, #0
    13aa:	bd10      	pop	{r4, pc}
    13ac:	20000138 	.word	0x20000138
    13b0:	000012d5 	.word	0x000012d5

000013b4 <i2c_send_bytes>:
 * \param[in] count number of bytes to send
 * \param[in] data pointer to tx buffer
 * \return status of the operation
 */
uint8_t i2c_send_bytes(uint8_t count, uint8_t *data)
{
    13b4:	b500      	push	{lr}
    13b6:	b085      	sub	sp, #20
	enum status_code statusCode = STATUS_OK;
	struct i2c_master_packet packet = {
    13b8:	ab01      	add	r3, sp, #4
    13ba:	4a0b      	ldr	r2, [pc, #44]	; (13e8 <i2c_send_bytes+0x34>)
    13bc:	7812      	ldrb	r2, [r2, #0]
    13be:	0852      	lsrs	r2, r2, #1
    13c0:	801a      	strh	r2, [r3, #0]
    13c2:	8058      	strh	r0, [r3, #2]
    13c4:	9102      	str	r1, [sp, #8]
    13c6:	2200      	movs	r2, #0
    13c8:	721a      	strb	r2, [r3, #8]
    13ca:	725a      	strb	r2, [r3, #9]
    13cc:	729a      	strb	r2, [r3, #10]
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	//	statusCode = i2c_master_write_packet_wait(&i2c_master_instance, &packet);
	statusCode = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &packet);
    13ce:	0019      	movs	r1, r3
    13d0:	4806      	ldr	r0, [pc, #24]	; (13ec <i2c_send_bytes+0x38>)
    13d2:	4b07      	ldr	r3, [pc, #28]	; (13f0 <i2c_send_bytes+0x3c>)
    13d4:	4798      	blx	r3
    13d6:	0003      	movs	r3, r0
	if (statusCode != STATUS_OK) return I2C_FUNCTION_RETCODE_COMM_FAIL;
    13d8:	20f0      	movs	r0, #240	; 0xf0

	// Send the stop
	//statusCode = i2c_send_stop();
	//if (statusCode != STATUS_OK) return I2C_FUNCTION_RETCODE_COMM_FAIL;

	return I2C_FUNCTION_RETCODE_SUCCESS;
    13da:	1e5a      	subs	r2, r3, #1
    13dc:	4193      	sbcs	r3, r2
    13de:	425b      	negs	r3, r3
    13e0:	4018      	ands	r0, r3
}
    13e2:	b005      	add	sp, #20
    13e4:	bd00      	pop	{pc}
    13e6:	46c0      	nop			; (mov r8, r8)
    13e8:	20000000 	.word	0x20000000
    13ec:	20000138 	.word	0x20000138
    13f0:	0000070d 	.word	0x0000070d

000013f4 <i2c_receive_bytes>:
 * \param[in] count number of bytes to receive
 * \param[out] data pointer to rx buffer
 * \return status of the operation
 */
uint8_t i2c_receive_bytes(uint8_t count, uint8_t *data)
{
    13f4:	b500      	push	{lr}
    13f6:	b085      	sub	sp, #20
	enum status_code statusCode = I2C_FUNCTION_RETCODE_SUCCESS;
	struct i2c_master_packet packet = {
    13f8:	ab01      	add	r3, sp, #4
    13fa:	4a0e      	ldr	r2, [pc, #56]	; (1434 <i2c_receive_bytes+0x40>)
    13fc:	7812      	ldrb	r2, [r2, #0]
    13fe:	0852      	lsrs	r2, r2, #1
    1400:	801a      	strh	r2, [r3, #0]
    1402:	8058      	strh	r0, [r3, #2]
    1404:	9102      	str	r1, [sp, #8]
    1406:	2200      	movs	r2, #0
    1408:	721a      	strb	r2, [r3, #8]
    140a:	725a      	strb	r2, [r3, #9]
    140c:	729a      	strb	r2, [r3, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	statusCode = i2c_master_read_packet_wait(&i2c_master_instance, &packet);
    140e:	0019      	movs	r1, r3
    1410:	4809      	ldr	r0, [pc, #36]	; (1438 <i2c_receive_bytes+0x44>)
    1412:	4b0a      	ldr	r3, [pc, #40]	; (143c <i2c_receive_bytes+0x48>)
    1414:	4798      	blx	r3
	if (statusCode != STATUS_OK)
	{
		return I2C_FUNCTION_RETCODE_COMM_FAIL;
    1416:	23f0      	movs	r3, #240	; 0xf0
	if (statusCode != STATUS_OK)
    1418:	2800      	cmp	r0, #0
    141a:	d002      	beq.n	1422 <i2c_receive_bytes+0x2e>
	
	statusCode = i2c_send_stop();
	if (statusCode != I2C_FUNCTION_RETCODE_SUCCESS) return I2C_FUNCTION_RETCODE_COMM_FAIL;
	
	return I2C_FUNCTION_RETCODE_SUCCESS;
}
    141c:	0018      	movs	r0, r3
    141e:	b005      	add	sp, #20
    1420:	bd00      	pop	{pc}
	statusCode = i2c_send_stop();
    1422:	4b07      	ldr	r3, [pc, #28]	; (1440 <i2c_receive_bytes+0x4c>)
    1424:	4798      	blx	r3
	if (statusCode != I2C_FUNCTION_RETCODE_SUCCESS) return I2C_FUNCTION_RETCODE_COMM_FAIL;
    1426:	23f0      	movs	r3, #240	; 0xf0
	return I2C_FUNCTION_RETCODE_SUCCESS;
    1428:	1e42      	subs	r2, r0, #1
    142a:	4190      	sbcs	r0, r2
    142c:	4240      	negs	r0, r0
    142e:	4003      	ands	r3, r0
    1430:	e7f4      	b.n	141c <i2c_receive_bytes+0x28>
    1432:	46c0      	nop			; (mov r8, r8)
    1434:	20000000 	.word	0x20000000
    1438:	20000138 	.word	0x20000138
    143c:	000006f9 	.word	0x000006f9
    1440:	00001395 	.word	0x00001395

00001444 <i2c_send_slave_address>:
 */
uint8_t i2c_send_slave_address(uint8_t read)
{
	// Do nothing
	return AES132_FUNCTION_RETCODE_SUCCESS;
}
    1444:	2000      	movs	r0, #0
    1446:	4770      	bx	lr

00001448 <write_memory_test>:
uint8_t  g_packet_block[PACKET_BLOCK_SIZE_MAX];
uint16_t g_packet_block_index;


uint8_t write_memory_test(void)
{
    1448:	b570      	push	{r4, r5, r6, lr}
	// -------------------- Write memory. -----------------------------------
	// Don't put this in an infinite loop. Otherwise the non-volatile memory will wear out.
	strcpy(string, "Write memory test!\r\n");
    144a:	4824      	ldr	r0, [pc, #144]	; (14dc <write_memory_test+0x94>)
    144c:	4b24      	ldr	r3, [pc, #144]	; (14e0 <write_memory_test+0x98>)
    144e:	0002      	movs	r2, r0
    1450:	cb32      	ldmia	r3!, {r1, r4, r5}
    1452:	c232      	stmia	r2!, {r1, r4, r5}
    1454:	cb12      	ldmia	r3!, {r1, r4}
    1456:	c212      	stmia	r2!, {r1, r4}
    1458:	781b      	ldrb	r3, [r3, #0]
    145a:	7013      	strb	r3, [r2, #0]
	usartWriteBuffer(string, sizeof(string));
    145c:	21c8      	movs	r1, #200	; 0xc8
    145e:	4b21      	ldr	r3, [pc, #132]	; (14e4 <write_memory_test+0x9c>)
    1460:	4798      	blx	r3
	
	aes132_lib_return = aes132m_write_memory(sizeof(tx_buffer_write), word_address, tx_buffer_write);
    1462:	4b21      	ldr	r3, [pc, #132]	; (14e8 <write_memory_test+0xa0>)
    1464:	8819      	ldrh	r1, [r3, #0]
    1466:	4a21      	ldr	r2, [pc, #132]	; (14ec <write_memory_test+0xa4>)
    1468:	2004      	movs	r0, #4
    146a:	4b21      	ldr	r3, [pc, #132]	; (14f0 <write_memory_test+0xa8>)
    146c:	4798      	blx	r3
    146e:	4b21      	ldr	r3, [pc, #132]	; (14f4 <write_memory_test+0xac>)
    1470:	7018      	strb	r0, [r3, #0]
	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
    1472:	2800      	cmp	r0, #0
    1474:	d010      	beq.n	1498 <write_memory_test+0x50>
		strcpy(string, "Write memory failed!\r\n");
    1476:	4819      	ldr	r0, [pc, #100]	; (14dc <write_memory_test+0x94>)
    1478:	4b1f      	ldr	r3, [pc, #124]	; (14f8 <write_memory_test+0xb0>)
    147a:	0002      	movs	r2, r0
    147c:	cb32      	ldmia	r3!, {r1, r4, r5}
    147e:	c232      	stmia	r2!, {r1, r4, r5}
    1480:	cb12      	ldmia	r3!, {r1, r4}
    1482:	c212      	stmia	r2!, {r1, r4}
    1484:	8819      	ldrh	r1, [r3, #0]
    1486:	8011      	strh	r1, [r2, #0]
    1488:	789b      	ldrb	r3, [r3, #2]
    148a:	7093      	strb	r3, [r2, #2]
		usartWriteBuffer(string, sizeof(string));
    148c:	21c8      	movs	r1, #200	; 0xc8
    148e:	4b15      	ldr	r3, [pc, #84]	; (14e4 <write_memory_test+0x9c>)
    1490:	4798      	blx	r3
		return aes132_lib_return;
    1492:	4b18      	ldr	r3, [pc, #96]	; (14f4 <write_memory_test+0xac>)
    1494:	7818      	ldrb	r0, [r3, #0]
	usartWriteBuffer(string, sizeof(string));
	usartWriteHex(tx_buffer_write, sizeof(tx_buffer_write));
	strcpy(string, "\r\n");
	usartWriteBuffer(string, sizeof(string));
	
}
    1496:	bd70      	pop	{r4, r5, r6, pc}
	strcpy(string, "Write memory success!\r\n");
    1498:	4c10      	ldr	r4, [pc, #64]	; (14dc <write_memory_test+0x94>)
    149a:	4b18      	ldr	r3, [pc, #96]	; (14fc <write_memory_test+0xb4>)
    149c:	0022      	movs	r2, r4
    149e:	cb23      	ldmia	r3!, {r0, r1, r5}
    14a0:	c223      	stmia	r2!, {r0, r1, r5}
    14a2:	cb23      	ldmia	r3!, {r0, r1, r5}
    14a4:	c223      	stmia	r2!, {r0, r1, r5}
	usartWriteBuffer(string, sizeof(string));
    14a6:	21c8      	movs	r1, #200	; 0xc8
    14a8:	0020      	movs	r0, r4
    14aa:	4d0e      	ldr	r5, [pc, #56]	; (14e4 <write_memory_test+0x9c>)
    14ac:	47a8      	blx	r5
	strcpy(string, "Data: ");
    14ae:	4b14      	ldr	r3, [pc, #80]	; (1500 <write_memory_test+0xb8>)
    14b0:	681a      	ldr	r2, [r3, #0]
    14b2:	6022      	str	r2, [r4, #0]
    14b4:	889a      	ldrh	r2, [r3, #4]
    14b6:	80a2      	strh	r2, [r4, #4]
    14b8:	799b      	ldrb	r3, [r3, #6]
    14ba:	71a3      	strb	r3, [r4, #6]
	usartWriteBuffer(string, sizeof(string));
    14bc:	21c8      	movs	r1, #200	; 0xc8
    14be:	0020      	movs	r0, r4
    14c0:	47a8      	blx	r5
	usartWriteHex(tx_buffer_write, sizeof(tx_buffer_write));
    14c2:	2104      	movs	r1, #4
    14c4:	4809      	ldr	r0, [pc, #36]	; (14ec <write_memory_test+0xa4>)
    14c6:	4b0f      	ldr	r3, [pc, #60]	; (1504 <write_memory_test+0xbc>)
    14c8:	4798      	blx	r3
	strcpy(string, "\r\n");
    14ca:	4b0f      	ldr	r3, [pc, #60]	; (1508 <write_memory_test+0xc0>)
    14cc:	881a      	ldrh	r2, [r3, #0]
    14ce:	8022      	strh	r2, [r4, #0]
    14d0:	789b      	ldrb	r3, [r3, #2]
    14d2:	70a3      	strb	r3, [r4, #2]
	usartWriteBuffer(string, sizeof(string));
    14d4:	21c8      	movs	r1, #200	; 0xc8
    14d6:	0020      	movs	r0, r4
    14d8:	47a8      	blx	r5
}
    14da:	e7dc      	b.n	1496 <write_memory_test+0x4e>
    14dc:	2000004c 	.word	0x2000004c
    14e0:	00003a48 	.word	0x00003a48
    14e4:	00001da5 	.word	0x00001da5
    14e8:	20000114 	.word	0x20000114
    14ec:	20000004 	.word	0x20000004
    14f0:	000011a1 	.word	0x000011a1
    14f4:	200002cd 	.word	0x200002cd
    14f8:	00003a60 	.word	0x00003a60
    14fc:	00003a78 	.word	0x00003a78
    1500:	00003a90 	.word	0x00003a90
    1504:	00001dbd 	.word	0x00001dbd
    1508:	00003a74 	.word	0x00003a74

0000150c <main>:

int main (void)
{
    150c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	system_init();
    150e:	4b1a      	ldr	r3, [pc, #104]	; (1578 <main+0x6c>)
    1510:	4798      	blx	r3
	configureUsart();
    1512:	4b1a      	ldr	r3, [pc, #104]	; (157c <main+0x70>)
    1514:	4798      	blx	r3

	aes132p_enable_interface();
    1516:	4b1a      	ldr	r3, [pc, #104]	; (1580 <main+0x74>)
    1518:	4798      	blx	r3

		usartClearWindow();
    151a:	4b1a      	ldr	r3, [pc, #104]	; (1584 <main+0x78>)
    151c:	4798      	blx	r3
		strcpy(string, "ATECC132A                           \n\r");
    151e:	481a      	ldr	r0, [pc, #104]	; (1588 <main+0x7c>)
    1520:	4b1a      	ldr	r3, [pc, #104]	; (158c <main+0x80>)
    1522:	0002      	movs	r2, r0
    1524:	cb32      	ldmia	r3!, {r1, r4, r5}
    1526:	c232      	stmia	r2!, {r1, r4, r5}
    1528:	cb32      	ldmia	r3!, {r1, r4, r5}
    152a:	c232      	stmia	r2!, {r1, r4, r5}
    152c:	cb32      	ldmia	r3!, {r1, r4, r5}
    152e:	c232      	stmia	r2!, {r1, r4, r5}
    1530:	8819      	ldrh	r1, [r3, #0]
    1532:	8011      	strh	r1, [r2, #0]
    1534:	789b      	ldrb	r3, [r3, #2]
    1536:	7093      	strb	r3, [r2, #2]
		usartWriteBuffer(string, sizeof(string));
    1538:	21c8      	movs	r1, #200	; 0xc8
    153a:	4b15      	ldr	r3, [pc, #84]	; (1590 <main+0x84>)
    153c:	4798      	blx	r3
		write_memory_test();
    153e:	4b15      	ldr	r3, [pc, #84]	; (1594 <main+0x88>)
    1540:	4798      	blx	r3

	while (1) {
		usart_write_buffer_wait(&USART, (uint8_t *)"\033[5B", 6);
    1542:	4d15      	ldr	r5, [pc, #84]	; (1598 <main+0x8c>)
    1544:	4e15      	ldr	r6, [pc, #84]	; (159c <main+0x90>)
    1546:	2206      	movs	r2, #6
    1548:	0029      	movs	r1, r5
    154a:	4815      	ldr	r0, [pc, #84]	; (15a0 <main+0x94>)
    154c:	47b0      	blx	r6
		strcpy(string, "Please enter the message:             \n\r");
    154e:	480e      	ldr	r0, [pc, #56]	; (1588 <main+0x7c>)
    1550:	4b14      	ldr	r3, [pc, #80]	; (15a4 <main+0x98>)
    1552:	0002      	movs	r2, r0
    1554:	cb92      	ldmia	r3!, {r1, r4, r7}
    1556:	c292      	stmia	r2!, {r1, r4, r7}
    1558:	cb92      	ldmia	r3!, {r1, r4, r7}
    155a:	c292      	stmia	r2!, {r1, r4, r7}
    155c:	cb92      	ldmia	r3!, {r1, r4, r7}
    155e:	c292      	stmia	r2!, {r1, r4, r7}
    1560:	6819      	ldr	r1, [r3, #0]
    1562:	6011      	str	r1, [r2, #0]
    1564:	791b      	ldrb	r3, [r3, #4]
    1566:	7113      	strb	r3, [r2, #4]
		usartWriteBuffer(string, sizeof(string));
    1568:	21c8      	movs	r1, #200	; 0xc8
    156a:	4b09      	ldr	r3, [pc, #36]	; (1590 <main+0x84>)
    156c:	4798      	blx	r3
		usartReadString(input_string, sizeof(input_string));
    156e:	2120      	movs	r1, #32
    1570:	480d      	ldr	r0, [pc, #52]	; (15a8 <main+0x9c>)
    1572:	4b0e      	ldr	r3, [pc, #56]	; (15ac <main+0xa0>)
    1574:	4798      	blx	r3
    1576:	e7e6      	b.n	1546 <main+0x3a>
    1578:	00001bf1 	.word	0x00001bf1
    157c:	00001d05 	.word	0x00001d05
    1580:	000011b1 	.word	0x000011b1
    1584:	00001f05 	.word	0x00001f05
    1588:	2000004c 	.word	0x2000004c
    158c:	000039ec 	.word	0x000039ec
    1590:	00001da5 	.word	0x00001da5
    1594:	00001449 	.word	0x00001449
    1598:	00003a14 	.word	0x00003a14
    159c:	00000e25 	.word	0x00000e25
    15a0:	200002c0 	.word	0x200002c0
    15a4:	00003a1c 	.word	0x00003a1c
    15a8:	2000002c 	.word	0x2000002c
    15ac:	00001e45 	.word	0x00001e45

000015b0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    15b0:	4b0c      	ldr	r3, [pc, #48]	; (15e4 <cpu_irq_enter_critical+0x34>)
    15b2:	681b      	ldr	r3, [r3, #0]
    15b4:	2b00      	cmp	r3, #0
    15b6:	d106      	bne.n	15c6 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    15b8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    15bc:	2b00      	cmp	r3, #0
    15be:	d007      	beq.n	15d0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    15c0:	2200      	movs	r2, #0
    15c2:	4b09      	ldr	r3, [pc, #36]	; (15e8 <cpu_irq_enter_critical+0x38>)
    15c4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    15c6:	4a07      	ldr	r2, [pc, #28]	; (15e4 <cpu_irq_enter_critical+0x34>)
    15c8:	6813      	ldr	r3, [r2, #0]
    15ca:	3301      	adds	r3, #1
    15cc:	6013      	str	r3, [r2, #0]
}
    15ce:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    15d0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    15d2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    15d6:	2200      	movs	r2, #0
    15d8:	4b04      	ldr	r3, [pc, #16]	; (15ec <cpu_irq_enter_critical+0x3c>)
    15da:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    15dc:	3201      	adds	r2, #1
    15de:	4b02      	ldr	r3, [pc, #8]	; (15e8 <cpu_irq_enter_critical+0x38>)
    15e0:	701a      	strb	r2, [r3, #0]
    15e2:	e7f0      	b.n	15c6 <cpu_irq_enter_critical+0x16>
    15e4:	20000118 	.word	0x20000118
    15e8:	2000011c 	.word	0x2000011c
    15ec:	20000008 	.word	0x20000008

000015f0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    15f0:	4b08      	ldr	r3, [pc, #32]	; (1614 <cpu_irq_leave_critical+0x24>)
    15f2:	681a      	ldr	r2, [r3, #0]
    15f4:	3a01      	subs	r2, #1
    15f6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    15f8:	681b      	ldr	r3, [r3, #0]
    15fa:	2b00      	cmp	r3, #0
    15fc:	d109      	bne.n	1612 <cpu_irq_leave_critical+0x22>
    15fe:	4b06      	ldr	r3, [pc, #24]	; (1618 <cpu_irq_leave_critical+0x28>)
    1600:	781b      	ldrb	r3, [r3, #0]
    1602:	2b00      	cmp	r3, #0
    1604:	d005      	beq.n	1612 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1606:	2201      	movs	r2, #1
    1608:	4b04      	ldr	r3, [pc, #16]	; (161c <cpu_irq_leave_critical+0x2c>)
    160a:	701a      	strb	r2, [r3, #0]
    160c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1610:	b662      	cpsie	i
	}
}
    1612:	4770      	bx	lr
    1614:	20000118 	.word	0x20000118
    1618:	2000011c 	.word	0x2000011c
    161c:	20000008 	.word	0x20000008

00001620 <system_board_init>:




void system_board_init(void)
{
    1620:	b5f0      	push	{r4, r5, r6, r7, lr}
    1622:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1624:	ac01      	add	r4, sp, #4
    1626:	2501      	movs	r5, #1
    1628:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    162a:	2700      	movs	r7, #0
    162c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    162e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1630:	0021      	movs	r1, r4
    1632:	2013      	movs	r0, #19
    1634:	4e06      	ldr	r6, [pc, #24]	; (1650 <system_board_init+0x30>)
    1636:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1638:	2280      	movs	r2, #128	; 0x80
    163a:	0312      	lsls	r2, r2, #12
    163c:	4b05      	ldr	r3, [pc, #20]	; (1654 <system_board_init+0x34>)
    163e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1640:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1642:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1644:	0021      	movs	r1, r4
    1646:	201c      	movs	r0, #28
    1648:	47b0      	blx	r6
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
#endif

}
    164a:	b003      	add	sp, #12
    164c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    164e:	46c0      	nop			; (mov r8, r8)
    1650:	00001659 	.word	0x00001659
    1654:	41004400 	.word	0x41004400

00001658 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1658:	b500      	push	{lr}
    165a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    165c:	ab01      	add	r3, sp, #4
    165e:	2280      	movs	r2, #128	; 0x80
    1660:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1662:	780a      	ldrb	r2, [r1, #0]
    1664:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1666:	784a      	ldrb	r2, [r1, #1]
    1668:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    166a:	788a      	ldrb	r2, [r1, #2]
    166c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    166e:	0019      	movs	r1, r3
    1670:	4b01      	ldr	r3, [pc, #4]	; (1678 <port_pin_set_config+0x20>)
    1672:	4798      	blx	r3
}
    1674:	b003      	add	sp, #12
    1676:	bd00      	pop	{pc}
    1678:	00001bbd 	.word	0x00001bbd

0000167c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    167c:	b510      	push	{r4, lr}
	switch (clock_source) {
    167e:	2808      	cmp	r0, #8
    1680:	d803      	bhi.n	168a <system_clock_source_get_hz+0xe>
    1682:	0080      	lsls	r0, r0, #2
    1684:	4b1c      	ldr	r3, [pc, #112]	; (16f8 <system_clock_source_get_hz+0x7c>)
    1686:	581b      	ldr	r3, [r3, r0]
    1688:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    168a:	2000      	movs	r0, #0
    168c:	e032      	b.n	16f4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    168e:	4b1b      	ldr	r3, [pc, #108]	; (16fc <system_clock_source_get_hz+0x80>)
    1690:	6918      	ldr	r0, [r3, #16]
    1692:	e02f      	b.n	16f4 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1694:	4b1a      	ldr	r3, [pc, #104]	; (1700 <system_clock_source_get_hz+0x84>)
    1696:	6a1b      	ldr	r3, [r3, #32]
    1698:	059b      	lsls	r3, r3, #22
    169a:	0f9b      	lsrs	r3, r3, #30
    169c:	4819      	ldr	r0, [pc, #100]	; (1704 <system_clock_source_get_hz+0x88>)
    169e:	40d8      	lsrs	r0, r3
    16a0:	e028      	b.n	16f4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    16a2:	4b16      	ldr	r3, [pc, #88]	; (16fc <system_clock_source_get_hz+0x80>)
    16a4:	6958      	ldr	r0, [r3, #20]
    16a6:	e025      	b.n	16f4 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    16a8:	4b14      	ldr	r3, [pc, #80]	; (16fc <system_clock_source_get_hz+0x80>)
    16aa:	681b      	ldr	r3, [r3, #0]
			return 0;
    16ac:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    16ae:	079b      	lsls	r3, r3, #30
    16b0:	d520      	bpl.n	16f4 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    16b2:	4913      	ldr	r1, [pc, #76]	; (1700 <system_clock_source_get_hz+0x84>)
    16b4:	2210      	movs	r2, #16
    16b6:	68cb      	ldr	r3, [r1, #12]
    16b8:	421a      	tst	r2, r3
    16ba:	d0fc      	beq.n	16b6 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    16bc:	4b0f      	ldr	r3, [pc, #60]	; (16fc <system_clock_source_get_hz+0x80>)
    16be:	681a      	ldr	r2, [r3, #0]
    16c0:	2324      	movs	r3, #36	; 0x24
    16c2:	4013      	ands	r3, r2
    16c4:	2b04      	cmp	r3, #4
    16c6:	d001      	beq.n	16cc <system_clock_source_get_hz+0x50>
			return 48000000UL;
    16c8:	480f      	ldr	r0, [pc, #60]	; (1708 <system_clock_source_get_hz+0x8c>)
    16ca:	e013      	b.n	16f4 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    16cc:	2000      	movs	r0, #0
    16ce:	4b0f      	ldr	r3, [pc, #60]	; (170c <system_clock_source_get_hz+0x90>)
    16d0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    16d2:	4b0a      	ldr	r3, [pc, #40]	; (16fc <system_clock_source_get_hz+0x80>)
    16d4:	689b      	ldr	r3, [r3, #8]
    16d6:	041b      	lsls	r3, r3, #16
    16d8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    16da:	4358      	muls	r0, r3
    16dc:	e00a      	b.n	16f4 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    16de:	2350      	movs	r3, #80	; 0x50
    16e0:	4a07      	ldr	r2, [pc, #28]	; (1700 <system_clock_source_get_hz+0x84>)
    16e2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    16e4:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    16e6:	075b      	lsls	r3, r3, #29
    16e8:	d504      	bpl.n	16f4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    16ea:	4b04      	ldr	r3, [pc, #16]	; (16fc <system_clock_source_get_hz+0x80>)
    16ec:	68d8      	ldr	r0, [r3, #12]
    16ee:	e001      	b.n	16f4 <system_clock_source_get_hz+0x78>
		return 32768UL;
    16f0:	2080      	movs	r0, #128	; 0x80
    16f2:	0200      	lsls	r0, r0, #8
	}
}
    16f4:	bd10      	pop	{r4, pc}
    16f6:	46c0      	nop			; (mov r8, r8)
    16f8:	00003a98 	.word	0x00003a98
    16fc:	20000120 	.word	0x20000120
    1700:	40000800 	.word	0x40000800
    1704:	007a1200 	.word	0x007a1200
    1708:	02dc6c00 	.word	0x02dc6c00
    170c:	00001ae1 	.word	0x00001ae1

00001710 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1710:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1712:	490c      	ldr	r1, [pc, #48]	; (1744 <system_clock_source_osc8m_set_config+0x34>)
    1714:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1716:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1718:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    171a:	7840      	ldrb	r0, [r0, #1]
    171c:	2201      	movs	r2, #1
    171e:	4010      	ands	r0, r2
    1720:	0180      	lsls	r0, r0, #6
    1722:	2640      	movs	r6, #64	; 0x40
    1724:	43b3      	bics	r3, r6
    1726:	4303      	orrs	r3, r0
    1728:	402a      	ands	r2, r5
    172a:	01d2      	lsls	r2, r2, #7
    172c:	2080      	movs	r0, #128	; 0x80
    172e:	4383      	bics	r3, r0
    1730:	4313      	orrs	r3, r2
    1732:	2203      	movs	r2, #3
    1734:	4022      	ands	r2, r4
    1736:	0212      	lsls	r2, r2, #8
    1738:	4803      	ldr	r0, [pc, #12]	; (1748 <system_clock_source_osc8m_set_config+0x38>)
    173a:	4003      	ands	r3, r0
    173c:	4313      	orrs	r3, r2
    173e:	620b      	str	r3, [r1, #32]
}
    1740:	bd70      	pop	{r4, r5, r6, pc}
    1742:	46c0      	nop			; (mov r8, r8)
    1744:	40000800 	.word	0x40000800
    1748:	fffffcff 	.word	0xfffffcff

0000174c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    174c:	2808      	cmp	r0, #8
    174e:	d803      	bhi.n	1758 <system_clock_source_enable+0xc>
    1750:	0080      	lsls	r0, r0, #2
    1752:	4b25      	ldr	r3, [pc, #148]	; (17e8 <system_clock_source_enable+0x9c>)
    1754:	581b      	ldr	r3, [r3, r0]
    1756:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1758:	2017      	movs	r0, #23
    175a:	e044      	b.n	17e6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    175c:	4a23      	ldr	r2, [pc, #140]	; (17ec <system_clock_source_enable+0xa0>)
    175e:	6a13      	ldr	r3, [r2, #32]
    1760:	2102      	movs	r1, #2
    1762:	430b      	orrs	r3, r1
    1764:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1766:	2000      	movs	r0, #0
    1768:	e03d      	b.n	17e6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    176a:	4a20      	ldr	r2, [pc, #128]	; (17ec <system_clock_source_enable+0xa0>)
    176c:	6993      	ldr	r3, [r2, #24]
    176e:	2102      	movs	r1, #2
    1770:	430b      	orrs	r3, r1
    1772:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1774:	2000      	movs	r0, #0
		break;
    1776:	e036      	b.n	17e6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1778:	4a1c      	ldr	r2, [pc, #112]	; (17ec <system_clock_source_enable+0xa0>)
    177a:	8a13      	ldrh	r3, [r2, #16]
    177c:	2102      	movs	r1, #2
    177e:	430b      	orrs	r3, r1
    1780:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1782:	2000      	movs	r0, #0
		break;
    1784:	e02f      	b.n	17e6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1786:	4a19      	ldr	r2, [pc, #100]	; (17ec <system_clock_source_enable+0xa0>)
    1788:	8a93      	ldrh	r3, [r2, #20]
    178a:	2102      	movs	r1, #2
    178c:	430b      	orrs	r3, r1
    178e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1790:	2000      	movs	r0, #0
		break;
    1792:	e028      	b.n	17e6 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1794:	4916      	ldr	r1, [pc, #88]	; (17f0 <system_clock_source_enable+0xa4>)
    1796:	680b      	ldr	r3, [r1, #0]
    1798:	2202      	movs	r2, #2
    179a:	4313      	orrs	r3, r2
    179c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    179e:	4b13      	ldr	r3, [pc, #76]	; (17ec <system_clock_source_enable+0xa0>)
    17a0:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    17a2:	0019      	movs	r1, r3
    17a4:	320e      	adds	r2, #14
    17a6:	68cb      	ldr	r3, [r1, #12]
    17a8:	421a      	tst	r2, r3
    17aa:	d0fc      	beq.n	17a6 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    17ac:	4a10      	ldr	r2, [pc, #64]	; (17f0 <system_clock_source_enable+0xa4>)
    17ae:	6891      	ldr	r1, [r2, #8]
    17b0:	4b0e      	ldr	r3, [pc, #56]	; (17ec <system_clock_source_enable+0xa0>)
    17b2:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    17b4:	6852      	ldr	r2, [r2, #4]
    17b6:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    17b8:	2200      	movs	r2, #0
    17ba:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    17bc:	0019      	movs	r1, r3
    17be:	3210      	adds	r2, #16
    17c0:	68cb      	ldr	r3, [r1, #12]
    17c2:	421a      	tst	r2, r3
    17c4:	d0fc      	beq.n	17c0 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    17c6:	4b0a      	ldr	r3, [pc, #40]	; (17f0 <system_clock_source_enable+0xa4>)
    17c8:	681b      	ldr	r3, [r3, #0]
    17ca:	b29b      	uxth	r3, r3
    17cc:	4a07      	ldr	r2, [pc, #28]	; (17ec <system_clock_source_enable+0xa0>)
    17ce:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    17d0:	2000      	movs	r0, #0
    17d2:	e008      	b.n	17e6 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    17d4:	4905      	ldr	r1, [pc, #20]	; (17ec <system_clock_source_enable+0xa0>)
    17d6:	2244      	movs	r2, #68	; 0x44
    17d8:	5c8b      	ldrb	r3, [r1, r2]
    17da:	2002      	movs	r0, #2
    17dc:	4303      	orrs	r3, r0
    17de:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    17e0:	2000      	movs	r0, #0
		break;
    17e2:	e000      	b.n	17e6 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    17e4:	2000      	movs	r0, #0
}
    17e6:	4770      	bx	lr
    17e8:	00003abc 	.word	0x00003abc
    17ec:	40000800 	.word	0x40000800
    17f0:	20000120 	.word	0x20000120

000017f4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    17f4:	b530      	push	{r4, r5, lr}
    17f6:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    17f8:	22c2      	movs	r2, #194	; 0xc2
    17fa:	00d2      	lsls	r2, r2, #3
    17fc:	4b1a      	ldr	r3, [pc, #104]	; (1868 <system_clock_init+0x74>)
    17fe:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1800:	4a1a      	ldr	r2, [pc, #104]	; (186c <system_clock_init+0x78>)
    1802:	6853      	ldr	r3, [r2, #4]
    1804:	211e      	movs	r1, #30
    1806:	438b      	bics	r3, r1
    1808:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    180a:	2301      	movs	r3, #1
    180c:	466a      	mov	r2, sp
    180e:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1810:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1812:	4d17      	ldr	r5, [pc, #92]	; (1870 <system_clock_init+0x7c>)
    1814:	b2e0      	uxtb	r0, r4
    1816:	4669      	mov	r1, sp
    1818:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    181a:	3401      	adds	r4, #1
    181c:	2c25      	cmp	r4, #37	; 0x25
    181e:	d1f9      	bne.n	1814 <system_clock_init+0x20>
	config->run_in_standby  = false;
    1820:	a803      	add	r0, sp, #12
    1822:	2400      	movs	r4, #0
    1824:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1826:	2501      	movs	r5, #1
    1828:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    182a:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    182c:	4b11      	ldr	r3, [pc, #68]	; (1874 <system_clock_init+0x80>)
    182e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1830:	2006      	movs	r0, #6
    1832:	4b11      	ldr	r3, [pc, #68]	; (1878 <system_clock_init+0x84>)
    1834:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1836:	4b11      	ldr	r3, [pc, #68]	; (187c <system_clock_init+0x88>)
    1838:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    183a:	4b11      	ldr	r3, [pc, #68]	; (1880 <system_clock_init+0x8c>)
    183c:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    183e:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1840:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1842:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1844:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1846:	466b      	mov	r3, sp
    1848:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    184a:	2306      	movs	r3, #6
    184c:	466a      	mov	r2, sp
    184e:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    1850:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1852:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1854:	4669      	mov	r1, sp
    1856:	2000      	movs	r0, #0
    1858:	4b0a      	ldr	r3, [pc, #40]	; (1884 <system_clock_init+0x90>)
    185a:	4798      	blx	r3
    185c:	2000      	movs	r0, #0
    185e:	4b0a      	ldr	r3, [pc, #40]	; (1888 <system_clock_init+0x94>)
    1860:	4798      	blx	r3
#endif
}
    1862:	b005      	add	sp, #20
    1864:	bd30      	pop	{r4, r5, pc}
    1866:	46c0      	nop			; (mov r8, r8)
    1868:	40000800 	.word	0x40000800
    186c:	41004000 	.word	0x41004000
    1870:	00001ac5 	.word	0x00001ac5
    1874:	00001711 	.word	0x00001711
    1878:	0000174d 	.word	0x0000174d
    187c:	0000188d 	.word	0x0000188d
    1880:	40000400 	.word	0x40000400
    1884:	000018b1 	.word	0x000018b1
    1888:	00001969 	.word	0x00001969

0000188c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    188c:	4a06      	ldr	r2, [pc, #24]	; (18a8 <system_gclk_init+0x1c>)
    188e:	6993      	ldr	r3, [r2, #24]
    1890:	2108      	movs	r1, #8
    1892:	430b      	orrs	r3, r1
    1894:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1896:	2201      	movs	r2, #1
    1898:	4b04      	ldr	r3, [pc, #16]	; (18ac <system_gclk_init+0x20>)
    189a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    189c:	0019      	movs	r1, r3
    189e:	780b      	ldrb	r3, [r1, #0]
    18a0:	4213      	tst	r3, r2
    18a2:	d1fc      	bne.n	189e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    18a4:	4770      	bx	lr
    18a6:	46c0      	nop			; (mov r8, r8)
    18a8:	40000400 	.word	0x40000400
    18ac:	40000c00 	.word	0x40000c00

000018b0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    18b0:	b570      	push	{r4, r5, r6, lr}
    18b2:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    18b4:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    18b6:	780d      	ldrb	r5, [r1, #0]
    18b8:	022d      	lsls	r5, r5, #8
    18ba:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    18bc:	784b      	ldrb	r3, [r1, #1]
    18be:	2b00      	cmp	r3, #0
    18c0:	d002      	beq.n	18c8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    18c2:	2380      	movs	r3, #128	; 0x80
    18c4:	02db      	lsls	r3, r3, #11
    18c6:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    18c8:	7a4b      	ldrb	r3, [r1, #9]
    18ca:	2b00      	cmp	r3, #0
    18cc:	d002      	beq.n	18d4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    18ce:	2380      	movs	r3, #128	; 0x80
    18d0:	031b      	lsls	r3, r3, #12
    18d2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    18d4:	6848      	ldr	r0, [r1, #4]
    18d6:	2801      	cmp	r0, #1
    18d8:	d910      	bls.n	18fc <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    18da:	1e43      	subs	r3, r0, #1
    18dc:	4218      	tst	r0, r3
    18de:	d134      	bne.n	194a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    18e0:	2802      	cmp	r0, #2
    18e2:	d930      	bls.n	1946 <system_gclk_gen_set_config+0x96>
    18e4:	2302      	movs	r3, #2
    18e6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    18e8:	3201      	adds	r2, #1
						mask <<= 1) {
    18ea:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    18ec:	4298      	cmp	r0, r3
    18ee:	d8fb      	bhi.n	18e8 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    18f0:	0212      	lsls	r2, r2, #8
    18f2:	4332      	orrs	r2, r6
    18f4:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    18f6:	2380      	movs	r3, #128	; 0x80
    18f8:	035b      	lsls	r3, r3, #13
    18fa:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    18fc:	7a0b      	ldrb	r3, [r1, #8]
    18fe:	2b00      	cmp	r3, #0
    1900:	d002      	beq.n	1908 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1902:	2380      	movs	r3, #128	; 0x80
    1904:	039b      	lsls	r3, r3, #14
    1906:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1908:	4a13      	ldr	r2, [pc, #76]	; (1958 <system_gclk_gen_set_config+0xa8>)
    190a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    190c:	b25b      	sxtb	r3, r3
    190e:	2b00      	cmp	r3, #0
    1910:	dbfb      	blt.n	190a <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1912:	4b12      	ldr	r3, [pc, #72]	; (195c <system_gclk_gen_set_config+0xac>)
    1914:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1916:	4b12      	ldr	r3, [pc, #72]	; (1960 <system_gclk_gen_set_config+0xb0>)
    1918:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    191a:	4a0f      	ldr	r2, [pc, #60]	; (1958 <system_gclk_gen_set_config+0xa8>)
    191c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    191e:	b25b      	sxtb	r3, r3
    1920:	2b00      	cmp	r3, #0
    1922:	dbfb      	blt.n	191c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1924:	4b0c      	ldr	r3, [pc, #48]	; (1958 <system_gclk_gen_set_config+0xa8>)
    1926:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1928:	001a      	movs	r2, r3
    192a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    192c:	b25b      	sxtb	r3, r3
    192e:	2b00      	cmp	r3, #0
    1930:	dbfb      	blt.n	192a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1932:	4a09      	ldr	r2, [pc, #36]	; (1958 <system_gclk_gen_set_config+0xa8>)
    1934:	6853      	ldr	r3, [r2, #4]
    1936:	2180      	movs	r1, #128	; 0x80
    1938:	0249      	lsls	r1, r1, #9
    193a:	400b      	ands	r3, r1
    193c:	431d      	orrs	r5, r3
    193e:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1940:	4b08      	ldr	r3, [pc, #32]	; (1964 <system_gclk_gen_set_config+0xb4>)
    1942:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1944:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1946:	2200      	movs	r2, #0
    1948:	e7d2      	b.n	18f0 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    194a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    194c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    194e:	2380      	movs	r3, #128	; 0x80
    1950:	029b      	lsls	r3, r3, #10
    1952:	431d      	orrs	r5, r3
    1954:	e7d2      	b.n	18fc <system_gclk_gen_set_config+0x4c>
    1956:	46c0      	nop			; (mov r8, r8)
    1958:	40000c00 	.word	0x40000c00
    195c:	000015b1 	.word	0x000015b1
    1960:	40000c08 	.word	0x40000c08
    1964:	000015f1 	.word	0x000015f1

00001968 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1968:	b510      	push	{r4, lr}
    196a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    196c:	4a0b      	ldr	r2, [pc, #44]	; (199c <system_gclk_gen_enable+0x34>)
    196e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1970:	b25b      	sxtb	r3, r3
    1972:	2b00      	cmp	r3, #0
    1974:	dbfb      	blt.n	196e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1976:	4b0a      	ldr	r3, [pc, #40]	; (19a0 <system_gclk_gen_enable+0x38>)
    1978:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    197a:	4b0a      	ldr	r3, [pc, #40]	; (19a4 <system_gclk_gen_enable+0x3c>)
    197c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    197e:	4a07      	ldr	r2, [pc, #28]	; (199c <system_gclk_gen_enable+0x34>)
    1980:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1982:	b25b      	sxtb	r3, r3
    1984:	2b00      	cmp	r3, #0
    1986:	dbfb      	blt.n	1980 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1988:	4a04      	ldr	r2, [pc, #16]	; (199c <system_gclk_gen_enable+0x34>)
    198a:	6851      	ldr	r1, [r2, #4]
    198c:	2380      	movs	r3, #128	; 0x80
    198e:	025b      	lsls	r3, r3, #9
    1990:	430b      	orrs	r3, r1
    1992:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1994:	4b04      	ldr	r3, [pc, #16]	; (19a8 <system_gclk_gen_enable+0x40>)
    1996:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1998:	bd10      	pop	{r4, pc}
    199a:	46c0      	nop			; (mov r8, r8)
    199c:	40000c00 	.word	0x40000c00
    19a0:	000015b1 	.word	0x000015b1
    19a4:	40000c04 	.word	0x40000c04
    19a8:	000015f1 	.word	0x000015f1

000019ac <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    19ac:	b570      	push	{r4, r5, r6, lr}
    19ae:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19b0:	4a1a      	ldr	r2, [pc, #104]	; (1a1c <system_gclk_gen_get_hz+0x70>)
    19b2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    19b4:	b25b      	sxtb	r3, r3
    19b6:	2b00      	cmp	r3, #0
    19b8:	dbfb      	blt.n	19b2 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    19ba:	4b19      	ldr	r3, [pc, #100]	; (1a20 <system_gclk_gen_get_hz+0x74>)
    19bc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    19be:	4b19      	ldr	r3, [pc, #100]	; (1a24 <system_gclk_gen_get_hz+0x78>)
    19c0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19c2:	4a16      	ldr	r2, [pc, #88]	; (1a1c <system_gclk_gen_get_hz+0x70>)
    19c4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    19c6:	b25b      	sxtb	r3, r3
    19c8:	2b00      	cmp	r3, #0
    19ca:	dbfb      	blt.n	19c4 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    19cc:	4e13      	ldr	r6, [pc, #76]	; (1a1c <system_gclk_gen_get_hz+0x70>)
    19ce:	6870      	ldr	r0, [r6, #4]
    19d0:	04c0      	lsls	r0, r0, #19
    19d2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    19d4:	4b14      	ldr	r3, [pc, #80]	; (1a28 <system_gclk_gen_get_hz+0x7c>)
    19d6:	4798      	blx	r3
    19d8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    19da:	4b12      	ldr	r3, [pc, #72]	; (1a24 <system_gclk_gen_get_hz+0x78>)
    19dc:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    19de:	6876      	ldr	r6, [r6, #4]
    19e0:	02f6      	lsls	r6, r6, #11
    19e2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    19e4:	4b11      	ldr	r3, [pc, #68]	; (1a2c <system_gclk_gen_get_hz+0x80>)
    19e6:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19e8:	4a0c      	ldr	r2, [pc, #48]	; (1a1c <system_gclk_gen_get_hz+0x70>)
    19ea:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    19ec:	b25b      	sxtb	r3, r3
    19ee:	2b00      	cmp	r3, #0
    19f0:	dbfb      	blt.n	19ea <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    19f2:	4b0a      	ldr	r3, [pc, #40]	; (1a1c <system_gclk_gen_get_hz+0x70>)
    19f4:	689c      	ldr	r4, [r3, #8]
    19f6:	0224      	lsls	r4, r4, #8
    19f8:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    19fa:	4b0d      	ldr	r3, [pc, #52]	; (1a30 <system_gclk_gen_get_hz+0x84>)
    19fc:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    19fe:	2e00      	cmp	r6, #0
    1a00:	d107      	bne.n	1a12 <system_gclk_gen_get_hz+0x66>
    1a02:	2c01      	cmp	r4, #1
    1a04:	d907      	bls.n	1a16 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1a06:	0021      	movs	r1, r4
    1a08:	0028      	movs	r0, r5
    1a0a:	4b0a      	ldr	r3, [pc, #40]	; (1a34 <system_gclk_gen_get_hz+0x88>)
    1a0c:	4798      	blx	r3
    1a0e:	0005      	movs	r5, r0
    1a10:	e001      	b.n	1a16 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1a12:	3401      	adds	r4, #1
    1a14:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1a16:	0028      	movs	r0, r5
    1a18:	bd70      	pop	{r4, r5, r6, pc}
    1a1a:	46c0      	nop			; (mov r8, r8)
    1a1c:	40000c00 	.word	0x40000c00
    1a20:	000015b1 	.word	0x000015b1
    1a24:	40000c04 	.word	0x40000c04
    1a28:	0000167d 	.word	0x0000167d
    1a2c:	40000c08 	.word	0x40000c08
    1a30:	000015f1 	.word	0x000015f1
    1a34:	00001f2d 	.word	0x00001f2d

00001a38 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1a38:	b510      	push	{r4, lr}
    1a3a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1a3c:	4b06      	ldr	r3, [pc, #24]	; (1a58 <system_gclk_chan_enable+0x20>)
    1a3e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a40:	4b06      	ldr	r3, [pc, #24]	; (1a5c <system_gclk_chan_enable+0x24>)
    1a42:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1a44:	4a06      	ldr	r2, [pc, #24]	; (1a60 <system_gclk_chan_enable+0x28>)
    1a46:	8853      	ldrh	r3, [r2, #2]
    1a48:	2180      	movs	r1, #128	; 0x80
    1a4a:	01c9      	lsls	r1, r1, #7
    1a4c:	430b      	orrs	r3, r1
    1a4e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1a50:	4b04      	ldr	r3, [pc, #16]	; (1a64 <system_gclk_chan_enable+0x2c>)
    1a52:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1a54:	bd10      	pop	{r4, pc}
    1a56:	46c0      	nop			; (mov r8, r8)
    1a58:	000015b1 	.word	0x000015b1
    1a5c:	40000c02 	.word	0x40000c02
    1a60:	40000c00 	.word	0x40000c00
    1a64:	000015f1 	.word	0x000015f1

00001a68 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1a68:	b510      	push	{r4, lr}
    1a6a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1a6c:	4b0f      	ldr	r3, [pc, #60]	; (1aac <system_gclk_chan_disable+0x44>)
    1a6e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a70:	4b0f      	ldr	r3, [pc, #60]	; (1ab0 <system_gclk_chan_disable+0x48>)
    1a72:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1a74:	4a0f      	ldr	r2, [pc, #60]	; (1ab4 <system_gclk_chan_disable+0x4c>)
    1a76:	8853      	ldrh	r3, [r2, #2]
    1a78:	051b      	lsls	r3, r3, #20
    1a7a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1a7c:	8853      	ldrh	r3, [r2, #2]
    1a7e:	490e      	ldr	r1, [pc, #56]	; (1ab8 <system_gclk_chan_disable+0x50>)
    1a80:	400b      	ands	r3, r1
    1a82:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1a84:	8853      	ldrh	r3, [r2, #2]
    1a86:	490d      	ldr	r1, [pc, #52]	; (1abc <system_gclk_chan_disable+0x54>)
    1a88:	400b      	ands	r3, r1
    1a8a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1a8c:	0011      	movs	r1, r2
    1a8e:	2280      	movs	r2, #128	; 0x80
    1a90:	01d2      	lsls	r2, r2, #7
    1a92:	884b      	ldrh	r3, [r1, #2]
    1a94:	4213      	tst	r3, r2
    1a96:	d1fc      	bne.n	1a92 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1a98:	4906      	ldr	r1, [pc, #24]	; (1ab4 <system_gclk_chan_disable+0x4c>)
    1a9a:	884a      	ldrh	r2, [r1, #2]
    1a9c:	0203      	lsls	r3, r0, #8
    1a9e:	4806      	ldr	r0, [pc, #24]	; (1ab8 <system_gclk_chan_disable+0x50>)
    1aa0:	4002      	ands	r2, r0
    1aa2:	4313      	orrs	r3, r2
    1aa4:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1aa6:	4b06      	ldr	r3, [pc, #24]	; (1ac0 <system_gclk_chan_disable+0x58>)
    1aa8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1aaa:	bd10      	pop	{r4, pc}
    1aac:	000015b1 	.word	0x000015b1
    1ab0:	40000c02 	.word	0x40000c02
    1ab4:	40000c00 	.word	0x40000c00
    1ab8:	fffff0ff 	.word	0xfffff0ff
    1abc:	ffffbfff 	.word	0xffffbfff
    1ac0:	000015f1 	.word	0x000015f1

00001ac4 <system_gclk_chan_set_config>:
{
    1ac4:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1ac6:	780c      	ldrb	r4, [r1, #0]
    1ac8:	0224      	lsls	r4, r4, #8
    1aca:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1acc:	4b02      	ldr	r3, [pc, #8]	; (1ad8 <system_gclk_chan_set_config+0x14>)
    1ace:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1ad0:	b2a4      	uxth	r4, r4
    1ad2:	4b02      	ldr	r3, [pc, #8]	; (1adc <system_gclk_chan_set_config+0x18>)
    1ad4:	805c      	strh	r4, [r3, #2]
}
    1ad6:	bd10      	pop	{r4, pc}
    1ad8:	00001a69 	.word	0x00001a69
    1adc:	40000c00 	.word	0x40000c00

00001ae0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1ae0:	b510      	push	{r4, lr}
    1ae2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1ae4:	4b06      	ldr	r3, [pc, #24]	; (1b00 <system_gclk_chan_get_hz+0x20>)
    1ae6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1ae8:	4b06      	ldr	r3, [pc, #24]	; (1b04 <system_gclk_chan_get_hz+0x24>)
    1aea:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1aec:	4b06      	ldr	r3, [pc, #24]	; (1b08 <system_gclk_chan_get_hz+0x28>)
    1aee:	885c      	ldrh	r4, [r3, #2]
    1af0:	0524      	lsls	r4, r4, #20
    1af2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1af4:	4b05      	ldr	r3, [pc, #20]	; (1b0c <system_gclk_chan_get_hz+0x2c>)
    1af6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1af8:	0020      	movs	r0, r4
    1afa:	4b05      	ldr	r3, [pc, #20]	; (1b10 <system_gclk_chan_get_hz+0x30>)
    1afc:	4798      	blx	r3
}
    1afe:	bd10      	pop	{r4, pc}
    1b00:	000015b1 	.word	0x000015b1
    1b04:	40000c02 	.word	0x40000c02
    1b08:	40000c00 	.word	0x40000c00
    1b0c:	000015f1 	.word	0x000015f1
    1b10:	000019ad 	.word	0x000019ad

00001b14 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1b14:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1b16:	78d3      	ldrb	r3, [r2, #3]
    1b18:	2b00      	cmp	r3, #0
    1b1a:	d135      	bne.n	1b88 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1b1c:	7813      	ldrb	r3, [r2, #0]
    1b1e:	2b80      	cmp	r3, #128	; 0x80
    1b20:	d029      	beq.n	1b76 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1b22:	061b      	lsls	r3, r3, #24
    1b24:	2480      	movs	r4, #128	; 0x80
    1b26:	0264      	lsls	r4, r4, #9
    1b28:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1b2a:	7854      	ldrb	r4, [r2, #1]
    1b2c:	2502      	movs	r5, #2
    1b2e:	43ac      	bics	r4, r5
    1b30:	d106      	bne.n	1b40 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1b32:	7894      	ldrb	r4, [r2, #2]
    1b34:	2c00      	cmp	r4, #0
    1b36:	d120      	bne.n	1b7a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1b38:	2480      	movs	r4, #128	; 0x80
    1b3a:	02a4      	lsls	r4, r4, #10
    1b3c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1b3e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1b40:	7854      	ldrb	r4, [r2, #1]
    1b42:	3c01      	subs	r4, #1
    1b44:	2c01      	cmp	r4, #1
    1b46:	d91c      	bls.n	1b82 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1b48:	040d      	lsls	r5, r1, #16
    1b4a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1b4c:	24a0      	movs	r4, #160	; 0xa0
    1b4e:	05e4      	lsls	r4, r4, #23
    1b50:	432c      	orrs	r4, r5
    1b52:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b54:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1b56:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1b58:	24d0      	movs	r4, #208	; 0xd0
    1b5a:	0624      	lsls	r4, r4, #24
    1b5c:	432c      	orrs	r4, r5
    1b5e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b60:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1b62:	78d4      	ldrb	r4, [r2, #3]
    1b64:	2c00      	cmp	r4, #0
    1b66:	d122      	bne.n	1bae <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1b68:	035b      	lsls	r3, r3, #13
    1b6a:	d51c      	bpl.n	1ba6 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1b6c:	7893      	ldrb	r3, [r2, #2]
    1b6e:	2b01      	cmp	r3, #1
    1b70:	d01e      	beq.n	1bb0 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1b72:	6141      	str	r1, [r0, #20]
    1b74:	e017      	b.n	1ba6 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1b76:	2300      	movs	r3, #0
    1b78:	e7d7      	b.n	1b2a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1b7a:	24c0      	movs	r4, #192	; 0xc0
    1b7c:	02e4      	lsls	r4, r4, #11
    1b7e:	4323      	orrs	r3, r4
    1b80:	e7dd      	b.n	1b3e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1b82:	4c0d      	ldr	r4, [pc, #52]	; (1bb8 <_system_pinmux_config+0xa4>)
    1b84:	4023      	ands	r3, r4
    1b86:	e7df      	b.n	1b48 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1b88:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1b8a:	040c      	lsls	r4, r1, #16
    1b8c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1b8e:	23a0      	movs	r3, #160	; 0xa0
    1b90:	05db      	lsls	r3, r3, #23
    1b92:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b94:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1b96:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1b98:	23d0      	movs	r3, #208	; 0xd0
    1b9a:	061b      	lsls	r3, r3, #24
    1b9c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b9e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1ba0:	78d3      	ldrb	r3, [r2, #3]
    1ba2:	2b00      	cmp	r3, #0
    1ba4:	d103      	bne.n	1bae <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1ba6:	7853      	ldrb	r3, [r2, #1]
    1ba8:	3b01      	subs	r3, #1
    1baa:	2b01      	cmp	r3, #1
    1bac:	d902      	bls.n	1bb4 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1bae:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1bb0:	6181      	str	r1, [r0, #24]
    1bb2:	e7f8      	b.n	1ba6 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1bb4:	6081      	str	r1, [r0, #8]
}
    1bb6:	e7fa      	b.n	1bae <_system_pinmux_config+0x9a>
    1bb8:	fffbffff 	.word	0xfffbffff

00001bbc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1bbc:	b510      	push	{r4, lr}
    1bbe:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1bc0:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1bc2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1bc4:	2900      	cmp	r1, #0
    1bc6:	d104      	bne.n	1bd2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1bc8:	0943      	lsrs	r3, r0, #5
    1bca:	01db      	lsls	r3, r3, #7
    1bcc:	4905      	ldr	r1, [pc, #20]	; (1be4 <system_pinmux_pin_set_config+0x28>)
    1bce:	468c      	mov	ip, r1
    1bd0:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1bd2:	241f      	movs	r4, #31
    1bd4:	4020      	ands	r0, r4
    1bd6:	2101      	movs	r1, #1
    1bd8:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1bda:	0018      	movs	r0, r3
    1bdc:	4b02      	ldr	r3, [pc, #8]	; (1be8 <system_pinmux_pin_set_config+0x2c>)
    1bde:	4798      	blx	r3
}
    1be0:	bd10      	pop	{r4, pc}
    1be2:	46c0      	nop			; (mov r8, r8)
    1be4:	41004400 	.word	0x41004400
    1be8:	00001b15 	.word	0x00001b15

00001bec <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1bec:	4770      	bx	lr
	...

00001bf0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1bf0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1bf2:	4b05      	ldr	r3, [pc, #20]	; (1c08 <system_init+0x18>)
    1bf4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1bf6:	4b05      	ldr	r3, [pc, #20]	; (1c0c <system_init+0x1c>)
    1bf8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1bfa:	4b05      	ldr	r3, [pc, #20]	; (1c10 <system_init+0x20>)
    1bfc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1bfe:	4b05      	ldr	r3, [pc, #20]	; (1c14 <system_init+0x24>)
    1c00:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1c02:	4b05      	ldr	r3, [pc, #20]	; (1c18 <system_init+0x28>)
    1c04:	4798      	blx	r3
}
    1c06:	bd10      	pop	{r4, pc}
    1c08:	000017f5 	.word	0x000017f5
    1c0c:	00001621 	.word	0x00001621
    1c10:	00001bed 	.word	0x00001bed
    1c14:	00001bed 	.word	0x00001bed
    1c18:	00001bed 	.word	0x00001bed

00001c1c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1c1c:	e7fe      	b.n	1c1c <Dummy_Handler>
	...

00001c20 <Reset_Handler>:
{
    1c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1c22:	4a2a      	ldr	r2, [pc, #168]	; (1ccc <Reset_Handler+0xac>)
    1c24:	4b2a      	ldr	r3, [pc, #168]	; (1cd0 <Reset_Handler+0xb0>)
    1c26:	429a      	cmp	r2, r3
    1c28:	d011      	beq.n	1c4e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1c2a:	001a      	movs	r2, r3
    1c2c:	4b29      	ldr	r3, [pc, #164]	; (1cd4 <Reset_Handler+0xb4>)
    1c2e:	429a      	cmp	r2, r3
    1c30:	d20d      	bcs.n	1c4e <Reset_Handler+0x2e>
    1c32:	4a29      	ldr	r2, [pc, #164]	; (1cd8 <Reset_Handler+0xb8>)
    1c34:	3303      	adds	r3, #3
    1c36:	1a9b      	subs	r3, r3, r2
    1c38:	089b      	lsrs	r3, r3, #2
    1c3a:	3301      	adds	r3, #1
    1c3c:	009b      	lsls	r3, r3, #2
    1c3e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1c40:	4823      	ldr	r0, [pc, #140]	; (1cd0 <Reset_Handler+0xb0>)
    1c42:	4922      	ldr	r1, [pc, #136]	; (1ccc <Reset_Handler+0xac>)
    1c44:	588c      	ldr	r4, [r1, r2]
    1c46:	5084      	str	r4, [r0, r2]
    1c48:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1c4a:	429a      	cmp	r2, r3
    1c4c:	d1fa      	bne.n	1c44 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1c4e:	4a23      	ldr	r2, [pc, #140]	; (1cdc <Reset_Handler+0xbc>)
    1c50:	4b23      	ldr	r3, [pc, #140]	; (1ce0 <Reset_Handler+0xc0>)
    1c52:	429a      	cmp	r2, r3
    1c54:	d20a      	bcs.n	1c6c <Reset_Handler+0x4c>
    1c56:	43d3      	mvns	r3, r2
    1c58:	4921      	ldr	r1, [pc, #132]	; (1ce0 <Reset_Handler+0xc0>)
    1c5a:	185b      	adds	r3, r3, r1
    1c5c:	2103      	movs	r1, #3
    1c5e:	438b      	bics	r3, r1
    1c60:	3304      	adds	r3, #4
    1c62:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1c64:	2100      	movs	r1, #0
    1c66:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1c68:	4293      	cmp	r3, r2
    1c6a:	d1fc      	bne.n	1c66 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1c6c:	4a1d      	ldr	r2, [pc, #116]	; (1ce4 <Reset_Handler+0xc4>)
    1c6e:	21ff      	movs	r1, #255	; 0xff
    1c70:	4b1d      	ldr	r3, [pc, #116]	; (1ce8 <Reset_Handler+0xc8>)
    1c72:	438b      	bics	r3, r1
    1c74:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1c76:	39fd      	subs	r1, #253	; 0xfd
    1c78:	2390      	movs	r3, #144	; 0x90
    1c7a:	005b      	lsls	r3, r3, #1
    1c7c:	4a1b      	ldr	r2, [pc, #108]	; (1cec <Reset_Handler+0xcc>)
    1c7e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1c80:	4a1b      	ldr	r2, [pc, #108]	; (1cf0 <Reset_Handler+0xd0>)
    1c82:	78d3      	ldrb	r3, [r2, #3]
    1c84:	2503      	movs	r5, #3
    1c86:	43ab      	bics	r3, r5
    1c88:	2402      	movs	r4, #2
    1c8a:	4323      	orrs	r3, r4
    1c8c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1c8e:	78d3      	ldrb	r3, [r2, #3]
    1c90:	270c      	movs	r7, #12
    1c92:	43bb      	bics	r3, r7
    1c94:	2608      	movs	r6, #8
    1c96:	4333      	orrs	r3, r6
    1c98:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1c9a:	4b16      	ldr	r3, [pc, #88]	; (1cf4 <Reset_Handler+0xd4>)
    1c9c:	7b98      	ldrb	r0, [r3, #14]
    1c9e:	2230      	movs	r2, #48	; 0x30
    1ca0:	4390      	bics	r0, r2
    1ca2:	2220      	movs	r2, #32
    1ca4:	4310      	orrs	r0, r2
    1ca6:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1ca8:	7b99      	ldrb	r1, [r3, #14]
    1caa:	43b9      	bics	r1, r7
    1cac:	4331      	orrs	r1, r6
    1cae:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1cb0:	7b9a      	ldrb	r2, [r3, #14]
    1cb2:	43aa      	bics	r2, r5
    1cb4:	4322      	orrs	r2, r4
    1cb6:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1cb8:	4a0f      	ldr	r2, [pc, #60]	; (1cf8 <Reset_Handler+0xd8>)
    1cba:	6853      	ldr	r3, [r2, #4]
    1cbc:	2180      	movs	r1, #128	; 0x80
    1cbe:	430b      	orrs	r3, r1
    1cc0:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1cc2:	4b0e      	ldr	r3, [pc, #56]	; (1cfc <Reset_Handler+0xdc>)
    1cc4:	4798      	blx	r3
        main();
    1cc6:	4b0e      	ldr	r3, [pc, #56]	; (1d00 <Reset_Handler+0xe0>)
    1cc8:	4798      	blx	r3
    1cca:	e7fe      	b.n	1cca <Reset_Handler+0xaa>
    1ccc:	00003b90 	.word	0x00003b90
    1cd0:	20000000 	.word	0x20000000
    1cd4:	2000000c 	.word	0x2000000c
    1cd8:	20000004 	.word	0x20000004
    1cdc:	2000000c 	.word	0x2000000c
    1ce0:	200002d0 	.word	0x200002d0
    1ce4:	e000ed00 	.word	0xe000ed00
    1ce8:	00000000 	.word	0x00000000
    1cec:	41007000 	.word	0x41007000
    1cf0:	41005000 	.word	0x41005000
    1cf4:	41004800 	.word	0x41004800
    1cf8:	41004000 	.word	0x41004000
    1cfc:	00003961 	.word	0x00003961
    1d00:	0000150d 	.word	0x0000150d

00001d04 <configureUsart>:
 */ 
 #include <asf.h>
 #include "usart_conf.h"
 #include <string.h>

 void configureUsart(void){
    1d04:	b530      	push	{r4, r5, lr}
    1d06:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1d08:	2380      	movs	r3, #128	; 0x80
    1d0a:	05db      	lsls	r3, r3, #23
    1d0c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1d0e:	2300      	movs	r3, #0
    1d10:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1d12:	22ff      	movs	r2, #255	; 0xff
    1d14:	4669      	mov	r1, sp
    1d16:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1d18:	2200      	movs	r2, #0
    1d1a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1d1c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    1d1e:	2101      	movs	r1, #1
    1d20:	2024      	movs	r0, #36	; 0x24
    1d22:	466c      	mov	r4, sp
    1d24:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    1d26:	3001      	adds	r0, #1
    1d28:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    1d2a:	3125      	adds	r1, #37	; 0x25
    1d2c:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    1d2e:	3101      	adds	r1, #1
    1d30:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    1d32:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1d34:	3105      	adds	r1, #5
    1d36:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1d38:	3101      	adds	r1, #1
    1d3a:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1d3c:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1d3e:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1d40:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1d42:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1d44:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1d46:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    1d48:	2313      	movs	r3, #19
    1d4a:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1d4c:	7762      	strb	r2, [r4, #29]
	 struct usart_config config_usart;
	 usart_get_config_defaults(&config_usart);
	 config_usart.baudrate    = 115200;
    1d4e:	23e1      	movs	r3, #225	; 0xe1
    1d50:	025b      	lsls	r3, r3, #9
    1d52:	9308      	str	r3, [sp, #32]
	 config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    1d54:	2380      	movs	r3, #128	; 0x80
    1d56:	035b      	lsls	r3, r3, #13
    1d58:	9303      	str	r3, [sp, #12]
	 config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    1d5a:	4b0d      	ldr	r3, [pc, #52]	; (1d90 <configureUsart+0x8c>)
    1d5c:	930c      	str	r3, [sp, #48]	; 0x30
	 config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    1d5e:	4b0d      	ldr	r3, [pc, #52]	; (1d94 <configureUsart+0x90>)
    1d60:	930d      	str	r3, [sp, #52]	; 0x34
	 config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    1d62:	2301      	movs	r3, #1
    1d64:	425b      	negs	r3, r3
    1d66:	930e      	str	r3, [sp, #56]	; 0x38
	 config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    1d68:	930f      	str	r3, [sp, #60]	; 0x3c
	 while (usart_init(&USART,EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {    }
    1d6a:	4d0b      	ldr	r5, [pc, #44]	; (1d98 <configureUsart+0x94>)
    1d6c:	4c0b      	ldr	r4, [pc, #44]	; (1d9c <configureUsart+0x98>)
    1d6e:	466a      	mov	r2, sp
    1d70:	490b      	ldr	r1, [pc, #44]	; (1da0 <configureUsart+0x9c>)
    1d72:	0028      	movs	r0, r5
    1d74:	47a0      	blx	r4
    1d76:	2800      	cmp	r0, #0
    1d78:	d1f9      	bne.n	1d6e <configureUsart+0x6a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1d7a:	4b07      	ldr	r3, [pc, #28]	; (1d98 <configureUsart+0x94>)
    1d7c:	681a      	ldr	r2, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    1d7e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1d80:	2b00      	cmp	r3, #0
    1d82:	d1fc      	bne.n	1d7e <configureUsart+0x7a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1d84:	6813      	ldr	r3, [r2, #0]
    1d86:	2102      	movs	r1, #2
    1d88:	430b      	orrs	r3, r1
    1d8a:	6013      	str	r3, [r2, #0]
	 usart_enable(&USART);
 }
    1d8c:	b011      	add	sp, #68	; 0x44
    1d8e:	bd30      	pop	{r4, r5, pc}
    1d90:	00040003 	.word	0x00040003
    1d94:	00050003 	.word	0x00050003
    1d98:	200002c0 	.word	0x200002c0
    1d9c:	00000a95 	.word	0x00000a95
    1da0:	42000800 	.word	0x42000800

00001da4 <usartWriteBuffer>:


void usartWriteBuffer(const char *tx_data,uint16_t length){
    1da4:	b510      	push	{r4, lr}
    1da6:	000a      	movs	r2, r1
	usart_write_buffer_wait(&USART, (uint8_t *)tx_data, length);
    1da8:	0001      	movs	r1, r0
    1daa:	4802      	ldr	r0, [pc, #8]	; (1db4 <usartWriteBuffer+0x10>)
    1dac:	4b02      	ldr	r3, [pc, #8]	; (1db8 <usartWriteBuffer+0x14>)
    1dae:	4798      	blx	r3
}
    1db0:	bd10      	pop	{r4, pc}
    1db2:	46c0      	nop			; (mov r8, r8)
    1db4:	200002c0 	.word	0x200002c0
    1db8:	00000e25 	.word	0x00000e25

00001dbc <usartWriteHex>:

void usartWriteHex(const uint8_t *tx_data,uint16_t length){
    1dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1dbe:	46ce      	mov	lr, r9
    1dc0:	4647      	mov	r7, r8
    1dc2:	b580      	push	{r7, lr}
    1dc4:	0006      	movs	r6, r0
    1dc6:	1e0d      	subs	r5, r1, #0
	int numb_hex = 0;
	for(int i = 0; i < length; i++)
    1dc8:	dd34      	ble.n	1e34 <usartWriteHex+0x78>
    1dca:	2400      	movs	r4, #0
    1dcc:	230f      	movs	r3, #15
    1dce:	4698      	mov	r8, r3
		numb_hex = tx_data[i] /16 % 16;
		if(numb_hex < 10){
		usart_write_wait(&USART, numb_hex +'0');
		}
		else{
		usart_write_wait(&USART, numb_hex - 10 +'A');
    1dd0:	4b1a      	ldr	r3, [pc, #104]	; (1e3c <usartWriteHex+0x80>)
    1dd2:	4699      	mov	r9, r3
    1dd4:	e012      	b.n	1dfc <usartWriteHex+0x40>
    1dd6:	3137      	adds	r1, #55	; 0x37
    1dd8:	4819      	ldr	r0, [pc, #100]	; (1e40 <usartWriteHex+0x84>)
    1dda:	47c8      	blx	r9
    1ddc:	e019      	b.n	1e12 <usartWriteHex+0x56>
		numb_hex = tx_data[i] % 16;
		if(numb_hex < 10){
			usart_write_wait(&USART, numb_hex +'0');
		}
		else{
			usart_write_wait(&USART, numb_hex - 10 +'A');
    1dde:	3137      	adds	r1, #55	; 0x37
    1de0:	4817      	ldr	r0, [pc, #92]	; (1e40 <usartWriteHex+0x84>)
    1de2:	4b16      	ldr	r3, [pc, #88]	; (1e3c <usartWriteHex+0x80>)
    1de4:	4798      	blx	r3
    1de6:	e01d      	b.n	1e24 <usartWriteHex+0x68>

		if(i < length - 1){
			usart_write_wait(&USART, ':');
		}
		else{
			usart_write_wait(&USART, '\n');
    1de8:	210a      	movs	r1, #10
    1dea:	4815      	ldr	r0, [pc, #84]	; (1e40 <usartWriteHex+0x84>)
    1dec:	4f13      	ldr	r7, [pc, #76]	; (1e3c <usartWriteHex+0x80>)
    1dee:	47b8      	blx	r7
			usart_write_wait(&USART, '\r');
    1df0:	210d      	movs	r1, #13
    1df2:	4813      	ldr	r0, [pc, #76]	; (1e40 <usartWriteHex+0x84>)
    1df4:	47b8      	blx	r7
	for(int i = 0; i < length; i++)
    1df6:	3401      	adds	r4, #1
    1df8:	42ac      	cmp	r4, r5
    1dfa:	da1b      	bge.n	1e34 <usartWriteHex+0x78>
    1dfc:	0027      	movs	r7, r4
		numb_hex = tx_data[i] /16 % 16;
    1dfe:	5d31      	ldrb	r1, [r6, r4]
    1e00:	0909      	lsrs	r1, r1, #4
    1e02:	4643      	mov	r3, r8
    1e04:	4019      	ands	r1, r3
		if(numb_hex < 10){
    1e06:	2909      	cmp	r1, #9
    1e08:	dce5      	bgt.n	1dd6 <usartWriteHex+0x1a>
		usart_write_wait(&USART, numb_hex +'0');
    1e0a:	3130      	adds	r1, #48	; 0x30
    1e0c:	480c      	ldr	r0, [pc, #48]	; (1e40 <usartWriteHex+0x84>)
    1e0e:	4b0b      	ldr	r3, [pc, #44]	; (1e3c <usartWriteHex+0x80>)
    1e10:	4798      	blx	r3
    1e12:	5df1      	ldrb	r1, [r6, r7]
    1e14:	4643      	mov	r3, r8
    1e16:	4019      	ands	r1, r3
		if(numb_hex < 10){
    1e18:	2909      	cmp	r1, #9
    1e1a:	dce0      	bgt.n	1dde <usartWriteHex+0x22>
			usart_write_wait(&USART, numb_hex +'0');
    1e1c:	3130      	adds	r1, #48	; 0x30
    1e1e:	4808      	ldr	r0, [pc, #32]	; (1e40 <usartWriteHex+0x84>)
    1e20:	4b06      	ldr	r3, [pc, #24]	; (1e3c <usartWriteHex+0x80>)
    1e22:	4798      	blx	r3
		if(i < length - 1){
    1e24:	1e6b      	subs	r3, r5, #1
    1e26:	42a3      	cmp	r3, r4
    1e28:	ddde      	ble.n	1de8 <usartWriteHex+0x2c>
			usart_write_wait(&USART, ':');
    1e2a:	213a      	movs	r1, #58	; 0x3a
    1e2c:	4804      	ldr	r0, [pc, #16]	; (1e40 <usartWriteHex+0x84>)
    1e2e:	4b03      	ldr	r3, [pc, #12]	; (1e3c <usartWriteHex+0x80>)
    1e30:	4798      	blx	r3
    1e32:	e7e0      	b.n	1df6 <usartWriteHex+0x3a>
		}
	}
}
    1e34:	bc0c      	pop	{r2, r3}
    1e36:	4690      	mov	r8, r2
    1e38:	4699      	mov	r9, r3
    1e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e3c:	00000d91 	.word	0x00000d91
    1e40:	200002c0 	.word	0x200002c0

00001e44 <usartReadString>:
		}
	}
	return numb - '0';
}

void usartReadString(char* string, uint16_t length){
    1e44:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e46:	b083      	sub	sp, #12
    1e48:	0005      	movs	r5, r0
	for(uint8_t i = 0; i <length;i++){string[i] = 0;}
    1e4a:	2900      	cmp	r1, #0
    1e4c:	d007      	beq.n	1e5e <usartReadString+0x1a>
    1e4e:	2300      	movs	r3, #0
    1e50:	2000      	movs	r0, #0
    1e52:	54e8      	strb	r0, [r5, r3]
    1e54:	3301      	adds	r3, #1
    1e56:	b2db      	uxtb	r3, r3
    1e58:	b29a      	uxth	r2, r3
    1e5a:	428a      	cmp	r2, r1
    1e5c:	d3f9      	bcc.n	1e52 <usartReadString+0xe>
	//char string[32] = {0};
	char tempStr[2]={0,0};
    1e5e:	ab01      	add	r3, sp, #4
    1e60:	2200      	movs	r2, #0
    1e62:	701a      	strb	r2, [r3, #0]
    1e64:	705a      	strb	r2, [r3, #1]
	uint16_t temp;
	bool loop = true;
	uint8_t char_;

	while(loop){
		if (usart_read_wait(&USART, &temp) == STATUS_OK) {
    1e66:	4e23      	ldr	r6, [pc, #140]	; (1ef4 <usartReadString+0xb0>)
    1e68:	4f23      	ldr	r7, [pc, #140]	; (1ef8 <usartReadString+0xb4>)
    1e6a:	e009      	b.n	1e80 <usartReadString+0x3c>
			char_ = temp;
			if(char_ >= 'A' && char_ <= 'Z' )
			{
				usart_write_wait(&USART, char_);
    1e6c:	23ff      	movs	r3, #255	; 0xff
    1e6e:	4019      	ands	r1, r3
    1e70:	4820      	ldr	r0, [pc, #128]	; (1ef4 <usartReadString+0xb0>)
    1e72:	4b22      	ldr	r3, [pc, #136]	; (1efc <usartReadString+0xb8>)
    1e74:	4798      	blx	r3
				tempStr[0] = char_;
    1e76:	a901      	add	r1, sp, #4
    1e78:	700c      	strb	r4, [r1, #0]
				strcat(string, tempStr);
    1e7a:	0028      	movs	r0, r5
    1e7c:	4b20      	ldr	r3, [pc, #128]	; (1f00 <usartReadString+0xbc>)
    1e7e:	4798      	blx	r3
		if (usart_read_wait(&USART, &temp) == STATUS_OK) {
    1e80:	466b      	mov	r3, sp
    1e82:	1c99      	adds	r1, r3, #2
    1e84:	0030      	movs	r0, r6
    1e86:	47b8      	blx	r7
    1e88:	2800      	cmp	r0, #0
    1e8a:	d1f9      	bne.n	1e80 <usartReadString+0x3c>
			char_ = temp;
    1e8c:	466b      	mov	r3, sp
    1e8e:	8859      	ldrh	r1, [r3, #2]
    1e90:	b2cc      	uxtb	r4, r1
			if(char_ >= 'A' && char_ <= 'Z' )
    1e92:	0023      	movs	r3, r4
    1e94:	3b41      	subs	r3, #65	; 0x41
    1e96:	2b19      	cmp	r3, #25
    1e98:	d9e8      	bls.n	1e6c <usartReadString+0x28>
			} else if(char_ >= 'a' && char_ <= 'z'){
    1e9a:	0023      	movs	r3, r4
    1e9c:	3b61      	subs	r3, #97	; 0x61
    1e9e:	2b19      	cmp	r3, #25
    1ea0:	d911      	bls.n	1ec6 <usartReadString+0x82>
				usart_write_wait(&USART, char_);
				tempStr[0] = char_;
				strcat(string, tempStr);
			} else if(char_ >= '0' && char_ <= '9'){
    1ea2:	0023      	movs	r3, r4
    1ea4:	3b30      	subs	r3, #48	; 0x30
    1ea6:	2b09      	cmp	r3, #9
    1ea8:	d918      	bls.n	1edc <usartReadString+0x98>
				usart_write_wait(&USART, char_);
				tempStr[0] = char_;
				strcat(string, tempStr);
			} else if(char_ == '\n' || char_ == '\r'){
    1eaa:	2c0a      	cmp	r4, #10
    1eac:	d001      	beq.n	1eb2 <usartReadString+0x6e>
    1eae:	2c0d      	cmp	r4, #13
    1eb0:	d1e6      	bne.n	1e80 <usartReadString+0x3c>
				loop = false;
			}
		}
	}
	usart_write_wait(&USART, '\n');
    1eb2:	4d10      	ldr	r5, [pc, #64]	; (1ef4 <usartReadString+0xb0>)
    1eb4:	210a      	movs	r1, #10
    1eb6:	0028      	movs	r0, r5
    1eb8:	4c10      	ldr	r4, [pc, #64]	; (1efc <usartReadString+0xb8>)
    1eba:	47a0      	blx	r4
	usart_write_wait(&USART, '\r');
    1ebc:	210d      	movs	r1, #13
    1ebe:	0028      	movs	r0, r5
    1ec0:	47a0      	blx	r4
	//usartWriteBuffer(string, sizeof(string));
	//usart_write_wait(&USART, '\n');
	//usart_write_wait(&USART, '\r');
	return;
}
    1ec2:	b003      	add	sp, #12
    1ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				usart_write_wait(&USART, char_);
    1ec6:	23ff      	movs	r3, #255	; 0xff
    1ec8:	4019      	ands	r1, r3
    1eca:	480a      	ldr	r0, [pc, #40]	; (1ef4 <usartReadString+0xb0>)
    1ecc:	4b0b      	ldr	r3, [pc, #44]	; (1efc <usartReadString+0xb8>)
    1ece:	4798      	blx	r3
				tempStr[0] = char_;
    1ed0:	a901      	add	r1, sp, #4
    1ed2:	700c      	strb	r4, [r1, #0]
				strcat(string, tempStr);
    1ed4:	0028      	movs	r0, r5
    1ed6:	4b0a      	ldr	r3, [pc, #40]	; (1f00 <usartReadString+0xbc>)
    1ed8:	4798      	blx	r3
    1eda:	e7d1      	b.n	1e80 <usartReadString+0x3c>
				usart_write_wait(&USART, char_);
    1edc:	23ff      	movs	r3, #255	; 0xff
    1ede:	4019      	ands	r1, r3
    1ee0:	4804      	ldr	r0, [pc, #16]	; (1ef4 <usartReadString+0xb0>)
    1ee2:	4b06      	ldr	r3, [pc, #24]	; (1efc <usartReadString+0xb8>)
    1ee4:	4798      	blx	r3
				tempStr[0] = char_;
    1ee6:	a901      	add	r1, sp, #4
    1ee8:	700c      	strb	r4, [r1, #0]
				strcat(string, tempStr);
    1eea:	0028      	movs	r0, r5
    1eec:	4b04      	ldr	r3, [pc, #16]	; (1f00 <usartReadString+0xbc>)
    1eee:	4798      	blx	r3
    1ef0:	e7c6      	b.n	1e80 <usartReadString+0x3c>
    1ef2:	46c0      	nop			; (mov r8, r8)
    1ef4:	200002c0 	.word	0x200002c0
    1ef8:	00000dbb 	.word	0x00000dbb
    1efc:	00000d91 	.word	0x00000d91
    1f00:	000039bb 	.word	0x000039bb

00001f04 <usartClearWindow>:


void usartClearWindow(void){
    1f04:	b570      	push	{r4, r5, r6, lr}
	usart_write_buffer_wait(&USART, (uint8_t *)"\033[2J", 4);
    1f06:	4d05      	ldr	r5, [pc, #20]	; (1f1c <usartClearWindow+0x18>)
    1f08:	2204      	movs	r2, #4
    1f0a:	4905      	ldr	r1, [pc, #20]	; (1f20 <usartClearWindow+0x1c>)
    1f0c:	0028      	movs	r0, r5
    1f0e:	4c05      	ldr	r4, [pc, #20]	; (1f24 <usartClearWindow+0x20>)
    1f10:	47a0      	blx	r4
	usart_write_buffer_wait(&USART, (uint8_t *)"\033[0;0H", 6);
    1f12:	2206      	movs	r2, #6
    1f14:	4904      	ldr	r1, [pc, #16]	; (1f28 <usartClearWindow+0x24>)
    1f16:	0028      	movs	r0, r5
    1f18:	47a0      	blx	r4
}
    1f1a:	bd70      	pop	{r4, r5, r6, pc}
    1f1c:	200002c0 	.word	0x200002c0
    1f20:	00003ae0 	.word	0x00003ae0
    1f24:	00000e25 	.word	0x00000e25
    1f28:	00003ae8 	.word	0x00003ae8

00001f2c <__udivsi3>:
    1f2c:	2200      	movs	r2, #0
    1f2e:	0843      	lsrs	r3, r0, #1
    1f30:	428b      	cmp	r3, r1
    1f32:	d374      	bcc.n	201e <STACK_SIZE+0x1e>
    1f34:	0903      	lsrs	r3, r0, #4
    1f36:	428b      	cmp	r3, r1
    1f38:	d35f      	bcc.n	1ffa <__udivsi3+0xce>
    1f3a:	0a03      	lsrs	r3, r0, #8
    1f3c:	428b      	cmp	r3, r1
    1f3e:	d344      	bcc.n	1fca <__udivsi3+0x9e>
    1f40:	0b03      	lsrs	r3, r0, #12
    1f42:	428b      	cmp	r3, r1
    1f44:	d328      	bcc.n	1f98 <__udivsi3+0x6c>
    1f46:	0c03      	lsrs	r3, r0, #16
    1f48:	428b      	cmp	r3, r1
    1f4a:	d30d      	bcc.n	1f68 <__udivsi3+0x3c>
    1f4c:	22ff      	movs	r2, #255	; 0xff
    1f4e:	0209      	lsls	r1, r1, #8
    1f50:	ba12      	rev	r2, r2
    1f52:	0c03      	lsrs	r3, r0, #16
    1f54:	428b      	cmp	r3, r1
    1f56:	d302      	bcc.n	1f5e <__udivsi3+0x32>
    1f58:	1212      	asrs	r2, r2, #8
    1f5a:	0209      	lsls	r1, r1, #8
    1f5c:	d065      	beq.n	202a <STACK_SIZE+0x2a>
    1f5e:	0b03      	lsrs	r3, r0, #12
    1f60:	428b      	cmp	r3, r1
    1f62:	d319      	bcc.n	1f98 <__udivsi3+0x6c>
    1f64:	e000      	b.n	1f68 <__udivsi3+0x3c>
    1f66:	0a09      	lsrs	r1, r1, #8
    1f68:	0bc3      	lsrs	r3, r0, #15
    1f6a:	428b      	cmp	r3, r1
    1f6c:	d301      	bcc.n	1f72 <__udivsi3+0x46>
    1f6e:	03cb      	lsls	r3, r1, #15
    1f70:	1ac0      	subs	r0, r0, r3
    1f72:	4152      	adcs	r2, r2
    1f74:	0b83      	lsrs	r3, r0, #14
    1f76:	428b      	cmp	r3, r1
    1f78:	d301      	bcc.n	1f7e <__udivsi3+0x52>
    1f7a:	038b      	lsls	r3, r1, #14
    1f7c:	1ac0      	subs	r0, r0, r3
    1f7e:	4152      	adcs	r2, r2
    1f80:	0b43      	lsrs	r3, r0, #13
    1f82:	428b      	cmp	r3, r1
    1f84:	d301      	bcc.n	1f8a <__udivsi3+0x5e>
    1f86:	034b      	lsls	r3, r1, #13
    1f88:	1ac0      	subs	r0, r0, r3
    1f8a:	4152      	adcs	r2, r2
    1f8c:	0b03      	lsrs	r3, r0, #12
    1f8e:	428b      	cmp	r3, r1
    1f90:	d301      	bcc.n	1f96 <__udivsi3+0x6a>
    1f92:	030b      	lsls	r3, r1, #12
    1f94:	1ac0      	subs	r0, r0, r3
    1f96:	4152      	adcs	r2, r2
    1f98:	0ac3      	lsrs	r3, r0, #11
    1f9a:	428b      	cmp	r3, r1
    1f9c:	d301      	bcc.n	1fa2 <__udivsi3+0x76>
    1f9e:	02cb      	lsls	r3, r1, #11
    1fa0:	1ac0      	subs	r0, r0, r3
    1fa2:	4152      	adcs	r2, r2
    1fa4:	0a83      	lsrs	r3, r0, #10
    1fa6:	428b      	cmp	r3, r1
    1fa8:	d301      	bcc.n	1fae <__udivsi3+0x82>
    1faa:	028b      	lsls	r3, r1, #10
    1fac:	1ac0      	subs	r0, r0, r3
    1fae:	4152      	adcs	r2, r2
    1fb0:	0a43      	lsrs	r3, r0, #9
    1fb2:	428b      	cmp	r3, r1
    1fb4:	d301      	bcc.n	1fba <__udivsi3+0x8e>
    1fb6:	024b      	lsls	r3, r1, #9
    1fb8:	1ac0      	subs	r0, r0, r3
    1fba:	4152      	adcs	r2, r2
    1fbc:	0a03      	lsrs	r3, r0, #8
    1fbe:	428b      	cmp	r3, r1
    1fc0:	d301      	bcc.n	1fc6 <__udivsi3+0x9a>
    1fc2:	020b      	lsls	r3, r1, #8
    1fc4:	1ac0      	subs	r0, r0, r3
    1fc6:	4152      	adcs	r2, r2
    1fc8:	d2cd      	bcs.n	1f66 <__udivsi3+0x3a>
    1fca:	09c3      	lsrs	r3, r0, #7
    1fcc:	428b      	cmp	r3, r1
    1fce:	d301      	bcc.n	1fd4 <__udivsi3+0xa8>
    1fd0:	01cb      	lsls	r3, r1, #7
    1fd2:	1ac0      	subs	r0, r0, r3
    1fd4:	4152      	adcs	r2, r2
    1fd6:	0983      	lsrs	r3, r0, #6
    1fd8:	428b      	cmp	r3, r1
    1fda:	d301      	bcc.n	1fe0 <__udivsi3+0xb4>
    1fdc:	018b      	lsls	r3, r1, #6
    1fde:	1ac0      	subs	r0, r0, r3
    1fe0:	4152      	adcs	r2, r2
    1fe2:	0943      	lsrs	r3, r0, #5
    1fe4:	428b      	cmp	r3, r1
    1fe6:	d301      	bcc.n	1fec <__udivsi3+0xc0>
    1fe8:	014b      	lsls	r3, r1, #5
    1fea:	1ac0      	subs	r0, r0, r3
    1fec:	4152      	adcs	r2, r2
    1fee:	0903      	lsrs	r3, r0, #4
    1ff0:	428b      	cmp	r3, r1
    1ff2:	d301      	bcc.n	1ff8 <__udivsi3+0xcc>
    1ff4:	010b      	lsls	r3, r1, #4
    1ff6:	1ac0      	subs	r0, r0, r3
    1ff8:	4152      	adcs	r2, r2
    1ffa:	08c3      	lsrs	r3, r0, #3
    1ffc:	428b      	cmp	r3, r1
    1ffe:	d301      	bcc.n	2004 <STACK_SIZE+0x4>
    2000:	00cb      	lsls	r3, r1, #3
    2002:	1ac0      	subs	r0, r0, r3
    2004:	4152      	adcs	r2, r2
    2006:	0883      	lsrs	r3, r0, #2
    2008:	428b      	cmp	r3, r1
    200a:	d301      	bcc.n	2010 <STACK_SIZE+0x10>
    200c:	008b      	lsls	r3, r1, #2
    200e:	1ac0      	subs	r0, r0, r3
    2010:	4152      	adcs	r2, r2
    2012:	0843      	lsrs	r3, r0, #1
    2014:	428b      	cmp	r3, r1
    2016:	d301      	bcc.n	201c <STACK_SIZE+0x1c>
    2018:	004b      	lsls	r3, r1, #1
    201a:	1ac0      	subs	r0, r0, r3
    201c:	4152      	adcs	r2, r2
    201e:	1a41      	subs	r1, r0, r1
    2020:	d200      	bcs.n	2024 <STACK_SIZE+0x24>
    2022:	4601      	mov	r1, r0
    2024:	4152      	adcs	r2, r2
    2026:	4610      	mov	r0, r2
    2028:	4770      	bx	lr
    202a:	e7ff      	b.n	202c <STACK_SIZE+0x2c>
    202c:	b501      	push	{r0, lr}
    202e:	2000      	movs	r0, #0
    2030:	f000 f806 	bl	2040 <__aeabi_idiv0>
    2034:	bd02      	pop	{r1, pc}
    2036:	46c0      	nop			; (mov r8, r8)

00002038 <__aeabi_uidivmod>:
    2038:	2900      	cmp	r1, #0
    203a:	d0f7      	beq.n	202c <STACK_SIZE+0x2c>
    203c:	e776      	b.n	1f2c <__udivsi3>
    203e:	4770      	bx	lr

00002040 <__aeabi_idiv0>:
    2040:	4770      	bx	lr
    2042:	46c0      	nop			; (mov r8, r8)

00002044 <__aeabi_lmul>:
    2044:	b5f0      	push	{r4, r5, r6, r7, lr}
    2046:	46ce      	mov	lr, r9
    2048:	4647      	mov	r7, r8
    204a:	0415      	lsls	r5, r2, #16
    204c:	0c2d      	lsrs	r5, r5, #16
    204e:	002e      	movs	r6, r5
    2050:	b580      	push	{r7, lr}
    2052:	0407      	lsls	r7, r0, #16
    2054:	0c14      	lsrs	r4, r2, #16
    2056:	0c3f      	lsrs	r7, r7, #16
    2058:	4699      	mov	r9, r3
    205a:	0c03      	lsrs	r3, r0, #16
    205c:	437e      	muls	r6, r7
    205e:	435d      	muls	r5, r3
    2060:	4367      	muls	r7, r4
    2062:	4363      	muls	r3, r4
    2064:	197f      	adds	r7, r7, r5
    2066:	0c34      	lsrs	r4, r6, #16
    2068:	19e4      	adds	r4, r4, r7
    206a:	469c      	mov	ip, r3
    206c:	42a5      	cmp	r5, r4
    206e:	d903      	bls.n	2078 <__aeabi_lmul+0x34>
    2070:	2380      	movs	r3, #128	; 0x80
    2072:	025b      	lsls	r3, r3, #9
    2074:	4698      	mov	r8, r3
    2076:	44c4      	add	ip, r8
    2078:	464b      	mov	r3, r9
    207a:	4351      	muls	r1, r2
    207c:	4343      	muls	r3, r0
    207e:	0436      	lsls	r6, r6, #16
    2080:	0c36      	lsrs	r6, r6, #16
    2082:	0c25      	lsrs	r5, r4, #16
    2084:	0424      	lsls	r4, r4, #16
    2086:	4465      	add	r5, ip
    2088:	19a4      	adds	r4, r4, r6
    208a:	1859      	adds	r1, r3, r1
    208c:	1949      	adds	r1, r1, r5
    208e:	0020      	movs	r0, r4
    2090:	bc0c      	pop	{r2, r3}
    2092:	4690      	mov	r8, r2
    2094:	4699      	mov	r9, r3
    2096:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002098 <__aeabi_dadd>:
    2098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    209a:	4645      	mov	r5, r8
    209c:	46de      	mov	lr, fp
    209e:	4657      	mov	r7, sl
    20a0:	464e      	mov	r6, r9
    20a2:	030c      	lsls	r4, r1, #12
    20a4:	b5e0      	push	{r5, r6, r7, lr}
    20a6:	004e      	lsls	r6, r1, #1
    20a8:	0fc9      	lsrs	r1, r1, #31
    20aa:	4688      	mov	r8, r1
    20ac:	000d      	movs	r5, r1
    20ae:	0a61      	lsrs	r1, r4, #9
    20b0:	0f44      	lsrs	r4, r0, #29
    20b2:	430c      	orrs	r4, r1
    20b4:	00c7      	lsls	r7, r0, #3
    20b6:	0319      	lsls	r1, r3, #12
    20b8:	0058      	lsls	r0, r3, #1
    20ba:	0fdb      	lsrs	r3, r3, #31
    20bc:	469b      	mov	fp, r3
    20be:	0a4b      	lsrs	r3, r1, #9
    20c0:	0f51      	lsrs	r1, r2, #29
    20c2:	430b      	orrs	r3, r1
    20c4:	0d76      	lsrs	r6, r6, #21
    20c6:	0d40      	lsrs	r0, r0, #21
    20c8:	0019      	movs	r1, r3
    20ca:	00d2      	lsls	r2, r2, #3
    20cc:	45d8      	cmp	r8, fp
    20ce:	d100      	bne.n	20d2 <__aeabi_dadd+0x3a>
    20d0:	e0ae      	b.n	2230 <__aeabi_dadd+0x198>
    20d2:	1a35      	subs	r5, r6, r0
    20d4:	2d00      	cmp	r5, #0
    20d6:	dc00      	bgt.n	20da <__aeabi_dadd+0x42>
    20d8:	e0f6      	b.n	22c8 <__aeabi_dadd+0x230>
    20da:	2800      	cmp	r0, #0
    20dc:	d10f      	bne.n	20fe <__aeabi_dadd+0x66>
    20de:	4313      	orrs	r3, r2
    20e0:	d100      	bne.n	20e4 <__aeabi_dadd+0x4c>
    20e2:	e0db      	b.n	229c <__aeabi_dadd+0x204>
    20e4:	1e6b      	subs	r3, r5, #1
    20e6:	2b00      	cmp	r3, #0
    20e8:	d000      	beq.n	20ec <__aeabi_dadd+0x54>
    20ea:	e137      	b.n	235c <__aeabi_dadd+0x2c4>
    20ec:	1aba      	subs	r2, r7, r2
    20ee:	4297      	cmp	r7, r2
    20f0:	41bf      	sbcs	r7, r7
    20f2:	1a64      	subs	r4, r4, r1
    20f4:	427f      	negs	r7, r7
    20f6:	1be4      	subs	r4, r4, r7
    20f8:	2601      	movs	r6, #1
    20fa:	0017      	movs	r7, r2
    20fc:	e024      	b.n	2148 <__aeabi_dadd+0xb0>
    20fe:	4bc6      	ldr	r3, [pc, #792]	; (2418 <__aeabi_dadd+0x380>)
    2100:	429e      	cmp	r6, r3
    2102:	d04d      	beq.n	21a0 <__aeabi_dadd+0x108>
    2104:	2380      	movs	r3, #128	; 0x80
    2106:	041b      	lsls	r3, r3, #16
    2108:	4319      	orrs	r1, r3
    210a:	2d38      	cmp	r5, #56	; 0x38
    210c:	dd00      	ble.n	2110 <__aeabi_dadd+0x78>
    210e:	e107      	b.n	2320 <__aeabi_dadd+0x288>
    2110:	2d1f      	cmp	r5, #31
    2112:	dd00      	ble.n	2116 <__aeabi_dadd+0x7e>
    2114:	e138      	b.n	2388 <__aeabi_dadd+0x2f0>
    2116:	2020      	movs	r0, #32
    2118:	1b43      	subs	r3, r0, r5
    211a:	469a      	mov	sl, r3
    211c:	000b      	movs	r3, r1
    211e:	4650      	mov	r0, sl
    2120:	4083      	lsls	r3, r0
    2122:	4699      	mov	r9, r3
    2124:	0013      	movs	r3, r2
    2126:	4648      	mov	r0, r9
    2128:	40eb      	lsrs	r3, r5
    212a:	4318      	orrs	r0, r3
    212c:	0003      	movs	r3, r0
    212e:	4650      	mov	r0, sl
    2130:	4082      	lsls	r2, r0
    2132:	1e50      	subs	r0, r2, #1
    2134:	4182      	sbcs	r2, r0
    2136:	40e9      	lsrs	r1, r5
    2138:	431a      	orrs	r2, r3
    213a:	1aba      	subs	r2, r7, r2
    213c:	1a61      	subs	r1, r4, r1
    213e:	4297      	cmp	r7, r2
    2140:	41a4      	sbcs	r4, r4
    2142:	0017      	movs	r7, r2
    2144:	4264      	negs	r4, r4
    2146:	1b0c      	subs	r4, r1, r4
    2148:	0223      	lsls	r3, r4, #8
    214a:	d562      	bpl.n	2212 <__aeabi_dadd+0x17a>
    214c:	0264      	lsls	r4, r4, #9
    214e:	0a65      	lsrs	r5, r4, #9
    2150:	2d00      	cmp	r5, #0
    2152:	d100      	bne.n	2156 <__aeabi_dadd+0xbe>
    2154:	e0df      	b.n	2316 <__aeabi_dadd+0x27e>
    2156:	0028      	movs	r0, r5
    2158:	f001 fbe4 	bl	3924 <__clzsi2>
    215c:	0003      	movs	r3, r0
    215e:	3b08      	subs	r3, #8
    2160:	2b1f      	cmp	r3, #31
    2162:	dd00      	ble.n	2166 <__aeabi_dadd+0xce>
    2164:	e0d2      	b.n	230c <__aeabi_dadd+0x274>
    2166:	2220      	movs	r2, #32
    2168:	003c      	movs	r4, r7
    216a:	1ad2      	subs	r2, r2, r3
    216c:	409d      	lsls	r5, r3
    216e:	40d4      	lsrs	r4, r2
    2170:	409f      	lsls	r7, r3
    2172:	4325      	orrs	r5, r4
    2174:	429e      	cmp	r6, r3
    2176:	dd00      	ble.n	217a <__aeabi_dadd+0xe2>
    2178:	e0c4      	b.n	2304 <__aeabi_dadd+0x26c>
    217a:	1b9e      	subs	r6, r3, r6
    217c:	1c73      	adds	r3, r6, #1
    217e:	2b1f      	cmp	r3, #31
    2180:	dd00      	ble.n	2184 <__aeabi_dadd+0xec>
    2182:	e0f1      	b.n	2368 <__aeabi_dadd+0x2d0>
    2184:	2220      	movs	r2, #32
    2186:	0038      	movs	r0, r7
    2188:	0029      	movs	r1, r5
    218a:	1ad2      	subs	r2, r2, r3
    218c:	40d8      	lsrs	r0, r3
    218e:	4091      	lsls	r1, r2
    2190:	4097      	lsls	r7, r2
    2192:	002c      	movs	r4, r5
    2194:	4301      	orrs	r1, r0
    2196:	1e78      	subs	r0, r7, #1
    2198:	4187      	sbcs	r7, r0
    219a:	40dc      	lsrs	r4, r3
    219c:	2600      	movs	r6, #0
    219e:	430f      	orrs	r7, r1
    21a0:	077b      	lsls	r3, r7, #29
    21a2:	d009      	beq.n	21b8 <__aeabi_dadd+0x120>
    21a4:	230f      	movs	r3, #15
    21a6:	403b      	ands	r3, r7
    21a8:	2b04      	cmp	r3, #4
    21aa:	d005      	beq.n	21b8 <__aeabi_dadd+0x120>
    21ac:	1d3b      	adds	r3, r7, #4
    21ae:	42bb      	cmp	r3, r7
    21b0:	41bf      	sbcs	r7, r7
    21b2:	427f      	negs	r7, r7
    21b4:	19e4      	adds	r4, r4, r7
    21b6:	001f      	movs	r7, r3
    21b8:	0223      	lsls	r3, r4, #8
    21ba:	d52c      	bpl.n	2216 <__aeabi_dadd+0x17e>
    21bc:	4b96      	ldr	r3, [pc, #600]	; (2418 <__aeabi_dadd+0x380>)
    21be:	3601      	adds	r6, #1
    21c0:	429e      	cmp	r6, r3
    21c2:	d100      	bne.n	21c6 <__aeabi_dadd+0x12e>
    21c4:	e09a      	b.n	22fc <__aeabi_dadd+0x264>
    21c6:	4645      	mov	r5, r8
    21c8:	4b94      	ldr	r3, [pc, #592]	; (241c <__aeabi_dadd+0x384>)
    21ca:	08ff      	lsrs	r7, r7, #3
    21cc:	401c      	ands	r4, r3
    21ce:	0760      	lsls	r0, r4, #29
    21d0:	0576      	lsls	r6, r6, #21
    21d2:	0264      	lsls	r4, r4, #9
    21d4:	4307      	orrs	r7, r0
    21d6:	0b24      	lsrs	r4, r4, #12
    21d8:	0d76      	lsrs	r6, r6, #21
    21da:	2100      	movs	r1, #0
    21dc:	0324      	lsls	r4, r4, #12
    21de:	0b23      	lsrs	r3, r4, #12
    21e0:	0d0c      	lsrs	r4, r1, #20
    21e2:	4a8f      	ldr	r2, [pc, #572]	; (2420 <__aeabi_dadd+0x388>)
    21e4:	0524      	lsls	r4, r4, #20
    21e6:	431c      	orrs	r4, r3
    21e8:	4014      	ands	r4, r2
    21ea:	0533      	lsls	r3, r6, #20
    21ec:	4323      	orrs	r3, r4
    21ee:	005b      	lsls	r3, r3, #1
    21f0:	07ed      	lsls	r5, r5, #31
    21f2:	085b      	lsrs	r3, r3, #1
    21f4:	432b      	orrs	r3, r5
    21f6:	0038      	movs	r0, r7
    21f8:	0019      	movs	r1, r3
    21fa:	bc3c      	pop	{r2, r3, r4, r5}
    21fc:	4690      	mov	r8, r2
    21fe:	4699      	mov	r9, r3
    2200:	46a2      	mov	sl, r4
    2202:	46ab      	mov	fp, r5
    2204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2206:	4664      	mov	r4, ip
    2208:	4304      	orrs	r4, r0
    220a:	d100      	bne.n	220e <__aeabi_dadd+0x176>
    220c:	e211      	b.n	2632 <__aeabi_dadd+0x59a>
    220e:	0004      	movs	r4, r0
    2210:	4667      	mov	r7, ip
    2212:	077b      	lsls	r3, r7, #29
    2214:	d1c6      	bne.n	21a4 <__aeabi_dadd+0x10c>
    2216:	4645      	mov	r5, r8
    2218:	0760      	lsls	r0, r4, #29
    221a:	08ff      	lsrs	r7, r7, #3
    221c:	4307      	orrs	r7, r0
    221e:	08e4      	lsrs	r4, r4, #3
    2220:	4b7d      	ldr	r3, [pc, #500]	; (2418 <__aeabi_dadd+0x380>)
    2222:	429e      	cmp	r6, r3
    2224:	d030      	beq.n	2288 <__aeabi_dadd+0x1f0>
    2226:	0324      	lsls	r4, r4, #12
    2228:	0576      	lsls	r6, r6, #21
    222a:	0b24      	lsrs	r4, r4, #12
    222c:	0d76      	lsrs	r6, r6, #21
    222e:	e7d4      	b.n	21da <__aeabi_dadd+0x142>
    2230:	1a33      	subs	r3, r6, r0
    2232:	469a      	mov	sl, r3
    2234:	2b00      	cmp	r3, #0
    2236:	dd78      	ble.n	232a <__aeabi_dadd+0x292>
    2238:	2800      	cmp	r0, #0
    223a:	d031      	beq.n	22a0 <__aeabi_dadd+0x208>
    223c:	4876      	ldr	r0, [pc, #472]	; (2418 <__aeabi_dadd+0x380>)
    223e:	4286      	cmp	r6, r0
    2240:	d0ae      	beq.n	21a0 <__aeabi_dadd+0x108>
    2242:	2080      	movs	r0, #128	; 0x80
    2244:	0400      	lsls	r0, r0, #16
    2246:	4301      	orrs	r1, r0
    2248:	4653      	mov	r3, sl
    224a:	2b38      	cmp	r3, #56	; 0x38
    224c:	dc00      	bgt.n	2250 <__aeabi_dadd+0x1b8>
    224e:	e0e9      	b.n	2424 <__aeabi_dadd+0x38c>
    2250:	430a      	orrs	r2, r1
    2252:	1e51      	subs	r1, r2, #1
    2254:	418a      	sbcs	r2, r1
    2256:	2100      	movs	r1, #0
    2258:	19d2      	adds	r2, r2, r7
    225a:	42ba      	cmp	r2, r7
    225c:	41bf      	sbcs	r7, r7
    225e:	1909      	adds	r1, r1, r4
    2260:	427c      	negs	r4, r7
    2262:	0017      	movs	r7, r2
    2264:	190c      	adds	r4, r1, r4
    2266:	0223      	lsls	r3, r4, #8
    2268:	d5d3      	bpl.n	2212 <__aeabi_dadd+0x17a>
    226a:	4b6b      	ldr	r3, [pc, #428]	; (2418 <__aeabi_dadd+0x380>)
    226c:	3601      	adds	r6, #1
    226e:	429e      	cmp	r6, r3
    2270:	d100      	bne.n	2274 <__aeabi_dadd+0x1dc>
    2272:	e13a      	b.n	24ea <__aeabi_dadd+0x452>
    2274:	2001      	movs	r0, #1
    2276:	4b69      	ldr	r3, [pc, #420]	; (241c <__aeabi_dadd+0x384>)
    2278:	401c      	ands	r4, r3
    227a:	087b      	lsrs	r3, r7, #1
    227c:	4007      	ands	r7, r0
    227e:	431f      	orrs	r7, r3
    2280:	07e0      	lsls	r0, r4, #31
    2282:	4307      	orrs	r7, r0
    2284:	0864      	lsrs	r4, r4, #1
    2286:	e78b      	b.n	21a0 <__aeabi_dadd+0x108>
    2288:	0023      	movs	r3, r4
    228a:	433b      	orrs	r3, r7
    228c:	d100      	bne.n	2290 <__aeabi_dadd+0x1f8>
    228e:	e1cb      	b.n	2628 <__aeabi_dadd+0x590>
    2290:	2280      	movs	r2, #128	; 0x80
    2292:	0312      	lsls	r2, r2, #12
    2294:	4314      	orrs	r4, r2
    2296:	0324      	lsls	r4, r4, #12
    2298:	0b24      	lsrs	r4, r4, #12
    229a:	e79e      	b.n	21da <__aeabi_dadd+0x142>
    229c:	002e      	movs	r6, r5
    229e:	e77f      	b.n	21a0 <__aeabi_dadd+0x108>
    22a0:	0008      	movs	r0, r1
    22a2:	4310      	orrs	r0, r2
    22a4:	d100      	bne.n	22a8 <__aeabi_dadd+0x210>
    22a6:	e0b4      	b.n	2412 <__aeabi_dadd+0x37a>
    22a8:	1e58      	subs	r0, r3, #1
    22aa:	2800      	cmp	r0, #0
    22ac:	d000      	beq.n	22b0 <__aeabi_dadd+0x218>
    22ae:	e0de      	b.n	246e <__aeabi_dadd+0x3d6>
    22b0:	18ba      	adds	r2, r7, r2
    22b2:	42ba      	cmp	r2, r7
    22b4:	419b      	sbcs	r3, r3
    22b6:	1864      	adds	r4, r4, r1
    22b8:	425b      	negs	r3, r3
    22ba:	18e4      	adds	r4, r4, r3
    22bc:	0017      	movs	r7, r2
    22be:	2601      	movs	r6, #1
    22c0:	0223      	lsls	r3, r4, #8
    22c2:	d5a6      	bpl.n	2212 <__aeabi_dadd+0x17a>
    22c4:	2602      	movs	r6, #2
    22c6:	e7d5      	b.n	2274 <__aeabi_dadd+0x1dc>
    22c8:	2d00      	cmp	r5, #0
    22ca:	d16e      	bne.n	23aa <__aeabi_dadd+0x312>
    22cc:	1c70      	adds	r0, r6, #1
    22ce:	0540      	lsls	r0, r0, #21
    22d0:	0d40      	lsrs	r0, r0, #21
    22d2:	2801      	cmp	r0, #1
    22d4:	dc00      	bgt.n	22d8 <__aeabi_dadd+0x240>
    22d6:	e0f9      	b.n	24cc <__aeabi_dadd+0x434>
    22d8:	1ab8      	subs	r0, r7, r2
    22da:	4684      	mov	ip, r0
    22dc:	4287      	cmp	r7, r0
    22de:	4180      	sbcs	r0, r0
    22e0:	1ae5      	subs	r5, r4, r3
    22e2:	4240      	negs	r0, r0
    22e4:	1a2d      	subs	r5, r5, r0
    22e6:	0228      	lsls	r0, r5, #8
    22e8:	d400      	bmi.n	22ec <__aeabi_dadd+0x254>
    22ea:	e089      	b.n	2400 <__aeabi_dadd+0x368>
    22ec:	1bd7      	subs	r7, r2, r7
    22ee:	42ba      	cmp	r2, r7
    22f0:	4192      	sbcs	r2, r2
    22f2:	1b1c      	subs	r4, r3, r4
    22f4:	4252      	negs	r2, r2
    22f6:	1aa5      	subs	r5, r4, r2
    22f8:	46d8      	mov	r8, fp
    22fa:	e729      	b.n	2150 <__aeabi_dadd+0xb8>
    22fc:	4645      	mov	r5, r8
    22fe:	2400      	movs	r4, #0
    2300:	2700      	movs	r7, #0
    2302:	e76a      	b.n	21da <__aeabi_dadd+0x142>
    2304:	4c45      	ldr	r4, [pc, #276]	; (241c <__aeabi_dadd+0x384>)
    2306:	1af6      	subs	r6, r6, r3
    2308:	402c      	ands	r4, r5
    230a:	e749      	b.n	21a0 <__aeabi_dadd+0x108>
    230c:	003d      	movs	r5, r7
    230e:	3828      	subs	r0, #40	; 0x28
    2310:	4085      	lsls	r5, r0
    2312:	2700      	movs	r7, #0
    2314:	e72e      	b.n	2174 <__aeabi_dadd+0xdc>
    2316:	0038      	movs	r0, r7
    2318:	f001 fb04 	bl	3924 <__clzsi2>
    231c:	3020      	adds	r0, #32
    231e:	e71d      	b.n	215c <__aeabi_dadd+0xc4>
    2320:	430a      	orrs	r2, r1
    2322:	1e51      	subs	r1, r2, #1
    2324:	418a      	sbcs	r2, r1
    2326:	2100      	movs	r1, #0
    2328:	e707      	b.n	213a <__aeabi_dadd+0xa2>
    232a:	2b00      	cmp	r3, #0
    232c:	d000      	beq.n	2330 <__aeabi_dadd+0x298>
    232e:	e0f3      	b.n	2518 <__aeabi_dadd+0x480>
    2330:	1c70      	adds	r0, r6, #1
    2332:	0543      	lsls	r3, r0, #21
    2334:	0d5b      	lsrs	r3, r3, #21
    2336:	2b01      	cmp	r3, #1
    2338:	dc00      	bgt.n	233c <__aeabi_dadd+0x2a4>
    233a:	e0ad      	b.n	2498 <__aeabi_dadd+0x400>
    233c:	4b36      	ldr	r3, [pc, #216]	; (2418 <__aeabi_dadd+0x380>)
    233e:	4298      	cmp	r0, r3
    2340:	d100      	bne.n	2344 <__aeabi_dadd+0x2ac>
    2342:	e0d1      	b.n	24e8 <__aeabi_dadd+0x450>
    2344:	18ba      	adds	r2, r7, r2
    2346:	42ba      	cmp	r2, r7
    2348:	41bf      	sbcs	r7, r7
    234a:	1864      	adds	r4, r4, r1
    234c:	427f      	negs	r7, r7
    234e:	19e4      	adds	r4, r4, r7
    2350:	07e7      	lsls	r7, r4, #31
    2352:	0852      	lsrs	r2, r2, #1
    2354:	4317      	orrs	r7, r2
    2356:	0864      	lsrs	r4, r4, #1
    2358:	0006      	movs	r6, r0
    235a:	e721      	b.n	21a0 <__aeabi_dadd+0x108>
    235c:	482e      	ldr	r0, [pc, #184]	; (2418 <__aeabi_dadd+0x380>)
    235e:	4285      	cmp	r5, r0
    2360:	d100      	bne.n	2364 <__aeabi_dadd+0x2cc>
    2362:	e093      	b.n	248c <__aeabi_dadd+0x3f4>
    2364:	001d      	movs	r5, r3
    2366:	e6d0      	b.n	210a <__aeabi_dadd+0x72>
    2368:	0029      	movs	r1, r5
    236a:	3e1f      	subs	r6, #31
    236c:	40f1      	lsrs	r1, r6
    236e:	2b20      	cmp	r3, #32
    2370:	d100      	bne.n	2374 <__aeabi_dadd+0x2dc>
    2372:	e08d      	b.n	2490 <__aeabi_dadd+0x3f8>
    2374:	2240      	movs	r2, #64	; 0x40
    2376:	1ad3      	subs	r3, r2, r3
    2378:	409d      	lsls	r5, r3
    237a:	432f      	orrs	r7, r5
    237c:	1e7d      	subs	r5, r7, #1
    237e:	41af      	sbcs	r7, r5
    2380:	2400      	movs	r4, #0
    2382:	430f      	orrs	r7, r1
    2384:	2600      	movs	r6, #0
    2386:	e744      	b.n	2212 <__aeabi_dadd+0x17a>
    2388:	002b      	movs	r3, r5
    238a:	0008      	movs	r0, r1
    238c:	3b20      	subs	r3, #32
    238e:	40d8      	lsrs	r0, r3
    2390:	0003      	movs	r3, r0
    2392:	2d20      	cmp	r5, #32
    2394:	d100      	bne.n	2398 <__aeabi_dadd+0x300>
    2396:	e07d      	b.n	2494 <__aeabi_dadd+0x3fc>
    2398:	2040      	movs	r0, #64	; 0x40
    239a:	1b45      	subs	r5, r0, r5
    239c:	40a9      	lsls	r1, r5
    239e:	430a      	orrs	r2, r1
    23a0:	1e51      	subs	r1, r2, #1
    23a2:	418a      	sbcs	r2, r1
    23a4:	2100      	movs	r1, #0
    23a6:	431a      	orrs	r2, r3
    23a8:	e6c7      	b.n	213a <__aeabi_dadd+0xa2>
    23aa:	2e00      	cmp	r6, #0
    23ac:	d050      	beq.n	2450 <__aeabi_dadd+0x3b8>
    23ae:	4e1a      	ldr	r6, [pc, #104]	; (2418 <__aeabi_dadd+0x380>)
    23b0:	42b0      	cmp	r0, r6
    23b2:	d057      	beq.n	2464 <__aeabi_dadd+0x3cc>
    23b4:	2680      	movs	r6, #128	; 0x80
    23b6:	426b      	negs	r3, r5
    23b8:	4699      	mov	r9, r3
    23ba:	0436      	lsls	r6, r6, #16
    23bc:	4334      	orrs	r4, r6
    23be:	464b      	mov	r3, r9
    23c0:	2b38      	cmp	r3, #56	; 0x38
    23c2:	dd00      	ble.n	23c6 <__aeabi_dadd+0x32e>
    23c4:	e0d6      	b.n	2574 <__aeabi_dadd+0x4dc>
    23c6:	2b1f      	cmp	r3, #31
    23c8:	dd00      	ble.n	23cc <__aeabi_dadd+0x334>
    23ca:	e135      	b.n	2638 <__aeabi_dadd+0x5a0>
    23cc:	2620      	movs	r6, #32
    23ce:	1af5      	subs	r5, r6, r3
    23d0:	0026      	movs	r6, r4
    23d2:	40ae      	lsls	r6, r5
    23d4:	46b2      	mov	sl, r6
    23d6:	003e      	movs	r6, r7
    23d8:	40de      	lsrs	r6, r3
    23da:	46ac      	mov	ip, r5
    23dc:	0035      	movs	r5, r6
    23de:	4656      	mov	r6, sl
    23e0:	432e      	orrs	r6, r5
    23e2:	4665      	mov	r5, ip
    23e4:	40af      	lsls	r7, r5
    23e6:	1e7d      	subs	r5, r7, #1
    23e8:	41af      	sbcs	r7, r5
    23ea:	40dc      	lsrs	r4, r3
    23ec:	4337      	orrs	r7, r6
    23ee:	1bd7      	subs	r7, r2, r7
    23f0:	42ba      	cmp	r2, r7
    23f2:	4192      	sbcs	r2, r2
    23f4:	1b0c      	subs	r4, r1, r4
    23f6:	4252      	negs	r2, r2
    23f8:	1aa4      	subs	r4, r4, r2
    23fa:	0006      	movs	r6, r0
    23fc:	46d8      	mov	r8, fp
    23fe:	e6a3      	b.n	2148 <__aeabi_dadd+0xb0>
    2400:	4664      	mov	r4, ip
    2402:	4667      	mov	r7, ip
    2404:	432c      	orrs	r4, r5
    2406:	d000      	beq.n	240a <__aeabi_dadd+0x372>
    2408:	e6a2      	b.n	2150 <__aeabi_dadd+0xb8>
    240a:	2500      	movs	r5, #0
    240c:	2600      	movs	r6, #0
    240e:	2700      	movs	r7, #0
    2410:	e706      	b.n	2220 <__aeabi_dadd+0x188>
    2412:	001e      	movs	r6, r3
    2414:	e6c4      	b.n	21a0 <__aeabi_dadd+0x108>
    2416:	46c0      	nop			; (mov r8, r8)
    2418:	000007ff 	.word	0x000007ff
    241c:	ff7fffff 	.word	0xff7fffff
    2420:	800fffff 	.word	0x800fffff
    2424:	2b1f      	cmp	r3, #31
    2426:	dc63      	bgt.n	24f0 <__aeabi_dadd+0x458>
    2428:	2020      	movs	r0, #32
    242a:	1ac3      	subs	r3, r0, r3
    242c:	0008      	movs	r0, r1
    242e:	4098      	lsls	r0, r3
    2430:	469c      	mov	ip, r3
    2432:	4683      	mov	fp, r0
    2434:	4653      	mov	r3, sl
    2436:	0010      	movs	r0, r2
    2438:	40d8      	lsrs	r0, r3
    243a:	0003      	movs	r3, r0
    243c:	4658      	mov	r0, fp
    243e:	4318      	orrs	r0, r3
    2440:	4663      	mov	r3, ip
    2442:	409a      	lsls	r2, r3
    2444:	1e53      	subs	r3, r2, #1
    2446:	419a      	sbcs	r2, r3
    2448:	4653      	mov	r3, sl
    244a:	4302      	orrs	r2, r0
    244c:	40d9      	lsrs	r1, r3
    244e:	e703      	b.n	2258 <__aeabi_dadd+0x1c0>
    2450:	0026      	movs	r6, r4
    2452:	433e      	orrs	r6, r7
    2454:	d006      	beq.n	2464 <__aeabi_dadd+0x3cc>
    2456:	43eb      	mvns	r3, r5
    2458:	4699      	mov	r9, r3
    245a:	2b00      	cmp	r3, #0
    245c:	d0c7      	beq.n	23ee <__aeabi_dadd+0x356>
    245e:	4e94      	ldr	r6, [pc, #592]	; (26b0 <__aeabi_dadd+0x618>)
    2460:	42b0      	cmp	r0, r6
    2462:	d1ac      	bne.n	23be <__aeabi_dadd+0x326>
    2464:	000c      	movs	r4, r1
    2466:	0017      	movs	r7, r2
    2468:	0006      	movs	r6, r0
    246a:	46d8      	mov	r8, fp
    246c:	e698      	b.n	21a0 <__aeabi_dadd+0x108>
    246e:	4b90      	ldr	r3, [pc, #576]	; (26b0 <__aeabi_dadd+0x618>)
    2470:	459a      	cmp	sl, r3
    2472:	d00b      	beq.n	248c <__aeabi_dadd+0x3f4>
    2474:	4682      	mov	sl, r0
    2476:	e6e7      	b.n	2248 <__aeabi_dadd+0x1b0>
    2478:	2800      	cmp	r0, #0
    247a:	d000      	beq.n	247e <__aeabi_dadd+0x3e6>
    247c:	e09e      	b.n	25bc <__aeabi_dadd+0x524>
    247e:	0018      	movs	r0, r3
    2480:	4310      	orrs	r0, r2
    2482:	d100      	bne.n	2486 <__aeabi_dadd+0x3ee>
    2484:	e0e9      	b.n	265a <__aeabi_dadd+0x5c2>
    2486:	001c      	movs	r4, r3
    2488:	0017      	movs	r7, r2
    248a:	46d8      	mov	r8, fp
    248c:	4e88      	ldr	r6, [pc, #544]	; (26b0 <__aeabi_dadd+0x618>)
    248e:	e687      	b.n	21a0 <__aeabi_dadd+0x108>
    2490:	2500      	movs	r5, #0
    2492:	e772      	b.n	237a <__aeabi_dadd+0x2e2>
    2494:	2100      	movs	r1, #0
    2496:	e782      	b.n	239e <__aeabi_dadd+0x306>
    2498:	0023      	movs	r3, r4
    249a:	433b      	orrs	r3, r7
    249c:	2e00      	cmp	r6, #0
    249e:	d000      	beq.n	24a2 <__aeabi_dadd+0x40a>
    24a0:	e0ab      	b.n	25fa <__aeabi_dadd+0x562>
    24a2:	2b00      	cmp	r3, #0
    24a4:	d100      	bne.n	24a8 <__aeabi_dadd+0x410>
    24a6:	e0e7      	b.n	2678 <__aeabi_dadd+0x5e0>
    24a8:	000b      	movs	r3, r1
    24aa:	4313      	orrs	r3, r2
    24ac:	d100      	bne.n	24b0 <__aeabi_dadd+0x418>
    24ae:	e677      	b.n	21a0 <__aeabi_dadd+0x108>
    24b0:	18ba      	adds	r2, r7, r2
    24b2:	42ba      	cmp	r2, r7
    24b4:	41bf      	sbcs	r7, r7
    24b6:	1864      	adds	r4, r4, r1
    24b8:	427f      	negs	r7, r7
    24ba:	19e4      	adds	r4, r4, r7
    24bc:	0223      	lsls	r3, r4, #8
    24be:	d400      	bmi.n	24c2 <__aeabi_dadd+0x42a>
    24c0:	e0f2      	b.n	26a8 <__aeabi_dadd+0x610>
    24c2:	4b7c      	ldr	r3, [pc, #496]	; (26b4 <__aeabi_dadd+0x61c>)
    24c4:	0017      	movs	r7, r2
    24c6:	401c      	ands	r4, r3
    24c8:	0006      	movs	r6, r0
    24ca:	e669      	b.n	21a0 <__aeabi_dadd+0x108>
    24cc:	0020      	movs	r0, r4
    24ce:	4338      	orrs	r0, r7
    24d0:	2e00      	cmp	r6, #0
    24d2:	d1d1      	bne.n	2478 <__aeabi_dadd+0x3e0>
    24d4:	2800      	cmp	r0, #0
    24d6:	d15b      	bne.n	2590 <__aeabi_dadd+0x4f8>
    24d8:	001c      	movs	r4, r3
    24da:	4314      	orrs	r4, r2
    24dc:	d100      	bne.n	24e0 <__aeabi_dadd+0x448>
    24de:	e0a8      	b.n	2632 <__aeabi_dadd+0x59a>
    24e0:	001c      	movs	r4, r3
    24e2:	0017      	movs	r7, r2
    24e4:	46d8      	mov	r8, fp
    24e6:	e65b      	b.n	21a0 <__aeabi_dadd+0x108>
    24e8:	0006      	movs	r6, r0
    24ea:	2400      	movs	r4, #0
    24ec:	2700      	movs	r7, #0
    24ee:	e697      	b.n	2220 <__aeabi_dadd+0x188>
    24f0:	4650      	mov	r0, sl
    24f2:	000b      	movs	r3, r1
    24f4:	3820      	subs	r0, #32
    24f6:	40c3      	lsrs	r3, r0
    24f8:	4699      	mov	r9, r3
    24fa:	4653      	mov	r3, sl
    24fc:	2b20      	cmp	r3, #32
    24fe:	d100      	bne.n	2502 <__aeabi_dadd+0x46a>
    2500:	e095      	b.n	262e <__aeabi_dadd+0x596>
    2502:	2340      	movs	r3, #64	; 0x40
    2504:	4650      	mov	r0, sl
    2506:	1a1b      	subs	r3, r3, r0
    2508:	4099      	lsls	r1, r3
    250a:	430a      	orrs	r2, r1
    250c:	1e51      	subs	r1, r2, #1
    250e:	418a      	sbcs	r2, r1
    2510:	464b      	mov	r3, r9
    2512:	2100      	movs	r1, #0
    2514:	431a      	orrs	r2, r3
    2516:	e69f      	b.n	2258 <__aeabi_dadd+0x1c0>
    2518:	2e00      	cmp	r6, #0
    251a:	d130      	bne.n	257e <__aeabi_dadd+0x4e6>
    251c:	0026      	movs	r6, r4
    251e:	433e      	orrs	r6, r7
    2520:	d067      	beq.n	25f2 <__aeabi_dadd+0x55a>
    2522:	43db      	mvns	r3, r3
    2524:	469a      	mov	sl, r3
    2526:	2b00      	cmp	r3, #0
    2528:	d01c      	beq.n	2564 <__aeabi_dadd+0x4cc>
    252a:	4e61      	ldr	r6, [pc, #388]	; (26b0 <__aeabi_dadd+0x618>)
    252c:	42b0      	cmp	r0, r6
    252e:	d060      	beq.n	25f2 <__aeabi_dadd+0x55a>
    2530:	4653      	mov	r3, sl
    2532:	2b38      	cmp	r3, #56	; 0x38
    2534:	dd00      	ble.n	2538 <__aeabi_dadd+0x4a0>
    2536:	e096      	b.n	2666 <__aeabi_dadd+0x5ce>
    2538:	2b1f      	cmp	r3, #31
    253a:	dd00      	ble.n	253e <__aeabi_dadd+0x4a6>
    253c:	e09f      	b.n	267e <__aeabi_dadd+0x5e6>
    253e:	2620      	movs	r6, #32
    2540:	1af3      	subs	r3, r6, r3
    2542:	0026      	movs	r6, r4
    2544:	409e      	lsls	r6, r3
    2546:	469c      	mov	ip, r3
    2548:	46b3      	mov	fp, r6
    254a:	4653      	mov	r3, sl
    254c:	003e      	movs	r6, r7
    254e:	40de      	lsrs	r6, r3
    2550:	0033      	movs	r3, r6
    2552:	465e      	mov	r6, fp
    2554:	431e      	orrs	r6, r3
    2556:	4663      	mov	r3, ip
    2558:	409f      	lsls	r7, r3
    255a:	1e7b      	subs	r3, r7, #1
    255c:	419f      	sbcs	r7, r3
    255e:	4653      	mov	r3, sl
    2560:	40dc      	lsrs	r4, r3
    2562:	4337      	orrs	r7, r6
    2564:	18bf      	adds	r7, r7, r2
    2566:	4297      	cmp	r7, r2
    2568:	4192      	sbcs	r2, r2
    256a:	1864      	adds	r4, r4, r1
    256c:	4252      	negs	r2, r2
    256e:	18a4      	adds	r4, r4, r2
    2570:	0006      	movs	r6, r0
    2572:	e678      	b.n	2266 <__aeabi_dadd+0x1ce>
    2574:	4327      	orrs	r7, r4
    2576:	1e7c      	subs	r4, r7, #1
    2578:	41a7      	sbcs	r7, r4
    257a:	2400      	movs	r4, #0
    257c:	e737      	b.n	23ee <__aeabi_dadd+0x356>
    257e:	4e4c      	ldr	r6, [pc, #304]	; (26b0 <__aeabi_dadd+0x618>)
    2580:	42b0      	cmp	r0, r6
    2582:	d036      	beq.n	25f2 <__aeabi_dadd+0x55a>
    2584:	2680      	movs	r6, #128	; 0x80
    2586:	425b      	negs	r3, r3
    2588:	0436      	lsls	r6, r6, #16
    258a:	469a      	mov	sl, r3
    258c:	4334      	orrs	r4, r6
    258e:	e7cf      	b.n	2530 <__aeabi_dadd+0x498>
    2590:	0018      	movs	r0, r3
    2592:	4310      	orrs	r0, r2
    2594:	d100      	bne.n	2598 <__aeabi_dadd+0x500>
    2596:	e603      	b.n	21a0 <__aeabi_dadd+0x108>
    2598:	1ab8      	subs	r0, r7, r2
    259a:	4684      	mov	ip, r0
    259c:	4567      	cmp	r7, ip
    259e:	41ad      	sbcs	r5, r5
    25a0:	1ae0      	subs	r0, r4, r3
    25a2:	426d      	negs	r5, r5
    25a4:	1b40      	subs	r0, r0, r5
    25a6:	0205      	lsls	r5, r0, #8
    25a8:	d400      	bmi.n	25ac <__aeabi_dadd+0x514>
    25aa:	e62c      	b.n	2206 <__aeabi_dadd+0x16e>
    25ac:	1bd7      	subs	r7, r2, r7
    25ae:	42ba      	cmp	r2, r7
    25b0:	4192      	sbcs	r2, r2
    25b2:	1b1c      	subs	r4, r3, r4
    25b4:	4252      	negs	r2, r2
    25b6:	1aa4      	subs	r4, r4, r2
    25b8:	46d8      	mov	r8, fp
    25ba:	e5f1      	b.n	21a0 <__aeabi_dadd+0x108>
    25bc:	0018      	movs	r0, r3
    25be:	4310      	orrs	r0, r2
    25c0:	d100      	bne.n	25c4 <__aeabi_dadd+0x52c>
    25c2:	e763      	b.n	248c <__aeabi_dadd+0x3f4>
    25c4:	08f8      	lsrs	r0, r7, #3
    25c6:	0767      	lsls	r7, r4, #29
    25c8:	4307      	orrs	r7, r0
    25ca:	2080      	movs	r0, #128	; 0x80
    25cc:	08e4      	lsrs	r4, r4, #3
    25ce:	0300      	lsls	r0, r0, #12
    25d0:	4204      	tst	r4, r0
    25d2:	d008      	beq.n	25e6 <__aeabi_dadd+0x54e>
    25d4:	08dd      	lsrs	r5, r3, #3
    25d6:	4205      	tst	r5, r0
    25d8:	d105      	bne.n	25e6 <__aeabi_dadd+0x54e>
    25da:	08d2      	lsrs	r2, r2, #3
    25dc:	0759      	lsls	r1, r3, #29
    25de:	4311      	orrs	r1, r2
    25e0:	000f      	movs	r7, r1
    25e2:	002c      	movs	r4, r5
    25e4:	46d8      	mov	r8, fp
    25e6:	0f7b      	lsrs	r3, r7, #29
    25e8:	00e4      	lsls	r4, r4, #3
    25ea:	431c      	orrs	r4, r3
    25ec:	00ff      	lsls	r7, r7, #3
    25ee:	4e30      	ldr	r6, [pc, #192]	; (26b0 <__aeabi_dadd+0x618>)
    25f0:	e5d6      	b.n	21a0 <__aeabi_dadd+0x108>
    25f2:	000c      	movs	r4, r1
    25f4:	0017      	movs	r7, r2
    25f6:	0006      	movs	r6, r0
    25f8:	e5d2      	b.n	21a0 <__aeabi_dadd+0x108>
    25fa:	2b00      	cmp	r3, #0
    25fc:	d038      	beq.n	2670 <__aeabi_dadd+0x5d8>
    25fe:	000b      	movs	r3, r1
    2600:	4313      	orrs	r3, r2
    2602:	d100      	bne.n	2606 <__aeabi_dadd+0x56e>
    2604:	e742      	b.n	248c <__aeabi_dadd+0x3f4>
    2606:	08f8      	lsrs	r0, r7, #3
    2608:	0767      	lsls	r7, r4, #29
    260a:	4307      	orrs	r7, r0
    260c:	2080      	movs	r0, #128	; 0x80
    260e:	08e4      	lsrs	r4, r4, #3
    2610:	0300      	lsls	r0, r0, #12
    2612:	4204      	tst	r4, r0
    2614:	d0e7      	beq.n	25e6 <__aeabi_dadd+0x54e>
    2616:	08cb      	lsrs	r3, r1, #3
    2618:	4203      	tst	r3, r0
    261a:	d1e4      	bne.n	25e6 <__aeabi_dadd+0x54e>
    261c:	08d2      	lsrs	r2, r2, #3
    261e:	0749      	lsls	r1, r1, #29
    2620:	4311      	orrs	r1, r2
    2622:	000f      	movs	r7, r1
    2624:	001c      	movs	r4, r3
    2626:	e7de      	b.n	25e6 <__aeabi_dadd+0x54e>
    2628:	2700      	movs	r7, #0
    262a:	2400      	movs	r4, #0
    262c:	e5d5      	b.n	21da <__aeabi_dadd+0x142>
    262e:	2100      	movs	r1, #0
    2630:	e76b      	b.n	250a <__aeabi_dadd+0x472>
    2632:	2500      	movs	r5, #0
    2634:	2700      	movs	r7, #0
    2636:	e5f3      	b.n	2220 <__aeabi_dadd+0x188>
    2638:	464e      	mov	r6, r9
    263a:	0025      	movs	r5, r4
    263c:	3e20      	subs	r6, #32
    263e:	40f5      	lsrs	r5, r6
    2640:	464b      	mov	r3, r9
    2642:	002e      	movs	r6, r5
    2644:	2b20      	cmp	r3, #32
    2646:	d02d      	beq.n	26a4 <__aeabi_dadd+0x60c>
    2648:	2540      	movs	r5, #64	; 0x40
    264a:	1aed      	subs	r5, r5, r3
    264c:	40ac      	lsls	r4, r5
    264e:	4327      	orrs	r7, r4
    2650:	1e7c      	subs	r4, r7, #1
    2652:	41a7      	sbcs	r7, r4
    2654:	2400      	movs	r4, #0
    2656:	4337      	orrs	r7, r6
    2658:	e6c9      	b.n	23ee <__aeabi_dadd+0x356>
    265a:	2480      	movs	r4, #128	; 0x80
    265c:	2500      	movs	r5, #0
    265e:	0324      	lsls	r4, r4, #12
    2660:	4e13      	ldr	r6, [pc, #76]	; (26b0 <__aeabi_dadd+0x618>)
    2662:	2700      	movs	r7, #0
    2664:	e5dc      	b.n	2220 <__aeabi_dadd+0x188>
    2666:	4327      	orrs	r7, r4
    2668:	1e7c      	subs	r4, r7, #1
    266a:	41a7      	sbcs	r7, r4
    266c:	2400      	movs	r4, #0
    266e:	e779      	b.n	2564 <__aeabi_dadd+0x4cc>
    2670:	000c      	movs	r4, r1
    2672:	0017      	movs	r7, r2
    2674:	4e0e      	ldr	r6, [pc, #56]	; (26b0 <__aeabi_dadd+0x618>)
    2676:	e593      	b.n	21a0 <__aeabi_dadd+0x108>
    2678:	000c      	movs	r4, r1
    267a:	0017      	movs	r7, r2
    267c:	e590      	b.n	21a0 <__aeabi_dadd+0x108>
    267e:	4656      	mov	r6, sl
    2680:	0023      	movs	r3, r4
    2682:	3e20      	subs	r6, #32
    2684:	40f3      	lsrs	r3, r6
    2686:	4699      	mov	r9, r3
    2688:	4653      	mov	r3, sl
    268a:	2b20      	cmp	r3, #32
    268c:	d00e      	beq.n	26ac <__aeabi_dadd+0x614>
    268e:	2340      	movs	r3, #64	; 0x40
    2690:	4656      	mov	r6, sl
    2692:	1b9b      	subs	r3, r3, r6
    2694:	409c      	lsls	r4, r3
    2696:	4327      	orrs	r7, r4
    2698:	1e7c      	subs	r4, r7, #1
    269a:	41a7      	sbcs	r7, r4
    269c:	464b      	mov	r3, r9
    269e:	2400      	movs	r4, #0
    26a0:	431f      	orrs	r7, r3
    26a2:	e75f      	b.n	2564 <__aeabi_dadd+0x4cc>
    26a4:	2400      	movs	r4, #0
    26a6:	e7d2      	b.n	264e <__aeabi_dadd+0x5b6>
    26a8:	0017      	movs	r7, r2
    26aa:	e5b2      	b.n	2212 <__aeabi_dadd+0x17a>
    26ac:	2400      	movs	r4, #0
    26ae:	e7f2      	b.n	2696 <__aeabi_dadd+0x5fe>
    26b0:	000007ff 	.word	0x000007ff
    26b4:	ff7fffff 	.word	0xff7fffff

000026b8 <__aeabi_ddiv>:
    26b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    26ba:	4657      	mov	r7, sl
    26bc:	4645      	mov	r5, r8
    26be:	46de      	mov	lr, fp
    26c0:	464e      	mov	r6, r9
    26c2:	b5e0      	push	{r5, r6, r7, lr}
    26c4:	004c      	lsls	r4, r1, #1
    26c6:	030e      	lsls	r6, r1, #12
    26c8:	b087      	sub	sp, #28
    26ca:	4683      	mov	fp, r0
    26cc:	4692      	mov	sl, r2
    26ce:	001d      	movs	r5, r3
    26d0:	4680      	mov	r8, r0
    26d2:	0b36      	lsrs	r6, r6, #12
    26d4:	0d64      	lsrs	r4, r4, #21
    26d6:	0fcf      	lsrs	r7, r1, #31
    26d8:	2c00      	cmp	r4, #0
    26da:	d04f      	beq.n	277c <__aeabi_ddiv+0xc4>
    26dc:	4b6f      	ldr	r3, [pc, #444]	; (289c <__aeabi_ddiv+0x1e4>)
    26de:	429c      	cmp	r4, r3
    26e0:	d035      	beq.n	274e <__aeabi_ddiv+0x96>
    26e2:	2380      	movs	r3, #128	; 0x80
    26e4:	0f42      	lsrs	r2, r0, #29
    26e6:	041b      	lsls	r3, r3, #16
    26e8:	00f6      	lsls	r6, r6, #3
    26ea:	4313      	orrs	r3, r2
    26ec:	4333      	orrs	r3, r6
    26ee:	4699      	mov	r9, r3
    26f0:	00c3      	lsls	r3, r0, #3
    26f2:	4698      	mov	r8, r3
    26f4:	4b6a      	ldr	r3, [pc, #424]	; (28a0 <__aeabi_ddiv+0x1e8>)
    26f6:	2600      	movs	r6, #0
    26f8:	469c      	mov	ip, r3
    26fa:	2300      	movs	r3, #0
    26fc:	4464      	add	r4, ip
    26fe:	9303      	str	r3, [sp, #12]
    2700:	032b      	lsls	r3, r5, #12
    2702:	0b1b      	lsrs	r3, r3, #12
    2704:	469b      	mov	fp, r3
    2706:	006b      	lsls	r3, r5, #1
    2708:	0fed      	lsrs	r5, r5, #31
    270a:	4650      	mov	r0, sl
    270c:	0d5b      	lsrs	r3, r3, #21
    270e:	9501      	str	r5, [sp, #4]
    2710:	d05e      	beq.n	27d0 <__aeabi_ddiv+0x118>
    2712:	4a62      	ldr	r2, [pc, #392]	; (289c <__aeabi_ddiv+0x1e4>)
    2714:	4293      	cmp	r3, r2
    2716:	d053      	beq.n	27c0 <__aeabi_ddiv+0x108>
    2718:	465a      	mov	r2, fp
    271a:	00d1      	lsls	r1, r2, #3
    271c:	2280      	movs	r2, #128	; 0x80
    271e:	0f40      	lsrs	r0, r0, #29
    2720:	0412      	lsls	r2, r2, #16
    2722:	4302      	orrs	r2, r0
    2724:	430a      	orrs	r2, r1
    2726:	4693      	mov	fp, r2
    2728:	4652      	mov	r2, sl
    272a:	00d1      	lsls	r1, r2, #3
    272c:	4a5c      	ldr	r2, [pc, #368]	; (28a0 <__aeabi_ddiv+0x1e8>)
    272e:	4694      	mov	ip, r2
    2730:	2200      	movs	r2, #0
    2732:	4463      	add	r3, ip
    2734:	0038      	movs	r0, r7
    2736:	4068      	eors	r0, r5
    2738:	4684      	mov	ip, r0
    273a:	9002      	str	r0, [sp, #8]
    273c:	1ae4      	subs	r4, r4, r3
    273e:	4316      	orrs	r6, r2
    2740:	2e0f      	cmp	r6, #15
    2742:	d900      	bls.n	2746 <__aeabi_ddiv+0x8e>
    2744:	e0b4      	b.n	28b0 <__aeabi_ddiv+0x1f8>
    2746:	4b57      	ldr	r3, [pc, #348]	; (28a4 <__aeabi_ddiv+0x1ec>)
    2748:	00b6      	lsls	r6, r6, #2
    274a:	599b      	ldr	r3, [r3, r6]
    274c:	469f      	mov	pc, r3
    274e:	0003      	movs	r3, r0
    2750:	4333      	orrs	r3, r6
    2752:	4699      	mov	r9, r3
    2754:	d16c      	bne.n	2830 <__aeabi_ddiv+0x178>
    2756:	2300      	movs	r3, #0
    2758:	4698      	mov	r8, r3
    275a:	3302      	adds	r3, #2
    275c:	2608      	movs	r6, #8
    275e:	9303      	str	r3, [sp, #12]
    2760:	e7ce      	b.n	2700 <__aeabi_ddiv+0x48>
    2762:	46cb      	mov	fp, r9
    2764:	4641      	mov	r1, r8
    2766:	9a03      	ldr	r2, [sp, #12]
    2768:	9701      	str	r7, [sp, #4]
    276a:	2a02      	cmp	r2, #2
    276c:	d165      	bne.n	283a <__aeabi_ddiv+0x182>
    276e:	9b01      	ldr	r3, [sp, #4]
    2770:	4c4a      	ldr	r4, [pc, #296]	; (289c <__aeabi_ddiv+0x1e4>)
    2772:	469c      	mov	ip, r3
    2774:	2300      	movs	r3, #0
    2776:	2200      	movs	r2, #0
    2778:	4698      	mov	r8, r3
    277a:	e06b      	b.n	2854 <__aeabi_ddiv+0x19c>
    277c:	0003      	movs	r3, r0
    277e:	4333      	orrs	r3, r6
    2780:	4699      	mov	r9, r3
    2782:	d04e      	beq.n	2822 <__aeabi_ddiv+0x16a>
    2784:	2e00      	cmp	r6, #0
    2786:	d100      	bne.n	278a <__aeabi_ddiv+0xd2>
    2788:	e1bc      	b.n	2b04 <__aeabi_ddiv+0x44c>
    278a:	0030      	movs	r0, r6
    278c:	f001 f8ca 	bl	3924 <__clzsi2>
    2790:	0003      	movs	r3, r0
    2792:	3b0b      	subs	r3, #11
    2794:	2b1c      	cmp	r3, #28
    2796:	dd00      	ble.n	279a <__aeabi_ddiv+0xe2>
    2798:	e1ac      	b.n	2af4 <__aeabi_ddiv+0x43c>
    279a:	221d      	movs	r2, #29
    279c:	1ad3      	subs	r3, r2, r3
    279e:	465a      	mov	r2, fp
    27a0:	0001      	movs	r1, r0
    27a2:	40da      	lsrs	r2, r3
    27a4:	3908      	subs	r1, #8
    27a6:	408e      	lsls	r6, r1
    27a8:	0013      	movs	r3, r2
    27aa:	4333      	orrs	r3, r6
    27ac:	4699      	mov	r9, r3
    27ae:	465b      	mov	r3, fp
    27b0:	408b      	lsls	r3, r1
    27b2:	4698      	mov	r8, r3
    27b4:	2300      	movs	r3, #0
    27b6:	4c3c      	ldr	r4, [pc, #240]	; (28a8 <__aeabi_ddiv+0x1f0>)
    27b8:	2600      	movs	r6, #0
    27ba:	1a24      	subs	r4, r4, r0
    27bc:	9303      	str	r3, [sp, #12]
    27be:	e79f      	b.n	2700 <__aeabi_ddiv+0x48>
    27c0:	4651      	mov	r1, sl
    27c2:	465a      	mov	r2, fp
    27c4:	4311      	orrs	r1, r2
    27c6:	d129      	bne.n	281c <__aeabi_ddiv+0x164>
    27c8:	2200      	movs	r2, #0
    27ca:	4693      	mov	fp, r2
    27cc:	3202      	adds	r2, #2
    27ce:	e7b1      	b.n	2734 <__aeabi_ddiv+0x7c>
    27d0:	4659      	mov	r1, fp
    27d2:	4301      	orrs	r1, r0
    27d4:	d01e      	beq.n	2814 <__aeabi_ddiv+0x15c>
    27d6:	465b      	mov	r3, fp
    27d8:	2b00      	cmp	r3, #0
    27da:	d100      	bne.n	27de <__aeabi_ddiv+0x126>
    27dc:	e19e      	b.n	2b1c <__aeabi_ddiv+0x464>
    27de:	4658      	mov	r0, fp
    27e0:	f001 f8a0 	bl	3924 <__clzsi2>
    27e4:	0003      	movs	r3, r0
    27e6:	3b0b      	subs	r3, #11
    27e8:	2b1c      	cmp	r3, #28
    27ea:	dd00      	ble.n	27ee <__aeabi_ddiv+0x136>
    27ec:	e18f      	b.n	2b0e <__aeabi_ddiv+0x456>
    27ee:	0002      	movs	r2, r0
    27f0:	4659      	mov	r1, fp
    27f2:	3a08      	subs	r2, #8
    27f4:	4091      	lsls	r1, r2
    27f6:	468b      	mov	fp, r1
    27f8:	211d      	movs	r1, #29
    27fa:	1acb      	subs	r3, r1, r3
    27fc:	4651      	mov	r1, sl
    27fe:	40d9      	lsrs	r1, r3
    2800:	000b      	movs	r3, r1
    2802:	4659      	mov	r1, fp
    2804:	430b      	orrs	r3, r1
    2806:	4651      	mov	r1, sl
    2808:	469b      	mov	fp, r3
    280a:	4091      	lsls	r1, r2
    280c:	4b26      	ldr	r3, [pc, #152]	; (28a8 <__aeabi_ddiv+0x1f0>)
    280e:	2200      	movs	r2, #0
    2810:	1a1b      	subs	r3, r3, r0
    2812:	e78f      	b.n	2734 <__aeabi_ddiv+0x7c>
    2814:	2300      	movs	r3, #0
    2816:	2201      	movs	r2, #1
    2818:	469b      	mov	fp, r3
    281a:	e78b      	b.n	2734 <__aeabi_ddiv+0x7c>
    281c:	4651      	mov	r1, sl
    281e:	2203      	movs	r2, #3
    2820:	e788      	b.n	2734 <__aeabi_ddiv+0x7c>
    2822:	2300      	movs	r3, #0
    2824:	4698      	mov	r8, r3
    2826:	3301      	adds	r3, #1
    2828:	2604      	movs	r6, #4
    282a:	2400      	movs	r4, #0
    282c:	9303      	str	r3, [sp, #12]
    282e:	e767      	b.n	2700 <__aeabi_ddiv+0x48>
    2830:	2303      	movs	r3, #3
    2832:	46b1      	mov	r9, r6
    2834:	9303      	str	r3, [sp, #12]
    2836:	260c      	movs	r6, #12
    2838:	e762      	b.n	2700 <__aeabi_ddiv+0x48>
    283a:	2a03      	cmp	r2, #3
    283c:	d100      	bne.n	2840 <__aeabi_ddiv+0x188>
    283e:	e25c      	b.n	2cfa <__aeabi_ddiv+0x642>
    2840:	9b01      	ldr	r3, [sp, #4]
    2842:	2a01      	cmp	r2, #1
    2844:	d000      	beq.n	2848 <__aeabi_ddiv+0x190>
    2846:	e1e4      	b.n	2c12 <__aeabi_ddiv+0x55a>
    2848:	4013      	ands	r3, r2
    284a:	469c      	mov	ip, r3
    284c:	2300      	movs	r3, #0
    284e:	2400      	movs	r4, #0
    2850:	2200      	movs	r2, #0
    2852:	4698      	mov	r8, r3
    2854:	2100      	movs	r1, #0
    2856:	0312      	lsls	r2, r2, #12
    2858:	0b13      	lsrs	r3, r2, #12
    285a:	0d0a      	lsrs	r2, r1, #20
    285c:	0512      	lsls	r2, r2, #20
    285e:	431a      	orrs	r2, r3
    2860:	0523      	lsls	r3, r4, #20
    2862:	4c12      	ldr	r4, [pc, #72]	; (28ac <__aeabi_ddiv+0x1f4>)
    2864:	4640      	mov	r0, r8
    2866:	4022      	ands	r2, r4
    2868:	4313      	orrs	r3, r2
    286a:	4662      	mov	r2, ip
    286c:	005b      	lsls	r3, r3, #1
    286e:	07d2      	lsls	r2, r2, #31
    2870:	085b      	lsrs	r3, r3, #1
    2872:	4313      	orrs	r3, r2
    2874:	0019      	movs	r1, r3
    2876:	b007      	add	sp, #28
    2878:	bc3c      	pop	{r2, r3, r4, r5}
    287a:	4690      	mov	r8, r2
    287c:	4699      	mov	r9, r3
    287e:	46a2      	mov	sl, r4
    2880:	46ab      	mov	fp, r5
    2882:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2884:	2300      	movs	r3, #0
    2886:	2280      	movs	r2, #128	; 0x80
    2888:	469c      	mov	ip, r3
    288a:	0312      	lsls	r2, r2, #12
    288c:	4698      	mov	r8, r3
    288e:	4c03      	ldr	r4, [pc, #12]	; (289c <__aeabi_ddiv+0x1e4>)
    2890:	e7e0      	b.n	2854 <__aeabi_ddiv+0x19c>
    2892:	2300      	movs	r3, #0
    2894:	4c01      	ldr	r4, [pc, #4]	; (289c <__aeabi_ddiv+0x1e4>)
    2896:	2200      	movs	r2, #0
    2898:	4698      	mov	r8, r3
    289a:	e7db      	b.n	2854 <__aeabi_ddiv+0x19c>
    289c:	000007ff 	.word	0x000007ff
    28a0:	fffffc01 	.word	0xfffffc01
    28a4:	00003af0 	.word	0x00003af0
    28a8:	fffffc0d 	.word	0xfffffc0d
    28ac:	800fffff 	.word	0x800fffff
    28b0:	45d9      	cmp	r9, fp
    28b2:	d900      	bls.n	28b6 <__aeabi_ddiv+0x1fe>
    28b4:	e139      	b.n	2b2a <__aeabi_ddiv+0x472>
    28b6:	d100      	bne.n	28ba <__aeabi_ddiv+0x202>
    28b8:	e134      	b.n	2b24 <__aeabi_ddiv+0x46c>
    28ba:	2300      	movs	r3, #0
    28bc:	4646      	mov	r6, r8
    28be:	464d      	mov	r5, r9
    28c0:	469a      	mov	sl, r3
    28c2:	3c01      	subs	r4, #1
    28c4:	465b      	mov	r3, fp
    28c6:	0e0a      	lsrs	r2, r1, #24
    28c8:	021b      	lsls	r3, r3, #8
    28ca:	431a      	orrs	r2, r3
    28cc:	020b      	lsls	r3, r1, #8
    28ce:	0c17      	lsrs	r7, r2, #16
    28d0:	9303      	str	r3, [sp, #12]
    28d2:	0413      	lsls	r3, r2, #16
    28d4:	0c1b      	lsrs	r3, r3, #16
    28d6:	0039      	movs	r1, r7
    28d8:	0028      	movs	r0, r5
    28da:	4690      	mov	r8, r2
    28dc:	9301      	str	r3, [sp, #4]
    28de:	f7ff fb25 	bl	1f2c <__udivsi3>
    28e2:	0002      	movs	r2, r0
    28e4:	9b01      	ldr	r3, [sp, #4]
    28e6:	4683      	mov	fp, r0
    28e8:	435a      	muls	r2, r3
    28ea:	0028      	movs	r0, r5
    28ec:	0039      	movs	r1, r7
    28ee:	4691      	mov	r9, r2
    28f0:	f7ff fba2 	bl	2038 <__aeabi_uidivmod>
    28f4:	0c35      	lsrs	r5, r6, #16
    28f6:	0409      	lsls	r1, r1, #16
    28f8:	430d      	orrs	r5, r1
    28fa:	45a9      	cmp	r9, r5
    28fc:	d90d      	bls.n	291a <__aeabi_ddiv+0x262>
    28fe:	465b      	mov	r3, fp
    2900:	4445      	add	r5, r8
    2902:	3b01      	subs	r3, #1
    2904:	45a8      	cmp	r8, r5
    2906:	d900      	bls.n	290a <__aeabi_ddiv+0x252>
    2908:	e13a      	b.n	2b80 <__aeabi_ddiv+0x4c8>
    290a:	45a9      	cmp	r9, r5
    290c:	d800      	bhi.n	2910 <__aeabi_ddiv+0x258>
    290e:	e137      	b.n	2b80 <__aeabi_ddiv+0x4c8>
    2910:	2302      	movs	r3, #2
    2912:	425b      	negs	r3, r3
    2914:	469c      	mov	ip, r3
    2916:	4445      	add	r5, r8
    2918:	44e3      	add	fp, ip
    291a:	464b      	mov	r3, r9
    291c:	1aeb      	subs	r3, r5, r3
    291e:	0039      	movs	r1, r7
    2920:	0018      	movs	r0, r3
    2922:	9304      	str	r3, [sp, #16]
    2924:	f7ff fb02 	bl	1f2c <__udivsi3>
    2928:	9b01      	ldr	r3, [sp, #4]
    292a:	0005      	movs	r5, r0
    292c:	4343      	muls	r3, r0
    292e:	0039      	movs	r1, r7
    2930:	9804      	ldr	r0, [sp, #16]
    2932:	4699      	mov	r9, r3
    2934:	f7ff fb80 	bl	2038 <__aeabi_uidivmod>
    2938:	0433      	lsls	r3, r6, #16
    293a:	0409      	lsls	r1, r1, #16
    293c:	0c1b      	lsrs	r3, r3, #16
    293e:	430b      	orrs	r3, r1
    2940:	4599      	cmp	r9, r3
    2942:	d909      	bls.n	2958 <__aeabi_ddiv+0x2a0>
    2944:	4443      	add	r3, r8
    2946:	1e6a      	subs	r2, r5, #1
    2948:	4598      	cmp	r8, r3
    294a:	d900      	bls.n	294e <__aeabi_ddiv+0x296>
    294c:	e11a      	b.n	2b84 <__aeabi_ddiv+0x4cc>
    294e:	4599      	cmp	r9, r3
    2950:	d800      	bhi.n	2954 <__aeabi_ddiv+0x29c>
    2952:	e117      	b.n	2b84 <__aeabi_ddiv+0x4cc>
    2954:	3d02      	subs	r5, #2
    2956:	4443      	add	r3, r8
    2958:	464a      	mov	r2, r9
    295a:	1a9b      	subs	r3, r3, r2
    295c:	465a      	mov	r2, fp
    295e:	0412      	lsls	r2, r2, #16
    2960:	432a      	orrs	r2, r5
    2962:	9903      	ldr	r1, [sp, #12]
    2964:	4693      	mov	fp, r2
    2966:	0c10      	lsrs	r0, r2, #16
    2968:	0c0a      	lsrs	r2, r1, #16
    296a:	4691      	mov	r9, r2
    296c:	0409      	lsls	r1, r1, #16
    296e:	465a      	mov	r2, fp
    2970:	0c09      	lsrs	r1, r1, #16
    2972:	464e      	mov	r6, r9
    2974:	000d      	movs	r5, r1
    2976:	0412      	lsls	r2, r2, #16
    2978:	0c12      	lsrs	r2, r2, #16
    297a:	4345      	muls	r5, r0
    297c:	9105      	str	r1, [sp, #20]
    297e:	4351      	muls	r1, r2
    2980:	4372      	muls	r2, r6
    2982:	4370      	muls	r0, r6
    2984:	1952      	adds	r2, r2, r5
    2986:	0c0e      	lsrs	r6, r1, #16
    2988:	18b2      	adds	r2, r6, r2
    298a:	4295      	cmp	r5, r2
    298c:	d903      	bls.n	2996 <__aeabi_ddiv+0x2de>
    298e:	2580      	movs	r5, #128	; 0x80
    2990:	026d      	lsls	r5, r5, #9
    2992:	46ac      	mov	ip, r5
    2994:	4460      	add	r0, ip
    2996:	0c15      	lsrs	r5, r2, #16
    2998:	0409      	lsls	r1, r1, #16
    299a:	0412      	lsls	r2, r2, #16
    299c:	0c09      	lsrs	r1, r1, #16
    299e:	1828      	adds	r0, r5, r0
    29a0:	1852      	adds	r2, r2, r1
    29a2:	4283      	cmp	r3, r0
    29a4:	d200      	bcs.n	29a8 <__aeabi_ddiv+0x2f0>
    29a6:	e0ce      	b.n	2b46 <__aeabi_ddiv+0x48e>
    29a8:	d100      	bne.n	29ac <__aeabi_ddiv+0x2f4>
    29aa:	e0c8      	b.n	2b3e <__aeabi_ddiv+0x486>
    29ac:	1a1d      	subs	r5, r3, r0
    29ae:	4653      	mov	r3, sl
    29b0:	1a9e      	subs	r6, r3, r2
    29b2:	45b2      	cmp	sl, r6
    29b4:	4192      	sbcs	r2, r2
    29b6:	4252      	negs	r2, r2
    29b8:	1aab      	subs	r3, r5, r2
    29ba:	469a      	mov	sl, r3
    29bc:	4598      	cmp	r8, r3
    29be:	d100      	bne.n	29c2 <__aeabi_ddiv+0x30a>
    29c0:	e117      	b.n	2bf2 <__aeabi_ddiv+0x53a>
    29c2:	0039      	movs	r1, r7
    29c4:	0018      	movs	r0, r3
    29c6:	f7ff fab1 	bl	1f2c <__udivsi3>
    29ca:	9b01      	ldr	r3, [sp, #4]
    29cc:	0005      	movs	r5, r0
    29ce:	4343      	muls	r3, r0
    29d0:	0039      	movs	r1, r7
    29d2:	4650      	mov	r0, sl
    29d4:	9304      	str	r3, [sp, #16]
    29d6:	f7ff fb2f 	bl	2038 <__aeabi_uidivmod>
    29da:	9804      	ldr	r0, [sp, #16]
    29dc:	040b      	lsls	r3, r1, #16
    29de:	0c31      	lsrs	r1, r6, #16
    29e0:	4319      	orrs	r1, r3
    29e2:	4288      	cmp	r0, r1
    29e4:	d909      	bls.n	29fa <__aeabi_ddiv+0x342>
    29e6:	4441      	add	r1, r8
    29e8:	1e6b      	subs	r3, r5, #1
    29ea:	4588      	cmp	r8, r1
    29ec:	d900      	bls.n	29f0 <__aeabi_ddiv+0x338>
    29ee:	e107      	b.n	2c00 <__aeabi_ddiv+0x548>
    29f0:	4288      	cmp	r0, r1
    29f2:	d800      	bhi.n	29f6 <__aeabi_ddiv+0x33e>
    29f4:	e104      	b.n	2c00 <__aeabi_ddiv+0x548>
    29f6:	3d02      	subs	r5, #2
    29f8:	4441      	add	r1, r8
    29fa:	9b04      	ldr	r3, [sp, #16]
    29fc:	1acb      	subs	r3, r1, r3
    29fe:	0018      	movs	r0, r3
    2a00:	0039      	movs	r1, r7
    2a02:	9304      	str	r3, [sp, #16]
    2a04:	f7ff fa92 	bl	1f2c <__udivsi3>
    2a08:	9b01      	ldr	r3, [sp, #4]
    2a0a:	4682      	mov	sl, r0
    2a0c:	4343      	muls	r3, r0
    2a0e:	0039      	movs	r1, r7
    2a10:	9804      	ldr	r0, [sp, #16]
    2a12:	9301      	str	r3, [sp, #4]
    2a14:	f7ff fb10 	bl	2038 <__aeabi_uidivmod>
    2a18:	9801      	ldr	r0, [sp, #4]
    2a1a:	040b      	lsls	r3, r1, #16
    2a1c:	0431      	lsls	r1, r6, #16
    2a1e:	0c09      	lsrs	r1, r1, #16
    2a20:	4319      	orrs	r1, r3
    2a22:	4288      	cmp	r0, r1
    2a24:	d90d      	bls.n	2a42 <__aeabi_ddiv+0x38a>
    2a26:	4653      	mov	r3, sl
    2a28:	4441      	add	r1, r8
    2a2a:	3b01      	subs	r3, #1
    2a2c:	4588      	cmp	r8, r1
    2a2e:	d900      	bls.n	2a32 <__aeabi_ddiv+0x37a>
    2a30:	e0e8      	b.n	2c04 <__aeabi_ddiv+0x54c>
    2a32:	4288      	cmp	r0, r1
    2a34:	d800      	bhi.n	2a38 <__aeabi_ddiv+0x380>
    2a36:	e0e5      	b.n	2c04 <__aeabi_ddiv+0x54c>
    2a38:	2302      	movs	r3, #2
    2a3a:	425b      	negs	r3, r3
    2a3c:	469c      	mov	ip, r3
    2a3e:	4441      	add	r1, r8
    2a40:	44e2      	add	sl, ip
    2a42:	9b01      	ldr	r3, [sp, #4]
    2a44:	042d      	lsls	r5, r5, #16
    2a46:	1ace      	subs	r6, r1, r3
    2a48:	4651      	mov	r1, sl
    2a4a:	4329      	orrs	r1, r5
    2a4c:	9d05      	ldr	r5, [sp, #20]
    2a4e:	464f      	mov	r7, r9
    2a50:	002a      	movs	r2, r5
    2a52:	040b      	lsls	r3, r1, #16
    2a54:	0c08      	lsrs	r0, r1, #16
    2a56:	0c1b      	lsrs	r3, r3, #16
    2a58:	435a      	muls	r2, r3
    2a5a:	4345      	muls	r5, r0
    2a5c:	437b      	muls	r3, r7
    2a5e:	4378      	muls	r0, r7
    2a60:	195b      	adds	r3, r3, r5
    2a62:	0c17      	lsrs	r7, r2, #16
    2a64:	18fb      	adds	r3, r7, r3
    2a66:	429d      	cmp	r5, r3
    2a68:	d903      	bls.n	2a72 <__aeabi_ddiv+0x3ba>
    2a6a:	2580      	movs	r5, #128	; 0x80
    2a6c:	026d      	lsls	r5, r5, #9
    2a6e:	46ac      	mov	ip, r5
    2a70:	4460      	add	r0, ip
    2a72:	0c1d      	lsrs	r5, r3, #16
    2a74:	0412      	lsls	r2, r2, #16
    2a76:	041b      	lsls	r3, r3, #16
    2a78:	0c12      	lsrs	r2, r2, #16
    2a7a:	1828      	adds	r0, r5, r0
    2a7c:	189b      	adds	r3, r3, r2
    2a7e:	4286      	cmp	r6, r0
    2a80:	d200      	bcs.n	2a84 <__aeabi_ddiv+0x3cc>
    2a82:	e093      	b.n	2bac <__aeabi_ddiv+0x4f4>
    2a84:	d100      	bne.n	2a88 <__aeabi_ddiv+0x3d0>
    2a86:	e08e      	b.n	2ba6 <__aeabi_ddiv+0x4ee>
    2a88:	2301      	movs	r3, #1
    2a8a:	4319      	orrs	r1, r3
    2a8c:	4ba0      	ldr	r3, [pc, #640]	; (2d10 <__aeabi_ddiv+0x658>)
    2a8e:	18e3      	adds	r3, r4, r3
    2a90:	2b00      	cmp	r3, #0
    2a92:	dc00      	bgt.n	2a96 <__aeabi_ddiv+0x3de>
    2a94:	e099      	b.n	2bca <__aeabi_ddiv+0x512>
    2a96:	074a      	lsls	r2, r1, #29
    2a98:	d000      	beq.n	2a9c <__aeabi_ddiv+0x3e4>
    2a9a:	e09e      	b.n	2bda <__aeabi_ddiv+0x522>
    2a9c:	465a      	mov	r2, fp
    2a9e:	01d2      	lsls	r2, r2, #7
    2aa0:	d506      	bpl.n	2ab0 <__aeabi_ddiv+0x3f8>
    2aa2:	465a      	mov	r2, fp
    2aa4:	4b9b      	ldr	r3, [pc, #620]	; (2d14 <__aeabi_ddiv+0x65c>)
    2aa6:	401a      	ands	r2, r3
    2aa8:	2380      	movs	r3, #128	; 0x80
    2aaa:	4693      	mov	fp, r2
    2aac:	00db      	lsls	r3, r3, #3
    2aae:	18e3      	adds	r3, r4, r3
    2ab0:	4a99      	ldr	r2, [pc, #612]	; (2d18 <__aeabi_ddiv+0x660>)
    2ab2:	4293      	cmp	r3, r2
    2ab4:	dd68      	ble.n	2b88 <__aeabi_ddiv+0x4d0>
    2ab6:	2301      	movs	r3, #1
    2ab8:	9a02      	ldr	r2, [sp, #8]
    2aba:	4c98      	ldr	r4, [pc, #608]	; (2d1c <__aeabi_ddiv+0x664>)
    2abc:	401a      	ands	r2, r3
    2abe:	2300      	movs	r3, #0
    2ac0:	4694      	mov	ip, r2
    2ac2:	4698      	mov	r8, r3
    2ac4:	2200      	movs	r2, #0
    2ac6:	e6c5      	b.n	2854 <__aeabi_ddiv+0x19c>
    2ac8:	2280      	movs	r2, #128	; 0x80
    2aca:	464b      	mov	r3, r9
    2acc:	0312      	lsls	r2, r2, #12
    2ace:	4213      	tst	r3, r2
    2ad0:	d00a      	beq.n	2ae8 <__aeabi_ddiv+0x430>
    2ad2:	465b      	mov	r3, fp
    2ad4:	4213      	tst	r3, r2
    2ad6:	d106      	bne.n	2ae6 <__aeabi_ddiv+0x42e>
    2ad8:	431a      	orrs	r2, r3
    2ada:	0312      	lsls	r2, r2, #12
    2adc:	0b12      	lsrs	r2, r2, #12
    2ade:	46ac      	mov	ip, r5
    2ae0:	4688      	mov	r8, r1
    2ae2:	4c8e      	ldr	r4, [pc, #568]	; (2d1c <__aeabi_ddiv+0x664>)
    2ae4:	e6b6      	b.n	2854 <__aeabi_ddiv+0x19c>
    2ae6:	464b      	mov	r3, r9
    2ae8:	431a      	orrs	r2, r3
    2aea:	0312      	lsls	r2, r2, #12
    2aec:	0b12      	lsrs	r2, r2, #12
    2aee:	46bc      	mov	ip, r7
    2af0:	4c8a      	ldr	r4, [pc, #552]	; (2d1c <__aeabi_ddiv+0x664>)
    2af2:	e6af      	b.n	2854 <__aeabi_ddiv+0x19c>
    2af4:	0003      	movs	r3, r0
    2af6:	465a      	mov	r2, fp
    2af8:	3b28      	subs	r3, #40	; 0x28
    2afa:	409a      	lsls	r2, r3
    2afc:	2300      	movs	r3, #0
    2afe:	4691      	mov	r9, r2
    2b00:	4698      	mov	r8, r3
    2b02:	e657      	b.n	27b4 <__aeabi_ddiv+0xfc>
    2b04:	4658      	mov	r0, fp
    2b06:	f000 ff0d 	bl	3924 <__clzsi2>
    2b0a:	3020      	adds	r0, #32
    2b0c:	e640      	b.n	2790 <__aeabi_ddiv+0xd8>
    2b0e:	0003      	movs	r3, r0
    2b10:	4652      	mov	r2, sl
    2b12:	3b28      	subs	r3, #40	; 0x28
    2b14:	409a      	lsls	r2, r3
    2b16:	2100      	movs	r1, #0
    2b18:	4693      	mov	fp, r2
    2b1a:	e677      	b.n	280c <__aeabi_ddiv+0x154>
    2b1c:	f000 ff02 	bl	3924 <__clzsi2>
    2b20:	3020      	adds	r0, #32
    2b22:	e65f      	b.n	27e4 <__aeabi_ddiv+0x12c>
    2b24:	4588      	cmp	r8, r1
    2b26:	d200      	bcs.n	2b2a <__aeabi_ddiv+0x472>
    2b28:	e6c7      	b.n	28ba <__aeabi_ddiv+0x202>
    2b2a:	464b      	mov	r3, r9
    2b2c:	07de      	lsls	r6, r3, #31
    2b2e:	085d      	lsrs	r5, r3, #1
    2b30:	4643      	mov	r3, r8
    2b32:	085b      	lsrs	r3, r3, #1
    2b34:	431e      	orrs	r6, r3
    2b36:	4643      	mov	r3, r8
    2b38:	07db      	lsls	r3, r3, #31
    2b3a:	469a      	mov	sl, r3
    2b3c:	e6c2      	b.n	28c4 <__aeabi_ddiv+0x20c>
    2b3e:	2500      	movs	r5, #0
    2b40:	4592      	cmp	sl, r2
    2b42:	d300      	bcc.n	2b46 <__aeabi_ddiv+0x48e>
    2b44:	e733      	b.n	29ae <__aeabi_ddiv+0x2f6>
    2b46:	9e03      	ldr	r6, [sp, #12]
    2b48:	4659      	mov	r1, fp
    2b4a:	46b4      	mov	ip, r6
    2b4c:	44e2      	add	sl, ip
    2b4e:	45b2      	cmp	sl, r6
    2b50:	41ad      	sbcs	r5, r5
    2b52:	426d      	negs	r5, r5
    2b54:	4445      	add	r5, r8
    2b56:	18eb      	adds	r3, r5, r3
    2b58:	3901      	subs	r1, #1
    2b5a:	4598      	cmp	r8, r3
    2b5c:	d207      	bcs.n	2b6e <__aeabi_ddiv+0x4b6>
    2b5e:	4298      	cmp	r0, r3
    2b60:	d900      	bls.n	2b64 <__aeabi_ddiv+0x4ac>
    2b62:	e07f      	b.n	2c64 <__aeabi_ddiv+0x5ac>
    2b64:	d100      	bne.n	2b68 <__aeabi_ddiv+0x4b0>
    2b66:	e0bc      	b.n	2ce2 <__aeabi_ddiv+0x62a>
    2b68:	1a1d      	subs	r5, r3, r0
    2b6a:	468b      	mov	fp, r1
    2b6c:	e71f      	b.n	29ae <__aeabi_ddiv+0x2f6>
    2b6e:	4598      	cmp	r8, r3
    2b70:	d1fa      	bne.n	2b68 <__aeabi_ddiv+0x4b0>
    2b72:	9d03      	ldr	r5, [sp, #12]
    2b74:	4555      	cmp	r5, sl
    2b76:	d9f2      	bls.n	2b5e <__aeabi_ddiv+0x4a6>
    2b78:	4643      	mov	r3, r8
    2b7a:	468b      	mov	fp, r1
    2b7c:	1a1d      	subs	r5, r3, r0
    2b7e:	e716      	b.n	29ae <__aeabi_ddiv+0x2f6>
    2b80:	469b      	mov	fp, r3
    2b82:	e6ca      	b.n	291a <__aeabi_ddiv+0x262>
    2b84:	0015      	movs	r5, r2
    2b86:	e6e7      	b.n	2958 <__aeabi_ddiv+0x2a0>
    2b88:	465a      	mov	r2, fp
    2b8a:	08c9      	lsrs	r1, r1, #3
    2b8c:	0752      	lsls	r2, r2, #29
    2b8e:	430a      	orrs	r2, r1
    2b90:	055b      	lsls	r3, r3, #21
    2b92:	4690      	mov	r8, r2
    2b94:	0d5c      	lsrs	r4, r3, #21
    2b96:	465a      	mov	r2, fp
    2b98:	2301      	movs	r3, #1
    2b9a:	9902      	ldr	r1, [sp, #8]
    2b9c:	0252      	lsls	r2, r2, #9
    2b9e:	4019      	ands	r1, r3
    2ba0:	0b12      	lsrs	r2, r2, #12
    2ba2:	468c      	mov	ip, r1
    2ba4:	e656      	b.n	2854 <__aeabi_ddiv+0x19c>
    2ba6:	2b00      	cmp	r3, #0
    2ba8:	d100      	bne.n	2bac <__aeabi_ddiv+0x4f4>
    2baa:	e76f      	b.n	2a8c <__aeabi_ddiv+0x3d4>
    2bac:	4446      	add	r6, r8
    2bae:	1e4a      	subs	r2, r1, #1
    2bb0:	45b0      	cmp	r8, r6
    2bb2:	d929      	bls.n	2c08 <__aeabi_ddiv+0x550>
    2bb4:	0011      	movs	r1, r2
    2bb6:	4286      	cmp	r6, r0
    2bb8:	d000      	beq.n	2bbc <__aeabi_ddiv+0x504>
    2bba:	e765      	b.n	2a88 <__aeabi_ddiv+0x3d0>
    2bbc:	9a03      	ldr	r2, [sp, #12]
    2bbe:	4293      	cmp	r3, r2
    2bc0:	d000      	beq.n	2bc4 <__aeabi_ddiv+0x50c>
    2bc2:	e761      	b.n	2a88 <__aeabi_ddiv+0x3d0>
    2bc4:	e762      	b.n	2a8c <__aeabi_ddiv+0x3d4>
    2bc6:	2101      	movs	r1, #1
    2bc8:	4249      	negs	r1, r1
    2bca:	2001      	movs	r0, #1
    2bcc:	1ac2      	subs	r2, r0, r3
    2bce:	2a38      	cmp	r2, #56	; 0x38
    2bd0:	dd21      	ble.n	2c16 <__aeabi_ddiv+0x55e>
    2bd2:	9b02      	ldr	r3, [sp, #8]
    2bd4:	4003      	ands	r3, r0
    2bd6:	469c      	mov	ip, r3
    2bd8:	e638      	b.n	284c <__aeabi_ddiv+0x194>
    2bda:	220f      	movs	r2, #15
    2bdc:	400a      	ands	r2, r1
    2bde:	2a04      	cmp	r2, #4
    2be0:	d100      	bne.n	2be4 <__aeabi_ddiv+0x52c>
    2be2:	e75b      	b.n	2a9c <__aeabi_ddiv+0x3e4>
    2be4:	000a      	movs	r2, r1
    2be6:	1d11      	adds	r1, r2, #4
    2be8:	4291      	cmp	r1, r2
    2bea:	4192      	sbcs	r2, r2
    2bec:	4252      	negs	r2, r2
    2bee:	4493      	add	fp, r2
    2bf0:	e754      	b.n	2a9c <__aeabi_ddiv+0x3e4>
    2bf2:	4b47      	ldr	r3, [pc, #284]	; (2d10 <__aeabi_ddiv+0x658>)
    2bf4:	18e3      	adds	r3, r4, r3
    2bf6:	2b00      	cmp	r3, #0
    2bf8:	dde5      	ble.n	2bc6 <__aeabi_ddiv+0x50e>
    2bfa:	2201      	movs	r2, #1
    2bfc:	4252      	negs	r2, r2
    2bfe:	e7f2      	b.n	2be6 <__aeabi_ddiv+0x52e>
    2c00:	001d      	movs	r5, r3
    2c02:	e6fa      	b.n	29fa <__aeabi_ddiv+0x342>
    2c04:	469a      	mov	sl, r3
    2c06:	e71c      	b.n	2a42 <__aeabi_ddiv+0x38a>
    2c08:	42b0      	cmp	r0, r6
    2c0a:	d839      	bhi.n	2c80 <__aeabi_ddiv+0x5c8>
    2c0c:	d06e      	beq.n	2cec <__aeabi_ddiv+0x634>
    2c0e:	0011      	movs	r1, r2
    2c10:	e73a      	b.n	2a88 <__aeabi_ddiv+0x3d0>
    2c12:	9302      	str	r3, [sp, #8]
    2c14:	e73a      	b.n	2a8c <__aeabi_ddiv+0x3d4>
    2c16:	2a1f      	cmp	r2, #31
    2c18:	dc3c      	bgt.n	2c94 <__aeabi_ddiv+0x5dc>
    2c1a:	2320      	movs	r3, #32
    2c1c:	1a9b      	subs	r3, r3, r2
    2c1e:	000c      	movs	r4, r1
    2c20:	4658      	mov	r0, fp
    2c22:	4099      	lsls	r1, r3
    2c24:	4098      	lsls	r0, r3
    2c26:	1e4b      	subs	r3, r1, #1
    2c28:	4199      	sbcs	r1, r3
    2c2a:	465b      	mov	r3, fp
    2c2c:	40d4      	lsrs	r4, r2
    2c2e:	40d3      	lsrs	r3, r2
    2c30:	4320      	orrs	r0, r4
    2c32:	4308      	orrs	r0, r1
    2c34:	001a      	movs	r2, r3
    2c36:	0743      	lsls	r3, r0, #29
    2c38:	d009      	beq.n	2c4e <__aeabi_ddiv+0x596>
    2c3a:	230f      	movs	r3, #15
    2c3c:	4003      	ands	r3, r0
    2c3e:	2b04      	cmp	r3, #4
    2c40:	d005      	beq.n	2c4e <__aeabi_ddiv+0x596>
    2c42:	0001      	movs	r1, r0
    2c44:	1d08      	adds	r0, r1, #4
    2c46:	4288      	cmp	r0, r1
    2c48:	419b      	sbcs	r3, r3
    2c4a:	425b      	negs	r3, r3
    2c4c:	18d2      	adds	r2, r2, r3
    2c4e:	0213      	lsls	r3, r2, #8
    2c50:	d53a      	bpl.n	2cc8 <__aeabi_ddiv+0x610>
    2c52:	2301      	movs	r3, #1
    2c54:	9a02      	ldr	r2, [sp, #8]
    2c56:	2401      	movs	r4, #1
    2c58:	401a      	ands	r2, r3
    2c5a:	2300      	movs	r3, #0
    2c5c:	4694      	mov	ip, r2
    2c5e:	4698      	mov	r8, r3
    2c60:	2200      	movs	r2, #0
    2c62:	e5f7      	b.n	2854 <__aeabi_ddiv+0x19c>
    2c64:	2102      	movs	r1, #2
    2c66:	4249      	negs	r1, r1
    2c68:	468c      	mov	ip, r1
    2c6a:	9d03      	ldr	r5, [sp, #12]
    2c6c:	44e3      	add	fp, ip
    2c6e:	46ac      	mov	ip, r5
    2c70:	44e2      	add	sl, ip
    2c72:	45aa      	cmp	sl, r5
    2c74:	41ad      	sbcs	r5, r5
    2c76:	426d      	negs	r5, r5
    2c78:	4445      	add	r5, r8
    2c7a:	18ed      	adds	r5, r5, r3
    2c7c:	1a2d      	subs	r5, r5, r0
    2c7e:	e696      	b.n	29ae <__aeabi_ddiv+0x2f6>
    2c80:	1e8a      	subs	r2, r1, #2
    2c82:	9903      	ldr	r1, [sp, #12]
    2c84:	004d      	lsls	r5, r1, #1
    2c86:	428d      	cmp	r5, r1
    2c88:	4189      	sbcs	r1, r1
    2c8a:	4249      	negs	r1, r1
    2c8c:	4441      	add	r1, r8
    2c8e:	1876      	adds	r6, r6, r1
    2c90:	9503      	str	r5, [sp, #12]
    2c92:	e78f      	b.n	2bb4 <__aeabi_ddiv+0x4fc>
    2c94:	201f      	movs	r0, #31
    2c96:	4240      	negs	r0, r0
    2c98:	1ac3      	subs	r3, r0, r3
    2c9a:	4658      	mov	r0, fp
    2c9c:	40d8      	lsrs	r0, r3
    2c9e:	0003      	movs	r3, r0
    2ca0:	2a20      	cmp	r2, #32
    2ca2:	d028      	beq.n	2cf6 <__aeabi_ddiv+0x63e>
    2ca4:	2040      	movs	r0, #64	; 0x40
    2ca6:	465d      	mov	r5, fp
    2ca8:	1a82      	subs	r2, r0, r2
    2caa:	4095      	lsls	r5, r2
    2cac:	4329      	orrs	r1, r5
    2cae:	1e4a      	subs	r2, r1, #1
    2cb0:	4191      	sbcs	r1, r2
    2cb2:	4319      	orrs	r1, r3
    2cb4:	2307      	movs	r3, #7
    2cb6:	2200      	movs	r2, #0
    2cb8:	400b      	ands	r3, r1
    2cba:	d009      	beq.n	2cd0 <__aeabi_ddiv+0x618>
    2cbc:	230f      	movs	r3, #15
    2cbe:	2200      	movs	r2, #0
    2cc0:	400b      	ands	r3, r1
    2cc2:	0008      	movs	r0, r1
    2cc4:	2b04      	cmp	r3, #4
    2cc6:	d1bd      	bne.n	2c44 <__aeabi_ddiv+0x58c>
    2cc8:	0001      	movs	r1, r0
    2cca:	0753      	lsls	r3, r2, #29
    2ccc:	0252      	lsls	r2, r2, #9
    2cce:	0b12      	lsrs	r2, r2, #12
    2cd0:	08c9      	lsrs	r1, r1, #3
    2cd2:	4319      	orrs	r1, r3
    2cd4:	2301      	movs	r3, #1
    2cd6:	4688      	mov	r8, r1
    2cd8:	9902      	ldr	r1, [sp, #8]
    2cda:	2400      	movs	r4, #0
    2cdc:	4019      	ands	r1, r3
    2cde:	468c      	mov	ip, r1
    2ce0:	e5b8      	b.n	2854 <__aeabi_ddiv+0x19c>
    2ce2:	4552      	cmp	r2, sl
    2ce4:	d8be      	bhi.n	2c64 <__aeabi_ddiv+0x5ac>
    2ce6:	468b      	mov	fp, r1
    2ce8:	2500      	movs	r5, #0
    2cea:	e660      	b.n	29ae <__aeabi_ddiv+0x2f6>
    2cec:	9d03      	ldr	r5, [sp, #12]
    2cee:	429d      	cmp	r5, r3
    2cf0:	d3c6      	bcc.n	2c80 <__aeabi_ddiv+0x5c8>
    2cf2:	0011      	movs	r1, r2
    2cf4:	e762      	b.n	2bbc <__aeabi_ddiv+0x504>
    2cf6:	2500      	movs	r5, #0
    2cf8:	e7d8      	b.n	2cac <__aeabi_ddiv+0x5f4>
    2cfa:	2280      	movs	r2, #128	; 0x80
    2cfc:	465b      	mov	r3, fp
    2cfe:	0312      	lsls	r2, r2, #12
    2d00:	431a      	orrs	r2, r3
    2d02:	9b01      	ldr	r3, [sp, #4]
    2d04:	0312      	lsls	r2, r2, #12
    2d06:	0b12      	lsrs	r2, r2, #12
    2d08:	469c      	mov	ip, r3
    2d0a:	4688      	mov	r8, r1
    2d0c:	4c03      	ldr	r4, [pc, #12]	; (2d1c <__aeabi_ddiv+0x664>)
    2d0e:	e5a1      	b.n	2854 <__aeabi_ddiv+0x19c>
    2d10:	000003ff 	.word	0x000003ff
    2d14:	feffffff 	.word	0xfeffffff
    2d18:	000007fe 	.word	0x000007fe
    2d1c:	000007ff 	.word	0x000007ff

00002d20 <__aeabi_dmul>:
    2d20:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d22:	4657      	mov	r7, sl
    2d24:	4645      	mov	r5, r8
    2d26:	46de      	mov	lr, fp
    2d28:	464e      	mov	r6, r9
    2d2a:	b5e0      	push	{r5, r6, r7, lr}
    2d2c:	030c      	lsls	r4, r1, #12
    2d2e:	4698      	mov	r8, r3
    2d30:	004e      	lsls	r6, r1, #1
    2d32:	0b23      	lsrs	r3, r4, #12
    2d34:	b087      	sub	sp, #28
    2d36:	0007      	movs	r7, r0
    2d38:	4692      	mov	sl, r2
    2d3a:	469b      	mov	fp, r3
    2d3c:	0d76      	lsrs	r6, r6, #21
    2d3e:	0fcd      	lsrs	r5, r1, #31
    2d40:	2e00      	cmp	r6, #0
    2d42:	d06b      	beq.n	2e1c <__aeabi_dmul+0xfc>
    2d44:	4b6d      	ldr	r3, [pc, #436]	; (2efc <__aeabi_dmul+0x1dc>)
    2d46:	429e      	cmp	r6, r3
    2d48:	d035      	beq.n	2db6 <__aeabi_dmul+0x96>
    2d4a:	2480      	movs	r4, #128	; 0x80
    2d4c:	465b      	mov	r3, fp
    2d4e:	0f42      	lsrs	r2, r0, #29
    2d50:	0424      	lsls	r4, r4, #16
    2d52:	00db      	lsls	r3, r3, #3
    2d54:	4314      	orrs	r4, r2
    2d56:	431c      	orrs	r4, r3
    2d58:	00c3      	lsls	r3, r0, #3
    2d5a:	4699      	mov	r9, r3
    2d5c:	4b68      	ldr	r3, [pc, #416]	; (2f00 <__aeabi_dmul+0x1e0>)
    2d5e:	46a3      	mov	fp, r4
    2d60:	469c      	mov	ip, r3
    2d62:	2300      	movs	r3, #0
    2d64:	2700      	movs	r7, #0
    2d66:	4466      	add	r6, ip
    2d68:	9302      	str	r3, [sp, #8]
    2d6a:	4643      	mov	r3, r8
    2d6c:	031c      	lsls	r4, r3, #12
    2d6e:	005a      	lsls	r2, r3, #1
    2d70:	0fdb      	lsrs	r3, r3, #31
    2d72:	4650      	mov	r0, sl
    2d74:	0b24      	lsrs	r4, r4, #12
    2d76:	0d52      	lsrs	r2, r2, #21
    2d78:	4698      	mov	r8, r3
    2d7a:	d100      	bne.n	2d7e <__aeabi_dmul+0x5e>
    2d7c:	e076      	b.n	2e6c <__aeabi_dmul+0x14c>
    2d7e:	4b5f      	ldr	r3, [pc, #380]	; (2efc <__aeabi_dmul+0x1dc>)
    2d80:	429a      	cmp	r2, r3
    2d82:	d06d      	beq.n	2e60 <__aeabi_dmul+0x140>
    2d84:	2380      	movs	r3, #128	; 0x80
    2d86:	0f41      	lsrs	r1, r0, #29
    2d88:	041b      	lsls	r3, r3, #16
    2d8a:	430b      	orrs	r3, r1
    2d8c:	495c      	ldr	r1, [pc, #368]	; (2f00 <__aeabi_dmul+0x1e0>)
    2d8e:	00e4      	lsls	r4, r4, #3
    2d90:	468c      	mov	ip, r1
    2d92:	431c      	orrs	r4, r3
    2d94:	00c3      	lsls	r3, r0, #3
    2d96:	2000      	movs	r0, #0
    2d98:	4462      	add	r2, ip
    2d9a:	4641      	mov	r1, r8
    2d9c:	18b6      	adds	r6, r6, r2
    2d9e:	4069      	eors	r1, r5
    2da0:	1c72      	adds	r2, r6, #1
    2da2:	9101      	str	r1, [sp, #4]
    2da4:	4694      	mov	ip, r2
    2da6:	4307      	orrs	r7, r0
    2da8:	2f0f      	cmp	r7, #15
    2daa:	d900      	bls.n	2dae <__aeabi_dmul+0x8e>
    2dac:	e0b0      	b.n	2f10 <__aeabi_dmul+0x1f0>
    2dae:	4a55      	ldr	r2, [pc, #340]	; (2f04 <__aeabi_dmul+0x1e4>)
    2db0:	00bf      	lsls	r7, r7, #2
    2db2:	59d2      	ldr	r2, [r2, r7]
    2db4:	4697      	mov	pc, r2
    2db6:	465b      	mov	r3, fp
    2db8:	4303      	orrs	r3, r0
    2dba:	4699      	mov	r9, r3
    2dbc:	d000      	beq.n	2dc0 <__aeabi_dmul+0xa0>
    2dbe:	e087      	b.n	2ed0 <__aeabi_dmul+0x1b0>
    2dc0:	2300      	movs	r3, #0
    2dc2:	469b      	mov	fp, r3
    2dc4:	3302      	adds	r3, #2
    2dc6:	2708      	movs	r7, #8
    2dc8:	9302      	str	r3, [sp, #8]
    2dca:	e7ce      	b.n	2d6a <__aeabi_dmul+0x4a>
    2dcc:	4642      	mov	r2, r8
    2dce:	9201      	str	r2, [sp, #4]
    2dd0:	2802      	cmp	r0, #2
    2dd2:	d067      	beq.n	2ea4 <__aeabi_dmul+0x184>
    2dd4:	2803      	cmp	r0, #3
    2dd6:	d100      	bne.n	2dda <__aeabi_dmul+0xba>
    2dd8:	e20e      	b.n	31f8 <__aeabi_dmul+0x4d8>
    2dda:	2801      	cmp	r0, #1
    2ddc:	d000      	beq.n	2de0 <__aeabi_dmul+0xc0>
    2dde:	e162      	b.n	30a6 <__aeabi_dmul+0x386>
    2de0:	2300      	movs	r3, #0
    2de2:	2400      	movs	r4, #0
    2de4:	2200      	movs	r2, #0
    2de6:	4699      	mov	r9, r3
    2de8:	9901      	ldr	r1, [sp, #4]
    2dea:	4001      	ands	r1, r0
    2dec:	b2cd      	uxtb	r5, r1
    2dee:	2100      	movs	r1, #0
    2df0:	0312      	lsls	r2, r2, #12
    2df2:	0d0b      	lsrs	r3, r1, #20
    2df4:	0b12      	lsrs	r2, r2, #12
    2df6:	051b      	lsls	r3, r3, #20
    2df8:	4313      	orrs	r3, r2
    2dfa:	4a43      	ldr	r2, [pc, #268]	; (2f08 <__aeabi_dmul+0x1e8>)
    2dfc:	0524      	lsls	r4, r4, #20
    2dfe:	4013      	ands	r3, r2
    2e00:	431c      	orrs	r4, r3
    2e02:	0064      	lsls	r4, r4, #1
    2e04:	07ed      	lsls	r5, r5, #31
    2e06:	0864      	lsrs	r4, r4, #1
    2e08:	432c      	orrs	r4, r5
    2e0a:	4648      	mov	r0, r9
    2e0c:	0021      	movs	r1, r4
    2e0e:	b007      	add	sp, #28
    2e10:	bc3c      	pop	{r2, r3, r4, r5}
    2e12:	4690      	mov	r8, r2
    2e14:	4699      	mov	r9, r3
    2e16:	46a2      	mov	sl, r4
    2e18:	46ab      	mov	fp, r5
    2e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e1c:	4303      	orrs	r3, r0
    2e1e:	4699      	mov	r9, r3
    2e20:	d04f      	beq.n	2ec2 <__aeabi_dmul+0x1a2>
    2e22:	465b      	mov	r3, fp
    2e24:	2b00      	cmp	r3, #0
    2e26:	d100      	bne.n	2e2a <__aeabi_dmul+0x10a>
    2e28:	e189      	b.n	313e <__aeabi_dmul+0x41e>
    2e2a:	4658      	mov	r0, fp
    2e2c:	f000 fd7a 	bl	3924 <__clzsi2>
    2e30:	0003      	movs	r3, r0
    2e32:	3b0b      	subs	r3, #11
    2e34:	2b1c      	cmp	r3, #28
    2e36:	dd00      	ble.n	2e3a <__aeabi_dmul+0x11a>
    2e38:	e17a      	b.n	3130 <__aeabi_dmul+0x410>
    2e3a:	221d      	movs	r2, #29
    2e3c:	1ad3      	subs	r3, r2, r3
    2e3e:	003a      	movs	r2, r7
    2e40:	0001      	movs	r1, r0
    2e42:	465c      	mov	r4, fp
    2e44:	40da      	lsrs	r2, r3
    2e46:	3908      	subs	r1, #8
    2e48:	408c      	lsls	r4, r1
    2e4a:	0013      	movs	r3, r2
    2e4c:	408f      	lsls	r7, r1
    2e4e:	4323      	orrs	r3, r4
    2e50:	469b      	mov	fp, r3
    2e52:	46b9      	mov	r9, r7
    2e54:	2300      	movs	r3, #0
    2e56:	4e2d      	ldr	r6, [pc, #180]	; (2f0c <__aeabi_dmul+0x1ec>)
    2e58:	2700      	movs	r7, #0
    2e5a:	1a36      	subs	r6, r6, r0
    2e5c:	9302      	str	r3, [sp, #8]
    2e5e:	e784      	b.n	2d6a <__aeabi_dmul+0x4a>
    2e60:	4653      	mov	r3, sl
    2e62:	4323      	orrs	r3, r4
    2e64:	d12a      	bne.n	2ebc <__aeabi_dmul+0x19c>
    2e66:	2400      	movs	r4, #0
    2e68:	2002      	movs	r0, #2
    2e6a:	e796      	b.n	2d9a <__aeabi_dmul+0x7a>
    2e6c:	4653      	mov	r3, sl
    2e6e:	4323      	orrs	r3, r4
    2e70:	d020      	beq.n	2eb4 <__aeabi_dmul+0x194>
    2e72:	2c00      	cmp	r4, #0
    2e74:	d100      	bne.n	2e78 <__aeabi_dmul+0x158>
    2e76:	e157      	b.n	3128 <__aeabi_dmul+0x408>
    2e78:	0020      	movs	r0, r4
    2e7a:	f000 fd53 	bl	3924 <__clzsi2>
    2e7e:	0003      	movs	r3, r0
    2e80:	3b0b      	subs	r3, #11
    2e82:	2b1c      	cmp	r3, #28
    2e84:	dd00      	ble.n	2e88 <__aeabi_dmul+0x168>
    2e86:	e149      	b.n	311c <__aeabi_dmul+0x3fc>
    2e88:	211d      	movs	r1, #29
    2e8a:	1acb      	subs	r3, r1, r3
    2e8c:	4651      	mov	r1, sl
    2e8e:	0002      	movs	r2, r0
    2e90:	40d9      	lsrs	r1, r3
    2e92:	4653      	mov	r3, sl
    2e94:	3a08      	subs	r2, #8
    2e96:	4094      	lsls	r4, r2
    2e98:	4093      	lsls	r3, r2
    2e9a:	430c      	orrs	r4, r1
    2e9c:	4a1b      	ldr	r2, [pc, #108]	; (2f0c <__aeabi_dmul+0x1ec>)
    2e9e:	1a12      	subs	r2, r2, r0
    2ea0:	2000      	movs	r0, #0
    2ea2:	e77a      	b.n	2d9a <__aeabi_dmul+0x7a>
    2ea4:	2501      	movs	r5, #1
    2ea6:	9b01      	ldr	r3, [sp, #4]
    2ea8:	4c14      	ldr	r4, [pc, #80]	; (2efc <__aeabi_dmul+0x1dc>)
    2eaa:	401d      	ands	r5, r3
    2eac:	2300      	movs	r3, #0
    2eae:	2200      	movs	r2, #0
    2eb0:	4699      	mov	r9, r3
    2eb2:	e79c      	b.n	2dee <__aeabi_dmul+0xce>
    2eb4:	2400      	movs	r4, #0
    2eb6:	2200      	movs	r2, #0
    2eb8:	2001      	movs	r0, #1
    2eba:	e76e      	b.n	2d9a <__aeabi_dmul+0x7a>
    2ebc:	4653      	mov	r3, sl
    2ebe:	2003      	movs	r0, #3
    2ec0:	e76b      	b.n	2d9a <__aeabi_dmul+0x7a>
    2ec2:	2300      	movs	r3, #0
    2ec4:	469b      	mov	fp, r3
    2ec6:	3301      	adds	r3, #1
    2ec8:	2704      	movs	r7, #4
    2eca:	2600      	movs	r6, #0
    2ecc:	9302      	str	r3, [sp, #8]
    2ece:	e74c      	b.n	2d6a <__aeabi_dmul+0x4a>
    2ed0:	2303      	movs	r3, #3
    2ed2:	4681      	mov	r9, r0
    2ed4:	270c      	movs	r7, #12
    2ed6:	9302      	str	r3, [sp, #8]
    2ed8:	e747      	b.n	2d6a <__aeabi_dmul+0x4a>
    2eda:	2280      	movs	r2, #128	; 0x80
    2edc:	2300      	movs	r3, #0
    2ede:	2500      	movs	r5, #0
    2ee0:	0312      	lsls	r2, r2, #12
    2ee2:	4699      	mov	r9, r3
    2ee4:	4c05      	ldr	r4, [pc, #20]	; (2efc <__aeabi_dmul+0x1dc>)
    2ee6:	e782      	b.n	2dee <__aeabi_dmul+0xce>
    2ee8:	465c      	mov	r4, fp
    2eea:	464b      	mov	r3, r9
    2eec:	9802      	ldr	r0, [sp, #8]
    2eee:	e76f      	b.n	2dd0 <__aeabi_dmul+0xb0>
    2ef0:	465c      	mov	r4, fp
    2ef2:	464b      	mov	r3, r9
    2ef4:	9501      	str	r5, [sp, #4]
    2ef6:	9802      	ldr	r0, [sp, #8]
    2ef8:	e76a      	b.n	2dd0 <__aeabi_dmul+0xb0>
    2efa:	46c0      	nop			; (mov r8, r8)
    2efc:	000007ff 	.word	0x000007ff
    2f00:	fffffc01 	.word	0xfffffc01
    2f04:	00003b30 	.word	0x00003b30
    2f08:	800fffff 	.word	0x800fffff
    2f0c:	fffffc0d 	.word	0xfffffc0d
    2f10:	464a      	mov	r2, r9
    2f12:	4649      	mov	r1, r9
    2f14:	0c17      	lsrs	r7, r2, #16
    2f16:	0c1a      	lsrs	r2, r3, #16
    2f18:	041b      	lsls	r3, r3, #16
    2f1a:	0c1b      	lsrs	r3, r3, #16
    2f1c:	0408      	lsls	r0, r1, #16
    2f1e:	0019      	movs	r1, r3
    2f20:	0c00      	lsrs	r0, r0, #16
    2f22:	4341      	muls	r1, r0
    2f24:	0015      	movs	r5, r2
    2f26:	4688      	mov	r8, r1
    2f28:	0019      	movs	r1, r3
    2f2a:	437d      	muls	r5, r7
    2f2c:	4379      	muls	r1, r7
    2f2e:	9503      	str	r5, [sp, #12]
    2f30:	4689      	mov	r9, r1
    2f32:	0029      	movs	r1, r5
    2f34:	0015      	movs	r5, r2
    2f36:	4345      	muls	r5, r0
    2f38:	444d      	add	r5, r9
    2f3a:	9502      	str	r5, [sp, #8]
    2f3c:	4645      	mov	r5, r8
    2f3e:	0c2d      	lsrs	r5, r5, #16
    2f40:	46aa      	mov	sl, r5
    2f42:	9d02      	ldr	r5, [sp, #8]
    2f44:	4455      	add	r5, sl
    2f46:	45a9      	cmp	r9, r5
    2f48:	d906      	bls.n	2f58 <__aeabi_dmul+0x238>
    2f4a:	468a      	mov	sl, r1
    2f4c:	2180      	movs	r1, #128	; 0x80
    2f4e:	0249      	lsls	r1, r1, #9
    2f50:	4689      	mov	r9, r1
    2f52:	44ca      	add	sl, r9
    2f54:	4651      	mov	r1, sl
    2f56:	9103      	str	r1, [sp, #12]
    2f58:	0c29      	lsrs	r1, r5, #16
    2f5a:	9104      	str	r1, [sp, #16]
    2f5c:	4641      	mov	r1, r8
    2f5e:	0409      	lsls	r1, r1, #16
    2f60:	042d      	lsls	r5, r5, #16
    2f62:	0c09      	lsrs	r1, r1, #16
    2f64:	4688      	mov	r8, r1
    2f66:	0029      	movs	r1, r5
    2f68:	0c25      	lsrs	r5, r4, #16
    2f6a:	0424      	lsls	r4, r4, #16
    2f6c:	4441      	add	r1, r8
    2f6e:	0c24      	lsrs	r4, r4, #16
    2f70:	9105      	str	r1, [sp, #20]
    2f72:	0021      	movs	r1, r4
    2f74:	4341      	muls	r1, r0
    2f76:	4688      	mov	r8, r1
    2f78:	0021      	movs	r1, r4
    2f7a:	4379      	muls	r1, r7
    2f7c:	468a      	mov	sl, r1
    2f7e:	4368      	muls	r0, r5
    2f80:	4641      	mov	r1, r8
    2f82:	4450      	add	r0, sl
    2f84:	4681      	mov	r9, r0
    2f86:	0c08      	lsrs	r0, r1, #16
    2f88:	4448      	add	r0, r9
    2f8a:	436f      	muls	r7, r5
    2f8c:	4582      	cmp	sl, r0
    2f8e:	d903      	bls.n	2f98 <__aeabi_dmul+0x278>
    2f90:	2180      	movs	r1, #128	; 0x80
    2f92:	0249      	lsls	r1, r1, #9
    2f94:	4689      	mov	r9, r1
    2f96:	444f      	add	r7, r9
    2f98:	0c01      	lsrs	r1, r0, #16
    2f9a:	4689      	mov	r9, r1
    2f9c:	0039      	movs	r1, r7
    2f9e:	4449      	add	r1, r9
    2fa0:	9102      	str	r1, [sp, #8]
    2fa2:	4641      	mov	r1, r8
    2fa4:	040f      	lsls	r7, r1, #16
    2fa6:	9904      	ldr	r1, [sp, #16]
    2fa8:	0c3f      	lsrs	r7, r7, #16
    2faa:	4688      	mov	r8, r1
    2fac:	0400      	lsls	r0, r0, #16
    2fae:	19c0      	adds	r0, r0, r7
    2fb0:	4480      	add	r8, r0
    2fb2:	4641      	mov	r1, r8
    2fb4:	9104      	str	r1, [sp, #16]
    2fb6:	4659      	mov	r1, fp
    2fb8:	0c0f      	lsrs	r7, r1, #16
    2fba:	0409      	lsls	r1, r1, #16
    2fbc:	0c09      	lsrs	r1, r1, #16
    2fbe:	4688      	mov	r8, r1
    2fc0:	4359      	muls	r1, r3
    2fc2:	468a      	mov	sl, r1
    2fc4:	0039      	movs	r1, r7
    2fc6:	4351      	muls	r1, r2
    2fc8:	4689      	mov	r9, r1
    2fca:	4641      	mov	r1, r8
    2fcc:	434a      	muls	r2, r1
    2fce:	4651      	mov	r1, sl
    2fd0:	0c09      	lsrs	r1, r1, #16
    2fd2:	468b      	mov	fp, r1
    2fd4:	437b      	muls	r3, r7
    2fd6:	18d2      	adds	r2, r2, r3
    2fd8:	445a      	add	r2, fp
    2fda:	4293      	cmp	r3, r2
    2fdc:	d903      	bls.n	2fe6 <__aeabi_dmul+0x2c6>
    2fde:	2380      	movs	r3, #128	; 0x80
    2fe0:	025b      	lsls	r3, r3, #9
    2fe2:	469b      	mov	fp, r3
    2fe4:	44d9      	add	r9, fp
    2fe6:	4651      	mov	r1, sl
    2fe8:	0409      	lsls	r1, r1, #16
    2fea:	0c09      	lsrs	r1, r1, #16
    2fec:	468a      	mov	sl, r1
    2fee:	4641      	mov	r1, r8
    2ff0:	4361      	muls	r1, r4
    2ff2:	437c      	muls	r4, r7
    2ff4:	0c13      	lsrs	r3, r2, #16
    2ff6:	0412      	lsls	r2, r2, #16
    2ff8:	444b      	add	r3, r9
    2ffa:	4452      	add	r2, sl
    2ffc:	46a1      	mov	r9, r4
    2ffe:	468a      	mov	sl, r1
    3000:	003c      	movs	r4, r7
    3002:	4641      	mov	r1, r8
    3004:	436c      	muls	r4, r5
    3006:	434d      	muls	r5, r1
    3008:	4651      	mov	r1, sl
    300a:	444d      	add	r5, r9
    300c:	0c0f      	lsrs	r7, r1, #16
    300e:	197d      	adds	r5, r7, r5
    3010:	45a9      	cmp	r9, r5
    3012:	d903      	bls.n	301c <__aeabi_dmul+0x2fc>
    3014:	2180      	movs	r1, #128	; 0x80
    3016:	0249      	lsls	r1, r1, #9
    3018:	4688      	mov	r8, r1
    301a:	4444      	add	r4, r8
    301c:	9f04      	ldr	r7, [sp, #16]
    301e:	9903      	ldr	r1, [sp, #12]
    3020:	46b8      	mov	r8, r7
    3022:	4441      	add	r1, r8
    3024:	468b      	mov	fp, r1
    3026:	4583      	cmp	fp, r0
    3028:	4180      	sbcs	r0, r0
    302a:	4241      	negs	r1, r0
    302c:	4688      	mov	r8, r1
    302e:	4651      	mov	r1, sl
    3030:	0408      	lsls	r0, r1, #16
    3032:	042f      	lsls	r7, r5, #16
    3034:	0c00      	lsrs	r0, r0, #16
    3036:	183f      	adds	r7, r7, r0
    3038:	4658      	mov	r0, fp
    303a:	9902      	ldr	r1, [sp, #8]
    303c:	1810      	adds	r0, r2, r0
    303e:	4689      	mov	r9, r1
    3040:	4290      	cmp	r0, r2
    3042:	4192      	sbcs	r2, r2
    3044:	444f      	add	r7, r9
    3046:	46ba      	mov	sl, r7
    3048:	4252      	negs	r2, r2
    304a:	4699      	mov	r9, r3
    304c:	4693      	mov	fp, r2
    304e:	44c2      	add	sl, r8
    3050:	44d1      	add	r9, sl
    3052:	44cb      	add	fp, r9
    3054:	428f      	cmp	r7, r1
    3056:	41bf      	sbcs	r7, r7
    3058:	45c2      	cmp	sl, r8
    305a:	4189      	sbcs	r1, r1
    305c:	4599      	cmp	r9, r3
    305e:	419b      	sbcs	r3, r3
    3060:	4593      	cmp	fp, r2
    3062:	4192      	sbcs	r2, r2
    3064:	427f      	negs	r7, r7
    3066:	4249      	negs	r1, r1
    3068:	0c2d      	lsrs	r5, r5, #16
    306a:	4252      	negs	r2, r2
    306c:	430f      	orrs	r7, r1
    306e:	425b      	negs	r3, r3
    3070:	4313      	orrs	r3, r2
    3072:	197f      	adds	r7, r7, r5
    3074:	18ff      	adds	r7, r7, r3
    3076:	465b      	mov	r3, fp
    3078:	193c      	adds	r4, r7, r4
    307a:	0ddb      	lsrs	r3, r3, #23
    307c:	9a05      	ldr	r2, [sp, #20]
    307e:	0264      	lsls	r4, r4, #9
    3080:	431c      	orrs	r4, r3
    3082:	0243      	lsls	r3, r0, #9
    3084:	4313      	orrs	r3, r2
    3086:	1e5d      	subs	r5, r3, #1
    3088:	41ab      	sbcs	r3, r5
    308a:	465a      	mov	r2, fp
    308c:	0dc0      	lsrs	r0, r0, #23
    308e:	4303      	orrs	r3, r0
    3090:	0252      	lsls	r2, r2, #9
    3092:	4313      	orrs	r3, r2
    3094:	01e2      	lsls	r2, r4, #7
    3096:	d556      	bpl.n	3146 <__aeabi_dmul+0x426>
    3098:	2001      	movs	r0, #1
    309a:	085a      	lsrs	r2, r3, #1
    309c:	4003      	ands	r3, r0
    309e:	4313      	orrs	r3, r2
    30a0:	07e2      	lsls	r2, r4, #31
    30a2:	4313      	orrs	r3, r2
    30a4:	0864      	lsrs	r4, r4, #1
    30a6:	485a      	ldr	r0, [pc, #360]	; (3210 <__aeabi_dmul+0x4f0>)
    30a8:	4460      	add	r0, ip
    30aa:	2800      	cmp	r0, #0
    30ac:	dd4d      	ble.n	314a <__aeabi_dmul+0x42a>
    30ae:	075a      	lsls	r2, r3, #29
    30b0:	d009      	beq.n	30c6 <__aeabi_dmul+0x3a6>
    30b2:	220f      	movs	r2, #15
    30b4:	401a      	ands	r2, r3
    30b6:	2a04      	cmp	r2, #4
    30b8:	d005      	beq.n	30c6 <__aeabi_dmul+0x3a6>
    30ba:	1d1a      	adds	r2, r3, #4
    30bc:	429a      	cmp	r2, r3
    30be:	419b      	sbcs	r3, r3
    30c0:	425b      	negs	r3, r3
    30c2:	18e4      	adds	r4, r4, r3
    30c4:	0013      	movs	r3, r2
    30c6:	01e2      	lsls	r2, r4, #7
    30c8:	d504      	bpl.n	30d4 <__aeabi_dmul+0x3b4>
    30ca:	2080      	movs	r0, #128	; 0x80
    30cc:	4a51      	ldr	r2, [pc, #324]	; (3214 <__aeabi_dmul+0x4f4>)
    30ce:	00c0      	lsls	r0, r0, #3
    30d0:	4014      	ands	r4, r2
    30d2:	4460      	add	r0, ip
    30d4:	4a50      	ldr	r2, [pc, #320]	; (3218 <__aeabi_dmul+0x4f8>)
    30d6:	4290      	cmp	r0, r2
    30d8:	dd00      	ble.n	30dc <__aeabi_dmul+0x3bc>
    30da:	e6e3      	b.n	2ea4 <__aeabi_dmul+0x184>
    30dc:	2501      	movs	r5, #1
    30de:	08db      	lsrs	r3, r3, #3
    30e0:	0762      	lsls	r2, r4, #29
    30e2:	431a      	orrs	r2, r3
    30e4:	0264      	lsls	r4, r4, #9
    30e6:	9b01      	ldr	r3, [sp, #4]
    30e8:	4691      	mov	r9, r2
    30ea:	0b22      	lsrs	r2, r4, #12
    30ec:	0544      	lsls	r4, r0, #21
    30ee:	0d64      	lsrs	r4, r4, #21
    30f0:	401d      	ands	r5, r3
    30f2:	e67c      	b.n	2dee <__aeabi_dmul+0xce>
    30f4:	2280      	movs	r2, #128	; 0x80
    30f6:	4659      	mov	r1, fp
    30f8:	0312      	lsls	r2, r2, #12
    30fa:	4211      	tst	r1, r2
    30fc:	d008      	beq.n	3110 <__aeabi_dmul+0x3f0>
    30fe:	4214      	tst	r4, r2
    3100:	d106      	bne.n	3110 <__aeabi_dmul+0x3f0>
    3102:	4322      	orrs	r2, r4
    3104:	0312      	lsls	r2, r2, #12
    3106:	0b12      	lsrs	r2, r2, #12
    3108:	4645      	mov	r5, r8
    310a:	4699      	mov	r9, r3
    310c:	4c43      	ldr	r4, [pc, #268]	; (321c <__aeabi_dmul+0x4fc>)
    310e:	e66e      	b.n	2dee <__aeabi_dmul+0xce>
    3110:	465b      	mov	r3, fp
    3112:	431a      	orrs	r2, r3
    3114:	0312      	lsls	r2, r2, #12
    3116:	0b12      	lsrs	r2, r2, #12
    3118:	4c40      	ldr	r4, [pc, #256]	; (321c <__aeabi_dmul+0x4fc>)
    311a:	e668      	b.n	2dee <__aeabi_dmul+0xce>
    311c:	0003      	movs	r3, r0
    311e:	4654      	mov	r4, sl
    3120:	3b28      	subs	r3, #40	; 0x28
    3122:	409c      	lsls	r4, r3
    3124:	2300      	movs	r3, #0
    3126:	e6b9      	b.n	2e9c <__aeabi_dmul+0x17c>
    3128:	f000 fbfc 	bl	3924 <__clzsi2>
    312c:	3020      	adds	r0, #32
    312e:	e6a6      	b.n	2e7e <__aeabi_dmul+0x15e>
    3130:	0003      	movs	r3, r0
    3132:	3b28      	subs	r3, #40	; 0x28
    3134:	409f      	lsls	r7, r3
    3136:	2300      	movs	r3, #0
    3138:	46bb      	mov	fp, r7
    313a:	4699      	mov	r9, r3
    313c:	e68a      	b.n	2e54 <__aeabi_dmul+0x134>
    313e:	f000 fbf1 	bl	3924 <__clzsi2>
    3142:	3020      	adds	r0, #32
    3144:	e674      	b.n	2e30 <__aeabi_dmul+0x110>
    3146:	46b4      	mov	ip, r6
    3148:	e7ad      	b.n	30a6 <__aeabi_dmul+0x386>
    314a:	2501      	movs	r5, #1
    314c:	1a2a      	subs	r2, r5, r0
    314e:	2a38      	cmp	r2, #56	; 0x38
    3150:	dd06      	ble.n	3160 <__aeabi_dmul+0x440>
    3152:	9b01      	ldr	r3, [sp, #4]
    3154:	2400      	movs	r4, #0
    3156:	401d      	ands	r5, r3
    3158:	2300      	movs	r3, #0
    315a:	2200      	movs	r2, #0
    315c:	4699      	mov	r9, r3
    315e:	e646      	b.n	2dee <__aeabi_dmul+0xce>
    3160:	2a1f      	cmp	r2, #31
    3162:	dc21      	bgt.n	31a8 <__aeabi_dmul+0x488>
    3164:	2520      	movs	r5, #32
    3166:	0020      	movs	r0, r4
    3168:	1aad      	subs	r5, r5, r2
    316a:	001e      	movs	r6, r3
    316c:	40ab      	lsls	r3, r5
    316e:	40a8      	lsls	r0, r5
    3170:	40d6      	lsrs	r6, r2
    3172:	1e5d      	subs	r5, r3, #1
    3174:	41ab      	sbcs	r3, r5
    3176:	4330      	orrs	r0, r6
    3178:	4318      	orrs	r0, r3
    317a:	40d4      	lsrs	r4, r2
    317c:	0743      	lsls	r3, r0, #29
    317e:	d009      	beq.n	3194 <__aeabi_dmul+0x474>
    3180:	230f      	movs	r3, #15
    3182:	4003      	ands	r3, r0
    3184:	2b04      	cmp	r3, #4
    3186:	d005      	beq.n	3194 <__aeabi_dmul+0x474>
    3188:	0003      	movs	r3, r0
    318a:	1d18      	adds	r0, r3, #4
    318c:	4298      	cmp	r0, r3
    318e:	419b      	sbcs	r3, r3
    3190:	425b      	negs	r3, r3
    3192:	18e4      	adds	r4, r4, r3
    3194:	0223      	lsls	r3, r4, #8
    3196:	d521      	bpl.n	31dc <__aeabi_dmul+0x4bc>
    3198:	2501      	movs	r5, #1
    319a:	9b01      	ldr	r3, [sp, #4]
    319c:	2401      	movs	r4, #1
    319e:	401d      	ands	r5, r3
    31a0:	2300      	movs	r3, #0
    31a2:	2200      	movs	r2, #0
    31a4:	4699      	mov	r9, r3
    31a6:	e622      	b.n	2dee <__aeabi_dmul+0xce>
    31a8:	251f      	movs	r5, #31
    31aa:	0021      	movs	r1, r4
    31ac:	426d      	negs	r5, r5
    31ae:	1a28      	subs	r0, r5, r0
    31b0:	40c1      	lsrs	r1, r0
    31b2:	0008      	movs	r0, r1
    31b4:	2a20      	cmp	r2, #32
    31b6:	d01d      	beq.n	31f4 <__aeabi_dmul+0x4d4>
    31b8:	355f      	adds	r5, #95	; 0x5f
    31ba:	1aaa      	subs	r2, r5, r2
    31bc:	4094      	lsls	r4, r2
    31be:	4323      	orrs	r3, r4
    31c0:	1e5c      	subs	r4, r3, #1
    31c2:	41a3      	sbcs	r3, r4
    31c4:	2507      	movs	r5, #7
    31c6:	4303      	orrs	r3, r0
    31c8:	401d      	ands	r5, r3
    31ca:	2200      	movs	r2, #0
    31cc:	2d00      	cmp	r5, #0
    31ce:	d009      	beq.n	31e4 <__aeabi_dmul+0x4c4>
    31d0:	220f      	movs	r2, #15
    31d2:	2400      	movs	r4, #0
    31d4:	401a      	ands	r2, r3
    31d6:	0018      	movs	r0, r3
    31d8:	2a04      	cmp	r2, #4
    31da:	d1d6      	bne.n	318a <__aeabi_dmul+0x46a>
    31dc:	0003      	movs	r3, r0
    31de:	0765      	lsls	r5, r4, #29
    31e0:	0264      	lsls	r4, r4, #9
    31e2:	0b22      	lsrs	r2, r4, #12
    31e4:	08db      	lsrs	r3, r3, #3
    31e6:	432b      	orrs	r3, r5
    31e8:	2501      	movs	r5, #1
    31ea:	4699      	mov	r9, r3
    31ec:	9b01      	ldr	r3, [sp, #4]
    31ee:	2400      	movs	r4, #0
    31f0:	401d      	ands	r5, r3
    31f2:	e5fc      	b.n	2dee <__aeabi_dmul+0xce>
    31f4:	2400      	movs	r4, #0
    31f6:	e7e2      	b.n	31be <__aeabi_dmul+0x49e>
    31f8:	2280      	movs	r2, #128	; 0x80
    31fa:	2501      	movs	r5, #1
    31fc:	0312      	lsls	r2, r2, #12
    31fe:	4322      	orrs	r2, r4
    3200:	9901      	ldr	r1, [sp, #4]
    3202:	0312      	lsls	r2, r2, #12
    3204:	0b12      	lsrs	r2, r2, #12
    3206:	400d      	ands	r5, r1
    3208:	4699      	mov	r9, r3
    320a:	4c04      	ldr	r4, [pc, #16]	; (321c <__aeabi_dmul+0x4fc>)
    320c:	e5ef      	b.n	2dee <__aeabi_dmul+0xce>
    320e:	46c0      	nop			; (mov r8, r8)
    3210:	000003ff 	.word	0x000003ff
    3214:	feffffff 	.word	0xfeffffff
    3218:	000007fe 	.word	0x000007fe
    321c:	000007ff 	.word	0x000007ff

00003220 <__aeabi_dsub>:
    3220:	b5f0      	push	{r4, r5, r6, r7, lr}
    3222:	4646      	mov	r6, r8
    3224:	46d6      	mov	lr, sl
    3226:	464f      	mov	r7, r9
    3228:	030c      	lsls	r4, r1, #12
    322a:	b5c0      	push	{r6, r7, lr}
    322c:	0fcd      	lsrs	r5, r1, #31
    322e:	004e      	lsls	r6, r1, #1
    3230:	0a61      	lsrs	r1, r4, #9
    3232:	0f44      	lsrs	r4, r0, #29
    3234:	430c      	orrs	r4, r1
    3236:	00c1      	lsls	r1, r0, #3
    3238:	0058      	lsls	r0, r3, #1
    323a:	0d40      	lsrs	r0, r0, #21
    323c:	4684      	mov	ip, r0
    323e:	468a      	mov	sl, r1
    3240:	000f      	movs	r7, r1
    3242:	0319      	lsls	r1, r3, #12
    3244:	0f50      	lsrs	r0, r2, #29
    3246:	0a49      	lsrs	r1, r1, #9
    3248:	4301      	orrs	r1, r0
    324a:	48c6      	ldr	r0, [pc, #792]	; (3564 <__aeabi_dsub+0x344>)
    324c:	0d76      	lsrs	r6, r6, #21
    324e:	46a8      	mov	r8, r5
    3250:	0fdb      	lsrs	r3, r3, #31
    3252:	00d2      	lsls	r2, r2, #3
    3254:	4584      	cmp	ip, r0
    3256:	d100      	bne.n	325a <__aeabi_dsub+0x3a>
    3258:	e0d8      	b.n	340c <__aeabi_dsub+0x1ec>
    325a:	2001      	movs	r0, #1
    325c:	4043      	eors	r3, r0
    325e:	42ab      	cmp	r3, r5
    3260:	d100      	bne.n	3264 <__aeabi_dsub+0x44>
    3262:	e0a6      	b.n	33b2 <__aeabi_dsub+0x192>
    3264:	4660      	mov	r0, ip
    3266:	1a35      	subs	r5, r6, r0
    3268:	2d00      	cmp	r5, #0
    326a:	dc00      	bgt.n	326e <__aeabi_dsub+0x4e>
    326c:	e105      	b.n	347a <__aeabi_dsub+0x25a>
    326e:	2800      	cmp	r0, #0
    3270:	d110      	bne.n	3294 <__aeabi_dsub+0x74>
    3272:	000b      	movs	r3, r1
    3274:	4313      	orrs	r3, r2
    3276:	d100      	bne.n	327a <__aeabi_dsub+0x5a>
    3278:	e0d7      	b.n	342a <__aeabi_dsub+0x20a>
    327a:	1e6b      	subs	r3, r5, #1
    327c:	2b00      	cmp	r3, #0
    327e:	d000      	beq.n	3282 <__aeabi_dsub+0x62>
    3280:	e14b      	b.n	351a <__aeabi_dsub+0x2fa>
    3282:	4653      	mov	r3, sl
    3284:	1a9f      	subs	r7, r3, r2
    3286:	45ba      	cmp	sl, r7
    3288:	4180      	sbcs	r0, r0
    328a:	1a64      	subs	r4, r4, r1
    328c:	4240      	negs	r0, r0
    328e:	1a24      	subs	r4, r4, r0
    3290:	2601      	movs	r6, #1
    3292:	e01e      	b.n	32d2 <__aeabi_dsub+0xb2>
    3294:	4bb3      	ldr	r3, [pc, #716]	; (3564 <__aeabi_dsub+0x344>)
    3296:	429e      	cmp	r6, r3
    3298:	d048      	beq.n	332c <__aeabi_dsub+0x10c>
    329a:	2380      	movs	r3, #128	; 0x80
    329c:	041b      	lsls	r3, r3, #16
    329e:	4319      	orrs	r1, r3
    32a0:	2d38      	cmp	r5, #56	; 0x38
    32a2:	dd00      	ble.n	32a6 <__aeabi_dsub+0x86>
    32a4:	e119      	b.n	34da <__aeabi_dsub+0x2ba>
    32a6:	2d1f      	cmp	r5, #31
    32a8:	dd00      	ble.n	32ac <__aeabi_dsub+0x8c>
    32aa:	e14c      	b.n	3546 <__aeabi_dsub+0x326>
    32ac:	2320      	movs	r3, #32
    32ae:	000f      	movs	r7, r1
    32b0:	1b5b      	subs	r3, r3, r5
    32b2:	0010      	movs	r0, r2
    32b4:	409a      	lsls	r2, r3
    32b6:	409f      	lsls	r7, r3
    32b8:	40e8      	lsrs	r0, r5
    32ba:	1e53      	subs	r3, r2, #1
    32bc:	419a      	sbcs	r2, r3
    32be:	40e9      	lsrs	r1, r5
    32c0:	4307      	orrs	r7, r0
    32c2:	4317      	orrs	r7, r2
    32c4:	4653      	mov	r3, sl
    32c6:	1bdf      	subs	r7, r3, r7
    32c8:	1a61      	subs	r1, r4, r1
    32ca:	45ba      	cmp	sl, r7
    32cc:	41a4      	sbcs	r4, r4
    32ce:	4264      	negs	r4, r4
    32d0:	1b0c      	subs	r4, r1, r4
    32d2:	0223      	lsls	r3, r4, #8
    32d4:	d400      	bmi.n	32d8 <__aeabi_dsub+0xb8>
    32d6:	e0c5      	b.n	3464 <__aeabi_dsub+0x244>
    32d8:	0264      	lsls	r4, r4, #9
    32da:	0a65      	lsrs	r5, r4, #9
    32dc:	2d00      	cmp	r5, #0
    32de:	d100      	bne.n	32e2 <__aeabi_dsub+0xc2>
    32e0:	e0f6      	b.n	34d0 <__aeabi_dsub+0x2b0>
    32e2:	0028      	movs	r0, r5
    32e4:	f000 fb1e 	bl	3924 <__clzsi2>
    32e8:	0003      	movs	r3, r0
    32ea:	3b08      	subs	r3, #8
    32ec:	2b1f      	cmp	r3, #31
    32ee:	dd00      	ble.n	32f2 <__aeabi_dsub+0xd2>
    32f0:	e0e9      	b.n	34c6 <__aeabi_dsub+0x2a6>
    32f2:	2220      	movs	r2, #32
    32f4:	003c      	movs	r4, r7
    32f6:	1ad2      	subs	r2, r2, r3
    32f8:	409d      	lsls	r5, r3
    32fa:	40d4      	lsrs	r4, r2
    32fc:	409f      	lsls	r7, r3
    32fe:	4325      	orrs	r5, r4
    3300:	429e      	cmp	r6, r3
    3302:	dd00      	ble.n	3306 <__aeabi_dsub+0xe6>
    3304:	e0db      	b.n	34be <__aeabi_dsub+0x29e>
    3306:	1b9e      	subs	r6, r3, r6
    3308:	1c73      	adds	r3, r6, #1
    330a:	2b1f      	cmp	r3, #31
    330c:	dd00      	ble.n	3310 <__aeabi_dsub+0xf0>
    330e:	e10a      	b.n	3526 <__aeabi_dsub+0x306>
    3310:	2220      	movs	r2, #32
    3312:	0038      	movs	r0, r7
    3314:	1ad2      	subs	r2, r2, r3
    3316:	0029      	movs	r1, r5
    3318:	4097      	lsls	r7, r2
    331a:	002c      	movs	r4, r5
    331c:	4091      	lsls	r1, r2
    331e:	40d8      	lsrs	r0, r3
    3320:	1e7a      	subs	r2, r7, #1
    3322:	4197      	sbcs	r7, r2
    3324:	40dc      	lsrs	r4, r3
    3326:	2600      	movs	r6, #0
    3328:	4301      	orrs	r1, r0
    332a:	430f      	orrs	r7, r1
    332c:	077b      	lsls	r3, r7, #29
    332e:	d009      	beq.n	3344 <__aeabi_dsub+0x124>
    3330:	230f      	movs	r3, #15
    3332:	403b      	ands	r3, r7
    3334:	2b04      	cmp	r3, #4
    3336:	d005      	beq.n	3344 <__aeabi_dsub+0x124>
    3338:	1d3b      	adds	r3, r7, #4
    333a:	42bb      	cmp	r3, r7
    333c:	41bf      	sbcs	r7, r7
    333e:	427f      	negs	r7, r7
    3340:	19e4      	adds	r4, r4, r7
    3342:	001f      	movs	r7, r3
    3344:	0223      	lsls	r3, r4, #8
    3346:	d525      	bpl.n	3394 <__aeabi_dsub+0x174>
    3348:	4b86      	ldr	r3, [pc, #536]	; (3564 <__aeabi_dsub+0x344>)
    334a:	3601      	adds	r6, #1
    334c:	429e      	cmp	r6, r3
    334e:	d100      	bne.n	3352 <__aeabi_dsub+0x132>
    3350:	e0af      	b.n	34b2 <__aeabi_dsub+0x292>
    3352:	4b85      	ldr	r3, [pc, #532]	; (3568 <__aeabi_dsub+0x348>)
    3354:	2501      	movs	r5, #1
    3356:	401c      	ands	r4, r3
    3358:	4643      	mov	r3, r8
    335a:	0762      	lsls	r2, r4, #29
    335c:	08ff      	lsrs	r7, r7, #3
    335e:	0264      	lsls	r4, r4, #9
    3360:	0576      	lsls	r6, r6, #21
    3362:	4317      	orrs	r7, r2
    3364:	0b24      	lsrs	r4, r4, #12
    3366:	0d76      	lsrs	r6, r6, #21
    3368:	401d      	ands	r5, r3
    336a:	2100      	movs	r1, #0
    336c:	0324      	lsls	r4, r4, #12
    336e:	0b23      	lsrs	r3, r4, #12
    3370:	0d0c      	lsrs	r4, r1, #20
    3372:	4a7e      	ldr	r2, [pc, #504]	; (356c <__aeabi_dsub+0x34c>)
    3374:	0524      	lsls	r4, r4, #20
    3376:	431c      	orrs	r4, r3
    3378:	4014      	ands	r4, r2
    337a:	0533      	lsls	r3, r6, #20
    337c:	4323      	orrs	r3, r4
    337e:	005b      	lsls	r3, r3, #1
    3380:	07ed      	lsls	r5, r5, #31
    3382:	085b      	lsrs	r3, r3, #1
    3384:	432b      	orrs	r3, r5
    3386:	0038      	movs	r0, r7
    3388:	0019      	movs	r1, r3
    338a:	bc1c      	pop	{r2, r3, r4}
    338c:	4690      	mov	r8, r2
    338e:	4699      	mov	r9, r3
    3390:	46a2      	mov	sl, r4
    3392:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3394:	2501      	movs	r5, #1
    3396:	4643      	mov	r3, r8
    3398:	0762      	lsls	r2, r4, #29
    339a:	08ff      	lsrs	r7, r7, #3
    339c:	4317      	orrs	r7, r2
    339e:	08e4      	lsrs	r4, r4, #3
    33a0:	401d      	ands	r5, r3
    33a2:	4b70      	ldr	r3, [pc, #448]	; (3564 <__aeabi_dsub+0x344>)
    33a4:	429e      	cmp	r6, r3
    33a6:	d036      	beq.n	3416 <__aeabi_dsub+0x1f6>
    33a8:	0324      	lsls	r4, r4, #12
    33aa:	0576      	lsls	r6, r6, #21
    33ac:	0b24      	lsrs	r4, r4, #12
    33ae:	0d76      	lsrs	r6, r6, #21
    33b0:	e7db      	b.n	336a <__aeabi_dsub+0x14a>
    33b2:	4663      	mov	r3, ip
    33b4:	1af3      	subs	r3, r6, r3
    33b6:	2b00      	cmp	r3, #0
    33b8:	dc00      	bgt.n	33bc <__aeabi_dsub+0x19c>
    33ba:	e094      	b.n	34e6 <__aeabi_dsub+0x2c6>
    33bc:	4660      	mov	r0, ip
    33be:	2800      	cmp	r0, #0
    33c0:	d035      	beq.n	342e <__aeabi_dsub+0x20e>
    33c2:	4868      	ldr	r0, [pc, #416]	; (3564 <__aeabi_dsub+0x344>)
    33c4:	4286      	cmp	r6, r0
    33c6:	d0b1      	beq.n	332c <__aeabi_dsub+0x10c>
    33c8:	2780      	movs	r7, #128	; 0x80
    33ca:	043f      	lsls	r7, r7, #16
    33cc:	4339      	orrs	r1, r7
    33ce:	2b38      	cmp	r3, #56	; 0x38
    33d0:	dc00      	bgt.n	33d4 <__aeabi_dsub+0x1b4>
    33d2:	e0fd      	b.n	35d0 <__aeabi_dsub+0x3b0>
    33d4:	430a      	orrs	r2, r1
    33d6:	0017      	movs	r7, r2
    33d8:	2100      	movs	r1, #0
    33da:	1e7a      	subs	r2, r7, #1
    33dc:	4197      	sbcs	r7, r2
    33de:	4457      	add	r7, sl
    33e0:	4557      	cmp	r7, sl
    33e2:	4180      	sbcs	r0, r0
    33e4:	1909      	adds	r1, r1, r4
    33e6:	4244      	negs	r4, r0
    33e8:	190c      	adds	r4, r1, r4
    33ea:	0223      	lsls	r3, r4, #8
    33ec:	d53a      	bpl.n	3464 <__aeabi_dsub+0x244>
    33ee:	4b5d      	ldr	r3, [pc, #372]	; (3564 <__aeabi_dsub+0x344>)
    33f0:	3601      	adds	r6, #1
    33f2:	429e      	cmp	r6, r3
    33f4:	d100      	bne.n	33f8 <__aeabi_dsub+0x1d8>
    33f6:	e14b      	b.n	3690 <__aeabi_dsub+0x470>
    33f8:	2201      	movs	r2, #1
    33fa:	4b5b      	ldr	r3, [pc, #364]	; (3568 <__aeabi_dsub+0x348>)
    33fc:	401c      	ands	r4, r3
    33fe:	087b      	lsrs	r3, r7, #1
    3400:	4017      	ands	r7, r2
    3402:	431f      	orrs	r7, r3
    3404:	07e2      	lsls	r2, r4, #31
    3406:	4317      	orrs	r7, r2
    3408:	0864      	lsrs	r4, r4, #1
    340a:	e78f      	b.n	332c <__aeabi_dsub+0x10c>
    340c:	0008      	movs	r0, r1
    340e:	4310      	orrs	r0, r2
    3410:	d000      	beq.n	3414 <__aeabi_dsub+0x1f4>
    3412:	e724      	b.n	325e <__aeabi_dsub+0x3e>
    3414:	e721      	b.n	325a <__aeabi_dsub+0x3a>
    3416:	0023      	movs	r3, r4
    3418:	433b      	orrs	r3, r7
    341a:	d100      	bne.n	341e <__aeabi_dsub+0x1fe>
    341c:	e1b9      	b.n	3792 <__aeabi_dsub+0x572>
    341e:	2280      	movs	r2, #128	; 0x80
    3420:	0312      	lsls	r2, r2, #12
    3422:	4314      	orrs	r4, r2
    3424:	0324      	lsls	r4, r4, #12
    3426:	0b24      	lsrs	r4, r4, #12
    3428:	e79f      	b.n	336a <__aeabi_dsub+0x14a>
    342a:	002e      	movs	r6, r5
    342c:	e77e      	b.n	332c <__aeabi_dsub+0x10c>
    342e:	0008      	movs	r0, r1
    3430:	4310      	orrs	r0, r2
    3432:	d100      	bne.n	3436 <__aeabi_dsub+0x216>
    3434:	e0ca      	b.n	35cc <__aeabi_dsub+0x3ac>
    3436:	1e58      	subs	r0, r3, #1
    3438:	4684      	mov	ip, r0
    343a:	2800      	cmp	r0, #0
    343c:	d000      	beq.n	3440 <__aeabi_dsub+0x220>
    343e:	e0e7      	b.n	3610 <__aeabi_dsub+0x3f0>
    3440:	4452      	add	r2, sl
    3442:	4552      	cmp	r2, sl
    3444:	4180      	sbcs	r0, r0
    3446:	1864      	adds	r4, r4, r1
    3448:	4240      	negs	r0, r0
    344a:	1824      	adds	r4, r4, r0
    344c:	0017      	movs	r7, r2
    344e:	2601      	movs	r6, #1
    3450:	0223      	lsls	r3, r4, #8
    3452:	d507      	bpl.n	3464 <__aeabi_dsub+0x244>
    3454:	2602      	movs	r6, #2
    3456:	e7cf      	b.n	33f8 <__aeabi_dsub+0x1d8>
    3458:	4664      	mov	r4, ip
    345a:	432c      	orrs	r4, r5
    345c:	d100      	bne.n	3460 <__aeabi_dsub+0x240>
    345e:	e1b3      	b.n	37c8 <__aeabi_dsub+0x5a8>
    3460:	002c      	movs	r4, r5
    3462:	4667      	mov	r7, ip
    3464:	077b      	lsls	r3, r7, #29
    3466:	d000      	beq.n	346a <__aeabi_dsub+0x24a>
    3468:	e762      	b.n	3330 <__aeabi_dsub+0x110>
    346a:	0763      	lsls	r3, r4, #29
    346c:	08ff      	lsrs	r7, r7, #3
    346e:	431f      	orrs	r7, r3
    3470:	2501      	movs	r5, #1
    3472:	4643      	mov	r3, r8
    3474:	08e4      	lsrs	r4, r4, #3
    3476:	401d      	ands	r5, r3
    3478:	e793      	b.n	33a2 <__aeabi_dsub+0x182>
    347a:	2d00      	cmp	r5, #0
    347c:	d178      	bne.n	3570 <__aeabi_dsub+0x350>
    347e:	1c75      	adds	r5, r6, #1
    3480:	056d      	lsls	r5, r5, #21
    3482:	0d6d      	lsrs	r5, r5, #21
    3484:	2d01      	cmp	r5, #1
    3486:	dc00      	bgt.n	348a <__aeabi_dsub+0x26a>
    3488:	e0f2      	b.n	3670 <__aeabi_dsub+0x450>
    348a:	4650      	mov	r0, sl
    348c:	1a80      	subs	r0, r0, r2
    348e:	4582      	cmp	sl, r0
    3490:	41bf      	sbcs	r7, r7
    3492:	1a65      	subs	r5, r4, r1
    3494:	427f      	negs	r7, r7
    3496:	1bed      	subs	r5, r5, r7
    3498:	4684      	mov	ip, r0
    349a:	0228      	lsls	r0, r5, #8
    349c:	d400      	bmi.n	34a0 <__aeabi_dsub+0x280>
    349e:	e08c      	b.n	35ba <__aeabi_dsub+0x39a>
    34a0:	4650      	mov	r0, sl
    34a2:	1a17      	subs	r7, r2, r0
    34a4:	42ba      	cmp	r2, r7
    34a6:	4192      	sbcs	r2, r2
    34a8:	1b0c      	subs	r4, r1, r4
    34aa:	4255      	negs	r5, r2
    34ac:	1b65      	subs	r5, r4, r5
    34ae:	4698      	mov	r8, r3
    34b0:	e714      	b.n	32dc <__aeabi_dsub+0xbc>
    34b2:	2501      	movs	r5, #1
    34b4:	4643      	mov	r3, r8
    34b6:	2400      	movs	r4, #0
    34b8:	401d      	ands	r5, r3
    34ba:	2700      	movs	r7, #0
    34bc:	e755      	b.n	336a <__aeabi_dsub+0x14a>
    34be:	4c2a      	ldr	r4, [pc, #168]	; (3568 <__aeabi_dsub+0x348>)
    34c0:	1af6      	subs	r6, r6, r3
    34c2:	402c      	ands	r4, r5
    34c4:	e732      	b.n	332c <__aeabi_dsub+0x10c>
    34c6:	003d      	movs	r5, r7
    34c8:	3828      	subs	r0, #40	; 0x28
    34ca:	4085      	lsls	r5, r0
    34cc:	2700      	movs	r7, #0
    34ce:	e717      	b.n	3300 <__aeabi_dsub+0xe0>
    34d0:	0038      	movs	r0, r7
    34d2:	f000 fa27 	bl	3924 <__clzsi2>
    34d6:	3020      	adds	r0, #32
    34d8:	e706      	b.n	32e8 <__aeabi_dsub+0xc8>
    34da:	430a      	orrs	r2, r1
    34dc:	0017      	movs	r7, r2
    34de:	2100      	movs	r1, #0
    34e0:	1e7a      	subs	r2, r7, #1
    34e2:	4197      	sbcs	r7, r2
    34e4:	e6ee      	b.n	32c4 <__aeabi_dsub+0xa4>
    34e6:	2b00      	cmp	r3, #0
    34e8:	d000      	beq.n	34ec <__aeabi_dsub+0x2cc>
    34ea:	e0e5      	b.n	36b8 <__aeabi_dsub+0x498>
    34ec:	1c73      	adds	r3, r6, #1
    34ee:	469c      	mov	ip, r3
    34f0:	055b      	lsls	r3, r3, #21
    34f2:	0d5b      	lsrs	r3, r3, #21
    34f4:	2b01      	cmp	r3, #1
    34f6:	dc00      	bgt.n	34fa <__aeabi_dsub+0x2da>
    34f8:	e09f      	b.n	363a <__aeabi_dsub+0x41a>
    34fa:	4b1a      	ldr	r3, [pc, #104]	; (3564 <__aeabi_dsub+0x344>)
    34fc:	459c      	cmp	ip, r3
    34fe:	d100      	bne.n	3502 <__aeabi_dsub+0x2e2>
    3500:	e0c5      	b.n	368e <__aeabi_dsub+0x46e>
    3502:	4452      	add	r2, sl
    3504:	4552      	cmp	r2, sl
    3506:	4180      	sbcs	r0, r0
    3508:	1864      	adds	r4, r4, r1
    350a:	4240      	negs	r0, r0
    350c:	1824      	adds	r4, r4, r0
    350e:	07e7      	lsls	r7, r4, #31
    3510:	0852      	lsrs	r2, r2, #1
    3512:	4317      	orrs	r7, r2
    3514:	0864      	lsrs	r4, r4, #1
    3516:	4666      	mov	r6, ip
    3518:	e708      	b.n	332c <__aeabi_dsub+0x10c>
    351a:	4812      	ldr	r0, [pc, #72]	; (3564 <__aeabi_dsub+0x344>)
    351c:	4285      	cmp	r5, r0
    351e:	d100      	bne.n	3522 <__aeabi_dsub+0x302>
    3520:	e085      	b.n	362e <__aeabi_dsub+0x40e>
    3522:	001d      	movs	r5, r3
    3524:	e6bc      	b.n	32a0 <__aeabi_dsub+0x80>
    3526:	0029      	movs	r1, r5
    3528:	3e1f      	subs	r6, #31
    352a:	40f1      	lsrs	r1, r6
    352c:	2b20      	cmp	r3, #32
    352e:	d100      	bne.n	3532 <__aeabi_dsub+0x312>
    3530:	e07f      	b.n	3632 <__aeabi_dsub+0x412>
    3532:	2240      	movs	r2, #64	; 0x40
    3534:	1ad3      	subs	r3, r2, r3
    3536:	409d      	lsls	r5, r3
    3538:	432f      	orrs	r7, r5
    353a:	1e7d      	subs	r5, r7, #1
    353c:	41af      	sbcs	r7, r5
    353e:	2400      	movs	r4, #0
    3540:	430f      	orrs	r7, r1
    3542:	2600      	movs	r6, #0
    3544:	e78e      	b.n	3464 <__aeabi_dsub+0x244>
    3546:	002b      	movs	r3, r5
    3548:	000f      	movs	r7, r1
    354a:	3b20      	subs	r3, #32
    354c:	40df      	lsrs	r7, r3
    354e:	2d20      	cmp	r5, #32
    3550:	d071      	beq.n	3636 <__aeabi_dsub+0x416>
    3552:	2340      	movs	r3, #64	; 0x40
    3554:	1b5d      	subs	r5, r3, r5
    3556:	40a9      	lsls	r1, r5
    3558:	430a      	orrs	r2, r1
    355a:	1e51      	subs	r1, r2, #1
    355c:	418a      	sbcs	r2, r1
    355e:	2100      	movs	r1, #0
    3560:	4317      	orrs	r7, r2
    3562:	e6af      	b.n	32c4 <__aeabi_dsub+0xa4>
    3564:	000007ff 	.word	0x000007ff
    3568:	ff7fffff 	.word	0xff7fffff
    356c:	800fffff 	.word	0x800fffff
    3570:	2e00      	cmp	r6, #0
    3572:	d03e      	beq.n	35f2 <__aeabi_dsub+0x3d2>
    3574:	4eb3      	ldr	r6, [pc, #716]	; (3844 <__aeabi_dsub+0x624>)
    3576:	45b4      	cmp	ip, r6
    3578:	d045      	beq.n	3606 <__aeabi_dsub+0x3e6>
    357a:	2680      	movs	r6, #128	; 0x80
    357c:	0436      	lsls	r6, r6, #16
    357e:	426d      	negs	r5, r5
    3580:	4334      	orrs	r4, r6
    3582:	2d38      	cmp	r5, #56	; 0x38
    3584:	dd00      	ble.n	3588 <__aeabi_dsub+0x368>
    3586:	e0a8      	b.n	36da <__aeabi_dsub+0x4ba>
    3588:	2d1f      	cmp	r5, #31
    358a:	dd00      	ble.n	358e <__aeabi_dsub+0x36e>
    358c:	e11f      	b.n	37ce <__aeabi_dsub+0x5ae>
    358e:	2620      	movs	r6, #32
    3590:	0027      	movs	r7, r4
    3592:	4650      	mov	r0, sl
    3594:	1b76      	subs	r6, r6, r5
    3596:	40b7      	lsls	r7, r6
    3598:	40e8      	lsrs	r0, r5
    359a:	4307      	orrs	r7, r0
    359c:	4650      	mov	r0, sl
    359e:	40b0      	lsls	r0, r6
    35a0:	1e46      	subs	r6, r0, #1
    35a2:	41b0      	sbcs	r0, r6
    35a4:	40ec      	lsrs	r4, r5
    35a6:	4338      	orrs	r0, r7
    35a8:	1a17      	subs	r7, r2, r0
    35aa:	42ba      	cmp	r2, r7
    35ac:	4192      	sbcs	r2, r2
    35ae:	1b0c      	subs	r4, r1, r4
    35b0:	4252      	negs	r2, r2
    35b2:	1aa4      	subs	r4, r4, r2
    35b4:	4666      	mov	r6, ip
    35b6:	4698      	mov	r8, r3
    35b8:	e68b      	b.n	32d2 <__aeabi_dsub+0xb2>
    35ba:	4664      	mov	r4, ip
    35bc:	4667      	mov	r7, ip
    35be:	432c      	orrs	r4, r5
    35c0:	d000      	beq.n	35c4 <__aeabi_dsub+0x3a4>
    35c2:	e68b      	b.n	32dc <__aeabi_dsub+0xbc>
    35c4:	2500      	movs	r5, #0
    35c6:	2600      	movs	r6, #0
    35c8:	2700      	movs	r7, #0
    35ca:	e6ea      	b.n	33a2 <__aeabi_dsub+0x182>
    35cc:	001e      	movs	r6, r3
    35ce:	e6ad      	b.n	332c <__aeabi_dsub+0x10c>
    35d0:	2b1f      	cmp	r3, #31
    35d2:	dc60      	bgt.n	3696 <__aeabi_dsub+0x476>
    35d4:	2720      	movs	r7, #32
    35d6:	1af8      	subs	r0, r7, r3
    35d8:	000f      	movs	r7, r1
    35da:	4684      	mov	ip, r0
    35dc:	4087      	lsls	r7, r0
    35de:	0010      	movs	r0, r2
    35e0:	40d8      	lsrs	r0, r3
    35e2:	4307      	orrs	r7, r0
    35e4:	4660      	mov	r0, ip
    35e6:	4082      	lsls	r2, r0
    35e8:	1e50      	subs	r0, r2, #1
    35ea:	4182      	sbcs	r2, r0
    35ec:	40d9      	lsrs	r1, r3
    35ee:	4317      	orrs	r7, r2
    35f0:	e6f5      	b.n	33de <__aeabi_dsub+0x1be>
    35f2:	0026      	movs	r6, r4
    35f4:	4650      	mov	r0, sl
    35f6:	4306      	orrs	r6, r0
    35f8:	d005      	beq.n	3606 <__aeabi_dsub+0x3e6>
    35fa:	43ed      	mvns	r5, r5
    35fc:	2d00      	cmp	r5, #0
    35fe:	d0d3      	beq.n	35a8 <__aeabi_dsub+0x388>
    3600:	4e90      	ldr	r6, [pc, #576]	; (3844 <__aeabi_dsub+0x624>)
    3602:	45b4      	cmp	ip, r6
    3604:	d1bd      	bne.n	3582 <__aeabi_dsub+0x362>
    3606:	000c      	movs	r4, r1
    3608:	0017      	movs	r7, r2
    360a:	4666      	mov	r6, ip
    360c:	4698      	mov	r8, r3
    360e:	e68d      	b.n	332c <__aeabi_dsub+0x10c>
    3610:	488c      	ldr	r0, [pc, #560]	; (3844 <__aeabi_dsub+0x624>)
    3612:	4283      	cmp	r3, r0
    3614:	d00b      	beq.n	362e <__aeabi_dsub+0x40e>
    3616:	4663      	mov	r3, ip
    3618:	e6d9      	b.n	33ce <__aeabi_dsub+0x1ae>
    361a:	2d00      	cmp	r5, #0
    361c:	d000      	beq.n	3620 <__aeabi_dsub+0x400>
    361e:	e096      	b.n	374e <__aeabi_dsub+0x52e>
    3620:	0008      	movs	r0, r1
    3622:	4310      	orrs	r0, r2
    3624:	d100      	bne.n	3628 <__aeabi_dsub+0x408>
    3626:	e0e2      	b.n	37ee <__aeabi_dsub+0x5ce>
    3628:	000c      	movs	r4, r1
    362a:	0017      	movs	r7, r2
    362c:	4698      	mov	r8, r3
    362e:	4e85      	ldr	r6, [pc, #532]	; (3844 <__aeabi_dsub+0x624>)
    3630:	e67c      	b.n	332c <__aeabi_dsub+0x10c>
    3632:	2500      	movs	r5, #0
    3634:	e780      	b.n	3538 <__aeabi_dsub+0x318>
    3636:	2100      	movs	r1, #0
    3638:	e78e      	b.n	3558 <__aeabi_dsub+0x338>
    363a:	0023      	movs	r3, r4
    363c:	4650      	mov	r0, sl
    363e:	4303      	orrs	r3, r0
    3640:	2e00      	cmp	r6, #0
    3642:	d000      	beq.n	3646 <__aeabi_dsub+0x426>
    3644:	e0a8      	b.n	3798 <__aeabi_dsub+0x578>
    3646:	2b00      	cmp	r3, #0
    3648:	d100      	bne.n	364c <__aeabi_dsub+0x42c>
    364a:	e0de      	b.n	380a <__aeabi_dsub+0x5ea>
    364c:	000b      	movs	r3, r1
    364e:	4313      	orrs	r3, r2
    3650:	d100      	bne.n	3654 <__aeabi_dsub+0x434>
    3652:	e66b      	b.n	332c <__aeabi_dsub+0x10c>
    3654:	4452      	add	r2, sl
    3656:	4552      	cmp	r2, sl
    3658:	4180      	sbcs	r0, r0
    365a:	1864      	adds	r4, r4, r1
    365c:	4240      	negs	r0, r0
    365e:	1824      	adds	r4, r4, r0
    3660:	0017      	movs	r7, r2
    3662:	0223      	lsls	r3, r4, #8
    3664:	d400      	bmi.n	3668 <__aeabi_dsub+0x448>
    3666:	e6fd      	b.n	3464 <__aeabi_dsub+0x244>
    3668:	4b77      	ldr	r3, [pc, #476]	; (3848 <__aeabi_dsub+0x628>)
    366a:	4666      	mov	r6, ip
    366c:	401c      	ands	r4, r3
    366e:	e65d      	b.n	332c <__aeabi_dsub+0x10c>
    3670:	0025      	movs	r5, r4
    3672:	4650      	mov	r0, sl
    3674:	4305      	orrs	r5, r0
    3676:	2e00      	cmp	r6, #0
    3678:	d1cf      	bne.n	361a <__aeabi_dsub+0x3fa>
    367a:	2d00      	cmp	r5, #0
    367c:	d14f      	bne.n	371e <__aeabi_dsub+0x4fe>
    367e:	000c      	movs	r4, r1
    3680:	4314      	orrs	r4, r2
    3682:	d100      	bne.n	3686 <__aeabi_dsub+0x466>
    3684:	e0a0      	b.n	37c8 <__aeabi_dsub+0x5a8>
    3686:	000c      	movs	r4, r1
    3688:	0017      	movs	r7, r2
    368a:	4698      	mov	r8, r3
    368c:	e64e      	b.n	332c <__aeabi_dsub+0x10c>
    368e:	4666      	mov	r6, ip
    3690:	2400      	movs	r4, #0
    3692:	2700      	movs	r7, #0
    3694:	e685      	b.n	33a2 <__aeabi_dsub+0x182>
    3696:	001f      	movs	r7, r3
    3698:	0008      	movs	r0, r1
    369a:	3f20      	subs	r7, #32
    369c:	40f8      	lsrs	r0, r7
    369e:	0007      	movs	r7, r0
    36a0:	2b20      	cmp	r3, #32
    36a2:	d100      	bne.n	36a6 <__aeabi_dsub+0x486>
    36a4:	e08e      	b.n	37c4 <__aeabi_dsub+0x5a4>
    36a6:	2040      	movs	r0, #64	; 0x40
    36a8:	1ac3      	subs	r3, r0, r3
    36aa:	4099      	lsls	r1, r3
    36ac:	430a      	orrs	r2, r1
    36ae:	1e51      	subs	r1, r2, #1
    36b0:	418a      	sbcs	r2, r1
    36b2:	2100      	movs	r1, #0
    36b4:	4317      	orrs	r7, r2
    36b6:	e692      	b.n	33de <__aeabi_dsub+0x1be>
    36b8:	2e00      	cmp	r6, #0
    36ba:	d114      	bne.n	36e6 <__aeabi_dsub+0x4c6>
    36bc:	0026      	movs	r6, r4
    36be:	4650      	mov	r0, sl
    36c0:	4306      	orrs	r6, r0
    36c2:	d062      	beq.n	378a <__aeabi_dsub+0x56a>
    36c4:	43db      	mvns	r3, r3
    36c6:	2b00      	cmp	r3, #0
    36c8:	d15c      	bne.n	3784 <__aeabi_dsub+0x564>
    36ca:	1887      	adds	r7, r0, r2
    36cc:	4297      	cmp	r7, r2
    36ce:	4192      	sbcs	r2, r2
    36d0:	1864      	adds	r4, r4, r1
    36d2:	4252      	negs	r2, r2
    36d4:	18a4      	adds	r4, r4, r2
    36d6:	4666      	mov	r6, ip
    36d8:	e687      	b.n	33ea <__aeabi_dsub+0x1ca>
    36da:	4650      	mov	r0, sl
    36dc:	4320      	orrs	r0, r4
    36de:	1e44      	subs	r4, r0, #1
    36e0:	41a0      	sbcs	r0, r4
    36e2:	2400      	movs	r4, #0
    36e4:	e760      	b.n	35a8 <__aeabi_dsub+0x388>
    36e6:	4e57      	ldr	r6, [pc, #348]	; (3844 <__aeabi_dsub+0x624>)
    36e8:	45b4      	cmp	ip, r6
    36ea:	d04e      	beq.n	378a <__aeabi_dsub+0x56a>
    36ec:	2680      	movs	r6, #128	; 0x80
    36ee:	0436      	lsls	r6, r6, #16
    36f0:	425b      	negs	r3, r3
    36f2:	4334      	orrs	r4, r6
    36f4:	2b38      	cmp	r3, #56	; 0x38
    36f6:	dd00      	ble.n	36fa <__aeabi_dsub+0x4da>
    36f8:	e07f      	b.n	37fa <__aeabi_dsub+0x5da>
    36fa:	2b1f      	cmp	r3, #31
    36fc:	dd00      	ble.n	3700 <__aeabi_dsub+0x4e0>
    36fe:	e08b      	b.n	3818 <__aeabi_dsub+0x5f8>
    3700:	2620      	movs	r6, #32
    3702:	0027      	movs	r7, r4
    3704:	4650      	mov	r0, sl
    3706:	1af6      	subs	r6, r6, r3
    3708:	40b7      	lsls	r7, r6
    370a:	40d8      	lsrs	r0, r3
    370c:	4307      	orrs	r7, r0
    370e:	4650      	mov	r0, sl
    3710:	40b0      	lsls	r0, r6
    3712:	1e46      	subs	r6, r0, #1
    3714:	41b0      	sbcs	r0, r6
    3716:	4307      	orrs	r7, r0
    3718:	40dc      	lsrs	r4, r3
    371a:	18bf      	adds	r7, r7, r2
    371c:	e7d6      	b.n	36cc <__aeabi_dsub+0x4ac>
    371e:	000d      	movs	r5, r1
    3720:	4315      	orrs	r5, r2
    3722:	d100      	bne.n	3726 <__aeabi_dsub+0x506>
    3724:	e602      	b.n	332c <__aeabi_dsub+0x10c>
    3726:	4650      	mov	r0, sl
    3728:	1a80      	subs	r0, r0, r2
    372a:	4582      	cmp	sl, r0
    372c:	41bf      	sbcs	r7, r7
    372e:	1a65      	subs	r5, r4, r1
    3730:	427f      	negs	r7, r7
    3732:	1bed      	subs	r5, r5, r7
    3734:	4684      	mov	ip, r0
    3736:	0228      	lsls	r0, r5, #8
    3738:	d400      	bmi.n	373c <__aeabi_dsub+0x51c>
    373a:	e68d      	b.n	3458 <__aeabi_dsub+0x238>
    373c:	4650      	mov	r0, sl
    373e:	1a17      	subs	r7, r2, r0
    3740:	42ba      	cmp	r2, r7
    3742:	4192      	sbcs	r2, r2
    3744:	1b0c      	subs	r4, r1, r4
    3746:	4252      	negs	r2, r2
    3748:	1aa4      	subs	r4, r4, r2
    374a:	4698      	mov	r8, r3
    374c:	e5ee      	b.n	332c <__aeabi_dsub+0x10c>
    374e:	000d      	movs	r5, r1
    3750:	4315      	orrs	r5, r2
    3752:	d100      	bne.n	3756 <__aeabi_dsub+0x536>
    3754:	e76b      	b.n	362e <__aeabi_dsub+0x40e>
    3756:	4650      	mov	r0, sl
    3758:	0767      	lsls	r7, r4, #29
    375a:	08c0      	lsrs	r0, r0, #3
    375c:	4307      	orrs	r7, r0
    375e:	2080      	movs	r0, #128	; 0x80
    3760:	08e4      	lsrs	r4, r4, #3
    3762:	0300      	lsls	r0, r0, #12
    3764:	4204      	tst	r4, r0
    3766:	d007      	beq.n	3778 <__aeabi_dsub+0x558>
    3768:	08cd      	lsrs	r5, r1, #3
    376a:	4205      	tst	r5, r0
    376c:	d104      	bne.n	3778 <__aeabi_dsub+0x558>
    376e:	002c      	movs	r4, r5
    3770:	4698      	mov	r8, r3
    3772:	08d7      	lsrs	r7, r2, #3
    3774:	0749      	lsls	r1, r1, #29
    3776:	430f      	orrs	r7, r1
    3778:	0f7b      	lsrs	r3, r7, #29
    377a:	00e4      	lsls	r4, r4, #3
    377c:	431c      	orrs	r4, r3
    377e:	00ff      	lsls	r7, r7, #3
    3780:	4e30      	ldr	r6, [pc, #192]	; (3844 <__aeabi_dsub+0x624>)
    3782:	e5d3      	b.n	332c <__aeabi_dsub+0x10c>
    3784:	4e2f      	ldr	r6, [pc, #188]	; (3844 <__aeabi_dsub+0x624>)
    3786:	45b4      	cmp	ip, r6
    3788:	d1b4      	bne.n	36f4 <__aeabi_dsub+0x4d4>
    378a:	000c      	movs	r4, r1
    378c:	0017      	movs	r7, r2
    378e:	4666      	mov	r6, ip
    3790:	e5cc      	b.n	332c <__aeabi_dsub+0x10c>
    3792:	2700      	movs	r7, #0
    3794:	2400      	movs	r4, #0
    3796:	e5e8      	b.n	336a <__aeabi_dsub+0x14a>
    3798:	2b00      	cmp	r3, #0
    379a:	d039      	beq.n	3810 <__aeabi_dsub+0x5f0>
    379c:	000b      	movs	r3, r1
    379e:	4313      	orrs	r3, r2
    37a0:	d100      	bne.n	37a4 <__aeabi_dsub+0x584>
    37a2:	e744      	b.n	362e <__aeabi_dsub+0x40e>
    37a4:	08c0      	lsrs	r0, r0, #3
    37a6:	0767      	lsls	r7, r4, #29
    37a8:	4307      	orrs	r7, r0
    37aa:	2080      	movs	r0, #128	; 0x80
    37ac:	08e4      	lsrs	r4, r4, #3
    37ae:	0300      	lsls	r0, r0, #12
    37b0:	4204      	tst	r4, r0
    37b2:	d0e1      	beq.n	3778 <__aeabi_dsub+0x558>
    37b4:	08cb      	lsrs	r3, r1, #3
    37b6:	4203      	tst	r3, r0
    37b8:	d1de      	bne.n	3778 <__aeabi_dsub+0x558>
    37ba:	08d7      	lsrs	r7, r2, #3
    37bc:	0749      	lsls	r1, r1, #29
    37be:	430f      	orrs	r7, r1
    37c0:	001c      	movs	r4, r3
    37c2:	e7d9      	b.n	3778 <__aeabi_dsub+0x558>
    37c4:	2100      	movs	r1, #0
    37c6:	e771      	b.n	36ac <__aeabi_dsub+0x48c>
    37c8:	2500      	movs	r5, #0
    37ca:	2700      	movs	r7, #0
    37cc:	e5e9      	b.n	33a2 <__aeabi_dsub+0x182>
    37ce:	002e      	movs	r6, r5
    37d0:	0027      	movs	r7, r4
    37d2:	3e20      	subs	r6, #32
    37d4:	40f7      	lsrs	r7, r6
    37d6:	2d20      	cmp	r5, #32
    37d8:	d02f      	beq.n	383a <__aeabi_dsub+0x61a>
    37da:	2640      	movs	r6, #64	; 0x40
    37dc:	1b75      	subs	r5, r6, r5
    37de:	40ac      	lsls	r4, r5
    37e0:	4650      	mov	r0, sl
    37e2:	4320      	orrs	r0, r4
    37e4:	1e44      	subs	r4, r0, #1
    37e6:	41a0      	sbcs	r0, r4
    37e8:	2400      	movs	r4, #0
    37ea:	4338      	orrs	r0, r7
    37ec:	e6dc      	b.n	35a8 <__aeabi_dsub+0x388>
    37ee:	2480      	movs	r4, #128	; 0x80
    37f0:	2500      	movs	r5, #0
    37f2:	0324      	lsls	r4, r4, #12
    37f4:	4e13      	ldr	r6, [pc, #76]	; (3844 <__aeabi_dsub+0x624>)
    37f6:	2700      	movs	r7, #0
    37f8:	e5d3      	b.n	33a2 <__aeabi_dsub+0x182>
    37fa:	4650      	mov	r0, sl
    37fc:	4320      	orrs	r0, r4
    37fe:	0007      	movs	r7, r0
    3800:	1e78      	subs	r0, r7, #1
    3802:	4187      	sbcs	r7, r0
    3804:	2400      	movs	r4, #0
    3806:	18bf      	adds	r7, r7, r2
    3808:	e760      	b.n	36cc <__aeabi_dsub+0x4ac>
    380a:	000c      	movs	r4, r1
    380c:	0017      	movs	r7, r2
    380e:	e58d      	b.n	332c <__aeabi_dsub+0x10c>
    3810:	000c      	movs	r4, r1
    3812:	0017      	movs	r7, r2
    3814:	4e0b      	ldr	r6, [pc, #44]	; (3844 <__aeabi_dsub+0x624>)
    3816:	e589      	b.n	332c <__aeabi_dsub+0x10c>
    3818:	001e      	movs	r6, r3
    381a:	0027      	movs	r7, r4
    381c:	3e20      	subs	r6, #32
    381e:	40f7      	lsrs	r7, r6
    3820:	2b20      	cmp	r3, #32
    3822:	d00c      	beq.n	383e <__aeabi_dsub+0x61e>
    3824:	2640      	movs	r6, #64	; 0x40
    3826:	1af3      	subs	r3, r6, r3
    3828:	409c      	lsls	r4, r3
    382a:	4650      	mov	r0, sl
    382c:	4320      	orrs	r0, r4
    382e:	1e44      	subs	r4, r0, #1
    3830:	41a0      	sbcs	r0, r4
    3832:	4307      	orrs	r7, r0
    3834:	2400      	movs	r4, #0
    3836:	18bf      	adds	r7, r7, r2
    3838:	e748      	b.n	36cc <__aeabi_dsub+0x4ac>
    383a:	2400      	movs	r4, #0
    383c:	e7d0      	b.n	37e0 <__aeabi_dsub+0x5c0>
    383e:	2400      	movs	r4, #0
    3840:	e7f3      	b.n	382a <__aeabi_dsub+0x60a>
    3842:	46c0      	nop			; (mov r8, r8)
    3844:	000007ff 	.word	0x000007ff
    3848:	ff7fffff 	.word	0xff7fffff

0000384c <__aeabi_d2iz>:
    384c:	b530      	push	{r4, r5, lr}
    384e:	4d13      	ldr	r5, [pc, #76]	; (389c <__aeabi_d2iz+0x50>)
    3850:	030a      	lsls	r2, r1, #12
    3852:	004b      	lsls	r3, r1, #1
    3854:	0b12      	lsrs	r2, r2, #12
    3856:	0d5b      	lsrs	r3, r3, #21
    3858:	0fc9      	lsrs	r1, r1, #31
    385a:	2400      	movs	r4, #0
    385c:	42ab      	cmp	r3, r5
    385e:	dd10      	ble.n	3882 <__aeabi_d2iz+0x36>
    3860:	4c0f      	ldr	r4, [pc, #60]	; (38a0 <__aeabi_d2iz+0x54>)
    3862:	42a3      	cmp	r3, r4
    3864:	dc0f      	bgt.n	3886 <__aeabi_d2iz+0x3a>
    3866:	2480      	movs	r4, #128	; 0x80
    3868:	4d0e      	ldr	r5, [pc, #56]	; (38a4 <__aeabi_d2iz+0x58>)
    386a:	0364      	lsls	r4, r4, #13
    386c:	4322      	orrs	r2, r4
    386e:	1aed      	subs	r5, r5, r3
    3870:	2d1f      	cmp	r5, #31
    3872:	dd0b      	ble.n	388c <__aeabi_d2iz+0x40>
    3874:	480c      	ldr	r0, [pc, #48]	; (38a8 <__aeabi_d2iz+0x5c>)
    3876:	1ac3      	subs	r3, r0, r3
    3878:	40da      	lsrs	r2, r3
    387a:	4254      	negs	r4, r2
    387c:	2900      	cmp	r1, #0
    387e:	d100      	bne.n	3882 <__aeabi_d2iz+0x36>
    3880:	0014      	movs	r4, r2
    3882:	0020      	movs	r0, r4
    3884:	bd30      	pop	{r4, r5, pc}
    3886:	4b09      	ldr	r3, [pc, #36]	; (38ac <__aeabi_d2iz+0x60>)
    3888:	18cc      	adds	r4, r1, r3
    388a:	e7fa      	b.n	3882 <__aeabi_d2iz+0x36>
    388c:	4c08      	ldr	r4, [pc, #32]	; (38b0 <__aeabi_d2iz+0x64>)
    388e:	40e8      	lsrs	r0, r5
    3890:	46a4      	mov	ip, r4
    3892:	4463      	add	r3, ip
    3894:	409a      	lsls	r2, r3
    3896:	4302      	orrs	r2, r0
    3898:	e7ef      	b.n	387a <__aeabi_d2iz+0x2e>
    389a:	46c0      	nop			; (mov r8, r8)
    389c:	000003fe 	.word	0x000003fe
    38a0:	0000041d 	.word	0x0000041d
    38a4:	00000433 	.word	0x00000433
    38a8:	00000413 	.word	0x00000413
    38ac:	7fffffff 	.word	0x7fffffff
    38b0:	fffffbed 	.word	0xfffffbed

000038b4 <__aeabi_ui2d>:
    38b4:	b510      	push	{r4, lr}
    38b6:	1e04      	subs	r4, r0, #0
    38b8:	d028      	beq.n	390c <__aeabi_ui2d+0x58>
    38ba:	f000 f833 	bl	3924 <__clzsi2>
    38be:	4b15      	ldr	r3, [pc, #84]	; (3914 <__aeabi_ui2d+0x60>)
    38c0:	4a15      	ldr	r2, [pc, #84]	; (3918 <__aeabi_ui2d+0x64>)
    38c2:	1a1b      	subs	r3, r3, r0
    38c4:	1ad2      	subs	r2, r2, r3
    38c6:	2a1f      	cmp	r2, #31
    38c8:	dd15      	ble.n	38f6 <__aeabi_ui2d+0x42>
    38ca:	4a14      	ldr	r2, [pc, #80]	; (391c <__aeabi_ui2d+0x68>)
    38cc:	1ad2      	subs	r2, r2, r3
    38ce:	4094      	lsls	r4, r2
    38d0:	2200      	movs	r2, #0
    38d2:	0324      	lsls	r4, r4, #12
    38d4:	055b      	lsls	r3, r3, #21
    38d6:	0b24      	lsrs	r4, r4, #12
    38d8:	0d5b      	lsrs	r3, r3, #21
    38da:	2100      	movs	r1, #0
    38dc:	0010      	movs	r0, r2
    38de:	0324      	lsls	r4, r4, #12
    38e0:	0d0a      	lsrs	r2, r1, #20
    38e2:	0b24      	lsrs	r4, r4, #12
    38e4:	0512      	lsls	r2, r2, #20
    38e6:	4322      	orrs	r2, r4
    38e8:	4c0d      	ldr	r4, [pc, #52]	; (3920 <__aeabi_ui2d+0x6c>)
    38ea:	051b      	lsls	r3, r3, #20
    38ec:	4022      	ands	r2, r4
    38ee:	4313      	orrs	r3, r2
    38f0:	005b      	lsls	r3, r3, #1
    38f2:	0859      	lsrs	r1, r3, #1
    38f4:	bd10      	pop	{r4, pc}
    38f6:	0021      	movs	r1, r4
    38f8:	4091      	lsls	r1, r2
    38fa:	000a      	movs	r2, r1
    38fc:	210b      	movs	r1, #11
    38fe:	1a08      	subs	r0, r1, r0
    3900:	40c4      	lsrs	r4, r0
    3902:	055b      	lsls	r3, r3, #21
    3904:	0324      	lsls	r4, r4, #12
    3906:	0b24      	lsrs	r4, r4, #12
    3908:	0d5b      	lsrs	r3, r3, #21
    390a:	e7e6      	b.n	38da <__aeabi_ui2d+0x26>
    390c:	2300      	movs	r3, #0
    390e:	2400      	movs	r4, #0
    3910:	2200      	movs	r2, #0
    3912:	e7e2      	b.n	38da <__aeabi_ui2d+0x26>
    3914:	0000041e 	.word	0x0000041e
    3918:	00000433 	.word	0x00000433
    391c:	00000413 	.word	0x00000413
    3920:	800fffff 	.word	0x800fffff

00003924 <__clzsi2>:
    3924:	211c      	movs	r1, #28
    3926:	2301      	movs	r3, #1
    3928:	041b      	lsls	r3, r3, #16
    392a:	4298      	cmp	r0, r3
    392c:	d301      	bcc.n	3932 <__clzsi2+0xe>
    392e:	0c00      	lsrs	r0, r0, #16
    3930:	3910      	subs	r1, #16
    3932:	0a1b      	lsrs	r3, r3, #8
    3934:	4298      	cmp	r0, r3
    3936:	d301      	bcc.n	393c <__clzsi2+0x18>
    3938:	0a00      	lsrs	r0, r0, #8
    393a:	3908      	subs	r1, #8
    393c:	091b      	lsrs	r3, r3, #4
    393e:	4298      	cmp	r0, r3
    3940:	d301      	bcc.n	3946 <__clzsi2+0x22>
    3942:	0900      	lsrs	r0, r0, #4
    3944:	3904      	subs	r1, #4
    3946:	a202      	add	r2, pc, #8	; (adr r2, 3950 <__clzsi2+0x2c>)
    3948:	5c10      	ldrb	r0, [r2, r0]
    394a:	1840      	adds	r0, r0, r1
    394c:	4770      	bx	lr
    394e:	46c0      	nop			; (mov r8, r8)
    3950:	02020304 	.word	0x02020304
    3954:	01010101 	.word	0x01010101
	...

00003960 <__libc_init_array>:
    3960:	b570      	push	{r4, r5, r6, lr}
    3962:	2600      	movs	r6, #0
    3964:	4d0c      	ldr	r5, [pc, #48]	; (3998 <__libc_init_array+0x38>)
    3966:	4c0d      	ldr	r4, [pc, #52]	; (399c <__libc_init_array+0x3c>)
    3968:	1b64      	subs	r4, r4, r5
    396a:	10a4      	asrs	r4, r4, #2
    396c:	42a6      	cmp	r6, r4
    396e:	d109      	bne.n	3984 <__libc_init_array+0x24>
    3970:	2600      	movs	r6, #0
    3972:	f000 f8fd 	bl	3b70 <_init>
    3976:	4d0a      	ldr	r5, [pc, #40]	; (39a0 <__libc_init_array+0x40>)
    3978:	4c0a      	ldr	r4, [pc, #40]	; (39a4 <__libc_init_array+0x44>)
    397a:	1b64      	subs	r4, r4, r5
    397c:	10a4      	asrs	r4, r4, #2
    397e:	42a6      	cmp	r6, r4
    3980:	d105      	bne.n	398e <__libc_init_array+0x2e>
    3982:	bd70      	pop	{r4, r5, r6, pc}
    3984:	00b3      	lsls	r3, r6, #2
    3986:	58eb      	ldr	r3, [r5, r3]
    3988:	4798      	blx	r3
    398a:	3601      	adds	r6, #1
    398c:	e7ee      	b.n	396c <__libc_init_array+0xc>
    398e:	00b3      	lsls	r3, r6, #2
    3990:	58eb      	ldr	r3, [r5, r3]
    3992:	4798      	blx	r3
    3994:	3601      	adds	r6, #1
    3996:	e7f2      	b.n	397e <__libc_init_array+0x1e>
    3998:	00003b7c 	.word	0x00003b7c
    399c:	00003b7c 	.word	0x00003b7c
    39a0:	00003b7c 	.word	0x00003b7c
    39a4:	00003b80 	.word	0x00003b80

000039a8 <memcpy>:
    39a8:	2300      	movs	r3, #0
    39aa:	b510      	push	{r4, lr}
    39ac:	429a      	cmp	r2, r3
    39ae:	d100      	bne.n	39b2 <memcpy+0xa>
    39b0:	bd10      	pop	{r4, pc}
    39b2:	5ccc      	ldrb	r4, [r1, r3]
    39b4:	54c4      	strb	r4, [r0, r3]
    39b6:	3301      	adds	r3, #1
    39b8:	e7f8      	b.n	39ac <memcpy+0x4>

000039ba <strcat>:
    39ba:	0002      	movs	r2, r0
    39bc:	b510      	push	{r4, lr}
    39be:	7813      	ldrb	r3, [r2, #0]
    39c0:	2b00      	cmp	r3, #0
    39c2:	d105      	bne.n	39d0 <strcat+0x16>
    39c4:	5ccc      	ldrb	r4, [r1, r3]
    39c6:	54d4      	strb	r4, [r2, r3]
    39c8:	3301      	adds	r3, #1
    39ca:	2c00      	cmp	r4, #0
    39cc:	d1fa      	bne.n	39c4 <strcat+0xa>
    39ce:	bd10      	pop	{r4, pc}
    39d0:	3201      	adds	r2, #1
    39d2:	e7f4      	b.n	39be <strcat+0x4>
    39d4:	42000800 	.word	0x42000800
    39d8:	42000c00 	.word	0x42000c00
    39dc:	42001000 	.word	0x42001000
    39e0:	42001400 	.word	0x42001400
    39e4:	42001800 	.word	0x42001800
    39e8:	42001c00 	.word	0x42001c00
    39ec:	43455441 	.word	0x43455441
    39f0:	32333143 	.word	0x32333143
    39f4:	20202041 	.word	0x20202041
    39f8:	20202020 	.word	0x20202020
    39fc:	20202020 	.word	0x20202020
    3a00:	20202020 	.word	0x20202020
    3a04:	20202020 	.word	0x20202020
    3a08:	20202020 	.word	0x20202020
    3a0c:	20202020 	.word	0x20202020
    3a10:	00000d0a 	.word	0x00000d0a
    3a14:	42355b1b 	.word	0x42355b1b
    3a18:	00000000 	.word	0x00000000
    3a1c:	61656c50 	.word	0x61656c50
    3a20:	65206573 	.word	0x65206573
    3a24:	7265746e 	.word	0x7265746e
    3a28:	65687420 	.word	0x65687420
    3a2c:	73656d20 	.word	0x73656d20
    3a30:	65676173 	.word	0x65676173
    3a34:	2020203a 	.word	0x2020203a
    3a38:	20202020 	.word	0x20202020
    3a3c:	20202020 	.word	0x20202020
    3a40:	0d0a2020 	.word	0x0d0a2020
    3a44:	00000000 	.word	0x00000000
    3a48:	74697257 	.word	0x74697257
    3a4c:	656d2065 	.word	0x656d2065
    3a50:	79726f6d 	.word	0x79726f6d
    3a54:	73657420 	.word	0x73657420
    3a58:	0a0d2174 	.word	0x0a0d2174
    3a5c:	00000000 	.word	0x00000000
    3a60:	74697257 	.word	0x74697257
    3a64:	656d2065 	.word	0x656d2065
    3a68:	79726f6d 	.word	0x79726f6d
    3a6c:	69616620 	.word	0x69616620
    3a70:	2164656c 	.word	0x2164656c
    3a74:	00000a0d 	.word	0x00000a0d
    3a78:	74697257 	.word	0x74697257
    3a7c:	656d2065 	.word	0x656d2065
    3a80:	79726f6d 	.word	0x79726f6d
    3a84:	63757320 	.word	0x63757320
    3a88:	73736563 	.word	0x73736563
    3a8c:	000a0d21 	.word	0x000a0d21
    3a90:	61746144 	.word	0x61746144
    3a94:	0000203a 	.word	0x0000203a
    3a98:	0000168e 	.word	0x0000168e
    3a9c:	0000168a 	.word	0x0000168a
    3aa0:	0000168a 	.word	0x0000168a
    3aa4:	000016f0 	.word	0x000016f0
    3aa8:	000016f0 	.word	0x000016f0
    3aac:	000016a2 	.word	0x000016a2
    3ab0:	00001694 	.word	0x00001694
    3ab4:	000016a8 	.word	0x000016a8
    3ab8:	000016de 	.word	0x000016de
    3abc:	00001778 	.word	0x00001778
    3ac0:	00001758 	.word	0x00001758
    3ac4:	00001758 	.word	0x00001758
    3ac8:	000017e4 	.word	0x000017e4
    3acc:	0000176a 	.word	0x0000176a
    3ad0:	00001786 	.word	0x00001786
    3ad4:	0000175c 	.word	0x0000175c
    3ad8:	00001794 	.word	0x00001794
    3adc:	000017d4 	.word	0x000017d4
    3ae0:	4a325b1b 	.word	0x4a325b1b
    3ae4:	00000000 	.word	0x00000000
    3ae8:	3b305b1b 	.word	0x3b305b1b
    3aec:	00004830 	.word	0x00004830
    3af0:	000028b0 	.word	0x000028b0
    3af4:	00002892 	.word	0x00002892
    3af8:	0000284c 	.word	0x0000284c
    3afc:	0000276a 	.word	0x0000276a
    3b00:	0000284c 	.word	0x0000284c
    3b04:	00002884 	.word	0x00002884
    3b08:	0000284c 	.word	0x0000284c
    3b0c:	0000276a 	.word	0x0000276a
    3b10:	00002892 	.word	0x00002892
    3b14:	00002892 	.word	0x00002892
    3b18:	00002884 	.word	0x00002884
    3b1c:	0000276a 	.word	0x0000276a
    3b20:	00002762 	.word	0x00002762
    3b24:	00002762 	.word	0x00002762
    3b28:	00002762 	.word	0x00002762
    3b2c:	00002ac8 	.word	0x00002ac8
    3b30:	00002f10 	.word	0x00002f10
    3b34:	00002dd0 	.word	0x00002dd0
    3b38:	00002dd0 	.word	0x00002dd0
    3b3c:	00002dcc 	.word	0x00002dcc
    3b40:	00002ee8 	.word	0x00002ee8
    3b44:	00002ee8 	.word	0x00002ee8
    3b48:	00002eda 	.word	0x00002eda
    3b4c:	00002dcc 	.word	0x00002dcc
    3b50:	00002ee8 	.word	0x00002ee8
    3b54:	00002eda 	.word	0x00002eda
    3b58:	00002ee8 	.word	0x00002ee8
    3b5c:	00002dcc 	.word	0x00002dcc
    3b60:	00002ef0 	.word	0x00002ef0
    3b64:	00002ef0 	.word	0x00002ef0
    3b68:	00002ef0 	.word	0x00002ef0
    3b6c:	000030f4 	.word	0x000030f4

00003b70 <_init>:
    3b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b72:	46c0      	nop			; (mov r8, r8)
    3b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3b76:	bc08      	pop	{r3}
    3b78:	469e      	mov	lr, r3
    3b7a:	4770      	bx	lr

00003b7c <__init_array_start>:
    3b7c:	000000dd 	.word	0x000000dd

00003b80 <_fini>:
    3b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b82:	46c0      	nop			; (mov r8, r8)
    3b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3b86:	bc08      	pop	{r3}
    3b88:	469e      	mov	lr, r3
    3b8a:	4770      	bx	lr

00003b8c <__fini_array_start>:
    3b8c:	000000b5 	.word	0x000000b5

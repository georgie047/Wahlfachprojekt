
Crypto Algoritms Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006130  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00006130  00006130  00016130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000000d4  20000000  00006138  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000144  200000d4  0000620c  000200d4  2**2
                  ALLOC
  4 .stack        00002000  20000218  00006350  000200d4  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
  7 .debug_info   0003da5c  00000000  00000000  00020155  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005a59  00000000  00000000  0005dbb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00009a42  00000000  00000000  0006360a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000970  00000000  00000000  0006d04c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000008d8  00000000  00000000  0006d9bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001b11b  00000000  00000000  0006e294  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000114dc  00000000  00000000  000893af  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00089193  00000000  00000000  0009a88b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001c74  00000000  00000000  00123a20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	18 22 00 20 b5 28 00 00 b1 28 00 00 b1 28 00 00     .". .(...(...(..
	...
      2c:	b1 28 00 00 00 00 00 00 00 00 00 00 b1 28 00 00     .(...........(..
      3c:	b1 28 00 00 b1 28 00 00 b1 28 00 00 b1 28 00 00     .(...(...(...(..
      4c:	b1 28 00 00 b1 28 00 00 b1 28 00 00 b1 28 00 00     .(...(...(...(..
      5c:	b1 28 00 00 b1 28 00 00 b1 28 00 00 b1 28 00 00     .(...(...(...(..
      6c:	b1 28 00 00 b1 28 00 00 b1 28 00 00 b1 28 00 00     .(...(...(...(..
      7c:	b1 28 00 00 b1 28 00 00 b1 28 00 00 b1 28 00 00     .(...(...(...(..
      8c:	b1 28 00 00 b1 28 00 00 00 00 00 00 00 00 00 00     .(...(..........
      9c:	b1 28 00 00 b1 28 00 00 00 00 00 00 b1 28 00 00     .(...(.......(..
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000d4 	.word	0x200000d4
      d4:	00000000 	.word	0x00000000
      d8:	00006138 	.word	0x00006138

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000d8 	.word	0x200000d8
     108:	00006138 	.word	0x00006138
     10c:	00006138 	.word	0x00006138
     110:	00000000 	.word	0x00000000

00000114 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     114:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     116:	2207      	movs	r2, #7
     118:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     11a:	421a      	tst	r2, r3
     11c:	d1fc      	bne.n	118 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     11e:	4770      	bx	lr

00000120 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     120:	b5f0      	push	{r4, r5, r6, r7, lr}
     122:	46d6      	mov	lr, sl
     124:	464f      	mov	r7, r9
     126:	4646      	mov	r6, r8
     128:	b5c0      	push	{r6, r7, lr}
     12a:	b08a      	sub	sp, #40	; 0x28
     12c:	0006      	movs	r6, r0
     12e:	000f      	movs	r7, r1
     130:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     132:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     134:	0008      	movs	r0, r1
     136:	4b97      	ldr	r3, [pc, #604]	; (394 <i2c_master_init+0x274>)
     138:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     13a:	4a97      	ldr	r2, [pc, #604]	; (398 <i2c_master_init+0x278>)
     13c:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     13e:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     140:	2301      	movs	r3, #1
     142:	40ab      	lsls	r3, r5
     144:	430b      	orrs	r3, r1
     146:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     148:	a909      	add	r1, sp, #36	; 0x24
     14a:	7b23      	ldrb	r3, [r4, #12]
     14c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     14e:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     150:	b2c5      	uxtb	r5, r0
     152:	0028      	movs	r0, r5
     154:	4b91      	ldr	r3, [pc, #580]	; (39c <i2c_master_init+0x27c>)
     156:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     158:	0028      	movs	r0, r5
     15a:	4b91      	ldr	r3, [pc, #580]	; (3a0 <i2c_master_init+0x280>)
     15c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     15e:	7b20      	ldrb	r0, [r4, #12]
     160:	2100      	movs	r1, #0
     162:	4b90      	ldr	r3, [pc, #576]	; (3a4 <i2c_master_init+0x284>)
     164:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     166:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     168:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     16a:	079b      	lsls	r3, r3, #30
     16c:	d505      	bpl.n	17a <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     16e:	b00a      	add	sp, #40	; 0x28
     170:	bc1c      	pop	{r2, r3, r4}
     172:	4690      	mov	r8, r2
     174:	4699      	mov	r9, r3
     176:	46a2      	mov	sl, r4
     178:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     17a:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     17c:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     17e:	07db      	lsls	r3, r3, #31
     180:	d4f5      	bmi.n	16e <i2c_master_init+0x4e>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     182:	2314      	movs	r3, #20
     184:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     186:	6833      	ldr	r3, [r6, #0]
     188:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     18a:	0018      	movs	r0, r3
     18c:	4b81      	ldr	r3, [pc, #516]	; (394 <i2c_master_init+0x274>)
     18e:	4798      	blx	r3
     190:	0005      	movs	r5, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     192:	2380      	movs	r3, #128	; 0x80
     194:	aa08      	add	r2, sp, #32
     196:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     198:	2300      	movs	r3, #0
     19a:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     19c:	2201      	movs	r2, #1
     19e:	a908      	add	r1, sp, #32
     1a0:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
     1a2:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
     1a4:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     1a6:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     1a8:	2800      	cmp	r0, #0
     1aa:	d100      	bne.n	1ae <i2c_master_init+0x8e>
     1ac:	e0af      	b.n	30e <i2c_master_init+0x1ee>
	pin_conf.mux_position = pad0 & 0xFFFF;
     1ae:	ab08      	add	r3, sp, #32
     1b0:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     1b2:	2302      	movs	r3, #2
     1b4:	aa08      	add	r2, sp, #32
     1b6:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     1b8:	0c00      	lsrs	r0, r0, #16
     1ba:	b2c0      	uxtb	r0, r0
     1bc:	0011      	movs	r1, r2
     1be:	4b7a      	ldr	r3, [pc, #488]	; (3a8 <i2c_master_init+0x288>)
     1c0:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     1c2:	2f00      	cmp	r7, #0
     1c4:	d100      	bne.n	1c8 <i2c_master_init+0xa8>
     1c6:	e0a7      	b.n	318 <i2c_master_init+0x1f8>
	pin_conf.mux_position = pad1 & 0xFFFF;
     1c8:	ab08      	add	r3, sp, #32
     1ca:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     1cc:	2302      	movs	r3, #2
     1ce:	aa08      	add	r2, sp, #32
     1d0:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     1d2:	0c3f      	lsrs	r7, r7, #16
     1d4:	b2f8      	uxtb	r0, r7
     1d6:	0011      	movs	r1, r2
     1d8:	4b73      	ldr	r3, [pc, #460]	; (3a8 <i2c_master_init+0x288>)
     1da:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     1dc:	8aa3      	ldrh	r3, [r4, #20]
     1de:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     1e0:	8ae3      	ldrh	r3, [r4, #22]
     1e2:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     1e4:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     1e6:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     1e8:	2b00      	cmp	r3, #0
     1ea:	d104      	bne.n	1f6 <i2c_master_init+0xd6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     1ec:	4b6f      	ldr	r3, [pc, #444]	; (3ac <i2c_master_init+0x28c>)
     1ee:	789b      	ldrb	r3, [r3, #2]
     1f0:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     1f2:	0fdb      	lsrs	r3, r3, #31
     1f4:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     1f6:	68a1      	ldr	r1, [r4, #8]
     1f8:	6923      	ldr	r3, [r4, #16]
     1fa:	430b      	orrs	r3, r1
     1fc:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     1fe:	2224      	movs	r2, #36	; 0x24
     200:	5ca2      	ldrb	r2, [r4, r2]
     202:	2a00      	cmp	r2, #0
     204:	d002      	beq.n	20c <i2c_master_init+0xec>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     206:	2280      	movs	r2, #128	; 0x80
     208:	05d2      	lsls	r2, r2, #23
     20a:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     20c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     20e:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     210:	222c      	movs	r2, #44	; 0x2c
     212:	5ca2      	ldrb	r2, [r4, r2]
     214:	2a00      	cmp	r2, #0
     216:	d103      	bne.n	220 <i2c_master_init+0x100>
     218:	2280      	movs	r2, #128	; 0x80
     21a:	0492      	lsls	r2, r2, #18
     21c:	4291      	cmp	r1, r2
     21e:	d102      	bne.n	226 <i2c_master_init+0x106>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     220:	2280      	movs	r2, #128	; 0x80
     222:	0512      	lsls	r2, r2, #20
     224:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     226:	222d      	movs	r2, #45	; 0x2d
     228:	5ca2      	ldrb	r2, [r4, r2]
     22a:	2a00      	cmp	r2, #0
     22c:	d002      	beq.n	234 <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     22e:	2280      	movs	r2, #128	; 0x80
     230:	0412      	lsls	r2, r2, #16
     232:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     234:	222e      	movs	r2, #46	; 0x2e
     236:	5ca2      	ldrb	r2, [r4, r2]
     238:	2a00      	cmp	r2, #0
     23a:	d002      	beq.n	242 <i2c_master_init+0x122>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     23c:	2280      	movs	r2, #128	; 0x80
     23e:	03d2      	lsls	r2, r2, #15
     240:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     242:	4642      	mov	r2, r8
     244:	6812      	ldr	r2, [r2, #0]
     246:	4313      	orrs	r3, r2
     248:	4642      	mov	r2, r8
     24a:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     24c:	2380      	movs	r3, #128	; 0x80
     24e:	005b      	lsls	r3, r3, #1
     250:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     252:	0028      	movs	r0, r5
     254:	3014      	adds	r0, #20
     256:	b2c0      	uxtb	r0, r0
     258:	4b55      	ldr	r3, [pc, #340]	; (3b0 <i2c_master_init+0x290>)
     25a:	4798      	blx	r3
     25c:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     25e:	23fa      	movs	r3, #250	; 0xfa
     260:	009b      	lsls	r3, r3, #2
     262:	6822      	ldr	r2, [r4, #0]
     264:	435a      	muls	r2, r3
     266:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     268:	6863      	ldr	r3, [r4, #4]
     26a:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     26c:	4d51      	ldr	r5, [pc, #324]	; (3b4 <i2c_master_init+0x294>)
     26e:	47a8      	blx	r5
     270:	9000      	str	r0, [sp, #0]
     272:	9101      	str	r1, [sp, #4]
     274:	464b      	mov	r3, r9
     276:	0058      	lsls	r0, r3, #1
     278:	47a8      	blx	r5
     27a:	9002      	str	r0, [sp, #8]
     27c:	9103      	str	r1, [sp, #12]
     27e:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     280:	47a8      	blx	r5
     282:	9004      	str	r0, [sp, #16]
     284:	9105      	str	r1, [sp, #20]
     286:	4f4c      	ldr	r7, [pc, #304]	; (3b8 <i2c_master_init+0x298>)
     288:	4a4c      	ldr	r2, [pc, #304]	; (3bc <i2c_master_init+0x29c>)
     28a:	4b4d      	ldr	r3, [pc, #308]	; (3c0 <i2c_master_init+0x2a0>)
     28c:	9800      	ldr	r0, [sp, #0]
     28e:	9901      	ldr	r1, [sp, #4]
     290:	47b8      	blx	r7
     292:	0002      	movs	r2, r0
     294:	000b      	movs	r3, r1
     296:	9804      	ldr	r0, [sp, #16]
     298:	9905      	ldr	r1, [sp, #20]
     29a:	47b8      	blx	r7
     29c:	4e49      	ldr	r6, [pc, #292]	; (3c4 <i2c_master_init+0x2a4>)
     29e:	2200      	movs	r2, #0
     2a0:	4b49      	ldr	r3, [pc, #292]	; (3c8 <i2c_master_init+0x2a8>)
     2a2:	47b0      	blx	r6
     2a4:	9004      	str	r0, [sp, #16]
     2a6:	9105      	str	r1, [sp, #20]
     2a8:	4648      	mov	r0, r9
     2aa:	47a8      	blx	r5
     2ac:	0002      	movs	r2, r0
     2ae:	000b      	movs	r3, r1
     2b0:	9804      	ldr	r0, [sp, #16]
     2b2:	9905      	ldr	r1, [sp, #20]
     2b4:	47b8      	blx	r7
     2b6:	0002      	movs	r2, r0
     2b8:	000b      	movs	r3, r1
     2ba:	4d44      	ldr	r5, [pc, #272]	; (3cc <i2c_master_init+0x2ac>)
     2bc:	9800      	ldr	r0, [sp, #0]
     2be:	9901      	ldr	r1, [sp, #4]
     2c0:	47a8      	blx	r5
     2c2:	9a02      	ldr	r2, [sp, #8]
     2c4:	9b03      	ldr	r3, [sp, #12]
     2c6:	47b0      	blx	r6
     2c8:	2200      	movs	r2, #0
     2ca:	4b41      	ldr	r3, [pc, #260]	; (3d0 <i2c_master_init+0x2b0>)
     2cc:	47a8      	blx	r5
     2ce:	9a02      	ldr	r2, [sp, #8]
     2d0:	9b03      	ldr	r3, [sp, #12]
     2d2:	4d40      	ldr	r5, [pc, #256]	; (3d4 <i2c_master_init+0x2b4>)
     2d4:	47a8      	blx	r5
     2d6:	4b40      	ldr	r3, [pc, #256]	; (3d8 <i2c_master_init+0x2b8>)
     2d8:	4798      	blx	r3
     2da:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     2dc:	2380      	movs	r3, #128	; 0x80
     2de:	049b      	lsls	r3, r3, #18
     2e0:	68a2      	ldr	r2, [r4, #8]
     2e2:	429a      	cmp	r2, r3
     2e4:	d01e      	beq.n	324 <i2c_master_init+0x204>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     2e6:	0003      	movs	r3, r0
     2e8:	2040      	movs	r0, #64	; 0x40
     2ea:	2dff      	cmp	r5, #255	; 0xff
     2ec:	d900      	bls.n	2f0 <i2c_master_init+0x1d0>
     2ee:	e73e      	b.n	16e <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     2f0:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     2f2:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     2f4:	25ff      	movs	r5, #255	; 0xff
     2f6:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     2f8:	0624      	lsls	r4, r4, #24
     2fa:	4325      	orrs	r5, r4
     2fc:	0400      	lsls	r0, r0, #16
     2fe:	23ff      	movs	r3, #255	; 0xff
     300:	041b      	lsls	r3, r3, #16
     302:	4018      	ands	r0, r3
     304:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     306:	4643      	mov	r3, r8
     308:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     30a:	2000      	movs	r0, #0
     30c:	e72f      	b.n	16e <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     30e:	2100      	movs	r1, #0
     310:	4640      	mov	r0, r8
     312:	4b32      	ldr	r3, [pc, #200]	; (3dc <i2c_master_init+0x2bc>)
     314:	4798      	blx	r3
     316:	e74a      	b.n	1ae <i2c_master_init+0x8e>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     318:	2101      	movs	r1, #1
     31a:	4640      	mov	r0, r8
     31c:	4b2f      	ldr	r3, [pc, #188]	; (3dc <i2c_master_init+0x2bc>)
     31e:	4798      	blx	r3
     320:	0007      	movs	r7, r0
     322:	e751      	b.n	1c8 <i2c_master_init+0xa8>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     324:	26fa      	movs	r6, #250	; 0xfa
     326:	00b6      	lsls	r6, r6, #2
     328:	4653      	mov	r3, sl
     32a:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     32c:	9800      	ldr	r0, [sp, #0]
     32e:	9901      	ldr	r1, [sp, #4]
     330:	0002      	movs	r2, r0
     332:	000b      	movs	r3, r1
     334:	4c23      	ldr	r4, [pc, #140]	; (3c4 <i2c_master_init+0x2a4>)
     336:	47a0      	blx	r4
     338:	9000      	str	r0, [sp, #0]
     33a:	9101      	str	r1, [sp, #4]
     33c:	0030      	movs	r0, r6
     33e:	4b1d      	ldr	r3, [pc, #116]	; (3b4 <i2c_master_init+0x294>)
     340:	4798      	blx	r3
     342:	2200      	movs	r2, #0
     344:	4b26      	ldr	r3, [pc, #152]	; (3e0 <i2c_master_init+0x2c0>)
     346:	47b8      	blx	r7
     348:	0002      	movs	r2, r0
     34a:	000b      	movs	r3, r1
     34c:	9800      	ldr	r0, [sp, #0]
     34e:	9901      	ldr	r1, [sp, #4]
     350:	4c20      	ldr	r4, [pc, #128]	; (3d4 <i2c_master_init+0x2b4>)
     352:	47a0      	blx	r4
     354:	2200      	movs	r2, #0
     356:	4b1e      	ldr	r3, [pc, #120]	; (3d0 <i2c_master_init+0x2b0>)
     358:	4c1c      	ldr	r4, [pc, #112]	; (3cc <i2c_master_init+0x2ac>)
     35a:	47a0      	blx	r4
     35c:	4b1e      	ldr	r3, [pc, #120]	; (3d8 <i2c_master_init+0x2b8>)
     35e:	4798      	blx	r3
     360:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     362:	d00c      	beq.n	37e <i2c_master_init+0x25e>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     364:	0031      	movs	r1, r6
     366:	9807      	ldr	r0, [sp, #28]
     368:	4b1e      	ldr	r3, [pc, #120]	; (3e4 <i2c_master_init+0x2c4>)
     36a:	4798      	blx	r3
     36c:	3802      	subs	r0, #2
     36e:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     370:	002b      	movs	r3, r5
     372:	2dff      	cmp	r5, #255	; 0xff
     374:	d80c      	bhi.n	390 <i2c_master_init+0x270>
     376:	28ff      	cmp	r0, #255	; 0xff
     378:	d9bc      	bls.n	2f4 <i2c_master_init+0x1d4>
     37a:	2040      	movs	r0, #64	; 0x40
     37c:	e6f7      	b.n	16e <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     37e:	0071      	lsls	r1, r6, #1
     380:	1e48      	subs	r0, r1, #1
     382:	9b07      	ldr	r3, [sp, #28]
     384:	469c      	mov	ip, r3
     386:	4460      	add	r0, ip
     388:	4b16      	ldr	r3, [pc, #88]	; (3e4 <i2c_master_init+0x2c4>)
     38a:	4798      	blx	r3
     38c:	3801      	subs	r0, #1
     38e:	e7ef      	b.n	370 <i2c_master_init+0x250>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     390:	2040      	movs	r0, #64	; 0x40
     392:	e6ec      	b.n	16e <i2c_master_init+0x4e>
     394:	0000220d 	.word	0x0000220d
     398:	40000400 	.word	0x40000400
     39c:	00002759 	.word	0x00002759
     3a0:	000026cd 	.word	0x000026cd
     3a4:	00002049 	.word	0x00002049
     3a8:	00002851 	.word	0x00002851
     3ac:	41002000 	.word	0x41002000
     3b0:	00002775 	.word	0x00002775
     3b4:	00005695 	.word	0x00005695
     3b8:	00004b01 	.word	0x00004b01
     3bc:	e826d695 	.word	0xe826d695
     3c0:	3e112e0b 	.word	0x3e112e0b
     3c4:	00003e79 	.word	0x00003e79
     3c8:	40240000 	.word	0x40240000
     3cc:	00005001 	.word	0x00005001
     3d0:	3ff00000 	.word	0x3ff00000
     3d4:	00004499 	.word	0x00004499
     3d8:	0000562d 	.word	0x0000562d
     3dc:	00002095 	.word	0x00002095
     3e0:	40080000 	.word	0x40080000
     3e4:	00003979 	.word	0x00003979

000003e8 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
     3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3ea:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     3ec:	6807      	ldr	r7, [r0, #0]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
     3ee:	4e08      	ldr	r6, [pc, #32]	; (410 <i2c_master_reset+0x28>)
     3f0:	47b0      	blx	r6
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     3f2:	6825      	ldr	r5, [r4, #0]
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
     3f4:	0020      	movs	r0, r4
     3f6:	47b0      	blx	r6

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
     3f8:	2383      	movs	r3, #131	; 0x83
     3fa:	752b      	strb	r3, [r5, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
     3fc:	762b      	strb	r3, [r5, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
     3fe:	682b      	ldr	r3, [r5, #0]
     400:	2202      	movs	r2, #2
     402:	4393      	bics	r3, r2
     404:	602b      	str	r3, [r5, #0]
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
     406:	0020      	movs	r0, r4
     408:	47b0      	blx	r6

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
     40a:	2301      	movs	r3, #1
     40c:	603b      	str	r3, [r7, #0]
}
     40e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     410:	00000115 	.word	0x00000115

00000414 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     414:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     416:	7e1a      	ldrb	r2, [r3, #24]
     418:	0792      	lsls	r2, r2, #30
     41a:	d507      	bpl.n	42c <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     41c:	2202      	movs	r2, #2
     41e:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     420:	8b5b      	ldrh	r3, [r3, #26]
     422:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     424:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     426:	17db      	asrs	r3, r3, #31
     428:	4018      	ands	r0, r3
}
     42a:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     42c:	8b5a      	ldrh	r2, [r3, #26]
     42e:	0752      	lsls	r2, r2, #29
     430:	d506      	bpl.n	440 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     432:	6859      	ldr	r1, [r3, #4]
     434:	22c0      	movs	r2, #192	; 0xc0
     436:	0292      	lsls	r2, r2, #10
     438:	430a      	orrs	r2, r1
     43a:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     43c:	2018      	movs	r0, #24
     43e:	e7f4      	b.n	42a <_i2c_master_address_response+0x16>
	return STATUS_OK;
     440:	2000      	movs	r0, #0
     442:	e7f2      	b.n	42a <_i2c_master_address_response+0x16>

00000444 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     444:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     446:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     448:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     44a:	2401      	movs	r4, #1
     44c:	2502      	movs	r5, #2
     44e:	7e11      	ldrb	r1, [r2, #24]
     450:	4221      	tst	r1, r4
     452:	d10b      	bne.n	46c <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     454:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     456:	4229      	tst	r1, r5
     458:	d106      	bne.n	468 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     45a:	3301      	adds	r3, #1
     45c:	b29b      	uxth	r3, r3
     45e:	8901      	ldrh	r1, [r0, #8]
     460:	4299      	cmp	r1, r3
     462:	d8f4      	bhi.n	44e <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     464:	2012      	movs	r0, #18
     466:	e002      	b.n	46e <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     468:	2000      	movs	r0, #0
     46a:	e000      	b.n	46e <_i2c_master_wait_for_bus+0x2a>
     46c:	2000      	movs	r0, #0
}
     46e:	bd30      	pop	{r4, r5, pc}

00000470 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     470:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     472:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     474:	6862      	ldr	r2, [r4, #4]
     476:	2380      	movs	r3, #128	; 0x80
     478:	02db      	lsls	r3, r3, #11
     47a:	4313      	orrs	r3, r2
     47c:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     47e:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     480:	4b02      	ldr	r3, [pc, #8]	; (48c <_i2c_master_send_hs_master_code+0x1c>)
     482:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     484:	2301      	movs	r3, #1
     486:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     488:	bd10      	pop	{r4, pc}
     48a:	46c0      	nop			; (mov r8, r8)
     48c:	00000445 	.word	0x00000445

00000490 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     490:	b5f0      	push	{r4, r5, r6, r7, lr}
     492:	46de      	mov	lr, fp
     494:	4657      	mov	r7, sl
     496:	464e      	mov	r6, r9
     498:	4645      	mov	r5, r8
     49a:	b5e0      	push	{r5, r6, r7, lr}
     49c:	b083      	sub	sp, #12
     49e:	0006      	movs	r6, r0
     4a0:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     4a2:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     4a4:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     4a6:	682b      	ldr	r3, [r5, #0]
     4a8:	011b      	lsls	r3, r3, #4
     4aa:	0fdb      	lsrs	r3, r3, #31
     4ac:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     4ae:	7a4b      	ldrb	r3, [r1, #9]
     4b0:	2b00      	cmp	r3, #0
     4b2:	d12b      	bne.n	50c <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     4b4:	686b      	ldr	r3, [r5, #4]
     4b6:	4a58      	ldr	r2, [pc, #352]	; (618 <_i2c_master_read_packet+0x188>)
     4b8:	4013      	ands	r3, r2
     4ba:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     4bc:	464b      	mov	r3, r9
     4be:	7a1b      	ldrb	r3, [r3, #8]
     4c0:	2b00      	cmp	r3, #0
     4c2:	d127      	bne.n	514 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     4c4:	464b      	mov	r3, r9
     4c6:	881b      	ldrh	r3, [r3, #0]
     4c8:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     4ca:	464a      	mov	r2, r9
     4cc:	7a52      	ldrb	r2, [r2, #9]
     4ce:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     4d0:	4313      	orrs	r3, r2
     4d2:	2201      	movs	r2, #1
     4d4:	4313      	orrs	r3, r2
     4d6:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     4d8:	0030      	movs	r0, r6
     4da:	4b50      	ldr	r3, [pc, #320]	; (61c <_i2c_master_read_packet+0x18c>)
     4dc:	4798      	blx	r3
     4de:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     4e0:	4653      	mov	r3, sl
     4e2:	2b00      	cmp	r3, #0
     4e4:	d003      	beq.n	4ee <_i2c_master_read_packet+0x5e>
     4e6:	464b      	mov	r3, r9
     4e8:	885b      	ldrh	r3, [r3, #2]
     4ea:	2b01      	cmp	r3, #1
     4ec:	d03b      	beq.n	566 <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     4ee:	686b      	ldr	r3, [r5, #4]
     4f0:	4a49      	ldr	r2, [pc, #292]	; (618 <_i2c_master_read_packet+0x188>)
     4f2:	4013      	ands	r3, r2
     4f4:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     4f6:	9b01      	ldr	r3, [sp, #4]
     4f8:	2b00      	cmp	r3, #0
     4fa:	d03a      	beq.n	572 <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     4fc:	9801      	ldr	r0, [sp, #4]
     4fe:	b003      	add	sp, #12
     500:	bc3c      	pop	{r2, r3, r4, r5}
     502:	4690      	mov	r8, r2
     504:	4699      	mov	r9, r3
     506:	46a2      	mov	sl, r4
     508:	46ab      	mov	fp, r5
     50a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     50c:	7a89      	ldrb	r1, [r1, #10]
     50e:	4b44      	ldr	r3, [pc, #272]	; (620 <_i2c_master_read_packet+0x190>)
     510:	4798      	blx	r3
     512:	e7cf      	b.n	4b4 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
     514:	464b      	mov	r3, r9
     516:	881b      	ldrh	r3, [r3, #0]
     518:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     51a:	464a      	mov	r2, r9
     51c:	7a52      	ldrb	r2, [r2, #9]
     51e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     520:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     522:	2280      	movs	r2, #128	; 0x80
     524:	0212      	lsls	r2, r2, #8
     526:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     528:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     52a:	0030      	movs	r0, r6
     52c:	4b3b      	ldr	r3, [pc, #236]	; (61c <_i2c_master_read_packet+0x18c>)
     52e:	4798      	blx	r3
     530:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     532:	686b      	ldr	r3, [r5, #4]
     534:	4a38      	ldr	r2, [pc, #224]	; (618 <_i2c_master_read_packet+0x188>)
     536:	4013      	ands	r3, r2
     538:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
     53a:	2800      	cmp	r0, #0
     53c:	d1de      	bne.n	4fc <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
     53e:	0030      	movs	r0, r6
     540:	4b38      	ldr	r3, [pc, #224]	; (624 <_i2c_master_read_packet+0x194>)
     542:	4798      	blx	r3
     544:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
     546:	2800      	cmp	r0, #0
     548:	d1d8      	bne.n	4fc <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     54a:	464b      	mov	r3, r9
     54c:	881b      	ldrh	r3, [r3, #0]
     54e:	0a1b      	lsrs	r3, r3, #8
     550:	2278      	movs	r2, #120	; 0x78
     552:	4313      	orrs	r3, r2
     554:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     556:	464a      	mov	r2, r9
     558:	7a52      	ldrb	r2, [r2, #9]
     55a:	0392      	lsls	r2, r2, #14
     55c:	2101      	movs	r1, #1
     55e:	430a      	orrs	r2, r1
     560:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     562:	626b      	str	r3, [r5, #36]	; 0x24
     564:	e7b8      	b.n	4d8 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     566:	686a      	ldr	r2, [r5, #4]
     568:	2380      	movs	r3, #128	; 0x80
     56a:	02db      	lsls	r3, r3, #11
     56c:	4313      	orrs	r3, r2
     56e:	606b      	str	r3, [r5, #4]
     570:	e7c1      	b.n	4f6 <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
     572:	0030      	movs	r0, r6
     574:	4b2b      	ldr	r3, [pc, #172]	; (624 <_i2c_master_read_packet+0x194>)
     576:	4798      	blx	r3
     578:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     57a:	2800      	cmp	r0, #0
     57c:	d1be      	bne.n	4fc <_i2c_master_read_packet+0x6c>
     57e:	3c01      	subs	r4, #1
     580:	b2a4      	uxth	r4, r4
     582:	4680      	mov	r8, r0
		while (tmp_data_length--) {
     584:	4b28      	ldr	r3, [pc, #160]	; (628 <_i2c_master_read_packet+0x198>)
     586:	469b      	mov	fp, r3
     588:	e015      	b.n	5b6 <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     58a:	2c01      	cmp	r4, #1
     58c:	d020      	beq.n	5d0 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
     58e:	0030      	movs	r0, r6
     590:	4b26      	ldr	r3, [pc, #152]	; (62c <_i2c_master_read_packet+0x19c>)
     592:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     594:	4643      	mov	r3, r8
     596:	1c5f      	adds	r7, r3, #1
     598:	b2bf      	uxth	r7, r7
     59a:	2328      	movs	r3, #40	; 0x28
     59c:	5ceb      	ldrb	r3, [r5, r3]
     59e:	464a      	mov	r2, r9
     5a0:	6852      	ldr	r2, [r2, #4]
     5a2:	4641      	mov	r1, r8
     5a4:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
     5a6:	0030      	movs	r0, r6
     5a8:	4b1c      	ldr	r3, [pc, #112]	; (61c <_i2c_master_read_packet+0x18c>)
     5aa:	4798      	blx	r3
     5ac:	3c01      	subs	r4, #1
     5ae:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
     5b0:	2800      	cmp	r0, #0
     5b2:	d115      	bne.n	5e0 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
     5b4:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
     5b6:	455c      	cmp	r4, fp
     5b8:	d014      	beq.n	5e4 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     5ba:	8b6b      	ldrh	r3, [r5, #26]
     5bc:	069b      	lsls	r3, r3, #26
     5be:	d527      	bpl.n	610 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     5c0:	7af3      	ldrb	r3, [r6, #11]
     5c2:	2b00      	cmp	r3, #0
     5c4:	d0e3      	beq.n	58e <_i2c_master_read_packet+0xfe>
     5c6:	4653      	mov	r3, sl
     5c8:	2b00      	cmp	r3, #0
     5ca:	d1de      	bne.n	58a <_i2c_master_read_packet+0xfa>
     5cc:	2c00      	cmp	r4, #0
     5ce:	d1de      	bne.n	58e <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     5d0:	686a      	ldr	r2, [r5, #4]
     5d2:	2380      	movs	r3, #128	; 0x80
     5d4:	02db      	lsls	r3, r3, #11
     5d6:	4313      	orrs	r3, r2
     5d8:	606b      	str	r3, [r5, #4]
     5da:	3c01      	subs	r4, #1
     5dc:	b2a4      	uxth	r4, r4
     5de:	e7ea      	b.n	5b6 <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
     5e0:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
     5e2:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     5e4:	7ab3      	ldrb	r3, [r6, #10]
     5e6:	2b00      	cmp	r3, #0
     5e8:	d109      	bne.n	5fe <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
     5ea:	0030      	movs	r0, r6
     5ec:	4b0f      	ldr	r3, [pc, #60]	; (62c <_i2c_master_read_packet+0x19c>)
     5ee:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     5f0:	2328      	movs	r3, #40	; 0x28
     5f2:	5cea      	ldrb	r2, [r5, r3]
     5f4:	464b      	mov	r3, r9
     5f6:	685b      	ldr	r3, [r3, #4]
     5f8:	4641      	mov	r1, r8
     5fa:	545a      	strb	r2, [r3, r1]
     5fc:	e77e      	b.n	4fc <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
     5fe:	0030      	movs	r0, r6
     600:	4b0a      	ldr	r3, [pc, #40]	; (62c <_i2c_master_read_packet+0x19c>)
     602:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     604:	686a      	ldr	r2, [r5, #4]
     606:	23c0      	movs	r3, #192	; 0xc0
     608:	029b      	lsls	r3, r3, #10
     60a:	4313      	orrs	r3, r2
     60c:	606b      	str	r3, [r5, #4]
     60e:	e7ec      	b.n	5ea <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
     610:	2341      	movs	r3, #65	; 0x41
     612:	9301      	str	r3, [sp, #4]
     614:	e772      	b.n	4fc <_i2c_master_read_packet+0x6c>
     616:	46c0      	nop			; (mov r8, r8)
     618:	fffbffff 	.word	0xfffbffff
     61c:	00000445 	.word	0x00000445
     620:	00000471 	.word	0x00000471
     624:	00000415 	.word	0x00000415
     628:	0000ffff 	.word	0x0000ffff
     62c:	00000115 	.word	0x00000115

00000630 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     630:	b5f0      	push	{r4, r5, r6, r7, lr}
     632:	46de      	mov	lr, fp
     634:	4657      	mov	r7, sl
     636:	464e      	mov	r6, r9
     638:	4645      	mov	r5, r8
     63a:	b5e0      	push	{r5, r6, r7, lr}
     63c:	b083      	sub	sp, #12
     63e:	0006      	movs	r6, r0
     640:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     642:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     644:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     646:	4b32      	ldr	r3, [pc, #200]	; (710 <_i2c_master_write_packet+0xe0>)
     648:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     64a:	7a7b      	ldrb	r3, [r7, #9]
     64c:	2b00      	cmp	r3, #0
     64e:	d11d      	bne.n	68c <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     650:	686b      	ldr	r3, [r5, #4]
     652:	4a30      	ldr	r2, [pc, #192]	; (714 <_i2c_master_write_packet+0xe4>)
     654:	4013      	ands	r3, r2
     656:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     658:	7a3b      	ldrb	r3, [r7, #8]
     65a:	2b00      	cmp	r3, #0
     65c:	d01b      	beq.n	696 <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     65e:	883b      	ldrh	r3, [r7, #0]
     660:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     662:	7a7a      	ldrb	r2, [r7, #9]
     664:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     666:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     668:	2280      	movs	r2, #128	; 0x80
     66a:	0212      	lsls	r2, r2, #8
     66c:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     66e:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     670:	0030      	movs	r0, r6
     672:	4b29      	ldr	r3, [pc, #164]	; (718 <_i2c_master_write_packet+0xe8>)
     674:	4798      	blx	r3
     676:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     678:	2800      	cmp	r0, #0
     67a:	d013      	beq.n	6a4 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     67c:	9801      	ldr	r0, [sp, #4]
     67e:	b003      	add	sp, #12
     680:	bc3c      	pop	{r2, r3, r4, r5}
     682:	4690      	mov	r8, r2
     684:	4699      	mov	r9, r3
     686:	46a2      	mov	sl, r4
     688:	46ab      	mov	fp, r5
     68a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     68c:	7ab9      	ldrb	r1, [r7, #10]
     68e:	0030      	movs	r0, r6
     690:	4b22      	ldr	r3, [pc, #136]	; (71c <_i2c_master_write_packet+0xec>)
     692:	4798      	blx	r3
     694:	e7dc      	b.n	650 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     696:	883b      	ldrh	r3, [r7, #0]
     698:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     69a:	7a7a      	ldrb	r2, [r7, #9]
     69c:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     69e:	4313      	orrs	r3, r2
     6a0:	626b      	str	r3, [r5, #36]	; 0x24
     6a2:	e7e5      	b.n	670 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
     6a4:	0030      	movs	r0, r6
     6a6:	4b1e      	ldr	r3, [pc, #120]	; (720 <_i2c_master_write_packet+0xf0>)
     6a8:	4798      	blx	r3
     6aa:	1e03      	subs	r3, r0, #0
     6ac:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     6ae:	d1e5      	bne.n	67c <_i2c_master_write_packet+0x4c>
     6b0:	46a0      	mov	r8, r4
     6b2:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     6b4:	3320      	adds	r3, #32
     6b6:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     6b8:	4b15      	ldr	r3, [pc, #84]	; (710 <_i2c_master_write_packet+0xe0>)
     6ba:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     6bc:	4b16      	ldr	r3, [pc, #88]	; (718 <_i2c_master_write_packet+0xe8>)
     6be:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     6c0:	4544      	cmp	r4, r8
     6c2:	d015      	beq.n	6f0 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     6c4:	8b6b      	ldrh	r3, [r5, #26]
     6c6:	464a      	mov	r2, r9
     6c8:	4213      	tst	r3, r2
     6ca:	d01d      	beq.n	708 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
     6cc:	0030      	movs	r0, r6
     6ce:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     6d0:	687b      	ldr	r3, [r7, #4]
     6d2:	5d1a      	ldrb	r2, [r3, r4]
     6d4:	2328      	movs	r3, #40	; 0x28
     6d6:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
     6d8:	0030      	movs	r0, r6
     6da:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
     6dc:	2800      	cmp	r0, #0
     6de:	d106      	bne.n	6ee <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     6e0:	8b6b      	ldrh	r3, [r5, #26]
     6e2:	3401      	adds	r4, #1
     6e4:	075b      	lsls	r3, r3, #29
     6e6:	d5eb      	bpl.n	6c0 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
     6e8:	231e      	movs	r3, #30
     6ea:	9301      	str	r3, [sp, #4]
     6ec:	e000      	b.n	6f0 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
     6ee:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     6f0:	7ab3      	ldrb	r3, [r6, #10]
     6f2:	2b00      	cmp	r3, #0
     6f4:	d0c2      	beq.n	67c <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
     6f6:	0030      	movs	r0, r6
     6f8:	4b05      	ldr	r3, [pc, #20]	; (710 <_i2c_master_write_packet+0xe0>)
     6fa:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     6fc:	686a      	ldr	r2, [r5, #4]
     6fe:	23c0      	movs	r3, #192	; 0xc0
     700:	029b      	lsls	r3, r3, #10
     702:	4313      	orrs	r3, r2
     704:	606b      	str	r3, [r5, #4]
     706:	e7b9      	b.n	67c <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
     708:	2341      	movs	r3, #65	; 0x41
     70a:	9301      	str	r3, [sp, #4]
     70c:	e7b6      	b.n	67c <_i2c_master_write_packet+0x4c>
     70e:	46c0      	nop			; (mov r8, r8)
     710:	00000115 	.word	0x00000115
     714:	fffbffff 	.word	0xfffbffff
     718:	00000445 	.word	0x00000445
     71c:	00000471 	.word	0x00000471
     720:	00000415 	.word	0x00000415

00000724 <i2c_master_read_packet_wait>:
{
     724:	b510      	push	{r4, lr}
	module->send_stop = true;
     726:	2301      	movs	r3, #1
     728:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     72a:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     72c:	4b01      	ldr	r3, [pc, #4]	; (734 <i2c_master_read_packet_wait+0x10>)
     72e:	4798      	blx	r3
}
     730:	bd10      	pop	{r4, pc}
     732:	46c0      	nop			; (mov r8, r8)
     734:	00000491 	.word	0x00000491

00000738 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     738:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     73a:	2301      	movs	r3, #1
     73c:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     73e:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
     740:	4b01      	ldr	r3, [pc, #4]	; (748 <i2c_master_write_packet_wait+0x10>)
     742:	4798      	blx	r3
}
     744:	bd10      	pop	{r4, pc}
     746:	46c0      	nop			; (mov r8, r8)
     748:	00000631 	.word	0x00000631

0000074c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     74c:	b5f0      	push	{r4, r5, r6, r7, lr}
     74e:	46de      	mov	lr, fp
     750:	4657      	mov	r7, sl
     752:	464e      	mov	r6, r9
     754:	4645      	mov	r5, r8
     756:	b5e0      	push	{r5, r6, r7, lr}
     758:	b091      	sub	sp, #68	; 0x44
     75a:	0005      	movs	r5, r0
     75c:	000c      	movs	r4, r1
     75e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     760:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     762:	0008      	movs	r0, r1
     764:	4bad      	ldr	r3, [pc, #692]	; (a1c <usart_init+0x2d0>)
     766:	4798      	blx	r3
     768:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     76a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     76c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     76e:	07db      	lsls	r3, r3, #31
     770:	d506      	bpl.n	780 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     772:	b011      	add	sp, #68	; 0x44
     774:	bc3c      	pop	{r2, r3, r4, r5}
     776:	4690      	mov	r8, r2
     778:	4699      	mov	r9, r3
     77a:	46a2      	mov	sl, r4
     77c:	46ab      	mov	fp, r5
     77e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     780:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     782:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     784:	079b      	lsls	r3, r3, #30
     786:	d4f4      	bmi.n	772 <usart_init+0x26>
     788:	49a5      	ldr	r1, [pc, #660]	; (a20 <usart_init+0x2d4>)
     78a:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     78c:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     78e:	2301      	movs	r3, #1
     790:	40bb      	lsls	r3, r7
     792:	4303      	orrs	r3, r0
     794:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     796:	a90f      	add	r1, sp, #60	; 0x3c
     798:	272d      	movs	r7, #45	; 0x2d
     79a:	5df3      	ldrb	r3, [r6, r7]
     79c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     79e:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     7a0:	b2d3      	uxtb	r3, r2
     7a2:	9302      	str	r3, [sp, #8]
     7a4:	0018      	movs	r0, r3
     7a6:	4b9f      	ldr	r3, [pc, #636]	; (a24 <usart_init+0x2d8>)
     7a8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     7aa:	9802      	ldr	r0, [sp, #8]
     7ac:	4b9e      	ldr	r3, [pc, #632]	; (a28 <usart_init+0x2dc>)
     7ae:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     7b0:	5df0      	ldrb	r0, [r6, r7]
     7b2:	2100      	movs	r1, #0
     7b4:	4b9d      	ldr	r3, [pc, #628]	; (a2c <usart_init+0x2e0>)
     7b6:	4798      	blx	r3
	module->character_size = config->character_size;
     7b8:	7af3      	ldrb	r3, [r6, #11]
     7ba:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     7bc:	2324      	movs	r3, #36	; 0x24
     7be:	5cf3      	ldrb	r3, [r6, r3]
     7c0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     7c2:	2325      	movs	r3, #37	; 0x25
     7c4:	5cf3      	ldrb	r3, [r6, r3]
     7c6:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     7c8:	7ef3      	ldrb	r3, [r6, #27]
     7ca:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     7cc:	7f33      	ldrb	r3, [r6, #28]
     7ce:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     7d0:	682b      	ldr	r3, [r5, #0]
     7d2:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     7d4:	0018      	movs	r0, r3
     7d6:	4b91      	ldr	r3, [pc, #580]	; (a1c <usart_init+0x2d0>)
     7d8:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     7da:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     7dc:	2200      	movs	r2, #0
     7de:	230e      	movs	r3, #14
     7e0:	a906      	add	r1, sp, #24
     7e2:	468c      	mov	ip, r1
     7e4:	4463      	add	r3, ip
     7e6:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     7e8:	8a32      	ldrh	r2, [r6, #16]
     7ea:	9202      	str	r2, [sp, #8]
     7ec:	2380      	movs	r3, #128	; 0x80
     7ee:	01db      	lsls	r3, r3, #7
     7f0:	429a      	cmp	r2, r3
     7f2:	d100      	bne.n	7f6 <usart_init+0xaa>
     7f4:	e09f      	b.n	936 <usart_init+0x1ea>
     7f6:	d90f      	bls.n	818 <usart_init+0xcc>
     7f8:	23c0      	movs	r3, #192	; 0xc0
     7fa:	01db      	lsls	r3, r3, #7
     7fc:	9a02      	ldr	r2, [sp, #8]
     7fe:	429a      	cmp	r2, r3
     800:	d100      	bne.n	804 <usart_init+0xb8>
     802:	e093      	b.n	92c <usart_init+0x1e0>
     804:	2380      	movs	r3, #128	; 0x80
     806:	021b      	lsls	r3, r3, #8
     808:	429a      	cmp	r2, r3
     80a:	d000      	beq.n	80e <usart_init+0xc2>
     80c:	e101      	b.n	a12 <usart_init+0x2c6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     80e:	2303      	movs	r3, #3
     810:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     812:	2300      	movs	r3, #0
     814:	9307      	str	r3, [sp, #28]
     816:	e008      	b.n	82a <usart_init+0xde>
	switch (config->sample_rate) {
     818:	2380      	movs	r3, #128	; 0x80
     81a:	019b      	lsls	r3, r3, #6
     81c:	429a      	cmp	r2, r3
     81e:	d000      	beq.n	822 <usart_init+0xd6>
     820:	e0f7      	b.n	a12 <usart_init+0x2c6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     822:	2310      	movs	r3, #16
     824:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     826:	3b0f      	subs	r3, #15
     828:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     82a:	6833      	ldr	r3, [r6, #0]
     82c:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
     82e:	68f3      	ldr	r3, [r6, #12]
     830:	9304      	str	r3, [sp, #16]
		config->sample_adjustment |
     832:	6973      	ldr	r3, [r6, #20]
     834:	469a      	mov	sl, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     836:	7e33      	ldrb	r3, [r6, #24]
     838:	9305      	str	r3, [sp, #20]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     83a:	2326      	movs	r3, #38	; 0x26
     83c:	5cf3      	ldrb	r3, [r6, r3]
     83e:	9303      	str	r3, [sp, #12]
	transfer_mode = (uint32_t)config->transfer_mode;
     840:	6873      	ldr	r3, [r6, #4]
     842:	4699      	mov	r9, r3
	switch (transfer_mode)
     844:	2b00      	cmp	r3, #0
     846:	d100      	bne.n	84a <usart_init+0xfe>
     848:	e0a1      	b.n	98e <usart_init+0x242>
     84a:	2380      	movs	r3, #128	; 0x80
     84c:	055b      	lsls	r3, r3, #21
     84e:	4599      	cmp	r9, r3
     850:	d100      	bne.n	854 <usart_init+0x108>
     852:	e085      	b.n	960 <usart_init+0x214>
	if(config->encoding_format_enable) {
     854:	7e73      	ldrb	r3, [r6, #25]
     856:	2b00      	cmp	r3, #0
     858:	d002      	beq.n	860 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     85a:	7eb3      	ldrb	r3, [r6, #26]
     85c:	4642      	mov	r2, r8
     85e:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     860:	682a      	ldr	r2, [r5, #0]
     862:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     864:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     866:	2b00      	cmp	r3, #0
     868:	d1fc      	bne.n	864 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     86a:	330e      	adds	r3, #14
     86c:	aa06      	add	r2, sp, #24
     86e:	4694      	mov	ip, r2
     870:	4463      	add	r3, ip
     872:	881b      	ldrh	r3, [r3, #0]
     874:	4642      	mov	r2, r8
     876:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     878:	465b      	mov	r3, fp
     87a:	9a04      	ldr	r2, [sp, #16]
     87c:	4313      	orrs	r3, r2
     87e:	4652      	mov	r2, sl
     880:	4313      	orrs	r3, r2
     882:	464a      	mov	r2, r9
     884:	4313      	orrs	r3, r2
     886:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     888:	9b05      	ldr	r3, [sp, #20]
     88a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     88c:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     88e:	9b03      	ldr	r3, [sp, #12]
     890:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     892:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     894:	2327      	movs	r3, #39	; 0x27
     896:	5cf3      	ldrb	r3, [r6, r3]
     898:	2b00      	cmp	r3, #0
     89a:	d101      	bne.n	8a0 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     89c:	3304      	adds	r3, #4
     89e:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     8a0:	7e73      	ldrb	r3, [r6, #25]
     8a2:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     8a4:	7f32      	ldrb	r2, [r6, #28]
     8a6:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     8a8:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     8aa:	7f72      	ldrb	r2, [r6, #29]
     8ac:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     8ae:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     8b0:	2224      	movs	r2, #36	; 0x24
     8b2:	5cb2      	ldrb	r2, [r6, r2]
     8b4:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     8b6:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     8b8:	2225      	movs	r2, #37	; 0x25
     8ba:	5cb2      	ldrb	r2, [r6, r2]
     8bc:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     8be:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     8c0:	7ab1      	ldrb	r1, [r6, #10]
     8c2:	7af2      	ldrb	r2, [r6, #11]
     8c4:	4311      	orrs	r1, r2
     8c6:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     8c8:	8933      	ldrh	r3, [r6, #8]
     8ca:	2bff      	cmp	r3, #255	; 0xff
     8cc:	d100      	bne.n	8d0 <usart_init+0x184>
     8ce:	e082      	b.n	9d6 <usart_init+0x28a>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     8d0:	2280      	movs	r2, #128	; 0x80
     8d2:	0452      	lsls	r2, r2, #17
     8d4:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     8d6:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     8d8:	232c      	movs	r3, #44	; 0x2c
     8da:	5cf3      	ldrb	r3, [r6, r3]
     8dc:	2b00      	cmp	r3, #0
     8de:	d103      	bne.n	8e8 <usart_init+0x19c>
     8e0:	4b53      	ldr	r3, [pc, #332]	; (a30 <usart_init+0x2e4>)
     8e2:	789b      	ldrb	r3, [r3, #2]
     8e4:	079b      	lsls	r3, r3, #30
     8e6:	d501      	bpl.n	8ec <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     8e8:	2380      	movs	r3, #128	; 0x80
     8ea:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     8ec:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     8ee:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     8f0:	2b00      	cmp	r3, #0
     8f2:	d1fc      	bne.n	8ee <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
     8f4:	4643      	mov	r3, r8
     8f6:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     8f8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     8fa:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     8fc:	2b00      	cmp	r3, #0
     8fe:	d1fc      	bne.n	8fa <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
     900:	4643      	mov	r3, r8
     902:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     904:	ab0e      	add	r3, sp, #56	; 0x38
     906:	2280      	movs	r2, #128	; 0x80
     908:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     90a:	2200      	movs	r2, #0
     90c:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
     90e:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     910:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     912:	6b33      	ldr	r3, [r6, #48]	; 0x30
     914:	930a      	str	r3, [sp, #40]	; 0x28
     916:	6b73      	ldr	r3, [r6, #52]	; 0x34
     918:	930b      	str	r3, [sp, #44]	; 0x2c
     91a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     91c:	930c      	str	r3, [sp, #48]	; 0x30
     91e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     920:	9302      	str	r3, [sp, #8]
     922:	930d      	str	r3, [sp, #52]	; 0x34
     924:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     926:	ad0a      	add	r5, sp, #40	; 0x28
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     928:	4e42      	ldr	r6, [pc, #264]	; (a34 <usart_init+0x2e8>)
     92a:	e063      	b.n	9f4 <usart_init+0x2a8>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     92c:	2308      	movs	r3, #8
     92e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     930:	3b07      	subs	r3, #7
     932:	9307      	str	r3, [sp, #28]
     934:	e779      	b.n	82a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     936:	6833      	ldr	r3, [r6, #0]
     938:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
     93a:	68f3      	ldr	r3, [r6, #12]
     93c:	9304      	str	r3, [sp, #16]
		config->sample_adjustment |
     93e:	6973      	ldr	r3, [r6, #20]
     940:	469a      	mov	sl, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     942:	7e33      	ldrb	r3, [r6, #24]
     944:	9305      	str	r3, [sp, #20]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     946:	2326      	movs	r3, #38	; 0x26
     948:	5cf3      	ldrb	r3, [r6, r3]
     94a:	9303      	str	r3, [sp, #12]
	transfer_mode = (uint32_t)config->transfer_mode;
     94c:	6873      	ldr	r3, [r6, #4]
     94e:	4699      	mov	r9, r3
	switch (transfer_mode)
     950:	2b00      	cmp	r3, #0
     952:	d018      	beq.n	986 <usart_init+0x23a>
     954:	2380      	movs	r3, #128	; 0x80
     956:	055b      	lsls	r3, r3, #21
     958:	4599      	cmp	r9, r3
     95a:	d001      	beq.n	960 <usart_init+0x214>
	enum status_code status_code = STATUS_OK;
     95c:	2000      	movs	r0, #0
     95e:	e025      	b.n	9ac <usart_init+0x260>
			if (!config->use_external_clock) {
     960:	2327      	movs	r3, #39	; 0x27
     962:	5cf3      	ldrb	r3, [r6, r3]
     964:	2b00      	cmp	r3, #0
     966:	d000      	beq.n	96a <usart_init+0x21e>
     968:	e774      	b.n	854 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     96a:	6a33      	ldr	r3, [r6, #32]
     96c:	001f      	movs	r7, r3
     96e:	b2c0      	uxtb	r0, r0
     970:	4b31      	ldr	r3, [pc, #196]	; (a38 <usart_init+0x2ec>)
     972:	4798      	blx	r3
     974:	0001      	movs	r1, r0
     976:	220e      	movs	r2, #14
     978:	ab06      	add	r3, sp, #24
     97a:	469c      	mov	ip, r3
     97c:	4462      	add	r2, ip
     97e:	0038      	movs	r0, r7
     980:	4b2e      	ldr	r3, [pc, #184]	; (a3c <usart_init+0x2f0>)
     982:	4798      	blx	r3
     984:	e012      	b.n	9ac <usart_init+0x260>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     986:	2308      	movs	r3, #8
     988:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     98a:	2300      	movs	r3, #0
     98c:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     98e:	2327      	movs	r3, #39	; 0x27
     990:	5cf3      	ldrb	r3, [r6, r3]
     992:	2b00      	cmp	r3, #0
     994:	d00e      	beq.n	9b4 <usart_init+0x268>
				status_code =
     996:	9b06      	ldr	r3, [sp, #24]
     998:	9300      	str	r3, [sp, #0]
     99a:	9b07      	ldr	r3, [sp, #28]
     99c:	220e      	movs	r2, #14
     99e:	a906      	add	r1, sp, #24
     9a0:	468c      	mov	ip, r1
     9a2:	4462      	add	r2, ip
     9a4:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     9a6:	6a30      	ldr	r0, [r6, #32]
     9a8:	4f25      	ldr	r7, [pc, #148]	; (a40 <usart_init+0x2f4>)
     9aa:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     9ac:	2800      	cmp	r0, #0
     9ae:	d000      	beq.n	9b2 <usart_init+0x266>
     9b0:	e6df      	b.n	772 <usart_init+0x26>
     9b2:	e74f      	b.n	854 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     9b4:	6a33      	ldr	r3, [r6, #32]
     9b6:	001f      	movs	r7, r3
     9b8:	b2c0      	uxtb	r0, r0
     9ba:	4b1f      	ldr	r3, [pc, #124]	; (a38 <usart_init+0x2ec>)
     9bc:	4798      	blx	r3
     9be:	0001      	movs	r1, r0
				status_code =
     9c0:	9b06      	ldr	r3, [sp, #24]
     9c2:	9300      	str	r3, [sp, #0]
     9c4:	9b07      	ldr	r3, [sp, #28]
     9c6:	220e      	movs	r2, #14
     9c8:	a806      	add	r0, sp, #24
     9ca:	4684      	mov	ip, r0
     9cc:	4462      	add	r2, ip
     9ce:	0038      	movs	r0, r7
     9d0:	4f1b      	ldr	r7, [pc, #108]	; (a40 <usart_init+0x2f4>)
     9d2:	47b8      	blx	r7
     9d4:	e7ea      	b.n	9ac <usart_init+0x260>
		if(config->lin_slave_enable) {
     9d6:	7ef3      	ldrb	r3, [r6, #27]
     9d8:	2b00      	cmp	r3, #0
     9da:	d100      	bne.n	9de <usart_init+0x292>
     9dc:	e77c      	b.n	8d8 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     9de:	2380      	movs	r3, #128	; 0x80
     9e0:	04db      	lsls	r3, r3, #19
     9e2:	431f      	orrs	r7, r3
     9e4:	e778      	b.n	8d8 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     9e6:	0020      	movs	r0, r4
     9e8:	4b16      	ldr	r3, [pc, #88]	; (a44 <usart_init+0x2f8>)
     9ea:	4798      	blx	r3
     9ec:	e007      	b.n	9fe <usart_init+0x2b2>
     9ee:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     9f0:	2f04      	cmp	r7, #4
     9f2:	d00c      	beq.n	a0e <usart_init+0x2c2>
     9f4:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     9f6:	00bb      	lsls	r3, r7, #2
     9f8:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
     9fa:	2800      	cmp	r0, #0
     9fc:	d0f3      	beq.n	9e6 <usart_init+0x29a>
		if (current_pinmux != PINMUX_UNUSED) {
     9fe:	1c43      	adds	r3, r0, #1
     a00:	d0f5      	beq.n	9ee <usart_init+0x2a2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     a02:	a90e      	add	r1, sp, #56	; 0x38
     a04:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     a06:	0c00      	lsrs	r0, r0, #16
     a08:	b2c0      	uxtb	r0, r0
     a0a:	47b0      	blx	r6
     a0c:	e7ef      	b.n	9ee <usart_init+0x2a2>
	return status_code;
     a0e:	2000      	movs	r0, #0
     a10:	e6af      	b.n	772 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     a12:	2310      	movs	r3, #16
     a14:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     a16:	2300      	movs	r3, #0
     a18:	9307      	str	r3, [sp, #28]
     a1a:	e706      	b.n	82a <usart_init+0xde>
     a1c:	0000220d 	.word	0x0000220d
     a20:	40000400 	.word	0x40000400
     a24:	00002759 	.word	0x00002759
     a28:	000026cd 	.word	0x000026cd
     a2c:	00002049 	.word	0x00002049
     a30:	41002000 	.word	0x41002000
     a34:	00002851 	.word	0x00002851
     a38:	00002775 	.word	0x00002775
     a3c:	00001f8b 	.word	0x00001f8b
     a40:	00001fb5 	.word	0x00001fb5
     a44:	00002095 	.word	0x00002095

00000a48 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     a48:	79c3      	ldrb	r3, [r0, #7]
		return STATUS_ERR_DENIED;
     a4a:	221c      	movs	r2, #28
	if (!(module->transmitter_enabled)) {
     a4c:	2b00      	cmp	r3, #0
     a4e:	d101      	bne.n	a54 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     a50:	0010      	movs	r0, r2
     a52:	4770      	bx	lr
	SercomUsart *const usart_hw = &(module->hw->USART);
     a54:	6803      	ldr	r3, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE)) {
     a56:	7e18      	ldrb	r0, [r3, #24]
		return STATUS_BUSY;
     a58:	3a17      	subs	r2, #23
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE)) {
     a5a:	07c0      	lsls	r0, r0, #31
     a5c:	d5f8      	bpl.n	a50 <usart_write_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
     a5e:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     a60:	2a00      	cmp	r2, #0
     a62:	d1fc      	bne.n	a5e <usart_write_wait+0x16>
	usart_hw->DATA.reg = tx_data;
     a64:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     a66:	2102      	movs	r1, #2
     a68:	7e1a      	ldrb	r2, [r3, #24]
     a6a:	420a      	tst	r2, r1
     a6c:	d0fc      	beq.n	a68 <usart_write_wait+0x20>
	return STATUS_OK;
     a6e:	2200      	movs	r2, #0
     a70:	e7ee      	b.n	a50 <usart_write_wait+0x8>

00000a72 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     a72:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     a74:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     a76:	2a00      	cmp	r2, #0
     a78:	d101      	bne.n	a7e <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     a7a:	0018      	movs	r0, r3
     a7c:	4770      	bx	lr
	SercomUsart *const usart_hw = &(module->hw->USART);
     a7e:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     a80:	7e10      	ldrb	r0, [r2, #24]
		return STATUS_BUSY;
     a82:	3b17      	subs	r3, #23
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     a84:	0740      	lsls	r0, r0, #29
     a86:	d5f8      	bpl.n	a7a <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
     a88:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     a8a:	2b00      	cmp	r3, #0
     a8c:	d1fc      	bne.n	a88 <usart_read_wait+0x16>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     a8e:	8b53      	ldrh	r3, [r2, #26]
     a90:	b2db      	uxtb	r3, r3
	if (error_code) {
     a92:	0698      	lsls	r0, r3, #26
     a94:	d01d      	beq.n	ad2 <usart_read_wait+0x60>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     a96:	0798      	lsls	r0, r3, #30
     a98:	d503      	bpl.n	aa2 <usart_read_wait+0x30>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     a9a:	2302      	movs	r3, #2
     a9c:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     a9e:	3318      	adds	r3, #24
     aa0:	e7eb      	b.n	a7a <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     aa2:	0758      	lsls	r0, r3, #29
     aa4:	d503      	bpl.n	aae <usart_read_wait+0x3c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     aa6:	2304      	movs	r3, #4
     aa8:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     aaa:	331a      	adds	r3, #26
     aac:	e7e5      	b.n	a7a <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     aae:	07d8      	lsls	r0, r3, #31
     ab0:	d503      	bpl.n	aba <usart_read_wait+0x48>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     ab2:	2301      	movs	r3, #1
     ab4:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     ab6:	3312      	adds	r3, #18
     ab8:	e7df      	b.n	a7a <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     aba:	06d8      	lsls	r0, r3, #27
     abc:	d503      	bpl.n	ac6 <usart_read_wait+0x54>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     abe:	2310      	movs	r3, #16
     ac0:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     ac2:	3332      	adds	r3, #50	; 0x32
     ac4:	e7d9      	b.n	a7a <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     ac6:	069b      	lsls	r3, r3, #26
     ac8:	d503      	bpl.n	ad2 <usart_read_wait+0x60>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     aca:	2320      	movs	r3, #32
     acc:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     ace:	3321      	adds	r3, #33	; 0x21
     ad0:	e7d3      	b.n	a7a <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
     ad2:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     ad4:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     ad6:	2300      	movs	r3, #0
     ad8:	e7cf      	b.n	a7a <usart_read_wait+0x8>
	...

00000adc <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     adc:	b5f0      	push	{r4, r5, r6, r7, lr}
     ade:	46ce      	mov	lr, r9
     ae0:	4647      	mov	r7, r8
     ae2:	b580      	push	{r7, lr}
     ae4:	b083      	sub	sp, #12
     ae6:	0005      	movs	r5, r0
     ae8:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     aea:	2017      	movs	r0, #23
	if (length == 0) {
     aec:	2a00      	cmp	r2, #0
     aee:	d104      	bne.n	afa <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     af0:	b003      	add	sp, #12
     af2:	bc0c      	pop	{r2, r3}
     af4:	4690      	mov	r8, r2
     af6:	4699      	mov	r9, r3
     af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
     afa:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
     afc:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
     afe:	2b00      	cmp	r3, #0
     b00:	d0f6      	beq.n	af0 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
     b02:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     b04:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     b06:	2b00      	cmp	r3, #0
     b08:	d1fc      	bne.n	b04 <usart_write_buffer_wait+0x28>
	while (length--) {
     b0a:	3a01      	subs	r2, #1
     b0c:	b293      	uxth	r3, r2
     b0e:	4699      	mov	r9, r3
     b10:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     b12:	2701      	movs	r7, #1
	while (length--) {
     b14:	4b1f      	ldr	r3, [pc, #124]	; (b94 <usart_write_buffer_wait+0xb8>)
     b16:	4698      	mov	r8, r3
     b18:	e011      	b.n	b3e <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
     b1a:	1c73      	adds	r3, r6, #1
     b1c:	b29b      	uxth	r3, r3
     b1e:	9a01      	ldr	r2, [sp, #4]
     b20:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     b22:	796a      	ldrb	r2, [r5, #5]
     b24:	2a01      	cmp	r2, #1
     b26:	d017      	beq.n	b58 <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
     b28:	b289      	uxth	r1, r1
     b2a:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
     b2c:	0028      	movs	r0, r5
     b2e:	4b1a      	ldr	r3, [pc, #104]	; (b98 <usart_write_buffer_wait+0xbc>)
     b30:	4798      	blx	r3
	while (length--) {
     b32:	464b      	mov	r3, r9
     b34:	3b01      	subs	r3, #1
     b36:	b29b      	uxth	r3, r3
     b38:	4699      	mov	r9, r3
     b3a:	4543      	cmp	r3, r8
     b3c:	d013      	beq.n	b66 <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     b3e:	7e23      	ldrb	r3, [r4, #24]
     b40:	423b      	tst	r3, r7
     b42:	d1ea      	bne.n	b1a <usart_write_buffer_wait+0x3e>
     b44:	4b13      	ldr	r3, [pc, #76]	; (b94 <usart_write_buffer_wait+0xb8>)
     b46:	7e22      	ldrb	r2, [r4, #24]
     b48:	423a      	tst	r2, r7
     b4a:	d1e6      	bne.n	b1a <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
     b4c:	2b01      	cmp	r3, #1
     b4e:	d019      	beq.n	b84 <usart_write_buffer_wait+0xa8>
     b50:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     b52:	2b00      	cmp	r3, #0
     b54:	d1f7      	bne.n	b46 <usart_write_buffer_wait+0x6a>
     b56:	e7e0      	b.n	b1a <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
     b58:	3602      	adds	r6, #2
     b5a:	b2b6      	uxth	r6, r6
     b5c:	9a01      	ldr	r2, [sp, #4]
     b5e:	5cd3      	ldrb	r3, [r2, r3]
     b60:	021b      	lsls	r3, r3, #8
     b62:	4319      	orrs	r1, r3
     b64:	e7e2      	b.n	b2c <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     b66:	7e23      	ldrb	r3, [r4, #24]
     b68:	079b      	lsls	r3, r3, #30
     b6a:	d40d      	bmi.n	b88 <usart_write_buffer_wait+0xac>
     b6c:	4b09      	ldr	r3, [pc, #36]	; (b94 <usart_write_buffer_wait+0xb8>)
     b6e:	2102      	movs	r1, #2
     b70:	7e22      	ldrb	r2, [r4, #24]
     b72:	420a      	tst	r2, r1
     b74:	d10a      	bne.n	b8c <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
     b76:	2b01      	cmp	r3, #1
     b78:	d00a      	beq.n	b90 <usart_write_buffer_wait+0xb4>
     b7a:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     b7c:	2b00      	cmp	r3, #0
     b7e:	d1f7      	bne.n	b70 <usart_write_buffer_wait+0x94>
	return STATUS_OK;
     b80:	2000      	movs	r0, #0
     b82:	e7b5      	b.n	af0 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
     b84:	2012      	movs	r0, #18
     b86:	e7b3      	b.n	af0 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
     b88:	2000      	movs	r0, #0
     b8a:	e7b1      	b.n	af0 <usart_write_buffer_wait+0x14>
     b8c:	2000      	movs	r0, #0
     b8e:	e7af      	b.n	af0 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
     b90:	2012      	movs	r0, #18
     b92:	e7ad      	b.n	af0 <usart_write_buffer_wait+0x14>
     b94:	0000ffff 	.word	0x0000ffff
     b98:	00000a49 	.word	0x00000a49

00000b9c <newATCACommand>:
/** \brief constructor for ATCACommand
 * \param[in] device_type - specifies which set of commands and execution times should be associated with this command object
 * \return ATCACommand instance
 */
ATCACommand newATCACommand(ATCADeviceType device_type)    // constructor
{
     b9c:	b510      	push	{r4, lr}
     b9e:	0004      	movs	r4, r0
    ATCA_STATUS status = ATCA_SUCCESS;
    ATCACommand ca_cmd;

    ca_cmd = (ATCACommand)malloc(sizeof(atca_command));
     ba0:	2004      	movs	r0, #4
     ba2:	4b03      	ldr	r3, [pc, #12]	; (bb0 <newATCACommand+0x14>)
     ba4:	4798      	blx	r3
    ca_cmd->dt = device_type;
     ba6:	7004      	strb	r4, [r0, #0]
    ca_cmd->clock_divider = 0;
     ba8:	2300      	movs	r3, #0
     baa:	7043      	strb	r3, [r0, #1]
        free(ca_cmd);
        ca_cmd = NULL;
    }

    return ca_cmd;
}
     bac:	bd10      	pop	{r4, pc}
     bae:	46c0      	nop			; (mov r8, r8)
     bb0:	000057a1 	.word	0x000057a1

00000bb4 <deleteATCACommand>:

/** \brief ATCACommand destructor
 * \param[in] ca_cmd instance of a command object
 */
void deleteATCACommand(ATCACommand *ca_cmd)    // destructor
{
     bb4:	b510      	push	{r4, lr}
     bb6:	0004      	movs	r4, r0
    if (*ca_cmd)
     bb8:	6800      	ldr	r0, [r0, #0]
     bba:	2800      	cmp	r0, #0
     bbc:	d001      	beq.n	bc2 <deleteATCACommand+0xe>
    {
        free((void*)*ca_cmd);
     bbe:	4b02      	ldr	r3, [pc, #8]	; (bc8 <deleteATCACommand+0x14>)
     bc0:	4798      	blx	r3
    }

    *ca_cmd = NULL;
     bc2:	2300      	movs	r3, #0
     bc4:	6023      	str	r3, [r4, #0]
}
     bc6:	bd10      	pop	{r4, pc}
     bc8:	000057b5 	.word	0x000057b5

00000bcc <atCRC>:
 * \param[in]  data    Pointer to the data over which to compute the CRC
 * \param[out] crc_le  Pointer to the place where the two-bytes of CRC will be
 *                     returned in little-endian byte order.
 */
void atCRC(size_t length, const uint8_t *data, uint8_t *crc_le)
{
     bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
     bce:	46d6      	mov	lr, sl
     bd0:	464f      	mov	r7, r9
     bd2:	4646      	mov	r6, r8
     bd4:	b5c0      	push	{r6, r7, lr}
     bd6:	4694      	mov	ip, r2
    uint16_t crc_register = 0;
    uint16_t polynom = 0x8005;
    uint8_t shift_register;
    uint8_t data_bit, crc_bit;

    for (counter = 0; counter < length; counter++)
     bd8:	2800      	cmp	r0, #0
     bda:	d021      	beq.n	c20 <atCRC+0x54>
     bdc:	4689      	mov	r9, r1
     bde:	4688      	mov	r8, r1
     be0:	4480      	add	r8, r0
     be2:	2300      	movs	r3, #0
            data_bit = (data[counter] & shift_register) ? 1 : 0;
            crc_bit = crc_register >> 15;
            crc_register <<= 1;
            if (data_bit != crc_bit)
            {
                crc_register ^= polynom;
     be4:	4813      	ldr	r0, [pc, #76]	; (c34 <atCRC+0x68>)
     be6:	e016      	b.n	c16 <atCRC+0x4a>
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
     be8:	006d      	lsls	r5, r5, #1
     bea:	b2ed      	uxtb	r5, r5
     bec:	3e01      	subs	r6, #1
     bee:	2e00      	cmp	r6, #0
     bf0:	d00c      	beq.n	c0c <atCRC+0x40>
            crc_bit = crc_register >> 15;
     bf2:	0bdf      	lsrs	r7, r3, #15
            crc_register <<= 1;
     bf4:	005b      	lsls	r3, r3, #1
     bf6:	b29b      	uxth	r3, r3
            data_bit = (data[counter] & shift_register) ? 1 : 0;
     bf8:	002c      	movs	r4, r5
     bfa:	400c      	ands	r4, r1
     bfc:	1e62      	subs	r2, r4, #1
     bfe:	4194      	sbcs	r4, r2
            if (data_bit != crc_bit)
     c00:	b2e4      	uxtb	r4, r4
     c02:	42bc      	cmp	r4, r7
     c04:	d0f0      	beq.n	be8 <atCRC+0x1c>
                crc_register ^= polynom;
     c06:	4043      	eors	r3, r0
     c08:	b29b      	uxth	r3, r3
     c0a:	e7ed      	b.n	be8 <atCRC+0x1c>
     c0c:	2201      	movs	r2, #1
     c0e:	4692      	mov	sl, r2
     c10:	44d1      	add	r9, sl
    for (counter = 0; counter < length; counter++)
     c12:	45c1      	cmp	r9, r8
     c14:	d005      	beq.n	c22 <atCRC+0x56>
            data_bit = (data[counter] & shift_register) ? 1 : 0;
     c16:	464a      	mov	r2, r9
     c18:	7811      	ldrb	r1, [r2, #0]
     c1a:	2608      	movs	r6, #8
     c1c:	2501      	movs	r5, #1
     c1e:	e7e8      	b.n	bf2 <atCRC+0x26>
    uint16_t crc_register = 0;
     c20:	2300      	movs	r3, #0
            }
        }
    }
    crc_le[0] = (uint8_t)(crc_register & 0x00FF);
     c22:	4662      	mov	r2, ip
     c24:	7013      	strb	r3, [r2, #0]
    crc_le[1] = (uint8_t)(crc_register >> 8);
     c26:	0a1b      	lsrs	r3, r3, #8
     c28:	7053      	strb	r3, [r2, #1]
}
     c2a:	bc1c      	pop	{r2, r3, r4}
     c2c:	4690      	mov	r8, r2
     c2e:	4699      	mov	r9, r3
     c30:	46a2      	mov	sl, r4
     c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c34:	ffff8005 	.word	0xffff8005

00000c38 <atCalcCrc>:
/** \brief This function calculates CRC and adds it to the correct offset in the packet data
 * \param[in] packet Packet to calculate CRC data for
 */

void atCalcCrc(ATCAPacket *packet)
{
     c38:	b510      	push	{r4, lr}
    uint8_t length, *crc;

    length = packet->txsize - ATCA_CRC_SIZE;
    // computer pointer to CRC in the packet
    crc = &(packet->txsize) + length;
     c3a:	1c41      	adds	r1, r0, #1
    length = packet->txsize - ATCA_CRC_SIZE;
     c3c:	7840      	ldrb	r0, [r0, #1]
     c3e:	3802      	subs	r0, #2
    crc = &(packet->txsize) + length;
     c40:	b2c0      	uxtb	r0, r0
     c42:	180a      	adds	r2, r1, r0

    // stuff CRC into packet
    atCRC(length, &(packet->txsize), crc);
     c44:	4b01      	ldr	r3, [pc, #4]	; (c4c <atCalcCrc+0x14>)
     c46:	4798      	blx	r3
}
     c48:	bd10      	pop	{r4, pc}
     c4a:	46c0      	nop			; (mov r8, r8)
     c4c:	00000bcd 	.word	0x00000bcd

00000c50 <atGenKey>:
{
     c50:	b510      	push	{r4, lr}
    packet->opcode = ATCA_GENKEY;
     c52:	2340      	movs	r3, #64	; 0x40
     c54:	708b      	strb	r3, [r1, #2]
    if (packet->param1 & GENKEY_MODE_PUBKEY_DIGEST)
     c56:	78cb      	ldrb	r3, [r1, #3]
     c58:	06db      	lsls	r3, r3, #27
     c5a:	d409      	bmi.n	c70 <atGenKey+0x20>
        packet->txsize = GENKEY_COUNT;
     c5c:	2307      	movs	r3, #7
     c5e:	704b      	strb	r3, [r1, #1]
        packet->rxsize = GENKEY_RSP_SIZE_LONG;
     c60:	224b      	movs	r2, #75	; 0x4b
     c62:	3383      	adds	r3, #131	; 0x83
     c64:	52ca      	strh	r2, [r1, r3]
    atCalcCrc(packet);
     c66:	0008      	movs	r0, r1
     c68:	4b04      	ldr	r3, [pc, #16]	; (c7c <atGenKey+0x2c>)
     c6a:	4798      	blx	r3
}
     c6c:	2000      	movs	r0, #0
     c6e:	bd10      	pop	{r4, pc}
        packet->txsize = GENKEY_COUNT_DATA;
     c70:	230a      	movs	r3, #10
     c72:	704b      	strb	r3, [r1, #1]
        packet->rxsize = GENKEY_RSP_SIZE_SHORT;
     c74:	2204      	movs	r2, #4
     c76:	3380      	adds	r3, #128	; 0x80
     c78:	52ca      	strh	r2, [r1, r3]
     c7a:	e7f4      	b.n	c66 <atGenKey+0x16>
     c7c:	00000c39 	.word	0x00000c39

00000c80 <atLock>:
{
     c80:	b510      	push	{r4, lr}
    packet->opcode = ATCA_LOCK;
     c82:	2317      	movs	r3, #23
     c84:	708b      	strb	r3, [r1, #2]
    packet->txsize = LOCK_COUNT;
     c86:	3b10      	subs	r3, #16
     c88:	704b      	strb	r3, [r1, #1]
    packet->rxsize = LOCK_RSP_SIZE;
     c8a:	2204      	movs	r2, #4
     c8c:	3383      	adds	r3, #131	; 0x83
     c8e:	52ca      	strh	r2, [r1, r3]
    atCalcCrc(packet);
     c90:	0008      	movs	r0, r1
     c92:	4b02      	ldr	r3, [pc, #8]	; (c9c <atLock+0x1c>)
     c94:	4798      	blx	r3
}
     c96:	2000      	movs	r0, #0
     c98:	bd10      	pop	{r4, pc}
     c9a:	46c0      	nop			; (mov r8, r8)
     c9c:	00000c39 	.word	0x00000c39

00000ca0 <atRandom>:
{
     ca0:	b510      	push	{r4, lr}
    packet->opcode = ATCA_RANDOM;
     ca2:	231b      	movs	r3, #27
     ca4:	708b      	strb	r3, [r1, #2]
    packet->txsize = RANDOM_COUNT;
     ca6:	3b14      	subs	r3, #20
     ca8:	704b      	strb	r3, [r1, #1]
    packet->rxsize = RANDOM_RSP_SIZE;
     caa:	2223      	movs	r2, #35	; 0x23
     cac:	3383      	adds	r3, #131	; 0x83
     cae:	52ca      	strh	r2, [r1, r3]
    atCalcCrc(packet);
     cb0:	0008      	movs	r0, r1
     cb2:	4b02      	ldr	r3, [pc, #8]	; (cbc <atRandom+0x1c>)
     cb4:	4798      	blx	r3
}
     cb6:	2000      	movs	r0, #0
     cb8:	bd10      	pop	{r4, pc}
     cba:	46c0      	nop			; (mov r8, r8)
     cbc:	00000c39 	.word	0x00000c39

00000cc0 <atRead>:
{
     cc0:	b510      	push	{r4, lr}
    packet->opcode = ATCA_READ;
     cc2:	2302      	movs	r3, #2
     cc4:	708b      	strb	r3, [r1, #2]
    packet->txsize = READ_COUNT;
     cc6:	3305      	adds	r3, #5
     cc8:	704b      	strb	r3, [r1, #1]
    if ((packet->param1 & 0x80) == 0)
     cca:	78cb      	ldrb	r3, [r1, #3]
     ccc:	2b7f      	cmp	r3, #127	; 0x7f
     cce:	d807      	bhi.n	ce0 <atRead+0x20>
        packet->rxsize = READ_4_RSP_SIZE;
     cd0:	2207      	movs	r2, #7
     cd2:	238a      	movs	r3, #138	; 0x8a
     cd4:	52ca      	strh	r2, [r1, r3]
    atCalcCrc(packet);
     cd6:	0008      	movs	r0, r1
     cd8:	4b03      	ldr	r3, [pc, #12]	; (ce8 <atRead+0x28>)
     cda:	4798      	blx	r3
}
     cdc:	2000      	movs	r0, #0
     cde:	bd10      	pop	{r4, pc}
        packet->rxsize = READ_32_RSP_SIZE;
     ce0:	2223      	movs	r2, #35	; 0x23
     ce2:	238a      	movs	r3, #138	; 0x8a
     ce4:	52ca      	strh	r2, [r1, r3]
     ce6:	e7f6      	b.n	cd6 <atRead+0x16>
     ce8:	00000c39 	.word	0x00000c39

00000cec <atSHA>:
{
     cec:	b510      	push	{r4, lr}
    packet->opcode = ATCA_SHA;
     cee:	2347      	movs	r3, #71	; 0x47
     cf0:	708b      	strb	r3, [r1, #2]
    switch (packet->param1 & SHA_MODE_MASK)
     cf2:	78cc      	ldrb	r4, [r1, #3]
     cf4:	3b40      	subs	r3, #64	; 0x40
     cf6:	4023      	ands	r3, r4
     cf8:	009b      	lsls	r3, r3, #2
     cfa:	4c17      	ldr	r4, [pc, #92]	; (d58 <atSHA+0x6c>)
     cfc:	58e3      	ldr	r3, [r4, r3]
     cfe:	469f      	mov	pc, r3
        packet->rxsize = SHA_RSP_SIZE_SHORT;
     d00:	2204      	movs	r2, #4
     d02:	238a      	movs	r3, #138	; 0x8a
     d04:	52ca      	strh	r2, [r1, r3]
        packet->txsize = ATCA_CMD_SIZE_MIN;
     d06:	3b83      	subs	r3, #131	; 0x83
     d08:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
     d0a:	0008      	movs	r0, r1
     d0c:	4b13      	ldr	r3, [pc, #76]	; (d5c <atSHA+0x70>)
     d0e:	4798      	blx	r3
}
     d10:	2000      	movs	r0, #0
     d12:	bd10      	pop	{r4, pc}
        if (ca_cmd->dt == ATSHA204A)
     d14:	7803      	ldrb	r3, [r0, #0]
     d16:	2b01      	cmp	r3, #1
     d18:	d006      	beq.n	d28 <atSHA+0x3c>
            packet->rxsize = SHA_RSP_SIZE_SHORT;
     d1a:	2204      	movs	r2, #4
     d1c:	238a      	movs	r3, #138	; 0x8a
     d1e:	52ca      	strh	r2, [r1, r3]
        packet->txsize = ATCA_CMD_SIZE_MIN + packet->param2;
     d20:	888b      	ldrh	r3, [r1, #4]
     d22:	3307      	adds	r3, #7
     d24:	704b      	strb	r3, [r1, #1]
        break;
     d26:	e7f0      	b.n	d0a <atSHA+0x1e>
            packet->rxsize = ATCA_SHA_DIGEST_SIZE + ATCA_PACKET_OVERHEAD;  // ATSHA devices return the digest with this command
     d28:	2223      	movs	r2, #35	; 0x23
     d2a:	3389      	adds	r3, #137	; 0x89
     d2c:	52ca      	strh	r2, [r1, r3]
     d2e:	e7f7      	b.n	d20 <atSHA+0x34>
        packet->rxsize = SHA_RSP_SIZE_LONG;
     d30:	2223      	movs	r2, #35	; 0x23
     d32:	238a      	movs	r3, #138	; 0x8a
     d34:	52ca      	strh	r2, [r1, r3]
        packet->txsize = ATCA_CMD_SIZE_MIN + packet->param2;
     d36:	888b      	ldrh	r3, [r1, #4]
     d38:	3307      	adds	r3, #7
     d3a:	704b      	strb	r3, [r1, #1]
        break;
     d3c:	e7e5      	b.n	d0a <atSHA+0x1e>
        packet->rxsize = SHA_CONTEXT_MAX_SIZE + ATCA_PACKET_OVERHEAD;
     d3e:	2266      	movs	r2, #102	; 0x66
     d40:	238a      	movs	r3, #138	; 0x8a
     d42:	52ca      	strh	r2, [r1, r3]
        packet->txsize = ATCA_CMD_SIZE_MIN;
     d44:	3b83      	subs	r3, #131	; 0x83
     d46:	704b      	strb	r3, [r1, #1]
        break;
     d48:	e7df      	b.n	d0a <atSHA+0x1e>
        packet->rxsize = SHA_RSP_SIZE_SHORT;
     d4a:	2004      	movs	r0, #4
     d4c:	238a      	movs	r3, #138	; 0x8a
     d4e:	52c8      	strh	r0, [r1, r3]
        packet->txsize = ATCA_CMD_SIZE_MIN + write_context_size;
     d50:	3207      	adds	r2, #7
     d52:	704a      	strb	r2, [r1, #1]
        break;
     d54:	e7d9      	b.n	d0a <atSHA+0x1e>
     d56:	46c0      	nop			; (mov r8, r8)
     d58:	0000599c 	.word	0x0000599c
     d5c:	00000c39 	.word	0x00000c39

00000d60 <atCheckCrc>:
 * \param[in] response pointer to response
 * \return ATCA_SUCCESS on success, otherwise ATCA_RX_CRC_ERROR
 */

ATCA_STATUS atCheckCrc(const uint8_t *response)
{
     d60:	b570      	push	{r4, r5, r6, lr}
     d62:	b082      	sub	sp, #8
     d64:	0005      	movs	r5, r0
    uint8_t crc[ATCA_CRC_SIZE];
    uint8_t count = response[ATCA_COUNT_IDX];
     d66:	7804      	ldrb	r4, [r0, #0]

    count -= ATCA_CRC_SIZE;
     d68:	3c02      	subs	r4, #2
    atCRC(count, response, crc);
     d6a:	b2e4      	uxtb	r4, r4
     d6c:	ae01      	add	r6, sp, #4
     d6e:	0032      	movs	r2, r6
     d70:	0001      	movs	r1, r0
     d72:	0020      	movs	r0, r4
     d74:	4b08      	ldr	r3, [pc, #32]	; (d98 <atCheckCrc+0x38>)
     d76:	4798      	blx	r3

    return (crc[0] == response[count] && crc[1] == response[count + 1]) ? ATCA_SUCCESS : ATCA_RX_CRC_ERROR;
     d78:	7832      	ldrb	r2, [r6, #0]
     d7a:	5d2b      	ldrb	r3, [r5, r4]
     d7c:	20e5      	movs	r0, #229	; 0xe5
     d7e:	429a      	cmp	r2, r3
     d80:	d001      	beq.n	d86 <atCheckCrc+0x26>
}
     d82:	b002      	add	sp, #8
     d84:	bd70      	pop	{r4, r5, r6, pc}
    return (crc[0] == response[count] && crc[1] == response[count + 1]) ? ATCA_SUCCESS : ATCA_RX_CRC_ERROR;
     d86:	192c      	adds	r4, r5, r4
     d88:	ab01      	add	r3, sp, #4
     d8a:	785a      	ldrb	r2, [r3, #1]
     d8c:	7863      	ldrb	r3, [r4, #1]
     d8e:	429a      	cmp	r2, r3
     d90:	d1f7      	bne.n	d82 <atCheckCrc+0x22>
     d92:	2000      	movs	r0, #0
     d94:	e7f5      	b.n	d82 <atCheckCrc+0x22>
     d96:	46c0      	nop			; (mov r8, r8)
     d98:	00000bcd 	.word	0x00000bcd

00000d9c <isATCAError>:
 * \param[in] data pointer to received data - expected to be in the form of a CA device response frame
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS isATCAError(uint8_t *data)
{
     d9c:	b510      	push	{r4, lr}
     d9e:	b082      	sub	sp, #8
     da0:	0004      	movs	r4, r0
    uint8_t good[4] = { 0x04, 0x00, 0x03, 0x40 };
     da2:	4b1b      	ldr	r3, [pc, #108]	; (e10 <isATCAError+0x74>)
     da4:	681b      	ldr	r3, [r3, #0]
     da6:	9301      	str	r3, [sp, #4]

    if (memcmp(data, good, 4) == 0)
     da8:	2204      	movs	r2, #4
     daa:	a901      	add	r1, sp, #4
     dac:	4b19      	ldr	r3, [pc, #100]	; (e14 <isATCAError+0x78>)
     dae:	4798      	blx	r3
    {
        return ATCA_SUCCESS;
     db0:	2300      	movs	r3, #0
    if (memcmp(data, good, 4) == 0)
     db2:	2800      	cmp	r0, #0
     db4:	d002      	beq.n	dbc <isATCAError+0x20>
    }

    if (data[0] == 0x04)        // error packets are always 4 bytes long
     db6:	7822      	ldrb	r2, [r4, #0]
     db8:	2a04      	cmp	r2, #4
     dba:	d002      	beq.n	dc2 <isATCAError+0x26>
    }
    else
    {
        return ATCA_SUCCESS;
    }
}
     dbc:	0018      	movs	r0, r3
     dbe:	b002      	add	sp, #8
     dc0:	bd10      	pop	{r4, pc}
        switch (data[1])
     dc2:	7862      	ldrb	r2, [r4, #1]
     dc4:	2a07      	cmp	r2, #7
     dc6:	d01f      	beq.n	e08 <isATCAError+0x6c>
     dc8:	b2d3      	uxtb	r3, r2
     dca:	2b07      	cmp	r3, #7
     dcc:	d90c      	bls.n	de8 <isATCAError+0x4c>
     dce:	2a0f      	cmp	r2, #15
     dd0:	d01c      	beq.n	e0c <isATCAError+0x70>
     dd2:	b2d3      	uxtb	r3, r2
     dd4:	2b0f      	cmp	r3, #15
     dd6:	d911      	bls.n	dfc <isATCAError+0x60>
            return ATCA_WAKE_SUCCESS;
     dd8:	23f3      	movs	r3, #243	; 0xf3
        switch (data[1])
     dda:	2a11      	cmp	r2, #17
     ddc:	d0ee      	beq.n	dbc <isATCAError+0x20>
     dde:	b2d2      	uxtb	r2, r2
            return ATCA_STATUS_CRC;
     de0:	3b1f      	subs	r3, #31
        switch (data[1])
     de2:	2aff      	cmp	r2, #255	; 0xff
     de4:	d0ea      	beq.n	dbc <isATCAError+0x20>
     de6:	e007      	b.n	df8 <isATCAError+0x5c>
     de8:	2a03      	cmp	r2, #3
     dea:	d00b      	beq.n	e04 <isATCAError+0x68>
            return ATCA_STATUS_ECC;
     dec:	23d6      	movs	r3, #214	; 0xd6
        switch (data[1])
     dee:	2a05      	cmp	r2, #5
     df0:	d0e4      	beq.n	dbc <isATCAError+0x20>
            return ATCA_CHECKMAC_VERIFY_FAILED;
     df2:	3b05      	subs	r3, #5
        switch (data[1])
     df4:	2a01      	cmp	r2, #1
     df6:	d0e1      	beq.n	dbc <isATCAError+0x20>
            return ATCA_GEN_FAIL;
     df8:	23e1      	movs	r3, #225	; 0xe1
     dfa:	e7df      	b.n	dbc <isATCAError+0x20>
            return ATCA_HEALTH_TEST_ERROR;
     dfc:	23fa      	movs	r3, #250	; 0xfa
        switch (data[1])
     dfe:	2a08      	cmp	r2, #8
     e00:	d0dc      	beq.n	dbc <isATCAError+0x20>
     e02:	e7f9      	b.n	df8 <isATCAError+0x5c>
            return ATCA_PARSE_ERROR;
     e04:	23d2      	movs	r3, #210	; 0xd2
     e06:	e7d9      	b.n	dbc <isATCAError+0x20>
            return ATCA_STATUS_SELFTEST_ERROR;
     e08:	23d7      	movs	r3, #215	; 0xd7
     e0a:	e7d7      	b.n	dbc <isATCAError+0x20>
            return ATCA_EXECUTION_ERROR;
     e0c:	23f4      	movs	r3, #244	; 0xf4
     e0e:	e7d5      	b.n	dbc <isATCAError+0x20>
     e10:	000059bc 	.word	0x000059bc
     e14:	000057c9 	.word	0x000057c9

00000e18 <newATCADevice>:
 * \param[in] cfg  pointer to an interface configuration object
 * \return reference to a new ATCADevice
 */

ATCADevice newATCADevice(ATCAIfaceCfg *cfg)
{
     e18:	b570      	push	{r4, r5, r6, lr}
     e1a:	1e05      	subs	r5, r0, #0
    ATCADevice ca_dev = NULL;

    if (cfg == NULL)
     e1c:	d017      	beq.n	e4e <newATCADevice+0x36>
    {
        return NULL;
    }

    ca_dev = (ATCADevice)malloc(sizeof(struct atca_device));
     e1e:	2008      	movs	r0, #8
     e20:	4b0c      	ldr	r3, [pc, #48]	; (e54 <newATCADevice+0x3c>)
     e22:	4798      	blx	r3
     e24:	0004      	movs	r4, r0
    ca_dev->mCommands = (ATCACommand)newATCACommand(cfg->devtype);
     e26:	7868      	ldrb	r0, [r5, #1]
     e28:	4b0b      	ldr	r3, [pc, #44]	; (e58 <newATCADevice+0x40>)
     e2a:	4798      	blx	r3
     e2c:	6020      	str	r0, [r4, #0]
    ca_dev->mIface    = (ATCAIface)newATCAIface(cfg);
     e2e:	0028      	movs	r0, r5
     e30:	4b0a      	ldr	r3, [pc, #40]	; (e5c <newATCADevice+0x44>)
     e32:	4798      	blx	r3
     e34:	6060      	str	r0, [r4, #4]

    if (ca_dev->mCommands == NULL || ca_dev->mIface == NULL)
     e36:	6823      	ldr	r3, [r4, #0]
     e38:	2b00      	cmp	r3, #0
     e3a:	d003      	beq.n	e44 <newATCADevice+0x2c>
     e3c:	2800      	cmp	r0, #0
     e3e:	d001      	beq.n	e44 <newATCADevice+0x2c>
        free(ca_dev);
        ca_dev = NULL;
    }

    return ca_dev;
}
     e40:	0020      	movs	r0, r4
     e42:	bd70      	pop	{r4, r5, r6, pc}
        free(ca_dev);
     e44:	0020      	movs	r0, r4
     e46:	4b06      	ldr	r3, [pc, #24]	; (e60 <newATCADevice+0x48>)
     e48:	4798      	blx	r3
        ca_dev = NULL;
     e4a:	2400      	movs	r4, #0
     e4c:	e7f8      	b.n	e40 <newATCADevice+0x28>
        return NULL;
     e4e:	2400      	movs	r4, #0
     e50:	e7f6      	b.n	e40 <newATCADevice+0x28>
     e52:	46c0      	nop			; (mov r8, r8)
     e54:	000057a1 	.word	0x000057a1
     e58:	00000b9d 	.word	0x00000b9d
     e5c:	00000ff5 	.word	0x00000ff5
     e60:	000057b5 	.word	0x000057b5

00000e64 <deleteATCADevice>:
/** \brief destructor for a device NULLs reference after object is freed
 * \param[in] ca_dev  pointer to a reference to a device
 *
 */
void deleteATCADevice(ATCADevice *ca_dev)   // destructor
{
     e64:	b570      	push	{r4, r5, r6, lr}
     e66:	0005      	movs	r5, r0
    struct atca_device *dev = *ca_dev;
     e68:	6804      	ldr	r4, [r0, #0]

    if (*ca_dev)
     e6a:	2c00      	cmp	r4, #0
     e6c:	d008      	beq.n	e80 <deleteATCADevice+0x1c>
    {
        deleteATCACommand( (ATCACommand*)&(dev->mCommands));
     e6e:	0020      	movs	r0, r4
     e70:	4b05      	ldr	r3, [pc, #20]	; (e88 <deleteATCADevice+0x24>)
     e72:	4798      	blx	r3
        deleteATCAIface((ATCAIface*)&(dev->mIface));
     e74:	1d20      	adds	r0, r4, #4
     e76:	4b05      	ldr	r3, [pc, #20]	; (e8c <deleteATCADevice+0x28>)
     e78:	4798      	blx	r3
        free((void*)*ca_dev);
     e7a:	6828      	ldr	r0, [r5, #0]
     e7c:	4b04      	ldr	r3, [pc, #16]	; (e90 <deleteATCADevice+0x2c>)
     e7e:	4798      	blx	r3
    }

    *ca_dev = NULL;
     e80:	2300      	movs	r3, #0
     e82:	602b      	str	r3, [r5, #0]
}
     e84:	bd70      	pop	{r4, r5, r6, pc}
     e86:	46c0      	nop			; (mov r8, r8)
     e88:	00000bb5 	.word	0x00000bb5
     e8c:	00000f6d 	.word	0x00000f6d
     e90:	000057b5 	.word	0x000057b5

00000e94 <atca_execute_command>:
 * \param[in]    device  CryptoAuthentication device to send the command to.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atca_execute_command(ATCAPacket* packet, ATCADevice device)
{
     e94:	b5f0      	push	{r4, r5, r6, r7, lr}
     e96:	46c6      	mov	lr, r8
     e98:	b500      	push	{lr}
     e9a:	b082      	sub	sp, #8
     e9c:	0007      	movs	r7, r0
     e9e:	000e      	movs	r6, r1
#else
        execution_or_wait_time = ATCA_POLLING_INIT_TIME_MSEC;
        max_delay_count = ATCA_POLLING_MAX_TIME_MSEC / ATCA_POLLING_FREQUENCY_TIME_MSEC;
#endif

        if ((status = atwake(device->mIface)) != ATCA_SUCCESS)
     ea0:	6848      	ldr	r0, [r1, #4]
     ea2:	4b1d      	ldr	r3, [pc, #116]	; (f18 <atca_execute_command+0x84>)
     ea4:	4798      	blx	r3
     ea6:	1e04      	subs	r4, r0, #0
     ea8:	d007      	beq.n	eba <atca_execute_command+0x26>
            break;
        }
    }
    while (0);

    atidle(device->mIface);
     eaa:	6870      	ldr	r0, [r6, #4]
     eac:	4b1b      	ldr	r3, [pc, #108]	; (f1c <atca_execute_command+0x88>)
     eae:	4798      	blx	r3
    return status;
}
     eb0:	0020      	movs	r0, r4
     eb2:	b002      	add	sp, #8
     eb4:	bc04      	pop	{r2}
     eb6:	4690      	mov	r8, r2
     eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((status = atsend(device->mIface, (uint8_t*)packet, packet->txsize)) != ATCA_SUCCESS)
     eba:	787a      	ldrb	r2, [r7, #1]
     ebc:	0039      	movs	r1, r7
     ebe:	6870      	ldr	r0, [r6, #4]
     ec0:	4b17      	ldr	r3, [pc, #92]	; (f20 <atca_execute_command+0x8c>)
     ec2:	4798      	blx	r3
     ec4:	1e04      	subs	r4, r0, #0
     ec6:	d1f0      	bne.n	eaa <atca_execute_command+0x16>
        atca_delay_ms(execution_or_wait_time);
     ec8:	2001      	movs	r0, #1
     eca:	4b16      	ldr	r3, [pc, #88]	; (f24 <atca_execute_command+0x90>)
     ecc:	4798      	blx	r3
     ece:	4c16      	ldr	r4, [pc, #88]	; (f28 <atca_execute_command+0x94>)
            if ((status = atreceive(device->mIface, packet->data, &(packet->rxsize))) == ATCA_SUCCESS)
     ed0:	1dbb      	adds	r3, r7, #6
     ed2:	9301      	str	r3, [sp, #4]
     ed4:	4b15      	ldr	r3, [pc, #84]	; (f2c <atca_execute_command+0x98>)
     ed6:	4698      	mov	r8, r3
            atca_delay_ms(ATCA_POLLING_FREQUENCY_TIME_MSEC);
     ed8:	4d12      	ldr	r5, [pc, #72]	; (f24 <atca_execute_command+0x90>)
            if ((status = atreceive(device->mIface, packet->data, &(packet->rxsize))) == ATCA_SUCCESS)
     eda:	003a      	movs	r2, r7
     edc:	328a      	adds	r2, #138	; 0x8a
     ede:	9901      	ldr	r1, [sp, #4]
     ee0:	6870      	ldr	r0, [r6, #4]
     ee2:	47c0      	blx	r8
     ee4:	2800      	cmp	r0, #0
     ee6:	d004      	beq.n	ef2 <atca_execute_command+0x5e>
            atca_delay_ms(ATCA_POLLING_FREQUENCY_TIME_MSEC);
     ee8:	2002      	movs	r0, #2
     eea:	47a8      	blx	r5
     eec:	3c01      	subs	r4, #1
        while (max_delay_count-- > 0);
     eee:	2c00      	cmp	r4, #0
     ef0:	d1f3      	bne.n	eda <atca_execute_command+0x46>
        if (packet->rxsize < 4)
     ef2:	238a      	movs	r3, #138	; 0x8a
     ef4:	5afc      	ldrh	r4, [r7, r3]
     ef6:	2c03      	cmp	r4, #3
     ef8:	d804      	bhi.n	f04 <atca_execute_command+0x70>
                status = ATCA_RX_NO_RESPONSE;
     efa:	4260      	negs	r0, r4
     efc:	4160      	adcs	r0, r4
     efe:	30e6      	adds	r0, #230	; 0xe6
     f00:	0004      	movs	r4, r0
     f02:	e7d2      	b.n	eaa <atca_execute_command+0x16>
        if ((status = atCheckCrc(packet->data)) != ATCA_SUCCESS)
     f04:	9801      	ldr	r0, [sp, #4]
     f06:	4b0a      	ldr	r3, [pc, #40]	; (f30 <atca_execute_command+0x9c>)
     f08:	4798      	blx	r3
     f0a:	1e04      	subs	r4, r0, #0
     f0c:	d1cd      	bne.n	eaa <atca_execute_command+0x16>
        if ((status = isATCAError(packet->data)) != ATCA_SUCCESS)
     f0e:	9801      	ldr	r0, [sp, #4]
     f10:	4b08      	ldr	r3, [pc, #32]	; (f34 <atca_execute_command+0xa0>)
     f12:	4798      	blx	r3
     f14:	0004      	movs	r4, r0
     f16:	e7c8      	b.n	eaa <atca_execute_command+0x16>
     f18:	00000f49 	.word	0x00000f49
     f1c:	00000f51 	.word	0x00000f51
     f20:	00000f39 	.word	0x00000f39
     f24:	00001e61 	.word	0x00001e61
     f28:	000003e9 	.word	0x000003e9
     f2c:	00000f41 	.word	0x00000f41
     f30:	00000d61 	.word	0x00000d61
     f34:	00000d9d 	.word	0x00000d9d

00000f38 <atsend>:
 * \param[in] txdata    pointer to the data to be transmitted to the device
 * \param[in] txlength  The total number of bytes to be transmitted to the device
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atsend(ATCAIface ca_iface, uint8_t *txdata, int txlength)
{
     f38:	b510      	push	{r4, lr}
    return ca_iface->atsend(ca_iface, txdata, txlength);
     f3a:	6903      	ldr	r3, [r0, #16]
     f3c:	4798      	blx	r3
}
     f3e:	bd10      	pop	{r4, pc}

00000f40 <atreceive>:
 * \param[in] rxdata   pointer to the data to be stored from device
 * \param[in] rxlength  pointer to holds the number of bytes to be received from device.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atreceive(ATCAIface ca_iface, uint8_t *rxdata, uint16_t *rxlength)
{
     f40:	b510      	push	{r4, lr}
    return ca_iface->atreceive(ca_iface, rxdata, rxlength);
     f42:	6943      	ldr	r3, [r0, #20]
     f44:	4798      	blx	r3
}
     f46:	bd10      	pop	{r4, pc}

00000f48 <atwake>:
 *  User should not call this function directly,instead  use atcab_wakeup() function
 * \param[in] ca_iface  points to the logical configuration for the interface
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atwake(ATCAIface ca_iface)
{
     f48:	b510      	push	{r4, lr}
    return ca_iface->atwake(ca_iface);
     f4a:	6983      	ldr	r3, [r0, #24]
     f4c:	4798      	blx	r3
}
     f4e:	bd10      	pop	{r4, pc}

00000f50 <atidle>:
 *  User should not call this function directly,instead  use atcab_idle() function
 * \param[in] ca_iface  points to the logical configuration for the interface
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atidle(ATCAIface ca_iface)
{
     f50:	b510      	push	{r4, lr}
    ATCA_STATUS status;

    status = ca_iface->atidle(ca_iface);
     f52:	69c3      	ldr	r3, [r0, #28]
     f54:	4798      	blx	r3
     f56:	0004      	movs	r4, r0
    atca_delay_ms(1);
     f58:	2001      	movs	r0, #1
     f5a:	4b02      	ldr	r3, [pc, #8]	; (f64 <atidle+0x14>)
     f5c:	4798      	blx	r3
    return status;
}
     f5e:	0020      	movs	r0, r4
     f60:	bd10      	pop	{r4, pc}
     f62:	46c0      	nop			; (mov r8, r8)
     f64:	00001e61 	.word	0x00001e61

00000f68 <atgetifacecfg>:
 * \param[in] ca_iface  points to the logical configuration for the interface
 * \return returns the pointer to ATCAIfaceCfg.
 */
ATCAIfaceCfg * atgetifacecfg(ATCAIface ca_iface)
{
    return ca_iface->mIfaceCFG;
     f68:	6840      	ldr	r0, [r0, #4]
}
     f6a:	4770      	bx	lr

00000f6c <deleteATCAIface>:

/** \brief destructor for ATCAIface objects
 * \param[in] ca_iface  points to the logical configuration for the interface
 */
void deleteATCAIface(ATCAIface *ca_iface) // destructor
{
     f6c:	b510      	push	{r4, lr}
     f6e:	0004      	movs	r4, r0
    if (*ca_iface)
     f70:	6803      	ldr	r3, [r0, #0]
     f72:	2b00      	cmp	r3, #0
     f74:	d006      	beq.n	f84 <deleteATCAIface+0x18>
    {
        hal_iface_release( (*ca_iface)->mType, (*ca_iface)->hal_data);  // let HAL clean up and disable physical level interface if ref count is 0
     f76:	6a59      	ldr	r1, [r3, #36]	; 0x24
     f78:	7818      	ldrb	r0, [r3, #0]
     f7a:	4b04      	ldr	r3, [pc, #16]	; (f8c <deleteATCAIface+0x20>)
     f7c:	4798      	blx	r3
        free((void*)*ca_iface);
     f7e:	6820      	ldr	r0, [r4, #0]
     f80:	4b03      	ldr	r3, [pc, #12]	; (f90 <deleteATCAIface+0x24>)
     f82:	4798      	blx	r3
    }

    *ca_iface = NULL;
     f84:	2300      	movs	r3, #0
     f86:	6023      	str	r3, [r4, #0]
}
     f88:	bd10      	pop	{r4, pc}
     f8a:	46c0      	nop			; (mov r8, r8)
     f8c:	00001891 	.word	0x00001891
     f90:	000057b5 	.word	0x000057b5

00000f94 <_atinit>:

ATCA_STATUS _atinit(ATCAIface ca_iface, ATCAHAL_t *hal)
{
     f94:	b570      	push	{r4, r5, r6, lr}
     f96:	0004      	movs	r4, r0
     f98:	000d      	movs	r5, r1
    // get method mapping to HAL methods for this interface
    hal_iface_init(ca_iface->mIfaceCFG, hal);
     f9a:	6840      	ldr	r0, [r0, #4]
     f9c:	4b09      	ldr	r3, [pc, #36]	; (fc4 <_atinit+0x30>)
     f9e:	4798      	blx	r3
    ca_iface->atinit     = hal->halinit;
     fa0:	682b      	ldr	r3, [r5, #0]
     fa2:	60a3      	str	r3, [r4, #8]
    ca_iface->atpostinit = hal->halpostinit;
     fa4:	686b      	ldr	r3, [r5, #4]
     fa6:	60e3      	str	r3, [r4, #12]
    ca_iface->atsend     = hal->halsend;
     fa8:	68ab      	ldr	r3, [r5, #8]
     faa:	6123      	str	r3, [r4, #16]
    ca_iface->atreceive  = hal->halreceive;
     fac:	68eb      	ldr	r3, [r5, #12]
     fae:	6163      	str	r3, [r4, #20]
    ca_iface->atwake     = hal->halwake;
     fb0:	692b      	ldr	r3, [r5, #16]
     fb2:	61a3      	str	r3, [r4, #24]
    ca_iface->atsleep    = hal->halsleep;
     fb4:	69ab      	ldr	r3, [r5, #24]
     fb6:	6223      	str	r3, [r4, #32]
    ca_iface->atidle     = hal->halidle;
     fb8:	696b      	ldr	r3, [r5, #20]
     fba:	61e3      	str	r3, [r4, #28]
    ca_iface->hal_data   = hal->hal_data;
     fbc:	6a2b      	ldr	r3, [r5, #32]
     fbe:	6263      	str	r3, [r4, #36]	; 0x24

    return ATCA_SUCCESS;
}
     fc0:	2000      	movs	r0, #0
     fc2:	bd70      	pop	{r4, r5, r6, pc}
     fc4:	0000183d 	.word	0x0000183d

00000fc8 <atinit>:
{
     fc8:	b510      	push	{r4, lr}
     fca:	b08a      	sub	sp, #40	; 0x28
     fcc:	0004      	movs	r4, r0
    _atinit(ca_iface, &hal);
     fce:	a901      	add	r1, sp, #4
     fd0:	4b07      	ldr	r3, [pc, #28]	; (ff0 <atinit+0x28>)
     fd2:	4798      	blx	r3
    status = ca_iface->atinit(&hal, ca_iface->mIfaceCFG);
     fd4:	6861      	ldr	r1, [r4, #4]
     fd6:	a801      	add	r0, sp, #4
     fd8:	68a3      	ldr	r3, [r4, #8]
     fda:	4798      	blx	r3
    if (status == ATCA_SUCCESS)
     fdc:	2800      	cmp	r0, #0
     fde:	d001      	beq.n	fe4 <atinit+0x1c>
}
     fe0:	b00a      	add	sp, #40	; 0x28
     fe2:	bd10      	pop	{r4, pc}
        ca_iface->hal_data = hal.hal_data;
     fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
     fe6:	6263      	str	r3, [r4, #36]	; 0x24
        status = ca_iface->atpostinit(ca_iface);
     fe8:	68e3      	ldr	r3, [r4, #12]
     fea:	0020      	movs	r0, r4
     fec:	4798      	blx	r3
     fee:	e7f7      	b.n	fe0 <atinit+0x18>
     ff0:	00000f95 	.word	0x00000f95

00000ff4 <newATCAIface>:
{
     ff4:	b570      	push	{r4, r5, r6, lr}
     ff6:	0005      	movs	r5, r0
    ca_iface = (ATCAIface)malloc(sizeof(struct atca_iface));
     ff8:	2028      	movs	r0, #40	; 0x28
     ffa:	4b08      	ldr	r3, [pc, #32]	; (101c <newATCAIface+0x28>)
     ffc:	4798      	blx	r3
     ffe:	0004      	movs	r4, r0
    ca_iface->mType = cfg->iface_type;
    1000:	782b      	ldrb	r3, [r5, #0]
    1002:	7003      	strb	r3, [r0, #0]
    ca_iface->mIfaceCFG = cfg;
    1004:	6045      	str	r5, [r0, #4]
    if (atinit(ca_iface) != ATCA_SUCCESS)
    1006:	4b06      	ldr	r3, [pc, #24]	; (1020 <newATCAIface+0x2c>)
    1008:	4798      	blx	r3
    100a:	2800      	cmp	r0, #0
    100c:	d101      	bne.n	1012 <newATCAIface+0x1e>
}
    100e:	0020      	movs	r0, r4
    1010:	bd70      	pop	{r4, r5, r6, pc}
        free(ca_iface);
    1012:	0020      	movs	r0, r4
    1014:	4b03      	ldr	r3, [pc, #12]	; (1024 <newATCAIface+0x30>)
    1016:	4798      	blx	r3
        ca_iface = NULL;
    1018:	2400      	movs	r4, #0
    return ca_iface;
    101a:	e7f8      	b.n	100e <newATCAIface+0x1a>
    101c:	000057a1 	.word	0x000057a1
    1020:	00000fc9 	.word	0x00000fc9
    1024:	000057b5 	.word	0x000057b5

00001028 <atcab_release>:
/** \brief release (free) the global ATCADevice instance.
 *  This must be called in order to release or free up the interface.
 *  \return Returns ATCA_SUCCESS .
 */
ATCA_STATUS atcab_release(void)
{
    1028:	b510      	push	{r4, lr}
    deleteATCADevice(&_gDevice);
    102a:	4802      	ldr	r0, [pc, #8]	; (1034 <atcab_release+0xc>)
    102c:	4b02      	ldr	r3, [pc, #8]	; (1038 <atcab_release+0x10>)
    102e:	4798      	blx	r3
    return ATCA_SUCCESS;
}
    1030:	2000      	movs	r0, #0
    1032:	bd10      	pop	{r4, pc}
    1034:	200000f0 	.word	0x200000f0
    1038:	00000e65 	.word	0x00000e65

0000103c <atcab_init>:
{
    103c:	b510      	push	{r4, lr}
    103e:	b082      	sub	sp, #8
    1040:	0004      	movs	r4, r0
    if (_gDevice)       // if there's already a device created, release it
    1042:	4b18      	ldr	r3, [pc, #96]	; (10a4 <atcab_init+0x68>)
    1044:	681b      	ldr	r3, [r3, #0]
    1046:	2b00      	cmp	r3, #0
    1048:	d001      	beq.n	104e <atcab_init+0x12>
        atcab_release();
    104a:	4b17      	ldr	r3, [pc, #92]	; (10a8 <atcab_init+0x6c>)
    104c:	4798      	blx	r3
    _gDevice = newATCADevice(cfg);
    104e:	0020      	movs	r0, r4
    1050:	4b16      	ldr	r3, [pc, #88]	; (10ac <atcab_init+0x70>)
    1052:	4798      	blx	r3
    1054:	4b13      	ldr	r3, [pc, #76]	; (10a4 <atcab_init+0x68>)
    1056:	6018      	str	r0, [r3, #0]
    if ((_gDevice == NULL) || (_gDevice->mIface == NULL) || (_gDevice->mCommands == NULL))
    1058:	2800      	cmp	r0, #0
    105a:	d01c      	beq.n	1096 <atcab_init+0x5a>
    105c:	6843      	ldr	r3, [r0, #4]
    105e:	2b00      	cmp	r3, #0
    1060:	d01b      	beq.n	109a <atcab_init+0x5e>
    1062:	6803      	ldr	r3, [r0, #0]
    1064:	2b00      	cmp	r3, #0
    1066:	d01a      	beq.n	109e <atcab_init+0x62>
    if (cfg->devtype == ATECC608A)
    1068:	7862      	ldrb	r2, [r4, #1]
    return ATCA_SUCCESS;
    106a:	2000      	movs	r0, #0
    if (cfg->devtype == ATECC608A)
    106c:	2a04      	cmp	r2, #4
    106e:	d001      	beq.n	1074 <atcab_init+0x38>
}
    1070:	b002      	add	sp, #8
    1072:	bd10      	pop	{r4, pc}
        if ((status = atcab_read_bytes_zone(ATCA_ZONE_CONFIG, 0, ATCA_CHIPMODE_OFFSET, &_gDevice->mCommands->clock_divider, 1)) != ATCA_SUCCESS)
    1074:	3301      	adds	r3, #1
    1076:	3a03      	subs	r2, #3
    1078:	9200      	str	r2, [sp, #0]
    107a:	3212      	adds	r2, #18
    107c:	2100      	movs	r1, #0
    107e:	4c0c      	ldr	r4, [pc, #48]	; (10b0 <atcab_init+0x74>)
    1080:	47a0      	blx	r4
    1082:	2800      	cmp	r0, #0
    1084:	d1f4      	bne.n	1070 <atcab_init+0x34>
        _gDevice->mCommands->clock_divider &= ATCA_CHIPMODE_CLOCK_DIV_MASK;
    1086:	4b07      	ldr	r3, [pc, #28]	; (10a4 <atcab_init+0x68>)
    1088:	681b      	ldr	r3, [r3, #0]
    108a:	681a      	ldr	r2, [r3, #0]
    108c:	7853      	ldrb	r3, [r2, #1]
    108e:	2107      	movs	r1, #7
    1090:	438b      	bics	r3, r1
    1092:	7053      	strb	r3, [r2, #1]
    1094:	e7ec      	b.n	1070 <atcab_init+0x34>
        return ATCA_GEN_FAIL;  // Device creation failed
    1096:	20e1      	movs	r0, #225	; 0xe1
    1098:	e7ea      	b.n	1070 <atcab_init+0x34>
    109a:	20e1      	movs	r0, #225	; 0xe1
    109c:	e7e8      	b.n	1070 <atcab_init+0x34>
    109e:	20e1      	movs	r0, #225	; 0xe1
    10a0:	e7e6      	b.n	1070 <atcab_init+0x34>
    10a2:	46c0      	nop			; (mov r8, r8)
    10a4:	200000f0 	.word	0x200000f0
    10a8:	00001029 	.word	0x00001029
    10ac:	00000e19 	.word	0x00000e19
    10b0:	00001449 	.word	0x00001449

000010b4 <atcab_wakeup>:

/** \brief wakeup the CryptoAuth device
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_wakeup(void)
{
    10b4:	b510      	push	{r4, lr}
    if (_gDevice == NULL)
    10b6:	4b04      	ldr	r3, [pc, #16]	; (10c8 <atcab_wakeup+0x14>)
    10b8:	681b      	ldr	r3, [r3, #0]
    {
        return ATCA_GEN_FAIL;
    10ba:	20e1      	movs	r0, #225	; 0xe1
    if (_gDevice == NULL)
    10bc:	2b00      	cmp	r3, #0
    10be:	d002      	beq.n	10c6 <atcab_wakeup+0x12>
    }

    return atwake(_gDevice->mIface);
    10c0:	6858      	ldr	r0, [r3, #4]
    10c2:	4b02      	ldr	r3, [pc, #8]	; (10cc <atcab_wakeup+0x18>)
    10c4:	4798      	blx	r3
}
    10c6:	bd10      	pop	{r4, pc}
    10c8:	200000f0 	.word	0x200000f0
    10cc:	00000f49 	.word	0x00000f49

000010d0 <atcab_get_addr>:
 *  \param[in] offset Offset Number within the block of data or configuration or OTP zone.
 *  \param[out] addr  Pointer to the address of data or configuration or OTP zone.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_get_addr(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint16_t* addr)
{
    10d0:	b510      	push	{r4, lr}
    ATCA_STATUS status = ATCA_SUCCESS;
    uint8_t mem_zone = zone & 0x03;

    if (addr == NULL)
    10d2:	9c02      	ldr	r4, [sp, #8]
    10d4:	2c00      	cmp	r4, #0
    10d6:	d008      	beq.n	10ea <atcab_get_addr+0x1a>
    uint8_t mem_zone = zone & 0x03;
    10d8:	2403      	movs	r4, #3
    10da:	4020      	ands	r0, r4
    {
        return ATCA_BAD_PARAM;
    }
    if ((mem_zone != ATCA_ZONE_CONFIG) && (mem_zone != ATCA_ZONE_DATA) && (mem_zone != ATCA_ZONE_OTP))
    10dc:	d007      	beq.n	10ee <atcab_get_addr+0x1e>
    10de:	2802      	cmp	r0, #2
    10e0:	d00d      	beq.n	10fe <atcab_get_addr+0x2e>
    10e2:	2801      	cmp	r0, #1
    10e4:	d003      	beq.n	10ee <atcab_get_addr+0x1e>
    {
        return ATCA_BAD_PARAM;
    10e6:	20e2      	movs	r0, #226	; 0xe2
    10e8:	e012      	b.n	1110 <atcab_get_addr+0x40>
        return ATCA_BAD_PARAM;
    10ea:	20e2      	movs	r0, #226	; 0xe2
    10ec:	e010      	b.n	1110 <atcab_get_addr+0x40>
        *addr = 0;
        // Mask the offset
        offset = offset & (uint8_t)0x07;
        if ((mem_zone == ATCA_ZONE_CONFIG) || (mem_zone == ATCA_ZONE_OTP))
        {
            *addr = block << 3;
    10ee:	00d2      	lsls	r2, r2, #3
            *addr |= offset;
    10f0:	2007      	movs	r0, #7
    10f2:	4003      	ands	r3, r0
    10f4:	431a      	orrs	r2, r3
    10f6:	9b02      	ldr	r3, [sp, #8]
    10f8:	801a      	strh	r2, [r3, #0]
            *addr |= block << 8;
        }
    }
    while (0);

    return status;
    10fa:	2000      	movs	r0, #0
    10fc:	e008      	b.n	1110 <atcab_get_addr+0x40>
            *addr = slot << 3;
    10fe:	00c9      	lsls	r1, r1, #3
            *addr  |= offset;
    1100:	2007      	movs	r0, #7
    1102:	4003      	ands	r3, r0
    1104:	430b      	orrs	r3, r1
            *addr |= block << 8;
    1106:	0212      	lsls	r2, r2, #8
    1108:	431a      	orrs	r2, r3
    110a:	9b02      	ldr	r3, [sp, #8]
    110c:	801a      	strh	r2, [r3, #0]
    return status;
    110e:	2000      	movs	r0, #0
}
    1110:	bd10      	pop	{r4, pc}
	...

00001114 <atcab_get_zone_size>:
 */
ATCA_STATUS atcab_get_zone_size(uint8_t zone, uint16_t slot, size_t* size)
{
    ATCA_STATUS status = ATCA_SUCCESS;

    if (size == NULL)
    1114:	2a00      	cmp	r2, #0
    1116:	d03e      	beq.n	1196 <atcab_get_zone_size+0x82>
    {
        return ATCA_BAD_PARAM;
    }

    if (_gDevice->mIface->mIfaceCFG->devtype == ATSHA204A)
    1118:	4b20      	ldr	r3, [pc, #128]	; (119c <atcab_get_zone_size+0x88>)
    111a:	681b      	ldr	r3, [r3, #0]
    111c:	685b      	ldr	r3, [r3, #4]
    111e:	685b      	ldr	r3, [r3, #4]
    1120:	785b      	ldrb	r3, [r3, #1]
    1122:	2b01      	cmp	r3, #1
    1124:	d007      	beq.n	1136 <atcab_get_zone_size+0x22>
        default: status = ATCA_BAD_PARAM; break;
        }
    }
    else
    {
        switch (zone)
    1126:	2801      	cmp	r0, #1
    1128:	d01d      	beq.n	1166 <atcab_get_zone_size+0x52>
    112a:	2800      	cmp	r0, #0
    112c:	d017      	beq.n	115e <atcab_get_zone_size+0x4a>
    112e:	2802      	cmp	r0, #2
    1130:	d01d      	beq.n	116e <atcab_get_zone_size+0x5a>
            else
            {
                status = ATCA_BAD_PARAM;
            }
            break;
        default: status = ATCA_BAD_PARAM; break;
    1132:	20e2      	movs	r0, #226	; 0xe2
    1134:	e030      	b.n	1198 <atcab_get_zone_size+0x84>
        switch (zone)
    1136:	2801      	cmp	r0, #1
    1138:	d009      	beq.n	114e <atcab_get_zone_size+0x3a>
    113a:	2800      	cmp	r0, #0
    113c:	d003      	beq.n	1146 <atcab_get_zone_size+0x32>
    113e:	2802      	cmp	r0, #2
    1140:	d009      	beq.n	1156 <atcab_get_zone_size+0x42>
        default: status = ATCA_BAD_PARAM; break;
    1142:	20e2      	movs	r0, #226	; 0xe2
    1144:	e028      	b.n	1198 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_CONFIG: *size = 88; break;
    1146:	2358      	movs	r3, #88	; 0x58
    1148:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    114a:	2000      	movs	r0, #0
        case ATCA_ZONE_CONFIG: *size = 88; break;
    114c:	e024      	b.n	1198 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_OTP:    *size = 64; break;
    114e:	2340      	movs	r3, #64	; 0x40
    1150:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    1152:	2000      	movs	r0, #0
        case ATCA_ZONE_OTP:    *size = 64; break;
    1154:	e020      	b.n	1198 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_DATA:   *size = 32; break;
    1156:	2320      	movs	r3, #32
    1158:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    115a:	2000      	movs	r0, #0
        case ATCA_ZONE_DATA:   *size = 32; break;
    115c:	e01c      	b.n	1198 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_CONFIG: *size = 128; break;
    115e:	2380      	movs	r3, #128	; 0x80
    1160:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    1162:	2000      	movs	r0, #0
        case ATCA_ZONE_CONFIG: *size = 128; break;
    1164:	e018      	b.n	1198 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_OTP:    *size = 64; break;
    1166:	2340      	movs	r3, #64	; 0x40
    1168:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    116a:	2000      	movs	r0, #0
        case ATCA_ZONE_OTP:    *size = 64; break;
    116c:	e014      	b.n	1198 <atcab_get_zone_size+0x84>
            if (slot < 8)
    116e:	2907      	cmp	r1, #7
    1170:	d908      	bls.n	1184 <atcab_get_zone_size+0x70>
            else if (slot == 8)
    1172:	2908      	cmp	r1, #8
    1174:	d00a      	beq.n	118c <atcab_get_zone_size+0x78>
                status = ATCA_BAD_PARAM;
    1176:	20e2      	movs	r0, #226	; 0xe2
            else if (slot < 16)
    1178:	290f      	cmp	r1, #15
    117a:	d80d      	bhi.n	1198 <atcab_get_zone_size+0x84>
                *size = 72;
    117c:	2348      	movs	r3, #72	; 0x48
    117e:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    1180:	2000      	movs	r0, #0
    1182:	e009      	b.n	1198 <atcab_get_zone_size+0x84>
                *size = 36;
    1184:	2324      	movs	r3, #36	; 0x24
    1186:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    1188:	2000      	movs	r0, #0
    118a:	e005      	b.n	1198 <atcab_get_zone_size+0x84>
                *size = 416;
    118c:	23d0      	movs	r3, #208	; 0xd0
    118e:	005b      	lsls	r3, r3, #1
    1190:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    1192:	2000      	movs	r0, #0
    1194:	e000      	b.n	1198 <atcab_get_zone_size+0x84>
        return ATCA_BAD_PARAM;
    1196:	20e2      	movs	r0, #226	; 0xe2
        }
    }

    return status;
}
    1198:	4770      	bx	lr
    119a:	46c0      	nop			; (mov r8, r8)
    119c:	200000f0 	.word	0x200000f0

000011a0 <atcab_genkey_base>:
 *                         isn't required.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_genkey_base(uint8_t mode, uint16_t key_id, const uint8_t* other_data, uint8_t* public_key)
{
    11a0:	b570      	push	{r4, r5, r6, lr}
    11a2:	b0a4      	sub	sp, #144	; 0x90
    11a4:	0014      	movs	r4, r2
    11a6:	001d      	movs	r5, r3
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
    11a8:	4b15      	ldr	r3, [pc, #84]	; (1200 <atcab_genkey_base+0x60>)
    11aa:	681b      	ldr	r3, [r3, #0]
    11ac:	681e      	ldr	r6, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;

    do
    {
        // Build GenKey command
        packet.param1 = mode;
    11ae:	ab01      	add	r3, sp, #4
    11b0:	70d8      	strb	r0, [r3, #3]
        packet.param2 = key_id;
    11b2:	8099      	strh	r1, [r3, #4]
        if (other_data)
    11b4:	2a00      	cmp	r2, #0
    11b6:	d005      	beq.n	11c4 <atcab_genkey_base+0x24>
        {
            memcpy(packet.data, other_data, GENKEY_OTHER_DATA_SIZE);
    11b8:	2203      	movs	r2, #3
    11ba:	0021      	movs	r1, r4
    11bc:	200a      	movs	r0, #10
    11be:	4468      	add	r0, sp
    11c0:	4b10      	ldr	r3, [pc, #64]	; (1204 <atcab_genkey_base+0x64>)
    11c2:	4798      	blx	r3
        }

        if ((status = atGenKey(ca_cmd, &packet)) != ATCA_SUCCESS)
    11c4:	a901      	add	r1, sp, #4
    11c6:	0030      	movs	r0, r6
    11c8:	4b0f      	ldr	r3, [pc, #60]	; (1208 <atcab_genkey_base+0x68>)
    11ca:	4798      	blx	r3
    11cc:	1e04      	subs	r4, r0, #0
    11ce:	d002      	beq.n	11d6 <atcab_genkey_base+0x36>
        }
    }
    while (0);

    return status;
}
    11d0:	0020      	movs	r0, r4
    11d2:	b024      	add	sp, #144	; 0x90
    11d4:	bd70      	pop	{r4, r5, r6, pc}
        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
    11d6:	4b0a      	ldr	r3, [pc, #40]	; (1200 <atcab_genkey_base+0x60>)
    11d8:	6819      	ldr	r1, [r3, #0]
    11da:	a801      	add	r0, sp, #4
    11dc:	4b0b      	ldr	r3, [pc, #44]	; (120c <atcab_genkey_base+0x6c>)
    11de:	4798      	blx	r3
    11e0:	1e04      	subs	r4, r0, #0
    11e2:	d1f5      	bne.n	11d0 <atcab_genkey_base+0x30>
        if (public_key && packet.data[ATCA_COUNT_IDX] > 4)
    11e4:	2d00      	cmp	r5, #0
    11e6:	d0f3      	beq.n	11d0 <atcab_genkey_base+0x30>
    11e8:	ab01      	add	r3, sp, #4
    11ea:	799a      	ldrb	r2, [r3, #6]
    11ec:	2a04      	cmp	r2, #4
    11ee:	d9ef      	bls.n	11d0 <atcab_genkey_base+0x30>
            memcpy(public_key, &packet.data[ATCA_RSP_DATA_IDX], packet.data[ATCA_COUNT_IDX] - 3);
    11f0:	3a03      	subs	r2, #3
    11f2:	210b      	movs	r1, #11
    11f4:	4469      	add	r1, sp
    11f6:	0028      	movs	r0, r5
    11f8:	4b02      	ldr	r3, [pc, #8]	; (1204 <atcab_genkey_base+0x64>)
    11fa:	4798      	blx	r3
    11fc:	e7e8      	b.n	11d0 <atcab_genkey_base+0x30>
    11fe:	46c0      	nop			; (mov r8, r8)
    1200:	200000f0 	.word	0x200000f0
    1204:	000057e7 	.word	0x000057e7
    1208:	00000c51 	.word	0x00000c51
    120c:	00000e95 	.word	0x00000e95

00001210 <atcab_genkey>:
 *                         isn't required.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_genkey(uint16_t key_id, uint8_t *public_key)
{
    1210:	b510      	push	{r4, lr}
    1212:	000b      	movs	r3, r1
    return atcab_genkey_base(GENKEY_MODE_PRIVATE, key_id, NULL, public_key);
    1214:	2200      	movs	r2, #0
    1216:	0001      	movs	r1, r0
    1218:	2004      	movs	r0, #4
    121a:	4c01      	ldr	r4, [pc, #4]	; (1220 <atcab_genkey+0x10>)
    121c:	47a0      	blx	r4
}
    121e:	bd10      	pop	{r4, pc}
    1220:	000011a1 	.word	0x000011a1

00001224 <atcab_lock>:
 *                            slot locks or when mode bit 7 is set.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_lock(uint8_t mode, uint16_t summary_crc)
{
    1224:	b5f0      	push	{r4, r5, r6, r7, lr}
    1226:	b0a5      	sub	sp, #148	; 0x94
    1228:	0007      	movs	r7, r0
    122a:	000e      	movs	r6, r1
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
    122c:	4b0c      	ldr	r3, [pc, #48]	; (1260 <atcab_lock+0x3c>)
    122e:	681b      	ldr	r3, [r3, #0]
    1230:	681d      	ldr	r5, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;

    // build command for lock zone and send
    memset(&packet, 0, sizeof(packet));
    1232:	ac01      	add	r4, sp, #4
    1234:	228c      	movs	r2, #140	; 0x8c
    1236:	2100      	movs	r1, #0
    1238:	0020      	movs	r0, r4
    123a:	4b0a      	ldr	r3, [pc, #40]	; (1264 <atcab_lock+0x40>)
    123c:	4798      	blx	r3
    packet.param1 = mode;
    123e:	70e7      	strb	r7, [r4, #3]
    packet.param2 = summary_crc;
    1240:	80a6      	strh	r6, [r4, #4]

    do
    {
        if ((status = atLock(ca_cmd, &packet)) != ATCA_SUCCESS)
    1242:	0021      	movs	r1, r4
    1244:	0028      	movs	r0, r5
    1246:	4b08      	ldr	r3, [pc, #32]	; (1268 <atcab_lock+0x44>)
    1248:	4798      	blx	r3
    124a:	2800      	cmp	r0, #0
    124c:	d001      	beq.n	1252 <atcab_lock+0x2e>

    }
    while (0);

    return status;
}
    124e:	b025      	add	sp, #148	; 0x94
    1250:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
    1252:	4b03      	ldr	r3, [pc, #12]	; (1260 <atcab_lock+0x3c>)
    1254:	6819      	ldr	r1, [r3, #0]
    1256:	a801      	add	r0, sp, #4
    1258:	4b04      	ldr	r3, [pc, #16]	; (126c <atcab_lock+0x48>)
    125a:	4798      	blx	r3
    125c:	e7f7      	b.n	124e <atcab_lock+0x2a>
    125e:	46c0      	nop			; (mov r8, r8)
    1260:	200000f0 	.word	0x200000f0
    1264:	000057f9 	.word	0x000057f9
    1268:	00000c81 	.word	0x00000c81
    126c:	00000e95 	.word	0x00000e95

00001270 <atcab_lock_config_zone>:
/** \brief Unconditionally (no CRC required) lock the config zone.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_lock_config_zone(void)
{
    1270:	b510      	push	{r4, lr}
    return atcab_lock(LOCK_ZONE_NO_CRC | LOCK_ZONE_CONFIG, 0);
    1272:	2100      	movs	r1, #0
    1274:	2080      	movs	r0, #128	; 0x80
    1276:	4b01      	ldr	r3, [pc, #4]	; (127c <atcab_lock_config_zone+0xc>)
    1278:	4798      	blx	r3
}
    127a:	bd10      	pop	{r4, pc}
    127c:	00001225 	.word	0x00001225

00001280 <atcab_lock_data_zone>:
 *	ConfigZone must be locked and DataZone must be unlocked for the zone to be successfully locked.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_lock_data_zone(void)
{
    1280:	b510      	push	{r4, lr}
    return atcab_lock(LOCK_ZONE_NO_CRC | LOCK_ZONE_DATA, 0);
    1282:	2100      	movs	r1, #0
    1284:	2081      	movs	r0, #129	; 0x81
    1286:	4b01      	ldr	r3, [pc, #4]	; (128c <atcab_lock_data_zone+0xc>)
    1288:	4798      	blx	r3
}
    128a:	bd10      	pop	{r4, pc}
    128c:	00001225 	.word	0x00001225

00001290 <atcab_random>:
 * \param[out] rand_out  32 bytes of random data is returned here.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_random(uint8_t *rand_out)
{
    1290:	b530      	push	{r4, r5, lr}
    1292:	b0a5      	sub	sp, #148	; 0x94
    1294:	0005      	movs	r5, r0
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
    1296:	4b15      	ldr	r3, [pc, #84]	; (12ec <atcab_random+0x5c>)
    1298:	681b      	ldr	r3, [r3, #0]
    129a:	6818      	ldr	r0, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;

    do
    {
        // build an random command
        packet.param1 = RANDOM_SEED_UPDATE;
    129c:	a901      	add	r1, sp, #4
    129e:	2300      	movs	r3, #0
    12a0:	70cb      	strb	r3, [r1, #3]
        packet.param2 = 0x0000;
    12a2:	808b      	strh	r3, [r1, #4]

        if ((status = atRandom(ca_cmd, &packet)) != ATCA_SUCCESS)
    12a4:	4b12      	ldr	r3, [pc, #72]	; (12f0 <atcab_random+0x60>)
    12a6:	4798      	blx	r3
    12a8:	1e04      	subs	r4, r0, #0
    12aa:	d002      	beq.n	12b2 <atcab_random+0x22>
    }
    while (0);


    return status;
}
    12ac:	0020      	movs	r0, r4
    12ae:	b025      	add	sp, #148	; 0x94
    12b0:	bd30      	pop	{r4, r5, pc}
        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
    12b2:	4b0e      	ldr	r3, [pc, #56]	; (12ec <atcab_random+0x5c>)
    12b4:	6819      	ldr	r1, [r3, #0]
    12b6:	a801      	add	r0, sp, #4
    12b8:	4b0e      	ldr	r3, [pc, #56]	; (12f4 <atcab_random+0x64>)
    12ba:	4798      	blx	r3
    12bc:	1e04      	subs	r4, r0, #0
    12be:	d1f5      	bne.n	12ac <atcab_random+0x1c>
        if (packet.rxsize < packet.data[ATCA_COUNT_IDX] || packet.data[ATCA_COUNT_IDX] != RANDOM_RSP_SIZE)
    12c0:	ab01      	add	r3, sp, #4
    12c2:	799a      	ldrb	r2, [r3, #6]
    12c4:	218a      	movs	r1, #138	; 0x8a
    12c6:	5a5b      	ldrh	r3, [r3, r1]
    12c8:	4293      	cmp	r3, r2
    12ca:	d201      	bcs.n	12d0 <atcab_random+0x40>
            status = ATCA_RX_FAIL;
    12cc:	24e6      	movs	r4, #230	; 0xe6
    12ce:	e7ed      	b.n	12ac <atcab_random+0x1c>
        if (packet.rxsize < packet.data[ATCA_COUNT_IDX] || packet.data[ATCA_COUNT_IDX] != RANDOM_RSP_SIZE)
    12d0:	2a23      	cmp	r2, #35	; 0x23
    12d2:	d001      	beq.n	12d8 <atcab_random+0x48>
            status = ATCA_RX_FAIL;
    12d4:	24e6      	movs	r4, #230	; 0xe6
    12d6:	e7e9      	b.n	12ac <atcab_random+0x1c>
        if (rand_out)
    12d8:	2d00      	cmp	r5, #0
    12da:	d0e7      	beq.n	12ac <atcab_random+0x1c>
            memcpy(rand_out, &packet.data[ATCA_RSP_DATA_IDX], RANDOM_NUM_SIZE);
    12dc:	3a03      	subs	r2, #3
    12de:	397f      	subs	r1, #127	; 0x7f
    12e0:	4469      	add	r1, sp
    12e2:	0028      	movs	r0, r5
    12e4:	4b04      	ldr	r3, [pc, #16]	; (12f8 <atcab_random+0x68>)
    12e6:	4798      	blx	r3
    12e8:	e7e0      	b.n	12ac <atcab_random+0x1c>
    12ea:	46c0      	nop			; (mov r8, r8)
    12ec:	200000f0 	.word	0x200000f0
    12f0:	00000ca1 	.word	0x00000ca1
    12f4:	00000e95 	.word	0x00000e95
    12f8:	000057e7 	.word	0x000057e7

000012fc <atcab_read_zone>:
 *  \param[in]  len     Length of the data to be read. Must be either 4 or 32.
 *
 *  returns ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_zone(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint8_t *data, uint8_t len)
{
    12fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    12fe:	b0a9      	sub	sp, #164	; 0xa4
    1300:	9003      	str	r0, [sp, #12]
    1302:	a82e      	add	r0, sp, #184	; 0xb8
    1304:	c880      	ldmia	r0!, {r7}
    1306:	7805      	ldrb	r5, [r0, #0]
    uint16_t addr;

    do
    {
        // Check the input parameters
        if (data == NULL)
    1308:	2f00      	cmp	r7, #0
    130a:	d00a      	beq.n	1322 <atcab_read_zone+0x26>
    ATCACommand ca_cmd = _gDevice->mCommands;
    130c:	4822      	ldr	r0, [pc, #136]	; (1398 <atcab_read_zone+0x9c>)
    130e:	6800      	ldr	r0, [r0, #0]
    1310:	6806      	ldr	r6, [r0, #0]
        {
            return ATCA_BAD_PARAM;
        }

        if (len != 4 && len != 32)
    1312:	2d04      	cmp	r5, #4
    1314:	d016      	beq.n	1344 <atcab_read_zone+0x48>
        {
            return ATCA_BAD_PARAM;
    1316:	24e2      	movs	r4, #226	; 0xe2
        if (len != 4 && len != 32)
    1318:	2d20      	cmp	r5, #32
    131a:	d004      	beq.n	1326 <atcab_read_zone+0x2a>
        memcpy(data, &packet.data[1], len);
    }
    while (0);

    return status;
}
    131c:	0020      	movs	r0, r4
    131e:	b029      	add	sp, #164	; 0xa4
    1320:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return ATCA_BAD_PARAM;
    1322:	24e2      	movs	r4, #226	; 0xe2
    1324:	e7fa      	b.n	131c <atcab_read_zone+0x20>
        if ((status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
    1326:	200a      	movs	r0, #10
    1328:	ac02      	add	r4, sp, #8
    132a:	46a4      	mov	ip, r4
    132c:	4460      	add	r0, ip
    132e:	9000      	str	r0, [sp, #0]
    1330:	9803      	ldr	r0, [sp, #12]
    1332:	4c1a      	ldr	r4, [pc, #104]	; (139c <atcab_read_zone+0xa0>)
    1334:	47a0      	blx	r4
    1336:	1e04      	subs	r4, r0, #0
    1338:	d1f0      	bne.n	131c <atcab_read_zone+0x20>
            zone = zone | ATCA_ZONE_READWRITE_32;
    133a:	2380      	movs	r3, #128	; 0x80
    133c:	9a03      	ldr	r2, [sp, #12]
    133e:	431a      	orrs	r2, r3
    1340:	9203      	str	r2, [sp, #12]
    1342:	e009      	b.n	1358 <atcab_read_zone+0x5c>
        if ((status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
    1344:	200a      	movs	r0, #10
    1346:	ac02      	add	r4, sp, #8
    1348:	46a4      	mov	ip, r4
    134a:	4460      	add	r0, ip
    134c:	9000      	str	r0, [sp, #0]
    134e:	9803      	ldr	r0, [sp, #12]
    1350:	4c12      	ldr	r4, [pc, #72]	; (139c <atcab_read_zone+0xa0>)
    1352:	47a0      	blx	r4
    1354:	1e04      	subs	r4, r0, #0
    1356:	d1e1      	bne.n	131c <atcab_read_zone+0x20>
        packet.param1 = zone;
    1358:	a905      	add	r1, sp, #20
    135a:	466b      	mov	r3, sp
    135c:	7b1b      	ldrb	r3, [r3, #12]
    135e:	70cb      	strb	r3, [r1, #3]
        packet.param2 = addr;
    1360:	230a      	movs	r3, #10
    1362:	aa02      	add	r2, sp, #8
    1364:	4694      	mov	ip, r2
    1366:	4463      	add	r3, ip
    1368:	881b      	ldrh	r3, [r3, #0]
    136a:	808b      	strh	r3, [r1, #4]
        if ((status = atRead(ca_cmd, &packet)) != ATCA_SUCCESS)
    136c:	0030      	movs	r0, r6
    136e:	4b0c      	ldr	r3, [pc, #48]	; (13a0 <atcab_read_zone+0xa4>)
    1370:	4798      	blx	r3
    1372:	1e04      	subs	r4, r0, #0
    1374:	d1d2      	bne.n	131c <atcab_read_zone+0x20>
        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
    1376:	4b08      	ldr	r3, [pc, #32]	; (1398 <atcab_read_zone+0x9c>)
    1378:	6819      	ldr	r1, [r3, #0]
    137a:	a805      	add	r0, sp, #20
    137c:	4b09      	ldr	r3, [pc, #36]	; (13a4 <atcab_read_zone+0xa8>)
    137e:	4798      	blx	r3
    1380:	1e04      	subs	r4, r0, #0
    1382:	d1cb      	bne.n	131c <atcab_read_zone+0x20>
        memcpy(data, &packet.data[1], len);
    1384:	002a      	movs	r2, r5
    1386:	2113      	movs	r1, #19
    1388:	ab02      	add	r3, sp, #8
    138a:	469c      	mov	ip, r3
    138c:	4461      	add	r1, ip
    138e:	0038      	movs	r0, r7
    1390:	4b05      	ldr	r3, [pc, #20]	; (13a8 <atcab_read_zone+0xac>)
    1392:	4798      	blx	r3
    1394:	e7c2      	b.n	131c <atcab_read_zone+0x20>
    1396:	46c0      	nop			; (mov r8, r8)
    1398:	200000f0 	.word	0x200000f0
    139c:	000010d1 	.word	0x000010d1
    13a0:	00000cc1 	.word	0x00000cc1
    13a4:	00000e95 	.word	0x00000e95
    13a8:	000057e7 	.word	0x000057e7

000013ac <atcab_read_serial_number>:
 *  \param[out] serial_number  9 byte serial number is returned here.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_serial_number(uint8_t* serial_number)
{
    13ac:	b570      	push	{r4, r5, r6, lr}
    13ae:	b08a      	sub	sp, #40	; 0x28
    13b0:	0005      	movs	r5, r0
    ATCA_STATUS status = ATCA_GEN_FAIL;
    uint8_t read_buf[ATCA_BLOCK_SIZE];

    if (!serial_number)
    {
        return ATCA_BAD_PARAM;
    13b2:	24e2      	movs	r4, #226	; 0xe2
    if (!serial_number)
    13b4:	2800      	cmp	r0, #0
    13b6:	d00b      	beq.n	13d0 <atcab_read_serial_number+0x24>
    }

    do
    {
        if ((status = atcab_read_zone(ATCA_ZONE_CONFIG, 0, 0, 0, read_buf, ATCA_BLOCK_SIZE)) != ATCA_SUCCESS)
    13b8:	2320      	movs	r3, #32
    13ba:	9301      	str	r3, [sp, #4]
    13bc:	ab02      	add	r3, sp, #8
    13be:	9300      	str	r3, [sp, #0]
    13c0:	2300      	movs	r3, #0
    13c2:	2200      	movs	r2, #0
    13c4:	2100      	movs	r1, #0
    13c6:	2000      	movs	r0, #0
    13c8:	4c08      	ldr	r4, [pc, #32]	; (13ec <atcab_read_serial_number+0x40>)
    13ca:	47a0      	blx	r4
    13cc:	1e04      	subs	r4, r0, #0
    13ce:	d002      	beq.n	13d6 <atcab_read_serial_number+0x2a>
        memcpy(&serial_number[4], &read_buf[8], 5);
    }
    while (0);

    return status;
}
    13d0:	0020      	movs	r0, r4
    13d2:	b00a      	add	sp, #40	; 0x28
    13d4:	bd70      	pop	{r4, r5, r6, pc}
        memcpy(&serial_number[0], &read_buf[0], 4);
    13d6:	2204      	movs	r2, #4
    13d8:	a902      	add	r1, sp, #8
    13da:	0028      	movs	r0, r5
    13dc:	4e04      	ldr	r6, [pc, #16]	; (13f0 <atcab_read_serial_number+0x44>)
    13de:	47b0      	blx	r6
        memcpy(&serial_number[4], &read_buf[8], 5);
    13e0:	1d28      	adds	r0, r5, #4
    13e2:	2205      	movs	r2, #5
    13e4:	a904      	add	r1, sp, #16
    13e6:	47b0      	blx	r6
    13e8:	e7f2      	b.n	13d0 <atcab_read_serial_number+0x24>
    13ea:	46c0      	nop			; (mov r8, r8)
    13ec:	000012fd 	.word	0x000012fd
    13f0:	000057e7 	.word	0x000057e7

000013f4 <atcab_is_locked>:
 *                         LOCK_ZONE_DATA).
 *  \param[out] is_locked  Lock state returned here. True if locked.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_is_locked(uint8_t zone, bool *is_locked)
{
    13f4:	b570      	push	{r4, r5, r6, lr}
    13f6:	b084      	sub	sp, #16
    13f8:	0005      	movs	r5, r0
    13fa:	000c      	movs	r4, r1

    do
    {
        if (is_locked == NULL)
        {
            return ATCA_BAD_PARAM;
    13fc:	20e2      	movs	r0, #226	; 0xe2
        if (is_locked == NULL)
    13fe:	2900      	cmp	r1, #0
    1400:	d017      	beq.n	1432 <atcab_is_locked+0x3e>
        }

        // Read the word with the lock bytes (UserExtra, Selector, LockValue, LockConfig) (config block = 2, word offset = 5)
        if ((ret = atcab_read_zone(ATCA_ZONE_CONFIG, 0, 2 /*block*/, 5 /*offset*/, data, ATCA_WORD_SIZE)) != ATCA_SUCCESS)
    1402:	2304      	movs	r3, #4
    1404:	9301      	str	r3, [sp, #4]
    1406:	ab03      	add	r3, sp, #12
    1408:	9300      	str	r3, [sp, #0]
    140a:	2305      	movs	r3, #5
    140c:	2202      	movs	r2, #2
    140e:	2100      	movs	r1, #0
    1410:	2000      	movs	r0, #0
    1412:	4e0c      	ldr	r6, [pc, #48]	; (1444 <atcab_is_locked+0x50>)
    1414:	47b0      	blx	r6
    1416:	2800      	cmp	r0, #0
    1418:	d10b      	bne.n	1432 <atcab_is_locked+0x3e>
        {
            break;
        }

        // Determine the index into the word_data based on the zone we are querying for
        switch (zone)
    141a:	2d00      	cmp	r5, #0
    141c:	d003      	beq.n	1426 <atcab_is_locked+0x32>
    141e:	2d01      	cmp	r5, #1
    1420:	d009      	beq.n	1436 <atcab_is_locked+0x42>
        {
        case LOCK_ZONE_CONFIG: *is_locked = (data[3] != 0x55); break;
        case LOCK_ZONE_DATA:   *is_locked = (data[2] != 0x55); break;
        default: ret = ATCA_BAD_PARAM; break;
    1422:	20e2      	movs	r0, #226	; 0xe2
    1424:	e005      	b.n	1432 <atcab_is_locked+0x3e>
        case LOCK_ZONE_CONFIG: *is_locked = (data[3] != 0x55); break;
    1426:	ab03      	add	r3, sp, #12
    1428:	78db      	ldrb	r3, [r3, #3]
    142a:	3b55      	subs	r3, #85	; 0x55
    142c:	1e5a      	subs	r2, r3, #1
    142e:	4193      	sbcs	r3, r2
    1430:	7023      	strb	r3, [r4, #0]
        }
    }
    while (0);

    return ret;
}
    1432:	b004      	add	sp, #16
    1434:	bd70      	pop	{r4, r5, r6, pc}
        case LOCK_ZONE_DATA:   *is_locked = (data[2] != 0x55); break;
    1436:	ab03      	add	r3, sp, #12
    1438:	789b      	ldrb	r3, [r3, #2]
    143a:	3b55      	subs	r3, #85	; 0x55
    143c:	1e5a      	subs	r2, r3, #1
    143e:	4193      	sbcs	r3, r2
    1440:	7023      	strb	r3, [r4, #0]
    1442:	e7f6      	b.n	1432 <atcab_is_locked+0x3e>
    1444:	000012fd 	.word	0x000012fd

00001448 <atcab_read_bytes_zone>:
 *  \param[in]  length  Number of bytes to read starting from the offset.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_bytes_zone(uint8_t zone, uint16_t slot, size_t offset, uint8_t *data, size_t length)
{
    1448:	b5f0      	push	{r4, r5, r6, r7, lr}
    144a:	46de      	mov	lr, fp
    144c:	4657      	mov	r7, sl
    144e:	464e      	mov	r6, r9
    1450:	4645      	mov	r5, r8
    1452:	b5e0      	push	{r5, r6, r7, lr}
    1454:	b091      	sub	sp, #68	; 0x44
    1456:	0005      	movs	r5, r0
    1458:	9102      	str	r1, [sp, #8]
    145a:	0017      	movs	r7, r2
    145c:	9303      	str	r3, [sp, #12]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    size_t zone_size = 0;
    145e:	2300      	movs	r3, #0
    1460:	930f      	str	r3, [sp, #60]	; 0x3c
    size_t copy_length = 0;
    size_t read_offset = 0;

    if (zone != ATCA_ZONE_CONFIG && zone != ATCA_ZONE_OTP && zone != ATCA_ZONE_DATA)
    {
        return ATCA_BAD_PARAM;
    1462:	24e2      	movs	r4, #226	; 0xe2
    if (zone != ATCA_ZONE_CONFIG && zone != ATCA_ZONE_OTP && zone != ATCA_ZONE_DATA)
    1464:	2802      	cmp	r0, #2
    1466:	d907      	bls.n	1478 <atcab_read_bytes_zone+0x30>
        }
    }
    while (false);

    return status;
}
    1468:	0020      	movs	r0, r4
    146a:	b011      	add	sp, #68	; 0x44
    146c:	bc3c      	pop	{r2, r3, r4, r5}
    146e:	4690      	mov	r8, r2
    1470:	4699      	mov	r9, r3
    1472:	46a2      	mov	sl, r4
    1474:	46ab      	mov	fp, r5
    1476:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (zone == ATCA_ZONE_DATA && slot > 15)
    1478:	2802      	cmp	r0, #2
    147a:	d01f      	beq.n	14bc <atcab_read_bytes_zone+0x74>
        return ATCA_SUCCESS;  // Always succeed reading 0 bytes
    147c:	2400      	movs	r4, #0
    if (length == 0)
    147e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    1480:	2b00      	cmp	r3, #0
    1482:	d0f1      	beq.n	1468 <atcab_read_bytes_zone+0x20>
        return ATCA_BAD_PARAM;
    1484:	34e2      	adds	r4, #226	; 0xe2
    if (data == NULL)
    1486:	9b03      	ldr	r3, [sp, #12]
    1488:	2b00      	cmp	r3, #0
    148a:	d0ed      	beq.n	1468 <atcab_read_bytes_zone+0x20>
        status = atcab_get_zone_size(zone, slot, &zone_size);
    148c:	aa0f      	add	r2, sp, #60	; 0x3c
    148e:	9902      	ldr	r1, [sp, #8]
    1490:	0028      	movs	r0, r5
    1492:	4b2e      	ldr	r3, [pc, #184]	; (154c <atcab_read_bytes_zone+0x104>)
    1494:	4798      	blx	r3
    1496:	1e04      	subs	r4, r0, #0
        if (status != ATCA_SUCCESS)
    1498:	d1e6      	bne.n	1468 <atcab_read_bytes_zone+0x20>
        if (offset + length > zone_size)
    149a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    149c:	19db      	adds	r3, r3, r7
            return ATCA_BAD_PARAM; // Can't read past the end of a zone
    149e:	34e2      	adds	r4, #226	; 0xe2
        if (offset + length > zone_size)
    14a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    14a2:	4293      	cmp	r3, r2
    14a4:	d8e0      	bhi.n	1468 <atcab_read_bytes_zone+0x20>
        cur_block = offset / ATCA_BLOCK_SIZE;
    14a6:	097b      	lsrs	r3, r7, #5
    14a8:	4698      	mov	r8, r3
    14aa:	2320      	movs	r3, #32
    14ac:	469a      	mov	sl, r3
    14ae:	2300      	movs	r3, #0
    14b0:	2600      	movs	r6, #0
            memcpy(&data[data_idx], &read_buf[read_buf_idx], copy_length);
    14b2:	46a9      	mov	r9, r5
    14b4:	001d      	movs	r5, r3
    14b6:	9705      	str	r7, [sp, #20]
    14b8:	4657      	mov	r7, sl
    14ba:	e01e      	b.n	14fa <atcab_read_bytes_zone+0xb2>
    if (zone == ATCA_ZONE_DATA && slot > 15)
    14bc:	290f      	cmp	r1, #15
    14be:	d8d3      	bhi.n	1468 <atcab_read_bytes_zone+0x20>
    14c0:	e7dc      	b.n	147c <atcab_read_bytes_zone+0x34>
            if (read_size == ATCA_BLOCK_SIZE && zone_size - cur_block * ATCA_BLOCK_SIZE < ATCA_BLOCK_SIZE)
    14c2:	4643      	mov	r3, r8
    14c4:	015b      	lsls	r3, r3, #5
    14c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    14c8:	1ad3      	subs	r3, r2, r3
    14ca:	2b1f      	cmp	r3, #31
    14cc:	d817      	bhi.n	14fe <atcab_read_bytes_zone+0xb6>
                cur_offset = ((data_idx + offset) / ATCA_WORD_SIZE) % (ATCA_BLOCK_SIZE / ATCA_WORD_SIZE);
    14ce:	9b05      	ldr	r3, [sp, #20]
    14d0:	199b      	adds	r3, r3, r6
    14d2:	089b      	lsrs	r3, r3, #2
    14d4:	2507      	movs	r5, #7
    14d6:	401d      	ands	r5, r3
                read_size = ATCA_WORD_SIZE;
    14d8:	3f1c      	subs	r7, #28
    14da:	e010      	b.n	14fe <atcab_read_bytes_zone+0xb6>
            memcpy(&data[data_idx], &read_buf[read_buf_idx], copy_length);
    14dc:	9b03      	ldr	r3, [sp, #12]
    14de:	1998      	adds	r0, r3, r6
    14e0:	ab07      	add	r3, sp, #28
    14e2:	469c      	mov	ip, r3
    14e4:	4461      	add	r1, ip
    14e6:	0022      	movs	r2, r4
    14e8:	4b19      	ldr	r3, [pc, #100]	; (1550 <atcab_read_bytes_zone+0x108>)
    14ea:	4798      	blx	r3
            data_idx += copy_length;
    14ec:	1936      	adds	r6, r6, r4
            if (read_size == ATCA_BLOCK_SIZE)
    14ee:	2f20      	cmp	r7, #32
    14f0:	d024      	beq.n	153c <atcab_read_bytes_zone+0xf4>
                cur_offset += 1;
    14f2:	3501      	adds	r5, #1
        while (data_idx < length)
    14f4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    14f6:	42b3      	cmp	r3, r6
    14f8:	d924      	bls.n	1544 <atcab_read_bytes_zone+0xfc>
            if (read_size == ATCA_BLOCK_SIZE && zone_size - cur_block * ATCA_BLOCK_SIZE < ATCA_BLOCK_SIZE)
    14fa:	2f20      	cmp	r7, #32
    14fc:	d0e1      	beq.n	14c2 <atcab_read_bytes_zone+0x7a>
            status = atcab_read_zone(
    14fe:	b2eb      	uxtb	r3, r5
    1500:	4642      	mov	r2, r8
    1502:	4669      	mov	r1, sp
    1504:	740a      	strb	r2, [r1, #16]
    1506:	7c0a      	ldrb	r2, [r1, #16]
    1508:	9701      	str	r7, [sp, #4]
    150a:	a907      	add	r1, sp, #28
    150c:	9100      	str	r1, [sp, #0]
    150e:	9902      	ldr	r1, [sp, #8]
    1510:	4648      	mov	r0, r9
    1512:	4c10      	ldr	r4, [pc, #64]	; (1554 <atcab_read_bytes_zone+0x10c>)
    1514:	47a0      	blx	r4
    1516:	9004      	str	r0, [sp, #16]
            if (status != ATCA_SUCCESS)
    1518:	2800      	cmp	r0, #0
    151a:	d115      	bne.n	1548 <atcab_read_bytes_zone+0x100>
            read_offset = cur_block * ATCA_BLOCK_SIZE + cur_offset * ATCA_WORD_SIZE;
    151c:	4643      	mov	r3, r8
    151e:	00db      	lsls	r3, r3, #3
    1520:	195b      	adds	r3, r3, r5
    1522:	009b      	lsls	r3, r3, #2
                read_buf_idx = 0;                     // Read data is within the requested chunk
    1524:	2100      	movs	r1, #0
            if (read_offset < offset)
    1526:	9805      	ldr	r0, [sp, #20]
    1528:	4298      	cmp	r0, r3
    152a:	d900      	bls.n	152e <atcab_read_bytes_zone+0xe6>
                read_buf_idx = offset - read_offset;  // Read data starts before the requested chunk
    152c:	1ac1      	subs	r1, r0, r3
            if (length - data_idx < read_size - read_buf_idx)
    152e:	1a7b      	subs	r3, r7, r1
    1530:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    1532:	1b94      	subs	r4, r2, r6
    1534:	429c      	cmp	r4, r3
    1536:	d9d1      	bls.n	14dc <atcab_read_bytes_zone+0x94>
    1538:	001c      	movs	r4, r3
    153a:	e7cf      	b.n	14dc <atcab_read_bytes_zone+0x94>
                cur_block += 1;
    153c:	2301      	movs	r3, #1
    153e:	469c      	mov	ip, r3
    1540:	44e0      	add	r8, ip
    1542:	e7d7      	b.n	14f4 <atcab_read_bytes_zone+0xac>
    1544:	9c04      	ldr	r4, [sp, #16]
    1546:	e78f      	b.n	1468 <atcab_read_bytes_zone+0x20>
    1548:	9c04      	ldr	r4, [sp, #16]
    154a:	e78d      	b.n	1468 <atcab_read_bytes_zone+0x20>
    154c:	00001115 	.word	0x00001115
    1550:	000057e7 	.word	0x000057e7
    1554:	000012fd 	.word	0x000012fd

00001558 <atcab_sha_base>:
 *                              data_out.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_sha_base(uint8_t mode, uint16_t length, const uint8_t* message, uint8_t* data_out, uint16_t* data_out_size)
{
    1558:	b5f0      	push	{r4, r5, r6, r7, lr}
    155a:	b0a5      	sub	sp, #148	; 0x94
    155c:	000c      	movs	r4, r1
    155e:	0011      	movs	r1, r2
    1560:	001e      	movs	r6, r3
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
    1562:	4b2b      	ldr	r3, [pc, #172]	; (1610 <atcab_sha_base+0xb8>)
    1564:	681b      	ldr	r3, [r3, #0]
    1566:	681f      	ldr	r7, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    uint8_t cmd_mode = (mode & SHA_MODE_MASK);
    1568:	2307      	movs	r3, #7
    156a:	4003      	ands	r3, r0

    if (cmd_mode != SHA_MODE_SHA256_PUBLIC && cmd_mode != SHA_MODE_HMAC_START && length > 0 && message == NULL)
    156c:	3b03      	subs	r3, #3
    156e:	2b01      	cmp	r3, #1
    1570:	d940      	bls.n	15f4 <atcab_sha_base+0x9c>
    1572:	2c00      	cmp	r4, #0
    1574:	d001      	beq.n	157a <atcab_sha_base+0x22>
    1576:	2a00      	cmp	r2, #0
    1578:	d036      	beq.n	15e8 <atcab_sha_base+0x90>
    {
        return ATCA_BAD_PARAM; // message data indicated, but nothing provided
    }
    if (data_out != NULL && data_out_size == NULL)
    157a:	2e00      	cmp	r6, #0
    157c:	d036      	beq.n	15ec <atcab_sha_base+0x94>
    {
        return ATCA_BAD_PARAM;
    157e:	25e2      	movs	r5, #226	; 0xe2
    if (data_out != NULL && data_out_size == NULL)
    1580:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    1582:	2b00      	cmp	r3, #0
    1584:	d00e      	beq.n	15a4 <atcab_sha_base+0x4c>
    }

    do
    {
        //Build Command
        packet.param1 = mode;
    1586:	ab01      	add	r3, sp, #4
    1588:	70d8      	strb	r0, [r3, #3]
        packet.param2 = length;
    158a:	809c      	strh	r4, [r3, #4]

        if (cmd_mode != SHA_MODE_SHA256_PUBLIC && cmd_mode != SHA_MODE_HMAC_START)
        {
            memcpy(packet.data, message, length);
    158c:	0022      	movs	r2, r4
    158e:	200a      	movs	r0, #10
    1590:	4468      	add	r0, sp
    1592:	4b20      	ldr	r3, [pc, #128]	; (1614 <atcab_sha_base+0xbc>)
    1594:	4798      	blx	r3
        }

        if ((status = atSHA(ca_cmd, &packet, length)) != ATCA_SUCCESS)
    1596:	0022      	movs	r2, r4
    1598:	a901      	add	r1, sp, #4
    159a:	0038      	movs	r0, r7
    159c:	4b1e      	ldr	r3, [pc, #120]	; (1618 <atcab_sha_base+0xc0>)
    159e:	4798      	blx	r3
    15a0:	1e05      	subs	r5, r0, #0
    15a2:	d002      	beq.n	15aa <atcab_sha_base+0x52>
        }
    }
    while (0);

    return status;
}
    15a4:	0028      	movs	r0, r5
    15a6:	b025      	add	sp, #148	; 0x94
    15a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
    15aa:	4b19      	ldr	r3, [pc, #100]	; (1610 <atcab_sha_base+0xb8>)
    15ac:	6819      	ldr	r1, [r3, #0]
    15ae:	a801      	add	r0, sp, #4
    15b0:	4b1a      	ldr	r3, [pc, #104]	; (161c <atcab_sha_base+0xc4>)
    15b2:	4798      	blx	r3
    15b4:	1e05      	subs	r5, r0, #0
    15b6:	d1f5      	bne.n	15a4 <atcab_sha_base+0x4c>
        if ((data_out != NULL) && (packet.rxsize > 4))
    15b8:	2e00      	cmp	r6, #0
    15ba:	d0f3      	beq.n	15a4 <atcab_sha_base+0x4c>
    15bc:	238a      	movs	r3, #138	; 0x8a
    15be:	aa01      	add	r2, sp, #4
    15c0:	5ad3      	ldrh	r3, [r2, r3]
    15c2:	2b04      	cmp	r3, #4
    15c4:	d9ee      	bls.n	15a4 <atcab_sha_base+0x4c>
            if (packet.data[ATCA_COUNT_IDX] - ATCA_PACKET_OVERHEAD > *data_out_size)
    15c6:	7992      	ldrb	r2, [r2, #6]
    15c8:	1ed1      	subs	r1, r2, #3
    15ca:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    15cc:	881b      	ldrh	r3, [r3, #0]
    15ce:	4299      	cmp	r1, r3
    15d0:	dd01      	ble.n	15d6 <atcab_sha_base+0x7e>
                status = ATCA_SMALL_BUFFER;
    15d2:	25ed      	movs	r5, #237	; 0xed
    15d4:	e7e6      	b.n	15a4 <atcab_sha_base+0x4c>
            *data_out_size = packet.data[ATCA_COUNT_IDX] - ATCA_PACKET_OVERHEAD;
    15d6:	b28a      	uxth	r2, r1
    15d8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    15da:	801a      	strh	r2, [r3, #0]
            memcpy(data_out, &packet.data[ATCA_RSP_DATA_IDX], *data_out_size);
    15dc:	210b      	movs	r1, #11
    15de:	4469      	add	r1, sp
    15e0:	0030      	movs	r0, r6
    15e2:	4b0c      	ldr	r3, [pc, #48]	; (1614 <atcab_sha_base+0xbc>)
    15e4:	4798      	blx	r3
    15e6:	e7dd      	b.n	15a4 <atcab_sha_base+0x4c>
        return ATCA_BAD_PARAM; // message data indicated, but nothing provided
    15e8:	25e2      	movs	r5, #226	; 0xe2
    15ea:	e7db      	b.n	15a4 <atcab_sha_base+0x4c>
        packet.param1 = mode;
    15ec:	ab01      	add	r3, sp, #4
    15ee:	70d8      	strb	r0, [r3, #3]
        packet.param2 = length;
    15f0:	809c      	strh	r4, [r3, #4]
    15f2:	e7cb      	b.n	158c <atcab_sha_base+0x34>
    if (data_out != NULL && data_out_size == NULL)
    15f4:	2e00      	cmp	r6, #0
    15f6:	d103      	bne.n	1600 <atcab_sha_base+0xa8>
        packet.param1 = mode;
    15f8:	ab01      	add	r3, sp, #4
    15fa:	70d8      	strb	r0, [r3, #3]
        packet.param2 = length;
    15fc:	809c      	strh	r4, [r3, #4]
    15fe:	e7ca      	b.n	1596 <atcab_sha_base+0x3e>
        return ATCA_BAD_PARAM;
    1600:	25e2      	movs	r5, #226	; 0xe2
    if (data_out != NULL && data_out_size == NULL)
    1602:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    1604:	2b00      	cmp	r3, #0
    1606:	d0cd      	beq.n	15a4 <atcab_sha_base+0x4c>
        packet.param1 = mode;
    1608:	ab01      	add	r3, sp, #4
    160a:	70d8      	strb	r0, [r3, #3]
        packet.param2 = length;
    160c:	809c      	strh	r4, [r3, #4]
    160e:	e7c2      	b.n	1596 <atcab_sha_base+0x3e>
    1610:	200000f0 	.word	0x200000f0
    1614:	000057e7 	.word	0x000057e7
    1618:	00000ced 	.word	0x00000ced
    161c:	00000e95 	.word	0x00000e95

00001620 <atcab_sha_start>:

/** \brief Executes SHA command to initialize SHA-256 calculation engine
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_sha_start(void)
{
    1620:	b510      	push	{r4, lr}
    1622:	b082      	sub	sp, #8
    return atcab_sha_base(SHA_MODE_SHA256_START, 0, NULL, NULL, NULL);
    1624:	2300      	movs	r3, #0
    1626:	9300      	str	r3, [sp, #0]
    1628:	2200      	movs	r2, #0
    162a:	2100      	movs	r1, #0
    162c:	2000      	movs	r0, #0
    162e:	4c02      	ldr	r4, [pc, #8]	; (1638 <atcab_sha_start+0x18>)
    1630:	47a0      	blx	r4
}
    1632:	b002      	add	sp, #8
    1634:	bd10      	pop	{r4, pc}
    1636:	46c0      	nop			; (mov r8, r8)
    1638:	00001559 	.word	0x00001559

0000163c <atcab_sha_update>:
 * \param[in] message  64 bytes of message data to add to add to operation.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_sha_update(const uint8_t *message)
{
    163c:	b510      	push	{r4, lr}
    163e:	b082      	sub	sp, #8
    1640:	0002      	movs	r2, r0
    return atcab_sha_base(SHA_MODE_SHA256_UPDATE, 64, message, NULL, NULL);
    1642:	2300      	movs	r3, #0
    1644:	9300      	str	r3, [sp, #0]
    1646:	2140      	movs	r1, #64	; 0x40
    1648:	2001      	movs	r0, #1
    164a:	4c02      	ldr	r4, [pc, #8]	; (1654 <atcab_sha_update+0x18>)
    164c:	47a0      	blx	r4
}
    164e:	b002      	add	sp, #8
    1650:	bd10      	pop	{r4, pc}
    1652:	46c0      	nop			; (mov r8, r8)
    1654:	00001559 	.word	0x00001559

00001658 <atcab_sha_end>:
 *  \param[in]  message  Remaining data to include in hash. NULL if length is 0.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_sha_end(uint8_t *digest, uint16_t length, const uint8_t *message)
{
    1658:	b510      	push	{r4, lr}
    165a:	b084      	sub	sp, #16
    165c:	0003      	movs	r3, r0
    uint16_t digest_size = 32;
    165e:	240e      	movs	r4, #14
    1660:	446c      	add	r4, sp
    1662:	2020      	movs	r0, #32
    1664:	8020      	strh	r0, [r4, #0]

    return atcab_sha_base(SHA_MODE_SHA256_END, length, message, digest, &digest_size);
    1666:	9400      	str	r4, [sp, #0]
    1668:	381e      	subs	r0, #30
    166a:	4c02      	ldr	r4, [pc, #8]	; (1674 <atcab_sha_end+0x1c>)
    166c:	47a0      	blx	r4
}
    166e:	b004      	add	sp, #16
    1670:	bd10      	pop	{r4, pc}
    1672:	46c0      	nop			; (mov r8, r8)
    1674:	00001559 	.word	0x00001559

00001678 <atcab_hw_sha2_256_init>:
 * \param[in] ctx  SHA256 context
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_hw_sha2_256_init(atca_sha256_ctx_t* ctx)
{
    1678:	b510      	push	{r4, lr}
    memset(ctx, 0, sizeof(*ctx));
    167a:	2288      	movs	r2, #136	; 0x88
    167c:	2100      	movs	r1, #0
    167e:	4b02      	ldr	r3, [pc, #8]	; (1688 <atcab_hw_sha2_256_init+0x10>)
    1680:	4798      	blx	r3
    return atcab_sha_start();
    1682:	4b02      	ldr	r3, [pc, #8]	; (168c <atcab_hw_sha2_256_init+0x14>)
    1684:	4798      	blx	r3
}
    1686:	bd10      	pop	{r4, pc}
    1688:	000057f9 	.word	0x000057f9
    168c:	00001621 	.word	0x00001621

00001690 <atcab_hw_sha2_256_update>:
 * \param[in] data_size  Size of data in bytes.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_hw_sha2_256_update(atca_sha256_ctx_t* ctx, const uint8_t* data, size_t data_size)
{
    1690:	b5f0      	push	{r4, r5, r6, r7, lr}
    1692:	46de      	mov	lr, fp
    1694:	4657      	mov	r7, sl
    1696:	464e      	mov	r6, r9
    1698:	4645      	mov	r5, r8
    169a:	b5e0      	push	{r5, r6, r7, lr}
    169c:	b083      	sub	sp, #12
    169e:	0006      	movs	r6, r0
    16a0:	9100      	str	r1, [sp, #0]
    16a2:	0014      	movs	r4, r2
    ATCA_STATUS status = ATCA_SUCCESS;
    uint32_t block_count;
    uint32_t rem_size = ATCA_SHA256_BLOCK_SIZE - ctx->block_size;
    16a4:	6840      	ldr	r0, [r0, #4]
    16a6:	2740      	movs	r7, #64	; 0x40
    16a8:	1a3f      	subs	r7, r7, r0
    uint32_t copy_size = data_size > rem_size ? rem_size : data_size;
    16aa:	4297      	cmp	r7, r2
    16ac:	d900      	bls.n	16b0 <atcab_hw_sha2_256_update+0x20>
    16ae:	0017      	movs	r7, r2
    uint32_t i = 0;

    // Copy data into current block
    memcpy(&ctx->block[ctx->block_size], data, copy_size);
    16b0:	3008      	adds	r0, #8
    16b2:	1830      	adds	r0, r6, r0
    16b4:	003a      	movs	r2, r7
    16b6:	9900      	ldr	r1, [sp, #0]
    16b8:	4b21      	ldr	r3, [pc, #132]	; (1740 <atcab_hw_sha2_256_update+0xb0>)
    16ba:	4798      	blx	r3

    if (ctx->block_size + data_size < ATCA_SHA256_BLOCK_SIZE)
    16bc:	6873      	ldr	r3, [r6, #4]
    16be:	18e3      	adds	r3, r4, r3
    16c0:	2b3f      	cmp	r3, #63	; 0x3f
    16c2:	d80a      	bhi.n	16da <atcab_hw_sha2_256_update+0x4a>
    {
        // Not enough data to finish off the current block
        ctx->block_size += data_size;
    16c4:	6073      	str	r3, [r6, #4]
        return ATCA_SUCCESS;
    16c6:	2300      	movs	r3, #0
    16c8:	9301      	str	r3, [sp, #4]
    ctx->total_msg_size += (block_count + 1) * ATCA_SHA256_BLOCK_SIZE;
    ctx->block_size = data_size % ATCA_SHA256_BLOCK_SIZE;
    memcpy(ctx->block, &data[copy_size + block_count * ATCA_SHA256_BLOCK_SIZE], ctx->block_size);

    return ATCA_SUCCESS;
}
    16ca:	9801      	ldr	r0, [sp, #4]
    16cc:	b003      	add	sp, #12
    16ce:	bc3c      	pop	{r2, r3, r4, r5}
    16d0:	4690      	mov	r8, r2
    16d2:	4699      	mov	r9, r3
    16d4:	46a2      	mov	sl, r4
    16d6:	46ab      	mov	fp, r5
    16d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = atcab_sha_update(ctx->block);
    16da:	2308      	movs	r3, #8
    16dc:	469c      	mov	ip, r3
    16de:	44b4      	add	ip, r6
    16e0:	46e1      	mov	r9, ip
    16e2:	4660      	mov	r0, ip
    16e4:	4b17      	ldr	r3, [pc, #92]	; (1744 <atcab_hw_sha2_256_update+0xb4>)
    16e6:	4798      	blx	r3
    16e8:	9001      	str	r0, [sp, #4]
    if (status != ATCA_SUCCESS)
    16ea:	2800      	cmp	r0, #0
    16ec:	d1ed      	bne.n	16ca <atcab_hw_sha2_256_update+0x3a>
    data_size -= copy_size; // Adjust to the remaining message bytes
    16ee:	1be3      	subs	r3, r4, r7
    16f0:	4698      	mov	r8, r3
    block_count = data_size / ATCA_SHA256_BLOCK_SIZE;
    16f2:	099b      	lsrs	r3, r3, #6
    16f4:	469a      	mov	sl, r3
    for (i = 0; i < block_count; i++)
    16f6:	d00c      	beq.n	1712 <atcab_hw_sha2_256_update+0x82>
    16f8:	9b00      	ldr	r3, [sp, #0]
    16fa:	19dc      	adds	r4, r3, r7
    16fc:	2500      	movs	r5, #0
        status = atcab_sha_update(&data[copy_size + i * ATCA_SHA256_BLOCK_SIZE]);
    16fe:	4b11      	ldr	r3, [pc, #68]	; (1744 <atcab_hw_sha2_256_update+0xb4>)
    1700:	469b      	mov	fp, r3
    1702:	0020      	movs	r0, r4
    1704:	47d8      	blx	fp
        if (status != ATCA_SUCCESS)
    1706:	2800      	cmp	r0, #0
    1708:	d118      	bne.n	173c <atcab_hw_sha2_256_update+0xac>
    for (i = 0; i < block_count; i++)
    170a:	3501      	adds	r5, #1
    170c:	3440      	adds	r4, #64	; 0x40
    170e:	45aa      	cmp	sl, r5
    1710:	d1f7      	bne.n	1702 <atcab_hw_sha2_256_update+0x72>
    ctx->total_msg_size += (block_count + 1) * ATCA_SHA256_BLOCK_SIZE;
    1712:	4653      	mov	r3, sl
    1714:	3301      	adds	r3, #1
    1716:	019b      	lsls	r3, r3, #6
    1718:	6832      	ldr	r2, [r6, #0]
    171a:	4694      	mov	ip, r2
    171c:	4463      	add	r3, ip
    171e:	6033      	str	r3, [r6, #0]
    ctx->block_size = data_size % ATCA_SHA256_BLOCK_SIZE;
    1720:	233f      	movs	r3, #63	; 0x3f
    1722:	4642      	mov	r2, r8
    1724:	401a      	ands	r2, r3
    1726:	6072      	str	r2, [r6, #4]
    memcpy(ctx->block, &data[copy_size + block_count * ATCA_SHA256_BLOCK_SIZE], ctx->block_size);
    1728:	4641      	mov	r1, r8
    172a:	4399      	bics	r1, r3
    172c:	19c9      	adds	r1, r1, r7
    172e:	9b00      	ldr	r3, [sp, #0]
    1730:	469c      	mov	ip, r3
    1732:	4461      	add	r1, ip
    1734:	4648      	mov	r0, r9
    1736:	4b02      	ldr	r3, [pc, #8]	; (1740 <atcab_hw_sha2_256_update+0xb0>)
    1738:	4798      	blx	r3
    return ATCA_SUCCESS;
    173a:	e7c6      	b.n	16ca <atcab_hw_sha2_256_update+0x3a>
        status = atcab_sha_update(&data[copy_size + i * ATCA_SHA256_BLOCK_SIZE]);
    173c:	9001      	str	r0, [sp, #4]
    173e:	e7c4      	b.n	16ca <atcab_hw_sha2_256_update+0x3a>
    1740:	000057e7 	.word	0x000057e7
    1744:	0000163d 	.word	0x0000163d

00001748 <atcab_hw_sha2_256_finish>:
 * \param[out] digest  SHA256 digest is returned here (32 bytes)
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_hw_sha2_256_finish(atca_sha256_ctx_t* ctx, uint8_t* digest)
{
    1748:	b5f0      	push	{r4, r5, r6, r7, lr}
    174a:	b085      	sub	sp, #20
    174c:	0004      	movs	r4, r0
    174e:	000d      	movs	r5, r1
    ATCA_STATUS status = ATCA_SUCCESS;
    uint32_t msg_size_bits;
    uint32_t pad_zero_count;
    uint16_t digest_size;

    if (_gDevice->mIface->mIfaceCFG->devtype == ATSHA204A)
    1750:	4b27      	ldr	r3, [pc, #156]	; (17f0 <atcab_hw_sha2_256_finish+0xa8>)
    1752:	681b      	ldr	r3, [r3, #0]
    1754:	685b      	ldr	r3, [r3, #4]
    1756:	685b      	ldr	r3, [r3, #4]
    1758:	785b      	ldrb	r3, [r3, #1]
    175a:	2b01      	cmp	r3, #1
    175c:	d007      	beq.n	176e <atcab_hw_sha2_256_finish+0x26>
            }
        }
    }
    else
    {
        status = atcab_sha_end(digest, ctx->block_size, ctx->block);
    175e:	0002      	movs	r2, r0
    1760:	3208      	adds	r2, #8
    1762:	8881      	ldrh	r1, [r0, #4]
    1764:	0028      	movs	r0, r5
    1766:	4b23      	ldr	r3, [pc, #140]	; (17f4 <atcab_hw_sha2_256_finish+0xac>)
    1768:	4798      	blx	r3
            return status;
        }
    }

    return ATCA_SUCCESS;
}
    176a:	b005      	add	sp, #20
    176c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ctx->total_msg_size += ctx->block_size;
    176e:	6840      	ldr	r0, [r0, #4]
    1770:	6823      	ldr	r3, [r4, #0]
    1772:	18c6      	adds	r6, r0, r3
    1774:	6026      	str	r6, [r4, #0]
        msg_size_bits = ctx->total_msg_size * 8;
    1776:	00f6      	lsls	r6, r6, #3
        pad_zero_count = (ATCA_SHA256_BLOCK_SIZE - ((ctx->block_size + 9) % ATCA_SHA256_BLOCK_SIZE)) % ATCA_SHA256_BLOCK_SIZE;
    1778:	2309      	movs	r3, #9
    177a:	425b      	negs	r3, r3
    177c:	1a1b      	subs	r3, r3, r0
    177e:	273f      	movs	r7, #63	; 0x3f
    1780:	401f      	ands	r7, r3
        ctx->block[ctx->block_size++] = 0x80;
    1782:	1c43      	adds	r3, r0, #1
    1784:	6063      	str	r3, [r4, #4]
    1786:	1823      	adds	r3, r4, r0
    1788:	2280      	movs	r2, #128	; 0x80
    178a:	721a      	strb	r2, [r3, #8]
        memset(&ctx->block[ctx->block_size], 0, pad_zero_count + 4);
    178c:	1d3a      	adds	r2, r7, #4
    178e:	3009      	adds	r0, #9
    1790:	1820      	adds	r0, r4, r0
    1792:	2100      	movs	r1, #0
    1794:	4b18      	ldr	r3, [pc, #96]	; (17f8 <atcab_hw_sha2_256_finish+0xb0>)
    1796:	4798      	blx	r3
        ctx->block_size += pad_zero_count + 4;
    1798:	6863      	ldr	r3, [r4, #4]
    179a:	469c      	mov	ip, r3
    179c:	4467      	add	r7, ip
        ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 24);
    179e:	19e3      	adds	r3, r4, r7
    17a0:	0e32      	lsrs	r2, r6, #24
    17a2:	731a      	strb	r2, [r3, #12]
        ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 16);
    17a4:	0c32      	lsrs	r2, r6, #16
    17a6:	735a      	strb	r2, [r3, #13]
        ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 8);
    17a8:	0a32      	lsrs	r2, r6, #8
    17aa:	739a      	strb	r2, [r3, #14]
        ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 0);
    17ac:	3708      	adds	r7, #8
    17ae:	6067      	str	r7, [r4, #4]
    17b0:	73de      	strb	r6, [r3, #15]
        digest_size = 32;
    17b2:	230e      	movs	r3, #14
    17b4:	446b      	add	r3, sp
    17b6:	2220      	movs	r2, #32
    17b8:	801a      	strh	r2, [r3, #0]
        status = atcab_sha_base(SHA_MODE_SHA256_UPDATE, ATCA_SHA256_BLOCK_SIZE, ctx->block, digest, &digest_size);
    17ba:	0022      	movs	r2, r4
    17bc:	3208      	adds	r2, #8
    17be:	9300      	str	r3, [sp, #0]
    17c0:	002b      	movs	r3, r5
    17c2:	2140      	movs	r1, #64	; 0x40
    17c4:	2001      	movs	r0, #1
    17c6:	4e0d      	ldr	r6, [pc, #52]	; (17fc <atcab_hw_sha2_256_finish+0xb4>)
    17c8:	47b0      	blx	r6
        if (status != ATCA_SUCCESS)
    17ca:	2800      	cmp	r0, #0
    17cc:	d1cd      	bne.n	176a <atcab_hw_sha2_256_finish+0x22>
        if (ctx->block_size > ATCA_SHA256_BLOCK_SIZE)
    17ce:	6863      	ldr	r3, [r4, #4]
    17d0:	2b40      	cmp	r3, #64	; 0x40
    17d2:	d9ca      	bls.n	176a <atcab_hw_sha2_256_finish+0x22>
            digest_size = 32;
    17d4:	230e      	movs	r3, #14
    17d6:	446b      	add	r3, sp
    17d8:	2220      	movs	r2, #32
    17da:	801a      	strh	r2, [r3, #0]
            status = atcab_sha_base(SHA_MODE_SHA256_UPDATE, ATCA_SHA256_BLOCK_SIZE, &ctx->block[ATCA_SHA256_BLOCK_SIZE], digest, &digest_size);
    17dc:	0022      	movs	r2, r4
    17de:	3248      	adds	r2, #72	; 0x48
    17e0:	9300      	str	r3, [sp, #0]
    17e2:	002b      	movs	r3, r5
    17e4:	2140      	movs	r1, #64	; 0x40
    17e6:	3001      	adds	r0, #1
    17e8:	4c04      	ldr	r4, [pc, #16]	; (17fc <atcab_hw_sha2_256_finish+0xb4>)
    17ea:	47a0      	blx	r4
    17ec:	e7bd      	b.n	176a <atcab_hw_sha2_256_finish+0x22>
    17ee:	46c0      	nop			; (mov r8, r8)
    17f0:	200000f0 	.word	0x200000f0
    17f4:	00001659 	.word	0x00001659
    17f8:	000057f9 	.word	0x000057f9
    17fc:	00001559 	.word	0x00001559

00001800 <atcab_hw_sha2_256>:
 * \param[out] digest     Digest is returned here (32 bytes).
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_hw_sha2_256(const uint8_t * data, size_t data_size, uint8_t* digest)
{
    1800:	b570      	push	{r4, r5, r6, lr}
    1802:	b0a2      	sub	sp, #136	; 0x88
    1804:	0004      	movs	r4, r0
    1806:	000d      	movs	r5, r1
    1808:	0016      	movs	r6, r2
    ATCA_STATUS status = ATCA_SUCCESS;
    atca_sha256_ctx_t ctx;

    status = atcab_hw_sha2_256_init(&ctx);
    180a:	4668      	mov	r0, sp
    180c:	4b08      	ldr	r3, [pc, #32]	; (1830 <atcab_hw_sha2_256+0x30>)
    180e:	4798      	blx	r3
    if (status != ATCA_SUCCESS)
    1810:	2800      	cmp	r0, #0
    1812:	d001      	beq.n	1818 <atcab_hw_sha2_256+0x18>
    {
        return status;
    }

    return ATCA_SUCCESS;
}
    1814:	b022      	add	sp, #136	; 0x88
    1816:	bd70      	pop	{r4, r5, r6, pc}
    status = atcab_hw_sha2_256_update(&ctx, data, data_size);
    1818:	002a      	movs	r2, r5
    181a:	0021      	movs	r1, r4
    181c:	4668      	mov	r0, sp
    181e:	4b05      	ldr	r3, [pc, #20]	; (1834 <atcab_hw_sha2_256+0x34>)
    1820:	4798      	blx	r3
    if (status != ATCA_SUCCESS)
    1822:	2800      	cmp	r0, #0
    1824:	d1f6      	bne.n	1814 <atcab_hw_sha2_256+0x14>
    status = atcab_hw_sha2_256_finish(&ctx, digest);
    1826:	0031      	movs	r1, r6
    1828:	4668      	mov	r0, sp
    182a:	4b03      	ldr	r3, [pc, #12]	; (1838 <atcab_hw_sha2_256+0x38>)
    182c:	4798      	blx	r3
    182e:	e7f1      	b.n	1814 <atcab_hw_sha2_256+0x14>
    1830:	00001679 	.word	0x00001679
    1834:	00001691 	.word	0x00001691
    1838:	00001749 	.word	0x00001749

0000183c <hal_iface_init>:
    // The key here is to provide the flexibility to include just the types of interfaces you want/need without breaking the
    // object model.  The former is needed so in an embedded, constrained memory environment, you don't have to pay the price
    // (in terms of memory) for interfaces you don't use in your application.
    ATCA_STATUS status = ATCA_COMM_FAIL;

    switch (cfg->iface_type)
    183c:	7803      	ldrb	r3, [r0, #0]
    ATCA_STATUS status = ATCA_COMM_FAIL;
    183e:	20f0      	movs	r0, #240	; 0xf0
    switch (cfg->iface_type)
    1840:	2b00      	cmp	r3, #0
    1842:	d000      	beq.n	1846 <hal_iface_init+0xa>
        break;
    default:
        break;
    }
    return status;
}
    1844:	4770      	bx	lr
        hal->halinit = &hal_i2c_init;
    1846:	4b0a      	ldr	r3, [pc, #40]	; (1870 <hal_iface_init+0x34>)
    1848:	600b      	str	r3, [r1, #0]
        hal->halpostinit = &hal_i2c_post_init;
    184a:	4b0a      	ldr	r3, [pc, #40]	; (1874 <hal_iface_init+0x38>)
    184c:	604b      	str	r3, [r1, #4]
        hal->halreceive = &hal_i2c_receive;
    184e:	4b0a      	ldr	r3, [pc, #40]	; (1878 <hal_iface_init+0x3c>)
    1850:	60cb      	str	r3, [r1, #12]
        hal->halsend = &hal_i2c_send;
    1852:	4b0a      	ldr	r3, [pc, #40]	; (187c <hal_iface_init+0x40>)
    1854:	608b      	str	r3, [r1, #8]
        hal->halsleep = &hal_i2c_sleep;
    1856:	4b0a      	ldr	r3, [pc, #40]	; (1880 <hal_iface_init+0x44>)
    1858:	618b      	str	r3, [r1, #24]
        hal->halwake = &hal_i2c_wake;
    185a:	4b0a      	ldr	r3, [pc, #40]	; (1884 <hal_iface_init+0x48>)
    185c:	610b      	str	r3, [r1, #16]
        hal->halidle = &hal_i2c_idle;
    185e:	4b0a      	ldr	r3, [pc, #40]	; (1888 <hal_iface_init+0x4c>)
    1860:	614b      	str	r3, [r1, #20]
        hal->halrelease = &hal_i2c_release;
    1862:	4b0a      	ldr	r3, [pc, #40]	; (188c <hal_iface_init+0x50>)
    1864:	61cb      	str	r3, [r1, #28]
        hal->hal_data = NULL;
    1866:	2300      	movs	r3, #0
    1868:	620b      	str	r3, [r1, #32]
        status = ATCA_SUCCESS;
    186a:	2000      	movs	r0, #0
        break;
    186c:	e7ea      	b.n	1844 <hal_iface_init+0x8>
    186e:	46c0      	nop			; (mov r8, r8)
    1870:	000018b5 	.word	0x000018b5
    1874:	00001a4d 	.word	0x00001a4d
    1878:	00001aa1 	.word	0x00001aa1
    187c:	00001a51 	.word	0x00001a51
    1880:	00001d55 	.word	0x00001d55
    1884:	00001c0d 	.word	0x00001c0d
    1888:	00001d05 	.word	0x00001d05
    188c:	00001da5 	.word	0x00001da5

00001890 <hal_iface_release>:
 * \param[in] hal_data - pointer to opaque hal data maintained by HAL implementation for this interface type
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_iface_release(ATCAIfaceType iface_type, void *hal_data)
{
    1890:	b510      	push	{r4, lr}
    ATCA_STATUS status = ATCA_GEN_FAIL;

    switch (iface_type)
    1892:	2800      	cmp	r0, #0
    1894:	d001      	beq.n	189a <hal_iface_release+0xa>
    ATCA_STATUS status = ATCA_GEN_FAIL;
    1896:	20e1      	movs	r0, #225	; 0xe1
    default:
        break;
    }

    return status;
}
    1898:	bd10      	pop	{r4, pc}
        status = hal_i2c_release(hal_data);
    189a:	0008      	movs	r0, r1
    189c:	4b01      	ldr	r3, [pc, #4]	; (18a4 <hal_iface_release+0x14>)
    189e:	4798      	blx	r3
        break;
    18a0:	e7fa      	b.n	1898 <hal_iface_release+0x8>
    18a2:	46c0      	nop			; (mov r8, r8)
    18a4:	00001da5 	.word	0x00001da5

000018a8 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    18a8:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    18aa:	2207      	movs	r2, #7
    18ac:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    18ae:	421a      	tst	r2, r3
    18b0:	d1fc      	bne.n	18ac <_i2c_master_wait_for_sync+0x4>
}
    18b2:	4770      	bx	lr

000018b4 <hal_i2c_init>:
 * \param[in] hal - opaque ptr to HAL data
 * \param[in] cfg - interface configuration
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS hal_i2c_init(void *hal, ATCAIfaceCfg *cfg)
{
    18b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    18b6:	46c6      	mov	lr, r8
    18b8:	b500      	push	{lr}
    18ba:	0005      	movs	r5, r0
    18bc:	000e      	movs	r6, r1
    int bus = cfg->atcai2c.bus;   // 0-based logical bus number
    18be:	794c      	ldrb	r4, [r1, #5]
    ATCAHAL_t *phal = (ATCAHAL_t*)hal;

    if (i2c_bus_ref_ct == 0)       // power up state, no i2c buses will have been used
    18c0:	4b51      	ldr	r3, [pc, #324]	; (1a08 <hal_i2c_init+0x154>)
    18c2:	681b      	ldr	r3, [r3, #0]
    18c4:	2b00      	cmp	r3, #0
    18c6:	d107      	bne.n	18d8 <hal_i2c_init+0x24>
    {
        for (int i = 0; i < MAX_I2C_BUSES; i++)
        {
            i2c_hal_data[i] = NULL;
    18c8:	4a50      	ldr	r2, [pc, #320]	; (1a0c <hal_i2c_init+0x158>)
    18ca:	2100      	movs	r1, #0
    18cc:	6011      	str	r1, [r2, #0]
    18ce:	6051      	str	r1, [r2, #4]
    18d0:	6091      	str	r1, [r2, #8]
    18d2:	60d1      	str	r1, [r2, #12]
    18d4:	6111      	str	r1, [r2, #16]
    18d6:	6151      	str	r1, [r2, #20]
        }
    }

    i2c_bus_ref_ct++;  // total across buses
    18d8:	3301      	adds	r3, #1
    18da:	4a4b      	ldr	r2, [pc, #300]	; (1a08 <hal_i2c_init+0x154>)
    18dc:	6013      	str	r3, [r2, #0]
        phal->hal_data = i2c_hal_data[bus];

        return ATCA_SUCCESS;
    }

    return ATCA_COMM_FAIL;
    18de:	20f0      	movs	r0, #240	; 0xf0
    if (bus >= 0 && bus < MAX_I2C_BUSES)
    18e0:	2c05      	cmp	r4, #5
    18e2:	d902      	bls.n	18ea <hal_i2c_init+0x36>
}
    18e4:	bc04      	pop	{r2}
    18e6:	4690      	mov	r8, r2
    18e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (i2c_hal_data[bus] == NULL)
    18ea:	00a3      	lsls	r3, r4, #2
    18ec:	4a47      	ldr	r2, [pc, #284]	; (1a0c <hal_i2c_init+0x158>)
    18ee:	589b      	ldr	r3, [r3, r2]
    18f0:	2b00      	cmp	r3, #0
    18f2:	d008      	beq.n	1906 <hal_i2c_init+0x52>
            i2c_hal_data[bus]->ref_ct++;
    18f4:	68da      	ldr	r2, [r3, #12]
    18f6:	3201      	adds	r2, #1
    18f8:	60da      	str	r2, [r3, #12]
        phal->hal_data = i2c_hal_data[bus];
    18fa:	00a4      	lsls	r4, r4, #2
    18fc:	4b43      	ldr	r3, [pc, #268]	; (1a0c <hal_i2c_init+0x158>)
    18fe:	58e3      	ldr	r3, [r4, r3]
    1900:	622b      	str	r3, [r5, #32]
        return ATCA_SUCCESS;
    1902:	2000      	movs	r0, #0
    1904:	e7ee      	b.n	18e4 <hal_i2c_init+0x30>
            i2c_hal_data[bus] = malloc(sizeof(ATCAI2CMaster_t) );
    1906:	38dc      	subs	r0, #220	; 0xdc
    1908:	4b41      	ldr	r3, [pc, #260]	; (1a10 <hal_i2c_init+0x15c>)
    190a:	4798      	blx	r3
    190c:	4680      	mov	r8, r0
    190e:	00a3      	lsls	r3, r4, #2
    1910:	4a3e      	ldr	r2, [pc, #248]	; (1a0c <hal_i2c_init+0x158>)
    1912:	5098      	str	r0, [r3, r2]
            i2c_hal_data[bus]->ref_ct = 1;  // buses are shared, this is the first instance
    1914:	2301      	movs	r3, #1
    1916:	60c3      	str	r3, [r0, #12]
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    1918:	4b3e      	ldr	r3, [pc, #248]	; (1a14 <hal_i2c_init+0x160>)
    191a:	2264      	movs	r2, #100	; 0x64
    191c:	601a      	str	r2, [r3, #0]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    191e:	4a3e      	ldr	r2, [pc, #248]	; (1a18 <hal_i2c_init+0x164>)
    1920:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    1922:	2200      	movs	r2, #0
    1924:	609a      	str	r2, [r3, #8]
	config->generator_source = GCLK_GENERATOR_0;
    1926:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    1928:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    192a:	2180      	movs	r1, #128	; 0x80
    192c:	0389      	lsls	r1, r1, #14
    192e:	6119      	str	r1, [r3, #16]
	config->buffer_timeout   = 65535;
    1930:	2101      	movs	r1, #1
    1932:	4249      	negs	r1, r1
    1934:	82d9      	strh	r1, [r3, #22]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    1936:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    1938:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    193a:	3125      	adds	r1, #37	; 0x25
    193c:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    193e:	629a      	str	r2, [r3, #40]	; 0x28
	config->scl_stretch_only_after_ack_bit = false;
    1940:	3108      	adds	r1, #8
    1942:	545a      	strb	r2, [r3, r1]
	config->slave_scl_low_extend_timeout   = false;
    1944:	3101      	adds	r1, #1
    1946:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
    1948:	3101      	adds	r1, #1
    194a:	545a      	strb	r2, [r3, r1]
	config->sda_scl_rise_time_ns = 215;
    194c:	32d7      	adds	r2, #215	; 0xd7
    194e:	861a      	strh	r2, [r3, #48]	; 0x30
            if (bus == 1)
    1950:	2c01      	cmp	r4, #1
    1952:	d00f      	beq.n	1974 <hal_i2c_init+0xc0>
            config_i2c_master.unknown_bus_state_timeout = 500;
    1954:	4f2f      	ldr	r7, [pc, #188]	; (1a14 <hal_i2c_init+0x160>)
    1956:	23fa      	movs	r3, #250	; 0xfa
    1958:	005b      	lsls	r3, r3, #1
    195a:	82bb      	strh	r3, [r7, #20]
            config_i2c_master.baud_rate = cfg->atcai2c.baud / 1000;
    195c:	68b0      	ldr	r0, [r6, #8]
    195e:	21fa      	movs	r1, #250	; 0xfa
    1960:	0089      	lsls	r1, r1, #2
    1962:	4b2e      	ldr	r3, [pc, #184]	; (1a1c <hal_i2c_init+0x168>)
    1964:	4798      	blx	r3
    1966:	6038      	str	r0, [r7, #0]
            switch (bus)
    1968:	2c05      	cmp	r4, #5
    196a:	d81c      	bhi.n	19a6 <hal_i2c_init+0xf2>
    196c:	00a3      	lsls	r3, r4, #2
    196e:	4a2c      	ldr	r2, [pc, #176]	; (1a20 <hal_i2c_init+0x16c>)
    1970:	58d3      	ldr	r3, [r2, r3]
    1972:	469f      	mov	pc, r3
                config_i2c_master.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    1974:	001f      	movs	r7, r3
    1976:	4b2b      	ldr	r3, [pc, #172]	; (1a24 <hal_i2c_init+0x170>)
    1978:	61fb      	str	r3, [r7, #28]
                config_i2c_master.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
    197a:	4b2b      	ldr	r3, [pc, #172]	; (1a28 <hal_i2c_init+0x174>)
    197c:	623b      	str	r3, [r7, #32]
            config_i2c_master.unknown_bus_state_timeout = 500;
    197e:	23fa      	movs	r3, #250	; 0xfa
    1980:	005b      	lsls	r3, r3, #1
    1982:	82bb      	strh	r3, [r7, #20]
            config_i2c_master.baud_rate = cfg->atcai2c.baud / 1000;
    1984:	68b0      	ldr	r0, [r6, #8]
    1986:	21fa      	movs	r1, #250	; 0xfa
    1988:	0089      	lsls	r1, r1, #2
    198a:	4b24      	ldr	r3, [pc, #144]	; (1a1c <hal_i2c_init+0x168>)
    198c:	4798      	blx	r3
    198e:	6038      	str	r0, [r7, #0]
            case 1: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM1, &config_i2c_master); break;
    1990:	4a20      	ldr	r2, [pc, #128]	; (1a14 <hal_i2c_init+0x160>)
    1992:	4926      	ldr	r1, [pc, #152]	; (1a2c <hal_i2c_init+0x178>)
    1994:	4640      	mov	r0, r8
    1996:	4b26      	ldr	r3, [pc, #152]	; (1a30 <hal_i2c_init+0x17c>)
    1998:	4798      	blx	r3
    199a:	e004      	b.n	19a6 <hal_i2c_init+0xf2>
            case 0: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM0, &config_i2c_master); break;
    199c:	4a1d      	ldr	r2, [pc, #116]	; (1a14 <hal_i2c_init+0x160>)
    199e:	4925      	ldr	r1, [pc, #148]	; (1a34 <hal_i2c_init+0x180>)
    19a0:	4640      	mov	r0, r8
    19a2:	4b23      	ldr	r3, [pc, #140]	; (1a30 <hal_i2c_init+0x17c>)
    19a4:	4798      	blx	r3
            i2c_hal_data[bus]->bus_index = bus;
    19a6:	4b19      	ldr	r3, [pc, #100]	; (1a0c <hal_i2c_init+0x158>)
    19a8:	00a2      	lsls	r2, r4, #2
    19aa:	58d1      	ldr	r1, [r2, r3]
    19ac:	610c      	str	r4, [r1, #16]
            i2c_master_enable(&(i2c_hal_data[bus]->i2c_master_instance));
    19ae:	58d7      	ldr	r7, [r2, r3]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    19b0:	683e      	ldr	r6, [r7, #0]
	_i2c_master_wait_for_sync(module);
    19b2:	0038      	movs	r0, r7
    19b4:	4b20      	ldr	r3, [pc, #128]	; (1a38 <hal_i2c_init+0x184>)
    19b6:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    19b8:	6833      	ldr	r3, [r6, #0]
    19ba:	2202      	movs	r2, #2
    19bc:	4313      	orrs	r3, r2
    19be:	6033      	str	r3, [r6, #0]
	uint32_t timeout_counter = 0;
    19c0:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    19c2:	2110      	movs	r1, #16
    19c4:	8b72      	ldrh	r2, [r6, #26]
    19c6:	420a      	tst	r2, r1
    19c8:	d197      	bne.n	18fa <hal_i2c_init+0x46>
		timeout_counter++;
    19ca:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    19cc:	88fa      	ldrh	r2, [r7, #6]
    19ce:	4293      	cmp	r3, r2
    19d0:	d3f8      	bcc.n	19c4 <hal_i2c_init+0x110>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    19d2:	2310      	movs	r3, #16
    19d4:	8373      	strh	r3, [r6, #26]
    19d6:	e790      	b.n	18fa <hal_i2c_init+0x46>
            case 2: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM2, &config_i2c_master); break;
    19d8:	4a0e      	ldr	r2, [pc, #56]	; (1a14 <hal_i2c_init+0x160>)
    19da:	4918      	ldr	r1, [pc, #96]	; (1a3c <hal_i2c_init+0x188>)
    19dc:	4640      	mov	r0, r8
    19de:	4b14      	ldr	r3, [pc, #80]	; (1a30 <hal_i2c_init+0x17c>)
    19e0:	4798      	blx	r3
    19e2:	e7e0      	b.n	19a6 <hal_i2c_init+0xf2>
            case 3: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM3, &config_i2c_master); break;
    19e4:	4a0b      	ldr	r2, [pc, #44]	; (1a14 <hal_i2c_init+0x160>)
    19e6:	4916      	ldr	r1, [pc, #88]	; (1a40 <hal_i2c_init+0x18c>)
    19e8:	4640      	mov	r0, r8
    19ea:	4b11      	ldr	r3, [pc, #68]	; (1a30 <hal_i2c_init+0x17c>)
    19ec:	4798      	blx	r3
    19ee:	e7da      	b.n	19a6 <hal_i2c_init+0xf2>
            case 4: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM4, &config_i2c_master); break;
    19f0:	4a08      	ldr	r2, [pc, #32]	; (1a14 <hal_i2c_init+0x160>)
    19f2:	4914      	ldr	r1, [pc, #80]	; (1a44 <hal_i2c_init+0x190>)
    19f4:	4640      	mov	r0, r8
    19f6:	4b0e      	ldr	r3, [pc, #56]	; (1a30 <hal_i2c_init+0x17c>)
    19f8:	4798      	blx	r3
    19fa:	e7d4      	b.n	19a6 <hal_i2c_init+0xf2>
            case 5: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM5, &config_i2c_master); break;
    19fc:	4a05      	ldr	r2, [pc, #20]	; (1a14 <hal_i2c_init+0x160>)
    19fe:	4912      	ldr	r1, [pc, #72]	; (1a48 <hal_i2c_init+0x194>)
    1a00:	4640      	mov	r0, r8
    1a02:	4b0b      	ldr	r3, [pc, #44]	; (1a30 <hal_i2c_init+0x17c>)
    1a04:	4798      	blx	r3
    1a06:	e7ce      	b.n	19a6 <hal_i2c_init+0xf2>
    1a08:	20000128 	.word	0x20000128
    1a0c:	200001e4 	.word	0x200001e4
    1a10:	000057a1 	.word	0x000057a1
    1a14:	200000f4 	.word	0x200000f4
    1a18:	00000d48 	.word	0x00000d48
    1a1c:	00003979 	.word	0x00003979
    1a20:	000059c0 	.word	0x000059c0
    1a24:	00100002 	.word	0x00100002
    1a28:	00110002 	.word	0x00110002
    1a2c:	42000c00 	.word	0x42000c00
    1a30:	00000121 	.word	0x00000121
    1a34:	42000800 	.word	0x42000800
    1a38:	000018a9 	.word	0x000018a9
    1a3c:	42001000 	.word	0x42001000
    1a40:	42001400 	.word	0x42001400
    1a44:	42001800 	.word	0x42001800
    1a48:	42001c00 	.word	0x42001c00

00001a4c <hal_i2c_post_init>:
 * \return ATCA_SUCCESS
 */
ATCA_STATUS hal_i2c_post_init(ATCAIface iface)
{
    return ATCA_SUCCESS;
}
    1a4c:	2000      	movs	r0, #0
    1a4e:	4770      	bx	lr

00001a50 <hal_i2c_send>:
 * \param[in] txlength  number of bytes to send
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_send(ATCAIface iface, uint8_t *txdata, int txlength)
{
    1a50:	b530      	push	{r4, r5, lr}
    1a52:	b085      	sub	sp, #20
    1a54:	000d      	movs	r5, r1
    1a56:	0014      	movs	r4, r2
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    1a58:	4b0e      	ldr	r3, [pc, #56]	; (1a94 <hal_i2c_send+0x44>)
    1a5a:	4798      	blx	r3
    int bus = cfg->atcai2c.bus;
    1a5c:	7943      	ldrb	r3, [r0, #5]

    struct i2c_master_packet packet = {
    1a5e:	a901      	add	r1, sp, #4
    1a60:	7902      	ldrb	r2, [r0, #4]
    1a62:	0852      	lsrs	r2, r2, #1
    1a64:	800a      	strh	r2, [r1, #0]
    1a66:	604d      	str	r5, [r1, #4]
    1a68:	2200      	movs	r2, #0
    1a6a:	720a      	strb	r2, [r1, #8]
    1a6c:	724a      	strb	r2, [r1, #9]
    1a6e:	728a      	strb	r2, [r1, #10]
    // for this implementation of I2C with CryptoAuth chips, txdata is assumed to have ATCAPacket format

    // other device types that don't require i/o tokens on the front end of a command need a different hal_i2c_send and wire it up instead of this one
    // this covers devices such as ATSHA204A and ATECCx08A that require a word address value pre-pended to the packet
    // txdata[0] is using _reserved byte of the ATCAPacket
    txdata[0] = 0x03;   // insert the Word Address Value, Command token
    1a70:	3203      	adds	r2, #3
    1a72:	702a      	strb	r2, [r5, #0]
    txlength++;         // account for word address value byte.
    1a74:	3401      	adds	r4, #1
    packet.data_length = txlength;
    1a76:	804c      	strh	r4, [r1, #2]

    //	statusCode = i2c_master_write_packet_wait(&i2c_master_instance, &packet);
    //if ( i2c_master_write_packet_wait_no_stop( &(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK)
    if (i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK)
    1a78:	009b      	lsls	r3, r3, #2
    1a7a:	4a07      	ldr	r2, [pc, #28]	; (1a98 <hal_i2c_send+0x48>)
    1a7c:	5898      	ldr	r0, [r3, r2]
    1a7e:	4b07      	ldr	r3, [pc, #28]	; (1a9c <hal_i2c_send+0x4c>)
    1a80:	4798      	blx	r3
    1a82:	0003      	movs	r3, r0
    {
        return ATCA_COMM_FAIL;
    1a84:	20f0      	movs	r0, #240	; 0xf0
    }

    return ATCA_SUCCESS;
    1a86:	1e5a      	subs	r2, r3, #1
    1a88:	4193      	sbcs	r3, r2
    1a8a:	425b      	negs	r3, r3
    1a8c:	4018      	ands	r0, r3
}
    1a8e:	b005      	add	sp, #20
    1a90:	bd30      	pop	{r4, r5, pc}
    1a92:	46c0      	nop			; (mov r8, r8)
    1a94:	00000f69 	.word	0x00000f69
    1a98:	200001e4 	.word	0x200001e4
    1a9c:	00000739 	.word	0x00000739

00001aa0 <hal_i2c_receive>:
 * \param[in] rxlength  ptr to expected number of receive bytes to request
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_receive(ATCAIface iface, uint8_t *rxdata, uint16_t *rxlength)
{
    1aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1aa2:	b085      	sub	sp, #20
    1aa4:	000c      	movs	r4, r1
    1aa6:	0016      	movs	r6, r2
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    1aa8:	4b15      	ldr	r3, [pc, #84]	; (1b00 <hal_i2c_receive+0x60>)
    1aaa:	4798      	blx	r3
    int bus = cfg->atcai2c.bus;
    1aac:	7945      	ldrb	r5, [r0, #5]
    int retries = cfg->rx_retries;
    1aae:	6a81      	ldr	r1, [r0, #40]	; 0x28
    int status = !STATUS_OK;

    struct i2c_master_packet packet = {
    1ab0:	ab01      	add	r3, sp, #4
    1ab2:	7902      	ldrb	r2, [r0, #4]
    1ab4:	0852      	lsrs	r2, r2, #1
    1ab6:	801a      	strh	r2, [r3, #0]
    1ab8:	8832      	ldrh	r2, [r6, #0]
    1aba:	805a      	strh	r2, [r3, #2]
    1abc:	9402      	str	r4, [sp, #8]
    1abe:	2200      	movs	r2, #0
    1ac0:	721a      	strb	r2, [r3, #8]
    1ac2:	725a      	strb	r2, [r3, #9]
    1ac4:	729a      	strb	r2, [r3, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    while (retries-- > 0 && status != STATUS_OK)
    1ac6:	1e4c      	subs	r4, r1, #1
    1ac8:	2900      	cmp	r1, #0
    1aca:	dd16      	ble.n	1afa <hal_i2c_receive+0x5a>
    {
        status = i2c_master_read_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet);
    1acc:	4f0d      	ldr	r7, [pc, #52]	; (1b04 <hal_i2c_receive+0x64>)
    1ace:	4e0e      	ldr	r6, [pc, #56]	; (1b08 <hal_i2c_receive+0x68>)
    1ad0:	00ab      	lsls	r3, r5, #2
    1ad2:	59d8      	ldr	r0, [r3, r7]
    1ad4:	a901      	add	r1, sp, #4
    1ad6:	47b0      	blx	r6
    while (retries-- > 0 && status != STATUS_OK)
    1ad8:	3c01      	subs	r4, #1
    1ada:	d308      	bcc.n	1aee <hal_i2c_receive+0x4e>
    1adc:	2800      	cmp	r0, #0
    1ade:	d1f7      	bne.n	1ad0 <hal_i2c_receive+0x30>
    if (status != STATUS_OK)
    {
        return ATCA_COMM_FAIL;
    }

    if (atCheckCrc(packet.data) != ATCA_SUCCESS)
    1ae0:	9802      	ldr	r0, [sp, #8]
    1ae2:	4b0a      	ldr	r3, [pc, #40]	; (1b0c <hal_i2c_receive+0x6c>)
    1ae4:	4798      	blx	r3
    1ae6:	1e03      	subs	r3, r0, #0
    1ae8:	d004      	beq.n	1af4 <hal_i2c_receive+0x54>
    {
        return ATCA_COMM_FAIL;
    1aea:	23f0      	movs	r3, #240	; 0xf0
    1aec:	e002      	b.n	1af4 <hal_i2c_receive+0x54>
        return ATCA_COMM_FAIL;
    1aee:	23f0      	movs	r3, #240	; 0xf0
    if (status != STATUS_OK)
    1af0:	2800      	cmp	r0, #0
    1af2:	d0f5      	beq.n	1ae0 <hal_i2c_receive+0x40>
    }

    return ATCA_SUCCESS;
}
    1af4:	0018      	movs	r0, r3
    1af6:	b005      	add	sp, #20
    1af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ATCA_COMM_FAIL;
    1afa:	23f0      	movs	r3, #240	; 0xf0
    1afc:	e7fa      	b.n	1af4 <hal_i2c_receive+0x54>
    1afe:	46c0      	nop			; (mov r8, r8)
    1b00:	00000f69 	.word	0x00000f69
    1b04:	200001e4 	.word	0x200001e4
    1b08:	00000725 	.word	0x00000725
    1b0c:	00000d61 	.word	0x00000d61

00001b10 <change_i2c_speed>:
 * \param[in] iface  interface on which to change bus speed
 * \param[in] speed  baud rate (typically 100000 or 400000)
 */

void change_i2c_speed(ATCAIface iface, uint32_t speed)
{
    1b10:	b570      	push	{r4, r5, r6, lr}
    1b12:	000e      	movs	r6, r1
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    1b14:	4b2f      	ldr	r3, [pc, #188]	; (1bd4 <change_i2c_speed+0xc4>)
    1b16:	4798      	blx	r3
    int bus = cfg->atcai2c.bus;
    1b18:	7944      	ldrb	r4, [r0, #5]

    config_i2c_master.buffer_timeout = 10000;
    1b1a:	4d2f      	ldr	r5, [pc, #188]	; (1bd8 <change_i2c_speed+0xc8>)
    1b1c:	4b2f      	ldr	r3, [pc, #188]	; (1bdc <change_i2c_speed+0xcc>)
    1b1e:	82eb      	strh	r3, [r5, #22]
    config_i2c_master.baud_rate = speed / 1000;
    1b20:	21fa      	movs	r1, #250	; 0xfa
    1b22:	0089      	lsls	r1, r1, #2
    1b24:	0030      	movs	r0, r6
    1b26:	4b2e      	ldr	r3, [pc, #184]	; (1be0 <change_i2c_speed+0xd0>)
    1b28:	4798      	blx	r3
    1b2a:	6028      	str	r0, [r5, #0]

    i2c_master_disable(&(i2c_hal_data[bus]->i2c_master_instance));
    1b2c:	00a2      	lsls	r2, r4, #2
    1b2e:	4b2d      	ldr	r3, [pc, #180]	; (1be4 <change_i2c_speed+0xd4>)
    1b30:	58d0      	ldr	r0, [r2, r3]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1b32:	6805      	ldr	r5, [r0, #0]
	_i2c_master_wait_for_sync(module);
    1b34:	4b2c      	ldr	r3, [pc, #176]	; (1be8 <change_i2c_speed+0xd8>)
    1b36:	4798      	blx	r3
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    1b38:	2383      	movs	r3, #131	; 0x83
    1b3a:	752b      	strb	r3, [r5, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    1b3c:	762b      	strb	r3, [r5, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    1b3e:	682b      	ldr	r3, [r5, #0]
    1b40:	2202      	movs	r2, #2
    1b42:	4393      	bics	r3, r2
    1b44:	602b      	str	r3, [r5, #0]

    switch (bus)
    1b46:	2c05      	cmp	r4, #5
    1b48:	d809      	bhi.n	1b5e <change_i2c_speed+0x4e>
    1b4a:	00a3      	lsls	r3, r4, #2
    1b4c:	4a27      	ldr	r2, [pc, #156]	; (1bec <change_i2c_speed+0xdc>)
    1b4e:	58d3      	ldr	r3, [r2, r3]
    1b50:	469f      	mov	pc, r3
    {
    case 0: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM0, &config_i2c_master); break;
    1b52:	4b24      	ldr	r3, [pc, #144]	; (1be4 <change_i2c_speed+0xd4>)
    1b54:	6818      	ldr	r0, [r3, #0]
    1b56:	4a20      	ldr	r2, [pc, #128]	; (1bd8 <change_i2c_speed+0xc8>)
    1b58:	4925      	ldr	r1, [pc, #148]	; (1bf0 <change_i2c_speed+0xe0>)
    1b5a:	4b26      	ldr	r3, [pc, #152]	; (1bf4 <change_i2c_speed+0xe4>)
    1b5c:	4798      	blx	r3
    case 3: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM3, &config_i2c_master); break;
    case 4: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM4, &config_i2c_master); break;
    case 5: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM5, &config_i2c_master); break;
    }

    i2c_master_enable(&(i2c_hal_data[bus]->i2c_master_instance));
    1b5e:	00a4      	lsls	r4, r4, #2
    1b60:	4b20      	ldr	r3, [pc, #128]	; (1be4 <change_i2c_speed+0xd4>)
    1b62:	58e5      	ldr	r5, [r4, r3]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1b64:	682c      	ldr	r4, [r5, #0]
	_i2c_master_wait_for_sync(module);
    1b66:	0028      	movs	r0, r5
    1b68:	4b1f      	ldr	r3, [pc, #124]	; (1be8 <change_i2c_speed+0xd8>)
    1b6a:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1b6c:	6823      	ldr	r3, [r4, #0]
    1b6e:	2202      	movs	r2, #2
    1b70:	4313      	orrs	r3, r2
    1b72:	6023      	str	r3, [r4, #0]
	uint32_t timeout_counter = 0;
    1b74:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1b76:	2110      	movs	r1, #16
    1b78:	8b62      	ldrh	r2, [r4, #26]
    1b7a:	420a      	tst	r2, r1
    1b7c:	d105      	bne.n	1b8a <change_i2c_speed+0x7a>
		timeout_counter++;
    1b7e:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1b80:	88ea      	ldrh	r2, [r5, #6]
    1b82:	4293      	cmp	r3, r2
    1b84:	d3f8      	bcc.n	1b78 <change_i2c_speed+0x68>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1b86:	2310      	movs	r3, #16
    1b88:	8363      	strh	r3, [r4, #26]
}
    1b8a:	bd70      	pop	{r4, r5, r6, pc}
    case 1: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM1, &config_i2c_master); break;
    1b8c:	4b15      	ldr	r3, [pc, #84]	; (1be4 <change_i2c_speed+0xd4>)
    1b8e:	6858      	ldr	r0, [r3, #4]
    1b90:	4a11      	ldr	r2, [pc, #68]	; (1bd8 <change_i2c_speed+0xc8>)
    1b92:	4919      	ldr	r1, [pc, #100]	; (1bf8 <change_i2c_speed+0xe8>)
    1b94:	4b17      	ldr	r3, [pc, #92]	; (1bf4 <change_i2c_speed+0xe4>)
    1b96:	4798      	blx	r3
    1b98:	e7e1      	b.n	1b5e <change_i2c_speed+0x4e>
    case 2: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM2, &config_i2c_master); break;
    1b9a:	4b12      	ldr	r3, [pc, #72]	; (1be4 <change_i2c_speed+0xd4>)
    1b9c:	6898      	ldr	r0, [r3, #8]
    1b9e:	4a0e      	ldr	r2, [pc, #56]	; (1bd8 <change_i2c_speed+0xc8>)
    1ba0:	4916      	ldr	r1, [pc, #88]	; (1bfc <change_i2c_speed+0xec>)
    1ba2:	4b14      	ldr	r3, [pc, #80]	; (1bf4 <change_i2c_speed+0xe4>)
    1ba4:	4798      	blx	r3
    1ba6:	e7da      	b.n	1b5e <change_i2c_speed+0x4e>
    case 3: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM3, &config_i2c_master); break;
    1ba8:	4b0e      	ldr	r3, [pc, #56]	; (1be4 <change_i2c_speed+0xd4>)
    1baa:	68d8      	ldr	r0, [r3, #12]
    1bac:	4a0a      	ldr	r2, [pc, #40]	; (1bd8 <change_i2c_speed+0xc8>)
    1bae:	4914      	ldr	r1, [pc, #80]	; (1c00 <change_i2c_speed+0xf0>)
    1bb0:	4b10      	ldr	r3, [pc, #64]	; (1bf4 <change_i2c_speed+0xe4>)
    1bb2:	4798      	blx	r3
    1bb4:	e7d3      	b.n	1b5e <change_i2c_speed+0x4e>
    case 4: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM4, &config_i2c_master); break;
    1bb6:	4b0b      	ldr	r3, [pc, #44]	; (1be4 <change_i2c_speed+0xd4>)
    1bb8:	6918      	ldr	r0, [r3, #16]
    1bba:	4a07      	ldr	r2, [pc, #28]	; (1bd8 <change_i2c_speed+0xc8>)
    1bbc:	4911      	ldr	r1, [pc, #68]	; (1c04 <change_i2c_speed+0xf4>)
    1bbe:	4b0d      	ldr	r3, [pc, #52]	; (1bf4 <change_i2c_speed+0xe4>)
    1bc0:	4798      	blx	r3
    1bc2:	e7cc      	b.n	1b5e <change_i2c_speed+0x4e>
    case 5: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM5, &config_i2c_master); break;
    1bc4:	4b07      	ldr	r3, [pc, #28]	; (1be4 <change_i2c_speed+0xd4>)
    1bc6:	6958      	ldr	r0, [r3, #20]
    1bc8:	4a03      	ldr	r2, [pc, #12]	; (1bd8 <change_i2c_speed+0xc8>)
    1bca:	490f      	ldr	r1, [pc, #60]	; (1c08 <change_i2c_speed+0xf8>)
    1bcc:	4b09      	ldr	r3, [pc, #36]	; (1bf4 <change_i2c_speed+0xe4>)
    1bce:	4798      	blx	r3
    1bd0:	e7c5      	b.n	1b5e <change_i2c_speed+0x4e>
    1bd2:	46c0      	nop			; (mov r8, r8)
    1bd4:	00000f69 	.word	0x00000f69
    1bd8:	200000f4 	.word	0x200000f4
    1bdc:	00002710 	.word	0x00002710
    1be0:	00003979 	.word	0x00003979
    1be4:	200001e4 	.word	0x200001e4
    1be8:	000018a9 	.word	0x000018a9
    1bec:	000059d8 	.word	0x000059d8
    1bf0:	42000800 	.word	0x42000800
    1bf4:	00000121 	.word	0x00000121
    1bf8:	42000c00 	.word	0x42000c00
    1bfc:	42001000 	.word	0x42001000
    1c00:	42001400 	.word	0x42001400
    1c04:	42001800 	.word	0x42001800
    1c08:	42001c00 	.word	0x42001c00

00001c0c <hal_i2c_wake>:
 * \param[in] iface  interface to logical device to wakeup
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_wake(ATCAIface iface)
{
    1c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c0e:	46d6      	mov	lr, sl
    1c10:	464f      	mov	r7, r9
    1c12:	4646      	mov	r6, r8
    1c14:	b5c0      	push	{r6, r7, lr}
    1c16:	b088      	sub	sp, #32
    1c18:	0004      	movs	r4, r0
    1c1a:	9001      	str	r0, [sp, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    1c1c:	4b30      	ldr	r3, [pc, #192]	; (1ce0 <hal_i2c_wake+0xd4>)
    1c1e:	4798      	blx	r3
    1c20:	4681      	mov	r9, r0
    int bus = cfg->atcai2c.bus;
    1c22:	7947      	ldrb	r7, [r0, #5]
    int retries = cfg->rx_retries;
    1c24:	6a86      	ldr	r6, [r0, #40]	; 0x28
    uint32_t bdrt = cfg->atcai2c.baud;
    1c26:	6883      	ldr	r3, [r0, #8]
    1c28:	4698      	mov	r8, r3
    int status = !STATUS_OK;
    uint8_t data[4], expected[4] = { 0x04, 0x11, 0x33, 0x43 };
    1c2a:	4b2e      	ldr	r3, [pc, #184]	; (1ce4 <hal_i2c_wake+0xd8>)
    1c2c:	699b      	ldr	r3, [r3, #24]
    1c2e:	9306      	str	r3, [sp, #24]

    if (bdrt != 100000)    // if not already at 100KHz, change it
    1c30:	4b2d      	ldr	r3, [pc, #180]	; (1ce8 <hal_i2c_wake+0xdc>)
    1c32:	4598      	cmp	r8, r3
    1c34:	d003      	beq.n	1c3e <hal_i2c_wake+0x32>
    {
        change_i2c_speed(iface, 100000);
    1c36:	0019      	movs	r1, r3
    1c38:	0020      	movs	r0, r4
    1c3a:	4b2c      	ldr	r3, [pc, #176]	; (1cec <hal_i2c_wake+0xe0>)
    1c3c:	4798      	blx	r3
    }

    // Send the wake by writing to an address of 0x00
    struct i2c_master_packet packet = {
    1c3e:	ac03      	add	r4, sp, #12
    1c40:	2200      	movs	r2, #0
    1c42:	2300      	movs	r3, #0
    1c44:	8022      	strh	r2, [r4, #0]
    1c46:	8062      	strh	r2, [r4, #2]
    1c48:	ad07      	add	r5, sp, #28
    1c4a:	9504      	str	r5, [sp, #16]
    1c4c:	7223      	strb	r3, [r4, #8]
    1c4e:	7263      	strb	r3, [r4, #9]
    1c50:	72a3      	strb	r3, [r4, #10]
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    // Send the 00 address as the wake pulse
    i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet);       // part will NACK, so don't check for status
    1c52:	00bb      	lsls	r3, r7, #2
    1c54:	4a26      	ldr	r2, [pc, #152]	; (1cf0 <hal_i2c_wake+0xe4>)
    1c56:	5898      	ldr	r0, [r3, r2]
    1c58:	0021      	movs	r1, r4
    1c5a:	4b26      	ldr	r3, [pc, #152]	; (1cf4 <hal_i2c_wake+0xe8>)
    1c5c:	4798      	blx	r3

    atca_delay_us(cfg->wake_delay);                                                         // wait tWHI + tWLO which is configured based on device type and configuration structure
    1c5e:	464b      	mov	r3, r9
    1c60:	8c98      	ldrh	r0, [r3, #36]	; 0x24
    1c62:	4b25      	ldr	r3, [pc, #148]	; (1cf8 <hal_i2c_wake+0xec>)
    1c64:	4798      	blx	r3

    packet.address = cfg->atcai2c.slave_address >> 1;
    1c66:	464b      	mov	r3, r9
    1c68:	791b      	ldrb	r3, [r3, #4]
    1c6a:	085b      	lsrs	r3, r3, #1
    1c6c:	8023      	strh	r3, [r4, #0]
    packet.data_length = 4;
    1c6e:	2304      	movs	r3, #4
    1c70:	8063      	strh	r3, [r4, #2]
    packet.data = data;
    1c72:	6065      	str	r5, [r4, #4]

    while (retries-- > 0 && status != STATUS_OK)
    1c74:	1e75      	subs	r5, r6, #1
    1c76:	2e00      	cmp	r6, #0
    1c78:	dd2c      	ble.n	1cd4 <hal_i2c_wake+0xc8>
    {
        status = i2c_master_read_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet);
    1c7a:	4b1d      	ldr	r3, [pc, #116]	; (1cf0 <hal_i2c_wake+0xe4>)
    1c7c:	469a      	mov	sl, r3
    1c7e:	4e1f      	ldr	r6, [pc, #124]	; (1cfc <hal_i2c_wake+0xf0>)
    1c80:	00bb      	lsls	r3, r7, #2
    1c82:	4652      	mov	r2, sl
    1c84:	5898      	ldr	r0, [r3, r2]
    1c86:	a903      	add	r1, sp, #12
    1c88:	47b0      	blx	r6
    1c8a:	0004      	movs	r4, r0
    while (retries-- > 0 && status != STATUS_OK)
    1c8c:	3d01      	subs	r5, #1
    1c8e:	d30d      	bcc.n	1cac <hal_i2c_wake+0xa0>
    1c90:	2800      	cmp	r0, #0
    1c92:	d1f5      	bne.n	1c80 <hal_i2c_wake+0x74>
    }

    // if necessary, revert baud rate to what came in.
    if (bdrt != 100000)
    1c94:	4b14      	ldr	r3, [pc, #80]	; (1ce8 <hal_i2c_wake+0xdc>)
    1c96:	4598      	cmp	r8, r3
    1c98:	d10b      	bne.n	1cb2 <hal_i2c_wake+0xa6>
    if (status != STATUS_OK)
    {
        return ATCA_COMM_FAIL;
    }

    if (memcmp(data, expected, 4) == 0)
    1c9a:	2204      	movs	r2, #4
    1c9c:	a906      	add	r1, sp, #24
    1c9e:	a807      	add	r0, sp, #28
    1ca0:	4b17      	ldr	r3, [pc, #92]	; (1d00 <hal_i2c_wake+0xf4>)
    1ca2:	4798      	blx	r3
    1ca4:	2800      	cmp	r0, #0
    1ca6:	d013      	beq.n	1cd0 <hal_i2c_wake+0xc4>
    {
        return ATCA_SUCCESS;
    }

    return ATCA_COMM_FAIL;
    1ca8:	20f0      	movs	r0, #240	; 0xf0
    1caa:	e009      	b.n	1cc0 <hal_i2c_wake+0xb4>
    if (bdrt != 100000)
    1cac:	4b0e      	ldr	r3, [pc, #56]	; (1ce8 <hal_i2c_wake+0xdc>)
    1cae:	4598      	cmp	r8, r3
    1cb0:	d003      	beq.n	1cba <hal_i2c_wake+0xae>
        change_i2c_speed(iface, bdrt);
    1cb2:	4641      	mov	r1, r8
    1cb4:	9801      	ldr	r0, [sp, #4]
    1cb6:	4b0d      	ldr	r3, [pc, #52]	; (1cec <hal_i2c_wake+0xe0>)
    1cb8:	4798      	blx	r3
        return ATCA_COMM_FAIL;
    1cba:	20f0      	movs	r0, #240	; 0xf0
    if (status != STATUS_OK)
    1cbc:	2c00      	cmp	r4, #0
    1cbe:	d0ec      	beq.n	1c9a <hal_i2c_wake+0x8e>
}
    1cc0:	b008      	add	sp, #32
    1cc2:	bc1c      	pop	{r2, r3, r4}
    1cc4:	4690      	mov	r8, r2
    1cc6:	4699      	mov	r9, r3
    1cc8:	46a2      	mov	sl, r4
    1cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int status = !STATUS_OK;
    1ccc:	2401      	movs	r4, #1
    1cce:	e7f0      	b.n	1cb2 <hal_i2c_wake+0xa6>
        return ATCA_SUCCESS;
    1cd0:	2000      	movs	r0, #0
    1cd2:	e7f5      	b.n	1cc0 <hal_i2c_wake+0xb4>
    if (bdrt != 100000)
    1cd4:	4b04      	ldr	r3, [pc, #16]	; (1ce8 <hal_i2c_wake+0xdc>)
    1cd6:	4598      	cmp	r8, r3
    1cd8:	d1f8      	bne.n	1ccc <hal_i2c_wake+0xc0>
        return ATCA_COMM_FAIL;
    1cda:	20f0      	movs	r0, #240	; 0xf0
    1cdc:	e7f0      	b.n	1cc0 <hal_i2c_wake+0xb4>
    1cde:	46c0      	nop			; (mov r8, r8)
    1ce0:	00000f69 	.word	0x00000f69
    1ce4:	000059f0 	.word	0x000059f0
    1ce8:	000186a0 	.word	0x000186a0
    1cec:	00001b11 	.word	0x00001b11
    1cf0:	200001e4 	.word	0x200001e4
    1cf4:	00000739 	.word	0x00000739
    1cf8:	00001df9 	.word	0x00001df9
    1cfc:	00000725 	.word	0x00000725
    1d00:	000057c9 	.word	0x000057c9

00001d04 <hal_i2c_idle>:
 * \param[in] iface  interface to logical device to idle
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_idle(ATCAIface iface)
{
    1d04:	b500      	push	{lr}
    1d06:	b085      	sub	sp, #20
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    1d08:	4b0f      	ldr	r3, [pc, #60]	; (1d48 <hal_i2c_idle+0x44>)
    1d0a:	4798      	blx	r3
    int bus = cfg->atcai2c.bus;
    1d0c:	7943      	ldrb	r3, [r0, #5]
    uint8_t data[4];

    struct i2c_master_packet packet = {
    1d0e:	7902      	ldrb	r2, [r0, #4]
    1d10:	0852      	lsrs	r2, r2, #1
    1d12:	4669      	mov	r1, sp
    1d14:	800a      	strh	r2, [r1, #0]
    1d16:	2201      	movs	r2, #1
    1d18:	804a      	strh	r2, [r1, #2]
    1d1a:	a903      	add	r1, sp, #12
    1d1c:	9101      	str	r1, [sp, #4]
    1d1e:	2200      	movs	r2, #0
    1d20:	4668      	mov	r0, sp
    1d22:	7202      	strb	r2, [r0, #8]
    1d24:	7242      	strb	r2, [r0, #9]
    1d26:	7282      	strb	r2, [r0, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    data[0] = 0x02;  // idle word address value
    1d28:	3202      	adds	r2, #2
    1d2a:	700a      	strb	r2, [r1, #0]
    if (i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK)
    1d2c:	009b      	lsls	r3, r3, #2
    1d2e:	4a07      	ldr	r2, [pc, #28]	; (1d4c <hal_i2c_idle+0x48>)
    1d30:	5898      	ldr	r0, [r3, r2]
    1d32:	4669      	mov	r1, sp
    1d34:	4b06      	ldr	r3, [pc, #24]	; (1d50 <hal_i2c_idle+0x4c>)
    1d36:	4798      	blx	r3
    1d38:	0003      	movs	r3, r0
    {
        return ATCA_COMM_FAIL;
    1d3a:	20f0      	movs	r0, #240	; 0xf0
    }

    return ATCA_SUCCESS;
    1d3c:	1e5a      	subs	r2, r3, #1
    1d3e:	4193      	sbcs	r3, r2
    1d40:	425b      	negs	r3, r3
    1d42:	4018      	ands	r0, r3

}
    1d44:	b005      	add	sp, #20
    1d46:	bd00      	pop	{pc}
    1d48:	00000f69 	.word	0x00000f69
    1d4c:	200001e4 	.word	0x200001e4
    1d50:	00000739 	.word	0x00000739

00001d54 <hal_i2c_sleep>:
 * \param[in] iface  interface to logical device to sleep
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_sleep(ATCAIface iface)
{
    1d54:	b500      	push	{lr}
    1d56:	b085      	sub	sp, #20
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    1d58:	4b0f      	ldr	r3, [pc, #60]	; (1d98 <hal_i2c_sleep+0x44>)
    1d5a:	4798      	blx	r3
    int bus = cfg->atcai2c.bus;
    1d5c:	7943      	ldrb	r3, [r0, #5]
    uint8_t data[4];

    struct i2c_master_packet packet = {
    1d5e:	7902      	ldrb	r2, [r0, #4]
    1d60:	0852      	lsrs	r2, r2, #1
    1d62:	4669      	mov	r1, sp
    1d64:	800a      	strh	r2, [r1, #0]
    1d66:	2201      	movs	r2, #1
    1d68:	804a      	strh	r2, [r1, #2]
    1d6a:	a903      	add	r1, sp, #12
    1d6c:	9101      	str	r1, [sp, #4]
    1d6e:	2200      	movs	r2, #0
    1d70:	4668      	mov	r0, sp
    1d72:	7202      	strb	r2, [r0, #8]
    1d74:	7242      	strb	r2, [r0, #9]
    1d76:	7282      	strb	r2, [r0, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    data[0] = 0x01;  // sleep word address value
    1d78:	2201      	movs	r2, #1
    1d7a:	700a      	strb	r2, [r1, #0]
    if (i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK)
    1d7c:	009b      	lsls	r3, r3, #2
    1d7e:	4a07      	ldr	r2, [pc, #28]	; (1d9c <hal_i2c_sleep+0x48>)
    1d80:	5898      	ldr	r0, [r3, r2]
    1d82:	4669      	mov	r1, sp
    1d84:	4b06      	ldr	r3, [pc, #24]	; (1da0 <hal_i2c_sleep+0x4c>)
    1d86:	4798      	blx	r3
    1d88:	0003      	movs	r3, r0
    {
        return ATCA_COMM_FAIL;
    1d8a:	20f0      	movs	r0, #240	; 0xf0
    }

    return ATCA_SUCCESS;
    1d8c:	1e5a      	subs	r2, r3, #1
    1d8e:	4193      	sbcs	r3, r2
    1d90:	425b      	negs	r3, r3
    1d92:	4018      	ands	r0, r3
}
    1d94:	b005      	add	sp, #20
    1d96:	bd00      	pop	{pc}
    1d98:	00000f69 	.word	0x00000f69
    1d9c:	200001e4 	.word	0x200001e4
    1da0:	00000739 	.word	0x00000739

00001da4 <hal_i2c_release>:
 * \param[in] hal_data - opaque pointer to hal data structure - known only to the HAL implementation
 * return ATCA_SUCCESS
 */

ATCA_STATUS hal_i2c_release(void *hal_data)
{
    1da4:	b570      	push	{r4, r5, r6, lr}
    1da6:	0004      	movs	r4, r0
    ATCAI2CMaster_t *hal = (ATCAI2CMaster_t*)hal_data;

    i2c_bus_ref_ct--;  // track total i2c bus interface instances for consistency checking and debugging
    1da8:	4a0f      	ldr	r2, [pc, #60]	; (1de8 <hal_i2c_release+0x44>)
    1daa:	6813      	ldr	r3, [r2, #0]
    1dac:	3b01      	subs	r3, #1
    1dae:	6013      	str	r3, [r2, #0]

    // if the use count for this bus has gone to 0 references, disable it.  protect against an unbracketed release
    if (hal && --(hal->ref_ct) <= 0 && i2c_hal_data[hal->bus_index] != NULL)
    1db0:	2800      	cmp	r0, #0
    1db2:	d004      	beq.n	1dbe <hal_i2c_release+0x1a>
    1db4:	68c3      	ldr	r3, [r0, #12]
    1db6:	3b01      	subs	r3, #1
    1db8:	60c3      	str	r3, [r0, #12]
    1dba:	2b00      	cmp	r3, #0
    1dbc:	dd01      	ble.n	1dc2 <hal_i2c_release+0x1e>
        free(i2c_hal_data[hal->bus_index]);
        i2c_hal_data[hal->bus_index] = NULL;
    }

    return ATCA_SUCCESS;
}
    1dbe:	2000      	movs	r0, #0
    1dc0:	bd70      	pop	{r4, r5, r6, pc}
    if (hal && --(hal->ref_ct) <= 0 && i2c_hal_data[hal->bus_index] != NULL)
    1dc2:	6903      	ldr	r3, [r0, #16]
    1dc4:	009b      	lsls	r3, r3, #2
    1dc6:	4a09      	ldr	r2, [pc, #36]	; (1dec <hal_i2c_release+0x48>)
    1dc8:	589b      	ldr	r3, [r3, r2]
    1dca:	2b00      	cmp	r3, #0
    1dcc:	d0f7      	beq.n	1dbe <hal_i2c_release+0x1a>
        i2c_master_reset(&(hal->i2c_master_instance));
    1dce:	4b08      	ldr	r3, [pc, #32]	; (1df0 <hal_i2c_release+0x4c>)
    1dd0:	4798      	blx	r3
        free(i2c_hal_data[hal->bus_index]);
    1dd2:	4d06      	ldr	r5, [pc, #24]	; (1dec <hal_i2c_release+0x48>)
    1dd4:	6923      	ldr	r3, [r4, #16]
    1dd6:	009b      	lsls	r3, r3, #2
    1dd8:	5958      	ldr	r0, [r3, r5]
    1dda:	4b06      	ldr	r3, [pc, #24]	; (1df4 <hal_i2c_release+0x50>)
    1ddc:	4798      	blx	r3
        i2c_hal_data[hal->bus_index] = NULL;
    1dde:	6923      	ldr	r3, [r4, #16]
    1de0:	009b      	lsls	r3, r3, #2
    1de2:	2200      	movs	r2, #0
    1de4:	515a      	str	r2, [r3, r5]
    1de6:	e7ea      	b.n	1dbe <hal_i2c_release+0x1a>
    1de8:	20000128 	.word	0x20000128
    1dec:	200001e4 	.word	0x200001e4
    1df0:	000003e9 	.word	0x000003e9
    1df4:	000057b5 	.word	0x000057b5

00001df8 <atca_delay_us>:
/** \brief This function delays for a number of microseconds.
 *
 * \param[in] delay number of 0.001 milliseconds to delay
 */
void atca_delay_us(uint32_t delay)
{
    1df8:	b510      	push	{r4, lr}
    1dfa:	1e04      	subs	r4, r0, #0
    // use ASF supplied delay
    delay_us(delay);
    1dfc:	d10f      	bne.n	1e1e <atca_delay_us+0x26>
    1dfe:	2000      	movs	r0, #0
    1e00:	4b11      	ldr	r3, [pc, #68]	; (1e48 <atca_delay_us+0x50>)
    1e02:	4798      	blx	r3
    1e04:	0002      	movs	r2, r0
    1e06:	2300      	movs	r3, #0
    1e08:	4810      	ldr	r0, [pc, #64]	; (1e4c <atca_delay_us+0x54>)
    1e0a:	2100      	movs	r1, #0
    1e0c:	1880      	adds	r0, r0, r2
    1e0e:	4159      	adcs	r1, r3
    1e10:	4a0f      	ldr	r2, [pc, #60]	; (1e50 <atca_delay_us+0x58>)
    1e12:	2300      	movs	r3, #0
    1e14:	4c0f      	ldr	r4, [pc, #60]	; (1e54 <atca_delay_us+0x5c>)
    1e16:	47a0      	blx	r4
    1e18:	4b0f      	ldr	r3, [pc, #60]	; (1e58 <atca_delay_us+0x60>)
    1e1a:	4798      	blx	r3
}
    1e1c:	bd10      	pop	{r4, pc}
    delay_us(delay);
    1e1e:	2000      	movs	r0, #0
    1e20:	4b09      	ldr	r3, [pc, #36]	; (1e48 <atca_delay_us+0x50>)
    1e22:	4798      	blx	r3
    1e24:	0002      	movs	r2, r0
    1e26:	2300      	movs	r3, #0
    1e28:	0020      	movs	r0, r4
    1e2a:	2100      	movs	r1, #0
    1e2c:	4c0b      	ldr	r4, [pc, #44]	; (1e5c <atca_delay_us+0x64>)
    1e2e:	47a0      	blx	r4
    1e30:	4a06      	ldr	r2, [pc, #24]	; (1e4c <atca_delay_us+0x54>)
    1e32:	2300      	movs	r3, #0
    1e34:	1880      	adds	r0, r0, r2
    1e36:	4159      	adcs	r1, r3
    1e38:	4a05      	ldr	r2, [pc, #20]	; (1e50 <atca_delay_us+0x58>)
    1e3a:	2300      	movs	r3, #0
    1e3c:	4c05      	ldr	r4, [pc, #20]	; (1e54 <atca_delay_us+0x5c>)
    1e3e:	47a0      	blx	r4
    1e40:	4b05      	ldr	r3, [pc, #20]	; (1e58 <atca_delay_us+0x60>)
    1e42:	4798      	blx	r3
    1e44:	e7ea      	b.n	1e1c <atca_delay_us+0x24>
    1e46:	46c0      	nop			; (mov r8, r8)
    1e48:	00002641 	.word	0x00002641
    1e4c:	006acfbf 	.word	0x006acfbf
    1e50:	006acfc0 	.word	0x006acfc0
    1e54:	00003c65 	.word	0x00003c65
    1e58:	20000001 	.word	0x20000001
    1e5c:	00003ca5 	.word	0x00003ca5

00001e60 <atca_delay_ms>:
 * \param[in] delay number of milliseconds to delay
 */

/* ASF already has delay_ms - see delay.h */
void atca_delay_ms(uint32_t delay)
{
    1e60:	b510      	push	{r4, lr}
    1e62:	1e04      	subs	r4, r0, #0
    // use ASF supplied delay
    delay_ms(delay);
    1e64:	d10f      	bne.n	1e86 <atca_delay_ms+0x26>
    1e66:	2000      	movs	r0, #0
    1e68:	4b11      	ldr	r3, [pc, #68]	; (1eb0 <atca_delay_ms+0x50>)
    1e6a:	4798      	blx	r3
    1e6c:	0002      	movs	r2, r0
    1e6e:	2300      	movs	r3, #0
    1e70:	4810      	ldr	r0, [pc, #64]	; (1eb4 <atca_delay_ms+0x54>)
    1e72:	2100      	movs	r1, #0
    1e74:	1880      	adds	r0, r0, r2
    1e76:	4159      	adcs	r1, r3
    1e78:	4a0f      	ldr	r2, [pc, #60]	; (1eb8 <atca_delay_ms+0x58>)
    1e7a:	2300      	movs	r3, #0
    1e7c:	4c0f      	ldr	r4, [pc, #60]	; (1ebc <atca_delay_ms+0x5c>)
    1e7e:	47a0      	blx	r4
    1e80:	4b0f      	ldr	r3, [pc, #60]	; (1ec0 <atca_delay_ms+0x60>)
    1e82:	4798      	blx	r3
}
    1e84:	bd10      	pop	{r4, pc}
    delay_ms(delay);
    1e86:	2000      	movs	r0, #0
    1e88:	4b09      	ldr	r3, [pc, #36]	; (1eb0 <atca_delay_ms+0x50>)
    1e8a:	4798      	blx	r3
    1e8c:	0002      	movs	r2, r0
    1e8e:	2300      	movs	r3, #0
    1e90:	0020      	movs	r0, r4
    1e92:	2100      	movs	r1, #0
    1e94:	4c0b      	ldr	r4, [pc, #44]	; (1ec4 <atca_delay_ms+0x64>)
    1e96:	47a0      	blx	r4
    1e98:	4a0b      	ldr	r2, [pc, #44]	; (1ec8 <atca_delay_ms+0x68>)
    1e9a:	2300      	movs	r3, #0
    1e9c:	1880      	adds	r0, r0, r2
    1e9e:	4159      	adcs	r1, r3
    1ea0:	4a0a      	ldr	r2, [pc, #40]	; (1ecc <atca_delay_ms+0x6c>)
    1ea2:	2300      	movs	r3, #0
    1ea4:	4c05      	ldr	r4, [pc, #20]	; (1ebc <atca_delay_ms+0x5c>)
    1ea6:	47a0      	blx	r4
    1ea8:	4b05      	ldr	r3, [pc, #20]	; (1ec0 <atca_delay_ms+0x60>)
    1eaa:	4798      	blx	r3
    1eac:	e7ea      	b.n	1e84 <atca_delay_ms+0x24>
    1eae:	46c0      	nop			; (mov r8, r8)
    1eb0:	00002641 	.word	0x00002641
    1eb4:	006acfbf 	.word	0x006acfbf
    1eb8:	006acfc0 	.word	0x006acfc0
    1ebc:	00003c65 	.word	0x00003c65
    1ec0:	20000001 	.word	0x20000001
    1ec4:	00003ca5 	.word	0x00003ca5
    1ec8:	00001b57 	.word	0x00001b57
    1ecc:	00001b58 	.word	0x00001b58

00001ed0 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ed2:	46de      	mov	lr, fp
    1ed4:	4657      	mov	r7, sl
    1ed6:	464e      	mov	r6, r9
    1ed8:	4645      	mov	r5, r8
    1eda:	b5e0      	push	{r5, r6, r7, lr}
    1edc:	b087      	sub	sp, #28
    1ede:	4680      	mov	r8, r0
    1ee0:	9104      	str	r1, [sp, #16]
    1ee2:	0016      	movs	r6, r2
    1ee4:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1ee6:	2200      	movs	r2, #0
    1ee8:	2300      	movs	r3, #0
    1eea:	2100      	movs	r1, #0
    1eec:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    1eee:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1ef0:	2001      	movs	r0, #1
    1ef2:	0021      	movs	r1, r4
    1ef4:	9600      	str	r6, [sp, #0]
    1ef6:	9701      	str	r7, [sp, #4]
    1ef8:	465c      	mov	r4, fp
    1efa:	9403      	str	r4, [sp, #12]
    1efc:	4644      	mov	r4, r8
    1efe:	9405      	str	r4, [sp, #20]
    1f00:	e013      	b.n	1f2a <long_division+0x5a>
    1f02:	2420      	movs	r4, #32
    1f04:	1a64      	subs	r4, r4, r1
    1f06:	0005      	movs	r5, r0
    1f08:	40e5      	lsrs	r5, r4
    1f0a:	46a8      	mov	r8, r5
    1f0c:	e014      	b.n	1f38 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    1f0e:	9c00      	ldr	r4, [sp, #0]
    1f10:	9d01      	ldr	r5, [sp, #4]
    1f12:	1b12      	subs	r2, r2, r4
    1f14:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1f16:	465c      	mov	r4, fp
    1f18:	464d      	mov	r5, r9
    1f1a:	432c      	orrs	r4, r5
    1f1c:	46a3      	mov	fp, r4
    1f1e:	9c03      	ldr	r4, [sp, #12]
    1f20:	4645      	mov	r5, r8
    1f22:	432c      	orrs	r4, r5
    1f24:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1f26:	3901      	subs	r1, #1
    1f28:	d325      	bcc.n	1f76 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1f2a:	2420      	movs	r4, #32
    1f2c:	4264      	negs	r4, r4
    1f2e:	190c      	adds	r4, r1, r4
    1f30:	d4e7      	bmi.n	1f02 <long_division+0x32>
    1f32:	0005      	movs	r5, r0
    1f34:	40a5      	lsls	r5, r4
    1f36:	46a8      	mov	r8, r5
    1f38:	0004      	movs	r4, r0
    1f3a:	408c      	lsls	r4, r1
    1f3c:	46a1      	mov	r9, r4
		r = r << 1;
    1f3e:	1892      	adds	r2, r2, r2
    1f40:	415b      	adcs	r3, r3
    1f42:	0014      	movs	r4, r2
    1f44:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1f46:	9e05      	ldr	r6, [sp, #20]
    1f48:	464f      	mov	r7, r9
    1f4a:	403e      	ands	r6, r7
    1f4c:	46b4      	mov	ip, r6
    1f4e:	9e04      	ldr	r6, [sp, #16]
    1f50:	4647      	mov	r7, r8
    1f52:	403e      	ands	r6, r7
    1f54:	46b2      	mov	sl, r6
    1f56:	4666      	mov	r6, ip
    1f58:	4657      	mov	r7, sl
    1f5a:	433e      	orrs	r6, r7
    1f5c:	d003      	beq.n	1f66 <long_division+0x96>
			r |= 0x01;
    1f5e:	0006      	movs	r6, r0
    1f60:	4326      	orrs	r6, r4
    1f62:	0032      	movs	r2, r6
    1f64:	002b      	movs	r3, r5
		if (r >= d) {
    1f66:	9c00      	ldr	r4, [sp, #0]
    1f68:	9d01      	ldr	r5, [sp, #4]
    1f6a:	429d      	cmp	r5, r3
    1f6c:	d8db      	bhi.n	1f26 <long_division+0x56>
    1f6e:	d1ce      	bne.n	1f0e <long_division+0x3e>
    1f70:	4294      	cmp	r4, r2
    1f72:	d8d8      	bhi.n	1f26 <long_division+0x56>
    1f74:	e7cb      	b.n	1f0e <long_division+0x3e>
    1f76:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1f78:	4658      	mov	r0, fp
    1f7a:	0019      	movs	r1, r3
    1f7c:	b007      	add	sp, #28
    1f7e:	bc3c      	pop	{r2, r3, r4, r5}
    1f80:	4690      	mov	r8, r2
    1f82:	4699      	mov	r9, r3
    1f84:	46a2      	mov	sl, r4
    1f86:	46ab      	mov	fp, r5
    1f88:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001f8a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1f8a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1f8c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1f8e:	2340      	movs	r3, #64	; 0x40
    1f90:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1f92:	4281      	cmp	r1, r0
    1f94:	d202      	bcs.n	1f9c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1f96:	0018      	movs	r0, r3
    1f98:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1f9a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1f9c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1f9e:	1c63      	adds	r3, r4, #1
    1fa0:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1fa2:	4288      	cmp	r0, r1
    1fa4:	d9f9      	bls.n	1f9a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1fa6:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1fa8:	2cff      	cmp	r4, #255	; 0xff
    1faa:	d8f4      	bhi.n	1f96 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1fac:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1fae:	2300      	movs	r3, #0
    1fb0:	e7f1      	b.n	1f96 <_sercom_get_sync_baud_val+0xc>
	...

00001fb4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fb6:	b083      	sub	sp, #12
    1fb8:	000f      	movs	r7, r1
    1fba:	0016      	movs	r6, r2
    1fbc:	aa08      	add	r2, sp, #32
    1fbe:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1fc0:	0004      	movs	r4, r0
    1fc2:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1fc4:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1fc6:	42bc      	cmp	r4, r7
    1fc8:	d902      	bls.n	1fd0 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1fca:	0010      	movs	r0, r2
    1fcc:	b003      	add	sp, #12
    1fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1fd0:	2b00      	cmp	r3, #0
    1fd2:	d114      	bne.n	1ffe <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1fd4:	0002      	movs	r2, r0
    1fd6:	0008      	movs	r0, r1
    1fd8:	2100      	movs	r1, #0
    1fda:	4c19      	ldr	r4, [pc, #100]	; (2040 <STACK_SIZE+0x40>)
    1fdc:	47a0      	blx	r4
    1fde:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1fe0:	003a      	movs	r2, r7
    1fe2:	2300      	movs	r3, #0
    1fe4:	2000      	movs	r0, #0
    1fe6:	4c17      	ldr	r4, [pc, #92]	; (2044 <STACK_SIZE+0x44>)
    1fe8:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1fea:	2200      	movs	r2, #0
    1fec:	2301      	movs	r3, #1
    1fee:	1a12      	subs	r2, r2, r0
    1ff0:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1ff2:	0c12      	lsrs	r2, r2, #16
    1ff4:	041b      	lsls	r3, r3, #16
    1ff6:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1ff8:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1ffa:	2200      	movs	r2, #0
    1ffc:	e7e5      	b.n	1fca <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1ffe:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    2000:	2b01      	cmp	r3, #1
    2002:	d1f9      	bne.n	1ff8 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    2004:	000a      	movs	r2, r1
    2006:	2300      	movs	r3, #0
    2008:	2100      	movs	r1, #0
    200a:	4c0d      	ldr	r4, [pc, #52]	; (2040 <STACK_SIZE+0x40>)
    200c:	47a0      	blx	r4
    200e:	0002      	movs	r2, r0
    2010:	000b      	movs	r3, r1
    2012:	9200      	str	r2, [sp, #0]
    2014:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    2016:	0038      	movs	r0, r7
    2018:	2100      	movs	r1, #0
    201a:	4c0a      	ldr	r4, [pc, #40]	; (2044 <STACK_SIZE+0x44>)
    201c:	47a0      	blx	r4
    201e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    2020:	2380      	movs	r3, #128	; 0x80
    2022:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2024:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    2026:	4298      	cmp	r0, r3
    2028:	d8cf      	bhi.n	1fca <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    202a:	0f79      	lsrs	r1, r7, #29
    202c:	00f8      	lsls	r0, r7, #3
    202e:	9a00      	ldr	r2, [sp, #0]
    2030:	9b01      	ldr	r3, [sp, #4]
    2032:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    2034:	00ea      	lsls	r2, r5, #3
    2036:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    2038:	b2d2      	uxtb	r2, r2
    203a:	0352      	lsls	r2, r2, #13
    203c:	432a      	orrs	r2, r5
    203e:	e7db      	b.n	1ff8 <_sercom_get_async_baud_val+0x44>
    2040:	00003ca5 	.word	0x00003ca5
    2044:	00001ed1 	.word	0x00001ed1

00002048 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    2048:	b510      	push	{r4, lr}
    204a:	b082      	sub	sp, #8
    204c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    204e:	4b0e      	ldr	r3, [pc, #56]	; (2088 <sercom_set_gclk_generator+0x40>)
    2050:	781b      	ldrb	r3, [r3, #0]
    2052:	2b00      	cmp	r3, #0
    2054:	d007      	beq.n	2066 <sercom_set_gclk_generator+0x1e>
    2056:	2900      	cmp	r1, #0
    2058:	d105      	bne.n	2066 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    205a:	4b0b      	ldr	r3, [pc, #44]	; (2088 <sercom_set_gclk_generator+0x40>)
    205c:	785b      	ldrb	r3, [r3, #1]
    205e:	4283      	cmp	r3, r0
    2060:	d010      	beq.n	2084 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    2062:	201d      	movs	r0, #29
    2064:	e00c      	b.n	2080 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    2066:	a901      	add	r1, sp, #4
    2068:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    206a:	2013      	movs	r0, #19
    206c:	4b07      	ldr	r3, [pc, #28]	; (208c <sercom_set_gclk_generator+0x44>)
    206e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    2070:	2013      	movs	r0, #19
    2072:	4b07      	ldr	r3, [pc, #28]	; (2090 <sercom_set_gclk_generator+0x48>)
    2074:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    2076:	4b04      	ldr	r3, [pc, #16]	; (2088 <sercom_set_gclk_generator+0x40>)
    2078:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    207a:	2201      	movs	r2, #1
    207c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    207e:	2000      	movs	r0, #0
}
    2080:	b002      	add	sp, #8
    2082:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    2084:	2000      	movs	r0, #0
    2086:	e7fb      	b.n	2080 <sercom_set_gclk_generator+0x38>
    2088:	2000012c 	.word	0x2000012c
    208c:	00002759 	.word	0x00002759
    2090:	000026cd 	.word	0x000026cd

00002094 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    2094:	4b40      	ldr	r3, [pc, #256]	; (2198 <_sercom_get_default_pad+0x104>)
    2096:	4298      	cmp	r0, r3
    2098:	d031      	beq.n	20fe <_sercom_get_default_pad+0x6a>
    209a:	d90a      	bls.n	20b2 <_sercom_get_default_pad+0x1e>
    209c:	4b3f      	ldr	r3, [pc, #252]	; (219c <_sercom_get_default_pad+0x108>)
    209e:	4298      	cmp	r0, r3
    20a0:	d04d      	beq.n	213e <_sercom_get_default_pad+0xaa>
    20a2:	4b3f      	ldr	r3, [pc, #252]	; (21a0 <_sercom_get_default_pad+0x10c>)
    20a4:	4298      	cmp	r0, r3
    20a6:	d05a      	beq.n	215e <_sercom_get_default_pad+0xca>
    20a8:	4b3e      	ldr	r3, [pc, #248]	; (21a4 <_sercom_get_default_pad+0x110>)
    20aa:	4298      	cmp	r0, r3
    20ac:	d037      	beq.n	211e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    20ae:	2000      	movs	r0, #0
}
    20b0:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    20b2:	4b3d      	ldr	r3, [pc, #244]	; (21a8 <_sercom_get_default_pad+0x114>)
    20b4:	4298      	cmp	r0, r3
    20b6:	d00c      	beq.n	20d2 <_sercom_get_default_pad+0x3e>
    20b8:	4b3c      	ldr	r3, [pc, #240]	; (21ac <_sercom_get_default_pad+0x118>)
    20ba:	4298      	cmp	r0, r3
    20bc:	d1f7      	bne.n	20ae <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    20be:	2901      	cmp	r1, #1
    20c0:	d017      	beq.n	20f2 <_sercom_get_default_pad+0x5e>
    20c2:	2900      	cmp	r1, #0
    20c4:	d05d      	beq.n	2182 <_sercom_get_default_pad+0xee>
    20c6:	2902      	cmp	r1, #2
    20c8:	d015      	beq.n	20f6 <_sercom_get_default_pad+0x62>
    20ca:	2903      	cmp	r1, #3
    20cc:	d015      	beq.n	20fa <_sercom_get_default_pad+0x66>
	return 0;
    20ce:	2000      	movs	r0, #0
    20d0:	e7ee      	b.n	20b0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    20d2:	2901      	cmp	r1, #1
    20d4:	d007      	beq.n	20e6 <_sercom_get_default_pad+0x52>
    20d6:	2900      	cmp	r1, #0
    20d8:	d051      	beq.n	217e <_sercom_get_default_pad+0xea>
    20da:	2902      	cmp	r1, #2
    20dc:	d005      	beq.n	20ea <_sercom_get_default_pad+0x56>
    20de:	2903      	cmp	r1, #3
    20e0:	d005      	beq.n	20ee <_sercom_get_default_pad+0x5a>
	return 0;
    20e2:	2000      	movs	r0, #0
    20e4:	e7e4      	b.n	20b0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    20e6:	4832      	ldr	r0, [pc, #200]	; (21b0 <_sercom_get_default_pad+0x11c>)
    20e8:	e7e2      	b.n	20b0 <_sercom_get_default_pad+0x1c>
    20ea:	4832      	ldr	r0, [pc, #200]	; (21b4 <_sercom_get_default_pad+0x120>)
    20ec:	e7e0      	b.n	20b0 <_sercom_get_default_pad+0x1c>
    20ee:	4832      	ldr	r0, [pc, #200]	; (21b8 <_sercom_get_default_pad+0x124>)
    20f0:	e7de      	b.n	20b0 <_sercom_get_default_pad+0x1c>
    20f2:	4832      	ldr	r0, [pc, #200]	; (21bc <_sercom_get_default_pad+0x128>)
    20f4:	e7dc      	b.n	20b0 <_sercom_get_default_pad+0x1c>
    20f6:	4832      	ldr	r0, [pc, #200]	; (21c0 <_sercom_get_default_pad+0x12c>)
    20f8:	e7da      	b.n	20b0 <_sercom_get_default_pad+0x1c>
    20fa:	4832      	ldr	r0, [pc, #200]	; (21c4 <_sercom_get_default_pad+0x130>)
    20fc:	e7d8      	b.n	20b0 <_sercom_get_default_pad+0x1c>
    20fe:	2901      	cmp	r1, #1
    2100:	d007      	beq.n	2112 <_sercom_get_default_pad+0x7e>
    2102:	2900      	cmp	r1, #0
    2104:	d03f      	beq.n	2186 <_sercom_get_default_pad+0xf2>
    2106:	2902      	cmp	r1, #2
    2108:	d005      	beq.n	2116 <_sercom_get_default_pad+0x82>
    210a:	2903      	cmp	r1, #3
    210c:	d005      	beq.n	211a <_sercom_get_default_pad+0x86>
	return 0;
    210e:	2000      	movs	r0, #0
    2110:	e7ce      	b.n	20b0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2112:	482d      	ldr	r0, [pc, #180]	; (21c8 <_sercom_get_default_pad+0x134>)
    2114:	e7cc      	b.n	20b0 <_sercom_get_default_pad+0x1c>
    2116:	482d      	ldr	r0, [pc, #180]	; (21cc <_sercom_get_default_pad+0x138>)
    2118:	e7ca      	b.n	20b0 <_sercom_get_default_pad+0x1c>
    211a:	482d      	ldr	r0, [pc, #180]	; (21d0 <_sercom_get_default_pad+0x13c>)
    211c:	e7c8      	b.n	20b0 <_sercom_get_default_pad+0x1c>
    211e:	2901      	cmp	r1, #1
    2120:	d007      	beq.n	2132 <_sercom_get_default_pad+0x9e>
    2122:	2900      	cmp	r1, #0
    2124:	d031      	beq.n	218a <_sercom_get_default_pad+0xf6>
    2126:	2902      	cmp	r1, #2
    2128:	d005      	beq.n	2136 <_sercom_get_default_pad+0xa2>
    212a:	2903      	cmp	r1, #3
    212c:	d005      	beq.n	213a <_sercom_get_default_pad+0xa6>
	return 0;
    212e:	2000      	movs	r0, #0
    2130:	e7be      	b.n	20b0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2132:	4828      	ldr	r0, [pc, #160]	; (21d4 <_sercom_get_default_pad+0x140>)
    2134:	e7bc      	b.n	20b0 <_sercom_get_default_pad+0x1c>
    2136:	4828      	ldr	r0, [pc, #160]	; (21d8 <_sercom_get_default_pad+0x144>)
    2138:	e7ba      	b.n	20b0 <_sercom_get_default_pad+0x1c>
    213a:	4828      	ldr	r0, [pc, #160]	; (21dc <_sercom_get_default_pad+0x148>)
    213c:	e7b8      	b.n	20b0 <_sercom_get_default_pad+0x1c>
    213e:	2901      	cmp	r1, #1
    2140:	d007      	beq.n	2152 <_sercom_get_default_pad+0xbe>
    2142:	2900      	cmp	r1, #0
    2144:	d023      	beq.n	218e <_sercom_get_default_pad+0xfa>
    2146:	2902      	cmp	r1, #2
    2148:	d005      	beq.n	2156 <_sercom_get_default_pad+0xc2>
    214a:	2903      	cmp	r1, #3
    214c:	d005      	beq.n	215a <_sercom_get_default_pad+0xc6>
	return 0;
    214e:	2000      	movs	r0, #0
    2150:	e7ae      	b.n	20b0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2152:	4823      	ldr	r0, [pc, #140]	; (21e0 <_sercom_get_default_pad+0x14c>)
    2154:	e7ac      	b.n	20b0 <_sercom_get_default_pad+0x1c>
    2156:	4823      	ldr	r0, [pc, #140]	; (21e4 <_sercom_get_default_pad+0x150>)
    2158:	e7aa      	b.n	20b0 <_sercom_get_default_pad+0x1c>
    215a:	4823      	ldr	r0, [pc, #140]	; (21e8 <_sercom_get_default_pad+0x154>)
    215c:	e7a8      	b.n	20b0 <_sercom_get_default_pad+0x1c>
    215e:	2901      	cmp	r1, #1
    2160:	d007      	beq.n	2172 <_sercom_get_default_pad+0xde>
    2162:	2900      	cmp	r1, #0
    2164:	d015      	beq.n	2192 <_sercom_get_default_pad+0xfe>
    2166:	2902      	cmp	r1, #2
    2168:	d005      	beq.n	2176 <_sercom_get_default_pad+0xe2>
    216a:	2903      	cmp	r1, #3
    216c:	d005      	beq.n	217a <_sercom_get_default_pad+0xe6>
	return 0;
    216e:	2000      	movs	r0, #0
    2170:	e79e      	b.n	20b0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2172:	481e      	ldr	r0, [pc, #120]	; (21ec <_sercom_get_default_pad+0x158>)
    2174:	e79c      	b.n	20b0 <_sercom_get_default_pad+0x1c>
    2176:	481e      	ldr	r0, [pc, #120]	; (21f0 <_sercom_get_default_pad+0x15c>)
    2178:	e79a      	b.n	20b0 <_sercom_get_default_pad+0x1c>
    217a:	481e      	ldr	r0, [pc, #120]	; (21f4 <_sercom_get_default_pad+0x160>)
    217c:	e798      	b.n	20b0 <_sercom_get_default_pad+0x1c>
    217e:	481e      	ldr	r0, [pc, #120]	; (21f8 <_sercom_get_default_pad+0x164>)
    2180:	e796      	b.n	20b0 <_sercom_get_default_pad+0x1c>
    2182:	2003      	movs	r0, #3
    2184:	e794      	b.n	20b0 <_sercom_get_default_pad+0x1c>
    2186:	481d      	ldr	r0, [pc, #116]	; (21fc <_sercom_get_default_pad+0x168>)
    2188:	e792      	b.n	20b0 <_sercom_get_default_pad+0x1c>
    218a:	481d      	ldr	r0, [pc, #116]	; (2200 <_sercom_get_default_pad+0x16c>)
    218c:	e790      	b.n	20b0 <_sercom_get_default_pad+0x1c>
    218e:	481d      	ldr	r0, [pc, #116]	; (2204 <_sercom_get_default_pad+0x170>)
    2190:	e78e      	b.n	20b0 <_sercom_get_default_pad+0x1c>
    2192:	481d      	ldr	r0, [pc, #116]	; (2208 <_sercom_get_default_pad+0x174>)
    2194:	e78c      	b.n	20b0 <_sercom_get_default_pad+0x1c>
    2196:	46c0      	nop			; (mov r8, r8)
    2198:	42001000 	.word	0x42001000
    219c:	42001800 	.word	0x42001800
    21a0:	42001c00 	.word	0x42001c00
    21a4:	42001400 	.word	0x42001400
    21a8:	42000800 	.word	0x42000800
    21ac:	42000c00 	.word	0x42000c00
    21b0:	00050003 	.word	0x00050003
    21b4:	00060003 	.word	0x00060003
    21b8:	00070003 	.word	0x00070003
    21bc:	00010003 	.word	0x00010003
    21c0:	001e0003 	.word	0x001e0003
    21c4:	001f0003 	.word	0x001f0003
    21c8:	000d0002 	.word	0x000d0002
    21cc:	000e0002 	.word	0x000e0002
    21d0:	000f0002 	.word	0x000f0002
    21d4:	00110003 	.word	0x00110003
    21d8:	00120003 	.word	0x00120003
    21dc:	00130003 	.word	0x00130003
    21e0:	003f0005 	.word	0x003f0005
    21e4:	003e0005 	.word	0x003e0005
    21e8:	00520005 	.word	0x00520005
    21ec:	00170003 	.word	0x00170003
    21f0:	00180003 	.word	0x00180003
    21f4:	00190003 	.word	0x00190003
    21f8:	00040003 	.word	0x00040003
    21fc:	000c0002 	.word	0x000c0002
    2200:	00100003 	.word	0x00100003
    2204:	00530005 	.word	0x00530005
    2208:	00160003 	.word	0x00160003

0000220c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    220c:	b530      	push	{r4, r5, lr}
    220e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    2210:	4b0b      	ldr	r3, [pc, #44]	; (2240 <_sercom_get_sercom_inst_index+0x34>)
    2212:	466a      	mov	r2, sp
    2214:	cb32      	ldmia	r3!, {r1, r4, r5}
    2216:	c232      	stmia	r2!, {r1, r4, r5}
    2218:	cb32      	ldmia	r3!, {r1, r4, r5}
    221a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    221c:	9b00      	ldr	r3, [sp, #0]
    221e:	4283      	cmp	r3, r0
    2220:	d00b      	beq.n	223a <_sercom_get_sercom_inst_index+0x2e>
    2222:	2301      	movs	r3, #1
    2224:	009a      	lsls	r2, r3, #2
    2226:	4669      	mov	r1, sp
    2228:	5852      	ldr	r2, [r2, r1]
    222a:	4282      	cmp	r2, r0
    222c:	d006      	beq.n	223c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    222e:	3301      	adds	r3, #1
    2230:	2b06      	cmp	r3, #6
    2232:	d1f7      	bne.n	2224 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2234:	2000      	movs	r0, #0
}
    2236:	b007      	add	sp, #28
    2238:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    223a:	2300      	movs	r3, #0
			return i;
    223c:	b2d8      	uxtb	r0, r3
    223e:	e7fa      	b.n	2236 <_sercom_get_sercom_inst_index+0x2a>
    2240:	00005a0c 	.word	0x00005a0c

00002244 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2244:	4b0c      	ldr	r3, [pc, #48]	; (2278 <cpu_irq_enter_critical+0x34>)
    2246:	681b      	ldr	r3, [r3, #0]
    2248:	2b00      	cmp	r3, #0
    224a:	d106      	bne.n	225a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    224c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    2250:	2b00      	cmp	r3, #0
    2252:	d007      	beq.n	2264 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2254:	2200      	movs	r2, #0
    2256:	4b09      	ldr	r3, [pc, #36]	; (227c <cpu_irq_enter_critical+0x38>)
    2258:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    225a:	4a07      	ldr	r2, [pc, #28]	; (2278 <cpu_irq_enter_critical+0x34>)
    225c:	6813      	ldr	r3, [r2, #0]
    225e:	3301      	adds	r3, #1
    2260:	6013      	str	r3, [r2, #0]
}
    2262:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    2264:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2266:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    226a:	2200      	movs	r2, #0
    226c:	4b04      	ldr	r3, [pc, #16]	; (2280 <cpu_irq_enter_critical+0x3c>)
    226e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2270:	3201      	adds	r2, #1
    2272:	4b02      	ldr	r3, [pc, #8]	; (227c <cpu_irq_enter_critical+0x38>)
    2274:	701a      	strb	r2, [r3, #0]
    2276:	e7f0      	b.n	225a <cpu_irq_enter_critical+0x16>
    2278:	20000130 	.word	0x20000130
    227c:	20000134 	.word	0x20000134
    2280:	2000006c 	.word	0x2000006c

00002284 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2284:	4b08      	ldr	r3, [pc, #32]	; (22a8 <cpu_irq_leave_critical+0x24>)
    2286:	681a      	ldr	r2, [r3, #0]
    2288:	3a01      	subs	r2, #1
    228a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    228c:	681b      	ldr	r3, [r3, #0]
    228e:	2b00      	cmp	r3, #0
    2290:	d109      	bne.n	22a6 <cpu_irq_leave_critical+0x22>
    2292:	4b06      	ldr	r3, [pc, #24]	; (22ac <cpu_irq_leave_critical+0x28>)
    2294:	781b      	ldrb	r3, [r3, #0]
    2296:	2b00      	cmp	r3, #0
    2298:	d005      	beq.n	22a6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    229a:	2201      	movs	r2, #1
    229c:	4b04      	ldr	r3, [pc, #16]	; (22b0 <cpu_irq_leave_critical+0x2c>)
    229e:	701a      	strb	r2, [r3, #0]
    22a0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    22a4:	b662      	cpsie	i
	}
}
    22a6:	4770      	bx	lr
    22a8:	20000130 	.word	0x20000130
    22ac:	20000134 	.word	0x20000134
    22b0:	2000006c 	.word	0x2000006c

000022b4 <system_board_init>:




void system_board_init(void)
{
    22b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    22b6:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    22b8:	ac01      	add	r4, sp, #4
    22ba:	2501      	movs	r5, #1
    22bc:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    22be:	2700      	movs	r7, #0
    22c0:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    22c2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    22c4:	0021      	movs	r1, r4
    22c6:	2013      	movs	r0, #19
    22c8:	4e06      	ldr	r6, [pc, #24]	; (22e4 <system_board_init+0x30>)
    22ca:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    22cc:	2280      	movs	r2, #128	; 0x80
    22ce:	0312      	lsls	r2, r2, #12
    22d0:	4b05      	ldr	r3, [pc, #20]	; (22e8 <system_board_init+0x34>)
    22d2:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    22d4:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    22d6:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    22d8:	0021      	movs	r1, r4
    22da:	201c      	movs	r0, #28
    22dc:	47b0      	blx	r6
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
#endif

}
    22de:	b003      	add	sp, #12
    22e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22e2:	46c0      	nop			; (mov r8, r8)
    22e4:	000022ed 	.word	0x000022ed
    22e8:	41004400 	.word	0x41004400

000022ec <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    22ec:	b500      	push	{lr}
    22ee:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    22f0:	ab01      	add	r3, sp, #4
    22f2:	2280      	movs	r2, #128	; 0x80
    22f4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    22f6:	780a      	ldrb	r2, [r1, #0]
    22f8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    22fa:	784a      	ldrb	r2, [r1, #1]
    22fc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    22fe:	788a      	ldrb	r2, [r1, #2]
    2300:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    2302:	0019      	movs	r1, r3
    2304:	4b01      	ldr	r3, [pc, #4]	; (230c <port_pin_set_config+0x20>)
    2306:	4798      	blx	r3
}
    2308:	b003      	add	sp, #12
    230a:	bd00      	pop	{pc}
    230c:	00002851 	.word	0x00002851

00002310 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2310:	b510      	push	{r4, lr}
	switch (clock_source) {
    2312:	2808      	cmp	r0, #8
    2314:	d803      	bhi.n	231e <system_clock_source_get_hz+0xe>
    2316:	0080      	lsls	r0, r0, #2
    2318:	4b1c      	ldr	r3, [pc, #112]	; (238c <system_clock_source_get_hz+0x7c>)
    231a:	581b      	ldr	r3, [r3, r0]
    231c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    231e:	2000      	movs	r0, #0
    2320:	e032      	b.n	2388 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    2322:	4b1b      	ldr	r3, [pc, #108]	; (2390 <system_clock_source_get_hz+0x80>)
    2324:	6918      	ldr	r0, [r3, #16]
    2326:	e02f      	b.n	2388 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2328:	4b1a      	ldr	r3, [pc, #104]	; (2394 <system_clock_source_get_hz+0x84>)
    232a:	6a1b      	ldr	r3, [r3, #32]
    232c:	059b      	lsls	r3, r3, #22
    232e:	0f9b      	lsrs	r3, r3, #30
    2330:	4819      	ldr	r0, [pc, #100]	; (2398 <system_clock_source_get_hz+0x88>)
    2332:	40d8      	lsrs	r0, r3
    2334:	e028      	b.n	2388 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    2336:	4b16      	ldr	r3, [pc, #88]	; (2390 <system_clock_source_get_hz+0x80>)
    2338:	6958      	ldr	r0, [r3, #20]
    233a:	e025      	b.n	2388 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    233c:	4b14      	ldr	r3, [pc, #80]	; (2390 <system_clock_source_get_hz+0x80>)
    233e:	681b      	ldr	r3, [r3, #0]
			return 0;
    2340:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2342:	079b      	lsls	r3, r3, #30
    2344:	d520      	bpl.n	2388 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2346:	4913      	ldr	r1, [pc, #76]	; (2394 <system_clock_source_get_hz+0x84>)
    2348:	2210      	movs	r2, #16
    234a:	68cb      	ldr	r3, [r1, #12]
    234c:	421a      	tst	r2, r3
    234e:	d0fc      	beq.n	234a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    2350:	4b0f      	ldr	r3, [pc, #60]	; (2390 <system_clock_source_get_hz+0x80>)
    2352:	681a      	ldr	r2, [r3, #0]
    2354:	2324      	movs	r3, #36	; 0x24
    2356:	4013      	ands	r3, r2
    2358:	2b04      	cmp	r3, #4
    235a:	d001      	beq.n	2360 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    235c:	480f      	ldr	r0, [pc, #60]	; (239c <system_clock_source_get_hz+0x8c>)
    235e:	e013      	b.n	2388 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2360:	2000      	movs	r0, #0
    2362:	4b0f      	ldr	r3, [pc, #60]	; (23a0 <system_clock_source_get_hz+0x90>)
    2364:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2366:	4b0a      	ldr	r3, [pc, #40]	; (2390 <system_clock_source_get_hz+0x80>)
    2368:	689b      	ldr	r3, [r3, #8]
    236a:	041b      	lsls	r3, r3, #16
    236c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    236e:	4358      	muls	r0, r3
    2370:	e00a      	b.n	2388 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2372:	2350      	movs	r3, #80	; 0x50
    2374:	4a07      	ldr	r2, [pc, #28]	; (2394 <system_clock_source_get_hz+0x84>)
    2376:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2378:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    237a:	075b      	lsls	r3, r3, #29
    237c:	d504      	bpl.n	2388 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    237e:	4b04      	ldr	r3, [pc, #16]	; (2390 <system_clock_source_get_hz+0x80>)
    2380:	68d8      	ldr	r0, [r3, #12]
    2382:	e001      	b.n	2388 <system_clock_source_get_hz+0x78>
		return 32768UL;
    2384:	2080      	movs	r0, #128	; 0x80
    2386:	0200      	lsls	r0, r0, #8
	}
}
    2388:	bd10      	pop	{r4, pc}
    238a:	46c0      	nop			; (mov r8, r8)
    238c:	00005a24 	.word	0x00005a24
    2390:	20000138 	.word	0x20000138
    2394:	40000800 	.word	0x40000800
    2398:	007a1200 	.word	0x007a1200
    239c:	02dc6c00 	.word	0x02dc6c00
    23a0:	00002775 	.word	0x00002775

000023a4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    23a4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    23a6:	490c      	ldr	r1, [pc, #48]	; (23d8 <system_clock_source_osc8m_set_config+0x34>)
    23a8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    23aa:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    23ac:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    23ae:	7840      	ldrb	r0, [r0, #1]
    23b0:	2201      	movs	r2, #1
    23b2:	4010      	ands	r0, r2
    23b4:	0180      	lsls	r0, r0, #6
    23b6:	2640      	movs	r6, #64	; 0x40
    23b8:	43b3      	bics	r3, r6
    23ba:	4303      	orrs	r3, r0
    23bc:	402a      	ands	r2, r5
    23be:	01d2      	lsls	r2, r2, #7
    23c0:	2080      	movs	r0, #128	; 0x80
    23c2:	4383      	bics	r3, r0
    23c4:	4313      	orrs	r3, r2
    23c6:	2203      	movs	r2, #3
    23c8:	4022      	ands	r2, r4
    23ca:	0212      	lsls	r2, r2, #8
    23cc:	4803      	ldr	r0, [pc, #12]	; (23dc <system_clock_source_osc8m_set_config+0x38>)
    23ce:	4003      	ands	r3, r0
    23d0:	4313      	orrs	r3, r2
    23d2:	620b      	str	r3, [r1, #32]
}
    23d4:	bd70      	pop	{r4, r5, r6, pc}
    23d6:	46c0      	nop			; (mov r8, r8)
    23d8:	40000800 	.word	0x40000800
    23dc:	fffffcff 	.word	0xfffffcff

000023e0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    23e0:	2808      	cmp	r0, #8
    23e2:	d803      	bhi.n	23ec <system_clock_source_enable+0xc>
    23e4:	0080      	lsls	r0, r0, #2
    23e6:	4b25      	ldr	r3, [pc, #148]	; (247c <system_clock_source_enable+0x9c>)
    23e8:	581b      	ldr	r3, [r3, r0]
    23ea:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    23ec:	2017      	movs	r0, #23
    23ee:	e044      	b.n	247a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    23f0:	4a23      	ldr	r2, [pc, #140]	; (2480 <system_clock_source_enable+0xa0>)
    23f2:	6a13      	ldr	r3, [r2, #32]
    23f4:	2102      	movs	r1, #2
    23f6:	430b      	orrs	r3, r1
    23f8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    23fa:	2000      	movs	r0, #0
    23fc:	e03d      	b.n	247a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    23fe:	4a20      	ldr	r2, [pc, #128]	; (2480 <system_clock_source_enable+0xa0>)
    2400:	6993      	ldr	r3, [r2, #24]
    2402:	2102      	movs	r1, #2
    2404:	430b      	orrs	r3, r1
    2406:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2408:	2000      	movs	r0, #0
		break;
    240a:	e036      	b.n	247a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    240c:	4a1c      	ldr	r2, [pc, #112]	; (2480 <system_clock_source_enable+0xa0>)
    240e:	8a13      	ldrh	r3, [r2, #16]
    2410:	2102      	movs	r1, #2
    2412:	430b      	orrs	r3, r1
    2414:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2416:	2000      	movs	r0, #0
		break;
    2418:	e02f      	b.n	247a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    241a:	4a19      	ldr	r2, [pc, #100]	; (2480 <system_clock_source_enable+0xa0>)
    241c:	8a93      	ldrh	r3, [r2, #20]
    241e:	2102      	movs	r1, #2
    2420:	430b      	orrs	r3, r1
    2422:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2424:	2000      	movs	r0, #0
		break;
    2426:	e028      	b.n	247a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2428:	4916      	ldr	r1, [pc, #88]	; (2484 <system_clock_source_enable+0xa4>)
    242a:	680b      	ldr	r3, [r1, #0]
    242c:	2202      	movs	r2, #2
    242e:	4313      	orrs	r3, r2
    2430:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2432:	4b13      	ldr	r3, [pc, #76]	; (2480 <system_clock_source_enable+0xa0>)
    2434:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2436:	0019      	movs	r1, r3
    2438:	320e      	adds	r2, #14
    243a:	68cb      	ldr	r3, [r1, #12]
    243c:	421a      	tst	r2, r3
    243e:	d0fc      	beq.n	243a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2440:	4a10      	ldr	r2, [pc, #64]	; (2484 <system_clock_source_enable+0xa4>)
    2442:	6891      	ldr	r1, [r2, #8]
    2444:	4b0e      	ldr	r3, [pc, #56]	; (2480 <system_clock_source_enable+0xa0>)
    2446:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2448:	6852      	ldr	r2, [r2, #4]
    244a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    244c:	2200      	movs	r2, #0
    244e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2450:	0019      	movs	r1, r3
    2452:	3210      	adds	r2, #16
    2454:	68cb      	ldr	r3, [r1, #12]
    2456:	421a      	tst	r2, r3
    2458:	d0fc      	beq.n	2454 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    245a:	4b0a      	ldr	r3, [pc, #40]	; (2484 <system_clock_source_enable+0xa4>)
    245c:	681b      	ldr	r3, [r3, #0]
    245e:	b29b      	uxth	r3, r3
    2460:	4a07      	ldr	r2, [pc, #28]	; (2480 <system_clock_source_enable+0xa0>)
    2462:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2464:	2000      	movs	r0, #0
    2466:	e008      	b.n	247a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2468:	4905      	ldr	r1, [pc, #20]	; (2480 <system_clock_source_enable+0xa0>)
    246a:	2244      	movs	r2, #68	; 0x44
    246c:	5c8b      	ldrb	r3, [r1, r2]
    246e:	2002      	movs	r0, #2
    2470:	4303      	orrs	r3, r0
    2472:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2474:	2000      	movs	r0, #0
		break;
    2476:	e000      	b.n	247a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2478:	2000      	movs	r0, #0
}
    247a:	4770      	bx	lr
    247c:	00005a48 	.word	0x00005a48
    2480:	40000800 	.word	0x40000800
    2484:	20000138 	.word	0x20000138

00002488 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2488:	b530      	push	{r4, r5, lr}
    248a:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    248c:	22c2      	movs	r2, #194	; 0xc2
    248e:	00d2      	lsls	r2, r2, #3
    2490:	4b1a      	ldr	r3, [pc, #104]	; (24fc <system_clock_init+0x74>)
    2492:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2494:	4a1a      	ldr	r2, [pc, #104]	; (2500 <system_clock_init+0x78>)
    2496:	6853      	ldr	r3, [r2, #4]
    2498:	211e      	movs	r1, #30
    249a:	438b      	bics	r3, r1
    249c:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    249e:	2301      	movs	r3, #1
    24a0:	466a      	mov	r2, sp
    24a2:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    24a4:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    24a6:	4d17      	ldr	r5, [pc, #92]	; (2504 <system_clock_init+0x7c>)
    24a8:	b2e0      	uxtb	r0, r4
    24aa:	4669      	mov	r1, sp
    24ac:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    24ae:	3401      	adds	r4, #1
    24b0:	2c25      	cmp	r4, #37	; 0x25
    24b2:	d1f9      	bne.n	24a8 <system_clock_init+0x20>
	config->run_in_standby  = false;
    24b4:	a803      	add	r0, sp, #12
    24b6:	2400      	movs	r4, #0
    24b8:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    24ba:	2501      	movs	r5, #1
    24bc:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    24be:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    24c0:	4b11      	ldr	r3, [pc, #68]	; (2508 <system_clock_init+0x80>)
    24c2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    24c4:	2006      	movs	r0, #6
    24c6:	4b11      	ldr	r3, [pc, #68]	; (250c <system_clock_init+0x84>)
    24c8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    24ca:	4b11      	ldr	r3, [pc, #68]	; (2510 <system_clock_init+0x88>)
    24cc:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    24ce:	4b11      	ldr	r3, [pc, #68]	; (2514 <system_clock_init+0x8c>)
    24d0:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    24d2:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    24d4:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    24d6:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    24d8:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    24da:	466b      	mov	r3, sp
    24dc:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    24de:	2306      	movs	r3, #6
    24e0:	466a      	mov	r2, sp
    24e2:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    24e4:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    24e6:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    24e8:	4669      	mov	r1, sp
    24ea:	2000      	movs	r0, #0
    24ec:	4b0a      	ldr	r3, [pc, #40]	; (2518 <system_clock_init+0x90>)
    24ee:	4798      	blx	r3
    24f0:	2000      	movs	r0, #0
    24f2:	4b0a      	ldr	r3, [pc, #40]	; (251c <system_clock_init+0x94>)
    24f4:	4798      	blx	r3
#endif
}
    24f6:	b005      	add	sp, #20
    24f8:	bd30      	pop	{r4, r5, pc}
    24fa:	46c0      	nop			; (mov r8, r8)
    24fc:	40000800 	.word	0x40000800
    2500:	41004000 	.word	0x41004000
    2504:	00002759 	.word	0x00002759
    2508:	000023a5 	.word	0x000023a5
    250c:	000023e1 	.word	0x000023e1
    2510:	00002521 	.word	0x00002521
    2514:	40000400 	.word	0x40000400
    2518:	00002545 	.word	0x00002545
    251c:	000025fd 	.word	0x000025fd

00002520 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2520:	4a06      	ldr	r2, [pc, #24]	; (253c <system_gclk_init+0x1c>)
    2522:	6993      	ldr	r3, [r2, #24]
    2524:	2108      	movs	r1, #8
    2526:	430b      	orrs	r3, r1
    2528:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    252a:	2201      	movs	r2, #1
    252c:	4b04      	ldr	r3, [pc, #16]	; (2540 <system_gclk_init+0x20>)
    252e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2530:	0019      	movs	r1, r3
    2532:	780b      	ldrb	r3, [r1, #0]
    2534:	4213      	tst	r3, r2
    2536:	d1fc      	bne.n	2532 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2538:	4770      	bx	lr
    253a:	46c0      	nop			; (mov r8, r8)
    253c:	40000400 	.word	0x40000400
    2540:	40000c00 	.word	0x40000c00

00002544 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2544:	b570      	push	{r4, r5, r6, lr}
    2546:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2548:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    254a:	780d      	ldrb	r5, [r1, #0]
    254c:	022d      	lsls	r5, r5, #8
    254e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2550:	784b      	ldrb	r3, [r1, #1]
    2552:	2b00      	cmp	r3, #0
    2554:	d002      	beq.n	255c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2556:	2380      	movs	r3, #128	; 0x80
    2558:	02db      	lsls	r3, r3, #11
    255a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    255c:	7a4b      	ldrb	r3, [r1, #9]
    255e:	2b00      	cmp	r3, #0
    2560:	d002      	beq.n	2568 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2562:	2380      	movs	r3, #128	; 0x80
    2564:	031b      	lsls	r3, r3, #12
    2566:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2568:	6848      	ldr	r0, [r1, #4]
    256a:	2801      	cmp	r0, #1
    256c:	d910      	bls.n	2590 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    256e:	1e43      	subs	r3, r0, #1
    2570:	4218      	tst	r0, r3
    2572:	d134      	bne.n	25de <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2574:	2802      	cmp	r0, #2
    2576:	d930      	bls.n	25da <system_gclk_gen_set_config+0x96>
    2578:	2302      	movs	r3, #2
    257a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    257c:	3201      	adds	r2, #1
						mask <<= 1) {
    257e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2580:	4298      	cmp	r0, r3
    2582:	d8fb      	bhi.n	257c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2584:	0212      	lsls	r2, r2, #8
    2586:	4332      	orrs	r2, r6
    2588:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    258a:	2380      	movs	r3, #128	; 0x80
    258c:	035b      	lsls	r3, r3, #13
    258e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2590:	7a0b      	ldrb	r3, [r1, #8]
    2592:	2b00      	cmp	r3, #0
    2594:	d002      	beq.n	259c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2596:	2380      	movs	r3, #128	; 0x80
    2598:	039b      	lsls	r3, r3, #14
    259a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    259c:	4a13      	ldr	r2, [pc, #76]	; (25ec <system_gclk_gen_set_config+0xa8>)
    259e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    25a0:	b25b      	sxtb	r3, r3
    25a2:	2b00      	cmp	r3, #0
    25a4:	dbfb      	blt.n	259e <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    25a6:	4b12      	ldr	r3, [pc, #72]	; (25f0 <system_gclk_gen_set_config+0xac>)
    25a8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    25aa:	4b12      	ldr	r3, [pc, #72]	; (25f4 <system_gclk_gen_set_config+0xb0>)
    25ac:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    25ae:	4a0f      	ldr	r2, [pc, #60]	; (25ec <system_gclk_gen_set_config+0xa8>)
    25b0:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    25b2:	b25b      	sxtb	r3, r3
    25b4:	2b00      	cmp	r3, #0
    25b6:	dbfb      	blt.n	25b0 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    25b8:	4b0c      	ldr	r3, [pc, #48]	; (25ec <system_gclk_gen_set_config+0xa8>)
    25ba:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    25bc:	001a      	movs	r2, r3
    25be:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    25c0:	b25b      	sxtb	r3, r3
    25c2:	2b00      	cmp	r3, #0
    25c4:	dbfb      	blt.n	25be <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    25c6:	4a09      	ldr	r2, [pc, #36]	; (25ec <system_gclk_gen_set_config+0xa8>)
    25c8:	6853      	ldr	r3, [r2, #4]
    25ca:	2180      	movs	r1, #128	; 0x80
    25cc:	0249      	lsls	r1, r1, #9
    25ce:	400b      	ands	r3, r1
    25d0:	431d      	orrs	r5, r3
    25d2:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    25d4:	4b08      	ldr	r3, [pc, #32]	; (25f8 <system_gclk_gen_set_config+0xb4>)
    25d6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    25d8:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    25da:	2200      	movs	r2, #0
    25dc:	e7d2      	b.n	2584 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    25de:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    25e0:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    25e2:	2380      	movs	r3, #128	; 0x80
    25e4:	029b      	lsls	r3, r3, #10
    25e6:	431d      	orrs	r5, r3
    25e8:	e7d2      	b.n	2590 <system_gclk_gen_set_config+0x4c>
    25ea:	46c0      	nop			; (mov r8, r8)
    25ec:	40000c00 	.word	0x40000c00
    25f0:	00002245 	.word	0x00002245
    25f4:	40000c08 	.word	0x40000c08
    25f8:	00002285 	.word	0x00002285

000025fc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    25fc:	b510      	push	{r4, lr}
    25fe:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2600:	4a0b      	ldr	r2, [pc, #44]	; (2630 <system_gclk_gen_enable+0x34>)
    2602:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2604:	b25b      	sxtb	r3, r3
    2606:	2b00      	cmp	r3, #0
    2608:	dbfb      	blt.n	2602 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    260a:	4b0a      	ldr	r3, [pc, #40]	; (2634 <system_gclk_gen_enable+0x38>)
    260c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    260e:	4b0a      	ldr	r3, [pc, #40]	; (2638 <system_gclk_gen_enable+0x3c>)
    2610:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2612:	4a07      	ldr	r2, [pc, #28]	; (2630 <system_gclk_gen_enable+0x34>)
    2614:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2616:	b25b      	sxtb	r3, r3
    2618:	2b00      	cmp	r3, #0
    261a:	dbfb      	blt.n	2614 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    261c:	4a04      	ldr	r2, [pc, #16]	; (2630 <system_gclk_gen_enable+0x34>)
    261e:	6851      	ldr	r1, [r2, #4]
    2620:	2380      	movs	r3, #128	; 0x80
    2622:	025b      	lsls	r3, r3, #9
    2624:	430b      	orrs	r3, r1
    2626:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2628:	4b04      	ldr	r3, [pc, #16]	; (263c <system_gclk_gen_enable+0x40>)
    262a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    262c:	bd10      	pop	{r4, pc}
    262e:	46c0      	nop			; (mov r8, r8)
    2630:	40000c00 	.word	0x40000c00
    2634:	00002245 	.word	0x00002245
    2638:	40000c04 	.word	0x40000c04
    263c:	00002285 	.word	0x00002285

00002640 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2640:	b570      	push	{r4, r5, r6, lr}
    2642:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2644:	4a1a      	ldr	r2, [pc, #104]	; (26b0 <system_gclk_gen_get_hz+0x70>)
    2646:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2648:	b25b      	sxtb	r3, r3
    264a:	2b00      	cmp	r3, #0
    264c:	dbfb      	blt.n	2646 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    264e:	4b19      	ldr	r3, [pc, #100]	; (26b4 <system_gclk_gen_get_hz+0x74>)
    2650:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2652:	4b19      	ldr	r3, [pc, #100]	; (26b8 <system_gclk_gen_get_hz+0x78>)
    2654:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2656:	4a16      	ldr	r2, [pc, #88]	; (26b0 <system_gclk_gen_get_hz+0x70>)
    2658:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    265a:	b25b      	sxtb	r3, r3
    265c:	2b00      	cmp	r3, #0
    265e:	dbfb      	blt.n	2658 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2660:	4e13      	ldr	r6, [pc, #76]	; (26b0 <system_gclk_gen_get_hz+0x70>)
    2662:	6870      	ldr	r0, [r6, #4]
    2664:	04c0      	lsls	r0, r0, #19
    2666:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2668:	4b14      	ldr	r3, [pc, #80]	; (26bc <system_gclk_gen_get_hz+0x7c>)
    266a:	4798      	blx	r3
    266c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    266e:	4b12      	ldr	r3, [pc, #72]	; (26b8 <system_gclk_gen_get_hz+0x78>)
    2670:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2672:	6876      	ldr	r6, [r6, #4]
    2674:	02f6      	lsls	r6, r6, #11
    2676:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2678:	4b11      	ldr	r3, [pc, #68]	; (26c0 <system_gclk_gen_get_hz+0x80>)
    267a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    267c:	4a0c      	ldr	r2, [pc, #48]	; (26b0 <system_gclk_gen_get_hz+0x70>)
    267e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2680:	b25b      	sxtb	r3, r3
    2682:	2b00      	cmp	r3, #0
    2684:	dbfb      	blt.n	267e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2686:	4b0a      	ldr	r3, [pc, #40]	; (26b0 <system_gclk_gen_get_hz+0x70>)
    2688:	689c      	ldr	r4, [r3, #8]
    268a:	0224      	lsls	r4, r4, #8
    268c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    268e:	4b0d      	ldr	r3, [pc, #52]	; (26c4 <system_gclk_gen_get_hz+0x84>)
    2690:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2692:	2e00      	cmp	r6, #0
    2694:	d107      	bne.n	26a6 <system_gclk_gen_get_hz+0x66>
    2696:	2c01      	cmp	r4, #1
    2698:	d907      	bls.n	26aa <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    269a:	0021      	movs	r1, r4
    269c:	0028      	movs	r0, r5
    269e:	4b0a      	ldr	r3, [pc, #40]	; (26c8 <system_gclk_gen_get_hz+0x88>)
    26a0:	4798      	blx	r3
    26a2:	0005      	movs	r5, r0
    26a4:	e001      	b.n	26aa <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    26a6:	3401      	adds	r4, #1
    26a8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    26aa:	0028      	movs	r0, r5
    26ac:	bd70      	pop	{r4, r5, r6, pc}
    26ae:	46c0      	nop			; (mov r8, r8)
    26b0:	40000c00 	.word	0x40000c00
    26b4:	00002245 	.word	0x00002245
    26b8:	40000c04 	.word	0x40000c04
    26bc:	00002311 	.word	0x00002311
    26c0:	40000c08 	.word	0x40000c08
    26c4:	00002285 	.word	0x00002285
    26c8:	00003979 	.word	0x00003979

000026cc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    26cc:	b510      	push	{r4, lr}
    26ce:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    26d0:	4b06      	ldr	r3, [pc, #24]	; (26ec <system_gclk_chan_enable+0x20>)
    26d2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    26d4:	4b06      	ldr	r3, [pc, #24]	; (26f0 <system_gclk_chan_enable+0x24>)
    26d6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    26d8:	4a06      	ldr	r2, [pc, #24]	; (26f4 <system_gclk_chan_enable+0x28>)
    26da:	8853      	ldrh	r3, [r2, #2]
    26dc:	2180      	movs	r1, #128	; 0x80
    26de:	01c9      	lsls	r1, r1, #7
    26e0:	430b      	orrs	r3, r1
    26e2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    26e4:	4b04      	ldr	r3, [pc, #16]	; (26f8 <system_gclk_chan_enable+0x2c>)
    26e6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    26e8:	bd10      	pop	{r4, pc}
    26ea:	46c0      	nop			; (mov r8, r8)
    26ec:	00002245 	.word	0x00002245
    26f0:	40000c02 	.word	0x40000c02
    26f4:	40000c00 	.word	0x40000c00
    26f8:	00002285 	.word	0x00002285

000026fc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    26fc:	b510      	push	{r4, lr}
    26fe:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2700:	4b0f      	ldr	r3, [pc, #60]	; (2740 <system_gclk_chan_disable+0x44>)
    2702:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2704:	4b0f      	ldr	r3, [pc, #60]	; (2744 <system_gclk_chan_disable+0x48>)
    2706:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2708:	4a0f      	ldr	r2, [pc, #60]	; (2748 <system_gclk_chan_disable+0x4c>)
    270a:	8853      	ldrh	r3, [r2, #2]
    270c:	051b      	lsls	r3, r3, #20
    270e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2710:	8853      	ldrh	r3, [r2, #2]
    2712:	490e      	ldr	r1, [pc, #56]	; (274c <system_gclk_chan_disable+0x50>)
    2714:	400b      	ands	r3, r1
    2716:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2718:	8853      	ldrh	r3, [r2, #2]
    271a:	490d      	ldr	r1, [pc, #52]	; (2750 <system_gclk_chan_disable+0x54>)
    271c:	400b      	ands	r3, r1
    271e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2720:	0011      	movs	r1, r2
    2722:	2280      	movs	r2, #128	; 0x80
    2724:	01d2      	lsls	r2, r2, #7
    2726:	884b      	ldrh	r3, [r1, #2]
    2728:	4213      	tst	r3, r2
    272a:	d1fc      	bne.n	2726 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    272c:	4906      	ldr	r1, [pc, #24]	; (2748 <system_gclk_chan_disable+0x4c>)
    272e:	884a      	ldrh	r2, [r1, #2]
    2730:	0203      	lsls	r3, r0, #8
    2732:	4806      	ldr	r0, [pc, #24]	; (274c <system_gclk_chan_disable+0x50>)
    2734:	4002      	ands	r2, r0
    2736:	4313      	orrs	r3, r2
    2738:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    273a:	4b06      	ldr	r3, [pc, #24]	; (2754 <system_gclk_chan_disable+0x58>)
    273c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    273e:	bd10      	pop	{r4, pc}
    2740:	00002245 	.word	0x00002245
    2744:	40000c02 	.word	0x40000c02
    2748:	40000c00 	.word	0x40000c00
    274c:	fffff0ff 	.word	0xfffff0ff
    2750:	ffffbfff 	.word	0xffffbfff
    2754:	00002285 	.word	0x00002285

00002758 <system_gclk_chan_set_config>:
{
    2758:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    275a:	780c      	ldrb	r4, [r1, #0]
    275c:	0224      	lsls	r4, r4, #8
    275e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2760:	4b02      	ldr	r3, [pc, #8]	; (276c <system_gclk_chan_set_config+0x14>)
    2762:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2764:	b2a4      	uxth	r4, r4
    2766:	4b02      	ldr	r3, [pc, #8]	; (2770 <system_gclk_chan_set_config+0x18>)
    2768:	805c      	strh	r4, [r3, #2]
}
    276a:	bd10      	pop	{r4, pc}
    276c:	000026fd 	.word	0x000026fd
    2770:	40000c00 	.word	0x40000c00

00002774 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2774:	b510      	push	{r4, lr}
    2776:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2778:	4b06      	ldr	r3, [pc, #24]	; (2794 <system_gclk_chan_get_hz+0x20>)
    277a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    277c:	4b06      	ldr	r3, [pc, #24]	; (2798 <system_gclk_chan_get_hz+0x24>)
    277e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2780:	4b06      	ldr	r3, [pc, #24]	; (279c <system_gclk_chan_get_hz+0x28>)
    2782:	885c      	ldrh	r4, [r3, #2]
    2784:	0524      	lsls	r4, r4, #20
    2786:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2788:	4b05      	ldr	r3, [pc, #20]	; (27a0 <system_gclk_chan_get_hz+0x2c>)
    278a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    278c:	0020      	movs	r0, r4
    278e:	4b05      	ldr	r3, [pc, #20]	; (27a4 <system_gclk_chan_get_hz+0x30>)
    2790:	4798      	blx	r3
}
    2792:	bd10      	pop	{r4, pc}
    2794:	00002245 	.word	0x00002245
    2798:	40000c02 	.word	0x40000c02
    279c:	40000c00 	.word	0x40000c00
    27a0:	00002285 	.word	0x00002285
    27a4:	00002641 	.word	0x00002641

000027a8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    27a8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    27aa:	78d3      	ldrb	r3, [r2, #3]
    27ac:	2b00      	cmp	r3, #0
    27ae:	d135      	bne.n	281c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    27b0:	7813      	ldrb	r3, [r2, #0]
    27b2:	2b80      	cmp	r3, #128	; 0x80
    27b4:	d029      	beq.n	280a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    27b6:	061b      	lsls	r3, r3, #24
    27b8:	2480      	movs	r4, #128	; 0x80
    27ba:	0264      	lsls	r4, r4, #9
    27bc:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    27be:	7854      	ldrb	r4, [r2, #1]
    27c0:	2502      	movs	r5, #2
    27c2:	43ac      	bics	r4, r5
    27c4:	d106      	bne.n	27d4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    27c6:	7894      	ldrb	r4, [r2, #2]
    27c8:	2c00      	cmp	r4, #0
    27ca:	d120      	bne.n	280e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    27cc:	2480      	movs	r4, #128	; 0x80
    27ce:	02a4      	lsls	r4, r4, #10
    27d0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    27d2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    27d4:	7854      	ldrb	r4, [r2, #1]
    27d6:	3c01      	subs	r4, #1
    27d8:	2c01      	cmp	r4, #1
    27da:	d91c      	bls.n	2816 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    27dc:	040d      	lsls	r5, r1, #16
    27de:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    27e0:	24a0      	movs	r4, #160	; 0xa0
    27e2:	05e4      	lsls	r4, r4, #23
    27e4:	432c      	orrs	r4, r5
    27e6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    27e8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    27ea:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    27ec:	24d0      	movs	r4, #208	; 0xd0
    27ee:	0624      	lsls	r4, r4, #24
    27f0:	432c      	orrs	r4, r5
    27f2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    27f4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    27f6:	78d4      	ldrb	r4, [r2, #3]
    27f8:	2c00      	cmp	r4, #0
    27fa:	d122      	bne.n	2842 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    27fc:	035b      	lsls	r3, r3, #13
    27fe:	d51c      	bpl.n	283a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2800:	7893      	ldrb	r3, [r2, #2]
    2802:	2b01      	cmp	r3, #1
    2804:	d01e      	beq.n	2844 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2806:	6141      	str	r1, [r0, #20]
    2808:	e017      	b.n	283a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    280a:	2300      	movs	r3, #0
    280c:	e7d7      	b.n	27be <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    280e:	24c0      	movs	r4, #192	; 0xc0
    2810:	02e4      	lsls	r4, r4, #11
    2812:	4323      	orrs	r3, r4
    2814:	e7dd      	b.n	27d2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2816:	4c0d      	ldr	r4, [pc, #52]	; (284c <_system_pinmux_config+0xa4>)
    2818:	4023      	ands	r3, r4
    281a:	e7df      	b.n	27dc <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    281c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    281e:	040c      	lsls	r4, r1, #16
    2820:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2822:	23a0      	movs	r3, #160	; 0xa0
    2824:	05db      	lsls	r3, r3, #23
    2826:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2828:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    282a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    282c:	23d0      	movs	r3, #208	; 0xd0
    282e:	061b      	lsls	r3, r3, #24
    2830:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2832:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2834:	78d3      	ldrb	r3, [r2, #3]
    2836:	2b00      	cmp	r3, #0
    2838:	d103      	bne.n	2842 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    283a:	7853      	ldrb	r3, [r2, #1]
    283c:	3b01      	subs	r3, #1
    283e:	2b01      	cmp	r3, #1
    2840:	d902      	bls.n	2848 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2842:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2844:	6181      	str	r1, [r0, #24]
    2846:	e7f8      	b.n	283a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2848:	6081      	str	r1, [r0, #8]
}
    284a:	e7fa      	b.n	2842 <_system_pinmux_config+0x9a>
    284c:	fffbffff 	.word	0xfffbffff

00002850 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2850:	b510      	push	{r4, lr}
    2852:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2854:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2856:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2858:	2900      	cmp	r1, #0
    285a:	d104      	bne.n	2866 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    285c:	0943      	lsrs	r3, r0, #5
    285e:	01db      	lsls	r3, r3, #7
    2860:	4905      	ldr	r1, [pc, #20]	; (2878 <system_pinmux_pin_set_config+0x28>)
    2862:	468c      	mov	ip, r1
    2864:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2866:	241f      	movs	r4, #31
    2868:	4020      	ands	r0, r4
    286a:	2101      	movs	r1, #1
    286c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    286e:	0018      	movs	r0, r3
    2870:	4b02      	ldr	r3, [pc, #8]	; (287c <system_pinmux_pin_set_config+0x2c>)
    2872:	4798      	blx	r3
}
    2874:	bd10      	pop	{r4, pc}
    2876:	46c0      	nop			; (mov r8, r8)
    2878:	41004400 	.word	0x41004400
    287c:	000027a9 	.word	0x000027a9

00002880 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2880:	4770      	bx	lr
	...

00002884 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2884:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2886:	4b05      	ldr	r3, [pc, #20]	; (289c <system_init+0x18>)
    2888:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    288a:	4b05      	ldr	r3, [pc, #20]	; (28a0 <system_init+0x1c>)
    288c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    288e:	4b05      	ldr	r3, [pc, #20]	; (28a4 <system_init+0x20>)
    2890:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2892:	4b05      	ldr	r3, [pc, #20]	; (28a8 <system_init+0x24>)
    2894:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2896:	4b05      	ldr	r3, [pc, #20]	; (28ac <system_init+0x28>)
    2898:	4798      	blx	r3
}
    289a:	bd10      	pop	{r4, pc}
    289c:	00002489 	.word	0x00002489
    28a0:	000022b5 	.word	0x000022b5
    28a4:	00002881 	.word	0x00002881
    28a8:	00002881 	.word	0x00002881
    28ac:	00002881 	.word	0x00002881

000028b0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    28b0:	e7fe      	b.n	28b0 <Dummy_Handler>
	...

000028b4 <Reset_Handler>:
{
    28b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    28b6:	4a2a      	ldr	r2, [pc, #168]	; (2960 <Reset_Handler+0xac>)
    28b8:	4b2a      	ldr	r3, [pc, #168]	; (2964 <Reset_Handler+0xb0>)
    28ba:	429a      	cmp	r2, r3
    28bc:	d011      	beq.n	28e2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    28be:	001a      	movs	r2, r3
    28c0:	4b29      	ldr	r3, [pc, #164]	; (2968 <Reset_Handler+0xb4>)
    28c2:	429a      	cmp	r2, r3
    28c4:	d20d      	bcs.n	28e2 <Reset_Handler+0x2e>
    28c6:	4a29      	ldr	r2, [pc, #164]	; (296c <Reset_Handler+0xb8>)
    28c8:	3303      	adds	r3, #3
    28ca:	1a9b      	subs	r3, r3, r2
    28cc:	089b      	lsrs	r3, r3, #2
    28ce:	3301      	adds	r3, #1
    28d0:	009b      	lsls	r3, r3, #2
    28d2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    28d4:	4823      	ldr	r0, [pc, #140]	; (2964 <Reset_Handler+0xb0>)
    28d6:	4922      	ldr	r1, [pc, #136]	; (2960 <Reset_Handler+0xac>)
    28d8:	588c      	ldr	r4, [r1, r2]
    28da:	5084      	str	r4, [r0, r2]
    28dc:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    28de:	429a      	cmp	r2, r3
    28e0:	d1fa      	bne.n	28d8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    28e2:	4a23      	ldr	r2, [pc, #140]	; (2970 <Reset_Handler+0xbc>)
    28e4:	4b23      	ldr	r3, [pc, #140]	; (2974 <Reset_Handler+0xc0>)
    28e6:	429a      	cmp	r2, r3
    28e8:	d20a      	bcs.n	2900 <Reset_Handler+0x4c>
    28ea:	43d3      	mvns	r3, r2
    28ec:	4921      	ldr	r1, [pc, #132]	; (2974 <Reset_Handler+0xc0>)
    28ee:	185b      	adds	r3, r3, r1
    28f0:	2103      	movs	r1, #3
    28f2:	438b      	bics	r3, r1
    28f4:	3304      	adds	r3, #4
    28f6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    28f8:	2100      	movs	r1, #0
    28fa:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    28fc:	4293      	cmp	r3, r2
    28fe:	d1fc      	bne.n	28fa <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2900:	4a1d      	ldr	r2, [pc, #116]	; (2978 <Reset_Handler+0xc4>)
    2902:	21ff      	movs	r1, #255	; 0xff
    2904:	4b1d      	ldr	r3, [pc, #116]	; (297c <Reset_Handler+0xc8>)
    2906:	438b      	bics	r3, r1
    2908:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    290a:	39fd      	subs	r1, #253	; 0xfd
    290c:	2390      	movs	r3, #144	; 0x90
    290e:	005b      	lsls	r3, r3, #1
    2910:	4a1b      	ldr	r2, [pc, #108]	; (2980 <Reset_Handler+0xcc>)
    2912:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2914:	4a1b      	ldr	r2, [pc, #108]	; (2984 <Reset_Handler+0xd0>)
    2916:	78d3      	ldrb	r3, [r2, #3]
    2918:	2503      	movs	r5, #3
    291a:	43ab      	bics	r3, r5
    291c:	2402      	movs	r4, #2
    291e:	4323      	orrs	r3, r4
    2920:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2922:	78d3      	ldrb	r3, [r2, #3]
    2924:	270c      	movs	r7, #12
    2926:	43bb      	bics	r3, r7
    2928:	2608      	movs	r6, #8
    292a:	4333      	orrs	r3, r6
    292c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    292e:	4b16      	ldr	r3, [pc, #88]	; (2988 <Reset_Handler+0xd4>)
    2930:	7b98      	ldrb	r0, [r3, #14]
    2932:	2230      	movs	r2, #48	; 0x30
    2934:	4390      	bics	r0, r2
    2936:	2220      	movs	r2, #32
    2938:	4310      	orrs	r0, r2
    293a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    293c:	7b99      	ldrb	r1, [r3, #14]
    293e:	43b9      	bics	r1, r7
    2940:	4331      	orrs	r1, r6
    2942:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2944:	7b9a      	ldrb	r2, [r3, #14]
    2946:	43aa      	bics	r2, r5
    2948:	4322      	orrs	r2, r4
    294a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    294c:	4a0f      	ldr	r2, [pc, #60]	; (298c <Reset_Handler+0xd8>)
    294e:	6853      	ldr	r3, [r2, #4]
    2950:	2180      	movs	r1, #128	; 0x80
    2952:	430b      	orrs	r3, r1
    2954:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2956:	4b0e      	ldr	r3, [pc, #56]	; (2990 <Reset_Handler+0xdc>)
    2958:	4798      	blx	r3
        main();
    295a:	4b0e      	ldr	r3, [pc, #56]	; (2994 <Reset_Handler+0xe0>)
    295c:	4798      	blx	r3
    295e:	e7fe      	b.n	295e <Reset_Handler+0xaa>
    2960:	00006138 	.word	0x00006138
    2964:	20000000 	.word	0x20000000
    2968:	200000d4 	.word	0x200000d4
    296c:	20000004 	.word	0x20000004
    2970:	200000d4 	.word	0x200000d4
    2974:	20000218 	.word	0x20000218
    2978:	e000ed00 	.word	0xe000ed00
    297c:	00000000 	.word	0x00000000
    2980:	41007000 	.word	0x41007000
    2984:	41005000 	.word	0x41005000
    2988:	41004800 	.word	0x41004800
    298c:	41004000 	.word	0x41004000
    2990:	00005759 	.word	0x00005759
    2994:	0000395d 	.word	0x0000395d

00002998 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2998:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    299a:	4a06      	ldr	r2, [pc, #24]	; (29b4 <_sbrk+0x1c>)
    299c:	6812      	ldr	r2, [r2, #0]
    299e:	2a00      	cmp	r2, #0
    29a0:	d004      	beq.n	29ac <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    29a2:	4a04      	ldr	r2, [pc, #16]	; (29b4 <_sbrk+0x1c>)
    29a4:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    29a6:	18c3      	adds	r3, r0, r3
    29a8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    29aa:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    29ac:	4902      	ldr	r1, [pc, #8]	; (29b8 <_sbrk+0x20>)
    29ae:	4a01      	ldr	r2, [pc, #4]	; (29b4 <_sbrk+0x1c>)
    29b0:	6011      	str	r1, [r2, #0]
    29b2:	e7f6      	b.n	29a2 <_sbrk+0xa>
    29b4:	20000150 	.word	0x20000150
    29b8:	20002218 	.word	0x20002218

000029bc <generateKeyPair>:
 #include "ateccx08a.h"
 #include "cryptoauthlib.h"
 #include "usart_conf.h"


 bool generateKeyPair (uint8_t* pub_key){
    29bc:	b510      	push	{r4, lr}
    29be:	0001      	movs	r1, r0
	ATCA_STATUS status;
	//uint8_t key[64] = {0};

	
	status = atcab_genkey(0x0000, pub_key);
    29c0:	2000      	movs	r0, #0
    29c2:	4b09      	ldr	r3, [pc, #36]	; (29e8 <generateKeyPair+0x2c>)
    29c4:	4798      	blx	r3
	if(status != ATCA_SUCCESS){
		port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
		usart_write_buffer_wait(&USART, (uint8_t *)"Some problem occurred!\n\r", 22);
		return false;
	}
	return true;
    29c6:	2301      	movs	r3, #1
	if(status != ATCA_SUCCESS){
    29c8:	2800      	cmp	r0, #0
    29ca:	d101      	bne.n	29d0 <generateKeyPair+0x14>
 }
    29cc:	0018      	movs	r0, r3
    29ce:	bd10      	pop	{r4, pc}
	} else {
		port_base->OUTCLR.reg = pin_mask;
    29d0:	2280      	movs	r2, #128	; 0x80
    29d2:	0312      	lsls	r2, r2, #12
    29d4:	4b05      	ldr	r3, [pc, #20]	; (29ec <generateKeyPair+0x30>)
    29d6:	615a      	str	r2, [r3, #20]
		usart_write_buffer_wait(&USART, (uint8_t *)"Some problem occurred!\n\r", 22);
    29d8:	2216      	movs	r2, #22
    29da:	4905      	ldr	r1, [pc, #20]	; (29f0 <generateKeyPair+0x34>)
    29dc:	4805      	ldr	r0, [pc, #20]	; (29f4 <generateKeyPair+0x38>)
    29de:	4b06      	ldr	r3, [pc, #24]	; (29f8 <generateKeyPair+0x3c>)
    29e0:	4798      	blx	r3
		return false;
    29e2:	2300      	movs	r3, #0
    29e4:	e7f2      	b.n	29cc <generateKeyPair+0x10>
    29e6:	46c0      	nop			; (mov r8, r8)
    29e8:	00001211 	.word	0x00001211
    29ec:	41004400 	.word	0x41004400
    29f0:	00005a6c 	.word	0x00005a6c
    29f4:	200001fc 	.word	0x200001fc
    29f8:	00000add 	.word	0x00000add

000029fc <isDeviceLocked>:

void isDeviceLocked (void){
    29fc:	b500      	push	{lr}
    29fe:	b083      	sub	sp, #12
	ATCA_STATUS status;
	bool dataIsLocked = 0xff, cfgIsLocked = 0xff;
    2a00:	2301      	movs	r3, #1
    2a02:	466a      	mov	r2, sp
    2a04:	71d3      	strb	r3, [r2, #7]
    2a06:	466a      	mov	r2, sp
    2a08:	1d91      	adds	r1, r2, #6
    2a0a:	700b      	strb	r3, [r1, #0]

	  
	status = atcab_is_locked(LOCK_ZONE_CONFIG, &cfgIsLocked);
    2a0c:	2000      	movs	r0, #0
    2a0e:	4b20      	ldr	r3, [pc, #128]	; (2a90 <isDeviceLocked+0x94>)
    2a10:	4798      	blx	r3

	if(status != ATCA_SUCCESS){
    2a12:	2800      	cmp	r0, #0
    2a14:	d11c      	bne.n	2a50 <isDeviceLocked+0x54>
		port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
		usart_write_buffer_wait(&USART, (uint8_t *)"Some problem occurred!\n\r", 22);
	}
	else{
		
		if(cfgIsLocked){usart_write_buffer_wait(&USART, (uint8_t *)"Config is locked\n\r", 20);}
    2a16:	466b      	mov	r3, sp
    2a18:	3306      	adds	r3, #6
    2a1a:	781b      	ldrb	r3, [r3, #0]
    2a1c:	2b00      	cmp	r3, #0
    2a1e:	d021      	beq.n	2a64 <isDeviceLocked+0x68>
    2a20:	2214      	movs	r2, #20
    2a22:	491c      	ldr	r1, [pc, #112]	; (2a94 <isDeviceLocked+0x98>)
    2a24:	481c      	ldr	r0, [pc, #112]	; (2a98 <isDeviceLocked+0x9c>)
    2a26:	4b1d      	ldr	r3, [pc, #116]	; (2a9c <isDeviceLocked+0xa0>)
    2a28:	4798      	blx	r3
		else{usart_write_buffer_wait(&USART, (uint8_t *)"Config is not locked\n\r", 22);}
	}

	status = atcab_is_locked(LOCK_ZONE_DATA, &dataIsLocked);
    2a2a:	466b      	mov	r3, sp
    2a2c:	1dd9      	adds	r1, r3, #7
    2a2e:	2001      	movs	r0, #1
    2a30:	4b17      	ldr	r3, [pc, #92]	; (2a90 <isDeviceLocked+0x94>)
    2a32:	4798      	blx	r3

	if(status != ATCA_SUCCESS){
    2a34:	2800      	cmp	r0, #0
    2a36:	d11b      	bne.n	2a70 <isDeviceLocked+0x74>
		port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
		usart_write_buffer_wait(&USART, (uint8_t *)"Some problem occurred!\n\r", 22);
	}
	else{
		if(dataIsLocked){usart_write_buffer_wait(&USART, (uint8_t *)"Data is locked\n\r", 20);}
    2a38:	466b      	mov	r3, sp
    2a3a:	3307      	adds	r3, #7
    2a3c:	781b      	ldrb	r3, [r3, #0]
    2a3e:	2b00      	cmp	r3, #0
    2a40:	d120      	bne.n	2a84 <isDeviceLocked+0x88>
		else{usart_write_buffer_wait(&USART, (uint8_t *)"Data is not locked\n\r", 22);}
    2a42:	2216      	movs	r2, #22
    2a44:	4916      	ldr	r1, [pc, #88]	; (2aa0 <isDeviceLocked+0xa4>)
    2a46:	4814      	ldr	r0, [pc, #80]	; (2a98 <isDeviceLocked+0x9c>)
    2a48:	4b14      	ldr	r3, [pc, #80]	; (2a9c <isDeviceLocked+0xa0>)
    2a4a:	4798      	blx	r3
	}
}
    2a4c:	b003      	add	sp, #12
    2a4e:	bd00      	pop	{pc}
    2a50:	2280      	movs	r2, #128	; 0x80
    2a52:	0312      	lsls	r2, r2, #12
    2a54:	4b13      	ldr	r3, [pc, #76]	; (2aa4 <isDeviceLocked+0xa8>)
    2a56:	615a      	str	r2, [r3, #20]
		usart_write_buffer_wait(&USART, (uint8_t *)"Some problem occurred!\n\r", 22);
    2a58:	2216      	movs	r2, #22
    2a5a:	4913      	ldr	r1, [pc, #76]	; (2aa8 <isDeviceLocked+0xac>)
    2a5c:	480e      	ldr	r0, [pc, #56]	; (2a98 <isDeviceLocked+0x9c>)
    2a5e:	4b0f      	ldr	r3, [pc, #60]	; (2a9c <isDeviceLocked+0xa0>)
    2a60:	4798      	blx	r3
    2a62:	e7e2      	b.n	2a2a <isDeviceLocked+0x2e>
		else{usart_write_buffer_wait(&USART, (uint8_t *)"Config is not locked\n\r", 22);}
    2a64:	2216      	movs	r2, #22
    2a66:	4911      	ldr	r1, [pc, #68]	; (2aac <isDeviceLocked+0xb0>)
    2a68:	480b      	ldr	r0, [pc, #44]	; (2a98 <isDeviceLocked+0x9c>)
    2a6a:	4b0c      	ldr	r3, [pc, #48]	; (2a9c <isDeviceLocked+0xa0>)
    2a6c:	4798      	blx	r3
    2a6e:	e7dc      	b.n	2a2a <isDeviceLocked+0x2e>
    2a70:	2280      	movs	r2, #128	; 0x80
    2a72:	0312      	lsls	r2, r2, #12
    2a74:	4b0b      	ldr	r3, [pc, #44]	; (2aa4 <isDeviceLocked+0xa8>)
    2a76:	615a      	str	r2, [r3, #20]
		usart_write_buffer_wait(&USART, (uint8_t *)"Some problem occurred!\n\r", 22);
    2a78:	2216      	movs	r2, #22
    2a7a:	490b      	ldr	r1, [pc, #44]	; (2aa8 <isDeviceLocked+0xac>)
    2a7c:	4806      	ldr	r0, [pc, #24]	; (2a98 <isDeviceLocked+0x9c>)
    2a7e:	4b07      	ldr	r3, [pc, #28]	; (2a9c <isDeviceLocked+0xa0>)
    2a80:	4798      	blx	r3
    2a82:	e7e3      	b.n	2a4c <isDeviceLocked+0x50>
		if(dataIsLocked){usart_write_buffer_wait(&USART, (uint8_t *)"Data is locked\n\r", 20);}
    2a84:	2214      	movs	r2, #20
    2a86:	490a      	ldr	r1, [pc, #40]	; (2ab0 <isDeviceLocked+0xb4>)
    2a88:	4803      	ldr	r0, [pc, #12]	; (2a98 <isDeviceLocked+0x9c>)
    2a8a:	4b04      	ldr	r3, [pc, #16]	; (2a9c <isDeviceLocked+0xa0>)
    2a8c:	4798      	blx	r3
    2a8e:	e7dd      	b.n	2a4c <isDeviceLocked+0x50>
    2a90:	000013f5 	.word	0x000013f5
    2a94:	00005a88 	.word	0x00005a88
    2a98:	200001fc 	.word	0x200001fc
    2a9c:	00000add 	.word	0x00000add
    2aa0:	00005ac8 	.word	0x00005ac8
    2aa4:	41004400 	.word	0x41004400
    2aa8:	00005a6c 	.word	0x00005a6c
    2aac:	00005a9c 	.word	0x00005a9c
    2ab0:	00005ab4 	.word	0x00005ab4

00002ab4 <lockZones>:

void lockZones(void){
    2ab4:	b570      	push	{r4, r5, r6, lr}
	ATCA_STATUS status;
	uint8_t input = 0;

	usart_write_buffer_wait(&USART, (uint8_t *)"1)Lock Config\n\r", 16);
    2ab6:	4d16      	ldr	r5, [pc, #88]	; (2b10 <lockZones+0x5c>)
    2ab8:	2210      	movs	r2, #16
    2aba:	4916      	ldr	r1, [pc, #88]	; (2b14 <lockZones+0x60>)
    2abc:	0028      	movs	r0, r5
    2abe:	4c16      	ldr	r4, [pc, #88]	; (2b18 <lockZones+0x64>)
    2ac0:	47a0      	blx	r4
	usart_write_buffer_wait(&USART, (uint8_t *)"2)Lock Data\n\r", 16);
    2ac2:	2210      	movs	r2, #16
    2ac4:	4915      	ldr	r1, [pc, #84]	; (2b1c <lockZones+0x68>)
    2ac6:	0028      	movs	r0, r5
    2ac8:	47a0      	blx	r4
	input = usartReadNumb();
    2aca:	4b15      	ldr	r3, [pc, #84]	; (2b20 <lockZones+0x6c>)
    2acc:	4798      	blx	r3

	if(input == 1){
    2ace:	2801      	cmp	r0, #1
    2ad0:	d002      	beq.n	2ad8 <lockZones+0x24>
		if(status != ATCA_SUCCESS){
			port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
			usart_write_buffer_wait(&USART, (uint8_t *)"Some problem occurred!\n\r", 22);
		}
	}
	else if (input == 2){
    2ad2:	2802      	cmp	r0, #2
    2ad4:	d00e      	beq.n	2af4 <lockZones+0x40>

	}



}
    2ad6:	bd70      	pop	{r4, r5, r6, pc}
		status = atcab_lock_config_zone();
    2ad8:	4b12      	ldr	r3, [pc, #72]	; (2b24 <lockZones+0x70>)
    2ada:	4798      	blx	r3
		if(status != ATCA_SUCCESS){
    2adc:	2800      	cmp	r0, #0
    2ade:	d0fa      	beq.n	2ad6 <lockZones+0x22>
    2ae0:	2280      	movs	r2, #128	; 0x80
    2ae2:	0312      	lsls	r2, r2, #12
    2ae4:	4b10      	ldr	r3, [pc, #64]	; (2b28 <lockZones+0x74>)
    2ae6:	615a      	str	r2, [r3, #20]
			usart_write_buffer_wait(&USART, (uint8_t *)"Some problem occurred!\n\r", 22);
    2ae8:	2216      	movs	r2, #22
    2aea:	4910      	ldr	r1, [pc, #64]	; (2b2c <lockZones+0x78>)
    2aec:	4808      	ldr	r0, [pc, #32]	; (2b10 <lockZones+0x5c>)
    2aee:	4b0a      	ldr	r3, [pc, #40]	; (2b18 <lockZones+0x64>)
    2af0:	4798      	blx	r3
    2af2:	e7f0      	b.n	2ad6 <lockZones+0x22>
		status = atcab_lock_data_zone();
    2af4:	4b0e      	ldr	r3, [pc, #56]	; (2b30 <lockZones+0x7c>)
    2af6:	4798      	blx	r3
		if(status != ATCA_SUCCESS){
    2af8:	2800      	cmp	r0, #0
    2afa:	d0ec      	beq.n	2ad6 <lockZones+0x22>
    2afc:	2280      	movs	r2, #128	; 0x80
    2afe:	0312      	lsls	r2, r2, #12
    2b00:	4b09      	ldr	r3, [pc, #36]	; (2b28 <lockZones+0x74>)
    2b02:	615a      	str	r2, [r3, #20]
			usart_write_buffer_wait(&USART, (uint8_t *)"Some problem occurred!\n\r", 22);
    2b04:	2216      	movs	r2, #22
    2b06:	4909      	ldr	r1, [pc, #36]	; (2b2c <lockZones+0x78>)
    2b08:	4801      	ldr	r0, [pc, #4]	; (2b10 <lockZones+0x5c>)
    2b0a:	4b03      	ldr	r3, [pc, #12]	; (2b18 <lockZones+0x64>)
    2b0c:	4798      	blx	r3
}
    2b0e:	e7e2      	b.n	2ad6 <lockZones+0x22>
    2b10:	200001fc 	.word	0x200001fc
    2b14:	00005ae0 	.word	0x00005ae0
    2b18:	00000add 	.word	0x00000add
    2b1c:	00005af0 	.word	0x00005af0
    2b20:	00002d6d 	.word	0x00002d6d
    2b24:	00001271 	.word	0x00001271
    2b28:	41004400 	.word	0x41004400
    2b2c:	00005a6c 	.word	0x00005a6c
    2b30:	00001281 	.word	0x00001281

00002b34 <generateRandom>:

 void generateRandom (void){
    2b34:	b500      	push	{lr}
    2b36:	b089      	sub	sp, #36	; 0x24
 	ATCA_STATUS status;
 	uint8_t rand[32] = {0};
    2b38:	2220      	movs	r2, #32
    2b3a:	2100      	movs	r1, #0
    2b3c:	4668      	mov	r0, sp
    2b3e:	4b0b      	ldr	r3, [pc, #44]	; (2b6c <generateRandom+0x38>)
    2b40:	4798      	blx	r3
 	
 	status = atcab_random(rand);
    2b42:	4668      	mov	r0, sp
    2b44:	4b0a      	ldr	r3, [pc, #40]	; (2b70 <generateRandom+0x3c>)
    2b46:	4798      	blx	r3
 	if(status != ATCA_SUCCESS){
    2b48:	2800      	cmp	r0, #0
    2b4a:	d105      	bne.n	2b58 <generateRandom+0x24>
	 	port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
	 	usart_write_buffer_wait(&USART, (uint8_t *)"Some problem occurred!\n\r", 22);
 	}
	else{
		usartWriteHex(rand, sizeof(rand));
    2b4c:	2120      	movs	r1, #32
    2b4e:	4668      	mov	r0, sp
    2b50:	4b08      	ldr	r3, [pc, #32]	; (2b74 <generateRandom+0x40>)
    2b52:	4798      	blx	r3
	}
 
 }
    2b54:	b009      	add	sp, #36	; 0x24
    2b56:	bd00      	pop	{pc}
    2b58:	2280      	movs	r2, #128	; 0x80
    2b5a:	0312      	lsls	r2, r2, #12
    2b5c:	4b06      	ldr	r3, [pc, #24]	; (2b78 <generateRandom+0x44>)
    2b5e:	615a      	str	r2, [r3, #20]
	 	usart_write_buffer_wait(&USART, (uint8_t *)"Some problem occurred!\n\r", 22);
    2b60:	2216      	movs	r2, #22
    2b62:	4906      	ldr	r1, [pc, #24]	; (2b7c <generateRandom+0x48>)
    2b64:	4806      	ldr	r0, [pc, #24]	; (2b80 <generateRandom+0x4c>)
    2b66:	4b07      	ldr	r3, [pc, #28]	; (2b84 <generateRandom+0x50>)
    2b68:	4798      	blx	r3
    2b6a:	e7f3      	b.n	2b54 <generateRandom+0x20>
    2b6c:	000057f9 	.word	0x000057f9
    2b70:	00001291 	.word	0x00001291
    2b74:	00002ce5 	.word	0x00002ce5
    2b78:	41004400 	.word	0x41004400
    2b7c:	00005a6c 	.word	0x00005a6c
    2b80:	200001fc 	.word	0x200001fc
    2b84:	00000add 	.word	0x00000add

00002b88 <getsAtshaSerialNumber>:
 #include <asf.h>
 #include "atsha204a.h"
 #include "cryptoauthlib.h"
 #include "usart_conf.h"

 void getsAtshaSerialNumber(void){
    2b88:	b500      	push	{lr}
    2b8a:	b085      	sub	sp, #20
	uint8_t sernum[9];
	ATCA_STATUS status;

	status = atcab_read_serial_number(sernum);
    2b8c:	a801      	add	r0, sp, #4
    2b8e:	4b0a      	ldr	r3, [pc, #40]	; (2bb8 <getsAtshaSerialNumber+0x30>)
    2b90:	4798      	blx	r3
	if(status != ATCA_SUCCESS){
    2b92:	2800      	cmp	r0, #0
    2b94:	d105      	bne.n	2ba2 <getsAtshaSerialNumber+0x1a>
		port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
		usart_write_buffer_wait(&USART, (uint8_t *)"Some problem occurred!\n\r", 22);
	}
	else{
		usartWriteHex(sernum, sizeof(sernum));
    2b96:	2109      	movs	r1, #9
    2b98:	a801      	add	r0, sp, #4
    2b9a:	4b08      	ldr	r3, [pc, #32]	; (2bbc <getsAtshaSerialNumber+0x34>)
    2b9c:	4798      	blx	r3
	}
 }
    2b9e:	b005      	add	sp, #20
    2ba0:	bd00      	pop	{pc}
    2ba2:	2280      	movs	r2, #128	; 0x80
    2ba4:	0312      	lsls	r2, r2, #12
    2ba6:	4b06      	ldr	r3, [pc, #24]	; (2bc0 <getsAtshaSerialNumber+0x38>)
    2ba8:	615a      	str	r2, [r3, #20]
		usart_write_buffer_wait(&USART, (uint8_t *)"Some problem occurred!\n\r", 22);
    2baa:	2216      	movs	r2, #22
    2bac:	4905      	ldr	r1, [pc, #20]	; (2bc4 <getsAtshaSerialNumber+0x3c>)
    2bae:	4806      	ldr	r0, [pc, #24]	; (2bc8 <getsAtshaSerialNumber+0x40>)
    2bb0:	4b06      	ldr	r3, [pc, #24]	; (2bcc <getsAtshaSerialNumber+0x44>)
    2bb2:	4798      	blx	r3
    2bb4:	e7f3      	b.n	2b9e <getsAtshaSerialNumber+0x16>
    2bb6:	46c0      	nop			; (mov r8, r8)
    2bb8:	000013ad 	.word	0x000013ad
    2bbc:	00002ce5 	.word	0x00002ce5
    2bc0:	41004400 	.word	0x41004400
    2bc4:	00005a6c 	.word	0x00005a6c
    2bc8:	200001fc 	.word	0x200001fc
    2bcc:	00000add 	.word	0x00000add

00002bd0 <hashMessage>:

  void hashMessage(const uint8_t * data,uint16_t length){
    2bd0:	b530      	push	{r4, r5, lr}
    2bd2:	b089      	sub	sp, #36	; 0x24
    2bd4:	0004      	movs	r4, r0
    2bd6:	000d      	movs	r5, r1
	  ATCA_STATUS status;
	  uint8_t hash[32] = {0x00};
    2bd8:	2220      	movs	r2, #32
    2bda:	2100      	movs	r1, #0
    2bdc:	4668      	mov	r0, sp
    2bde:	4b0c      	ldr	r3, [pc, #48]	; (2c10 <hashMessage+0x40>)
    2be0:	4798      	blx	r3
	  status = atcab_hw_sha2_256(data, length, hash);
    2be2:	466a      	mov	r2, sp
    2be4:	0029      	movs	r1, r5
    2be6:	0020      	movs	r0, r4
    2be8:	4b0a      	ldr	r3, [pc, #40]	; (2c14 <hashMessage+0x44>)
    2bea:	4798      	blx	r3

	  if(status != ATCA_SUCCESS){
    2bec:	2800      	cmp	r0, #0
    2bee:	d105      	bne.n	2bfc <hashMessage+0x2c>
		  port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
		  usart_write_buffer_wait(&USART, (uint8_t *)"Some problem occurred!\n\r", 22);
	  }
	  else{
		usartWriteHex(hash, sizeof(hash));
    2bf0:	2120      	movs	r1, #32
    2bf2:	4668      	mov	r0, sp
    2bf4:	4b08      	ldr	r3, [pc, #32]	; (2c18 <hashMessage+0x48>)
    2bf6:	4798      	blx	r3
	  }
  }
    2bf8:	b009      	add	sp, #36	; 0x24
    2bfa:	bd30      	pop	{r4, r5, pc}
    2bfc:	2280      	movs	r2, #128	; 0x80
    2bfe:	0312      	lsls	r2, r2, #12
    2c00:	4b06      	ldr	r3, [pc, #24]	; (2c1c <hashMessage+0x4c>)
    2c02:	615a      	str	r2, [r3, #20]
		  usart_write_buffer_wait(&USART, (uint8_t *)"Some problem occurred!\n\r", 22);
    2c04:	2216      	movs	r2, #22
    2c06:	4906      	ldr	r1, [pc, #24]	; (2c20 <hashMessage+0x50>)
    2c08:	4806      	ldr	r0, [pc, #24]	; (2c24 <hashMessage+0x54>)
    2c0a:	4b07      	ldr	r3, [pc, #28]	; (2c28 <hashMessage+0x58>)
    2c0c:	4798      	blx	r3
    2c0e:	e7f3      	b.n	2bf8 <hashMessage+0x28>
    2c10:	000057f9 	.word	0x000057f9
    2c14:	00001801 	.word	0x00001801
    2c18:	00002ce5 	.word	0x00002ce5
    2c1c:	41004400 	.word	0x41004400
    2c20:	00005a6c 	.word	0x00005a6c
    2c24:	200001fc 	.word	0x200001fc
    2c28:	00000add 	.word	0x00000add

00002c2c <configureUsart>:
 */ 
 #include <asf.h>
 #include "usart_conf.h"
 #include <string.h>

 void configureUsart(void){
    2c2c:	b530      	push	{r4, r5, lr}
    2c2e:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2c30:	2380      	movs	r3, #128	; 0x80
    2c32:	05db      	lsls	r3, r3, #23
    2c34:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2c36:	2300      	movs	r3, #0
    2c38:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    2c3a:	22ff      	movs	r2, #255	; 0xff
    2c3c:	4669      	mov	r1, sp
    2c3e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    2c40:	2200      	movs	r2, #0
    2c42:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2c44:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    2c46:	2101      	movs	r1, #1
    2c48:	2024      	movs	r0, #36	; 0x24
    2c4a:	466c      	mov	r4, sp
    2c4c:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    2c4e:	3001      	adds	r0, #1
    2c50:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    2c52:	3125      	adds	r1, #37	; 0x25
    2c54:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    2c56:	3101      	adds	r1, #1
    2c58:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    2c5a:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    2c5c:	3105      	adds	r1, #5
    2c5e:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    2c60:	3101      	adds	r1, #1
    2c62:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2c64:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2c66:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    2c68:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    2c6a:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    2c6c:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    2c6e:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    2c70:	2313      	movs	r3, #19
    2c72:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    2c74:	7762      	strb	r2, [r4, #29]
	 struct usart_config config_usart;
	 usart_get_config_defaults(&config_usart);
	 config_usart.baudrate    = 115200;
    2c76:	23e1      	movs	r3, #225	; 0xe1
    2c78:	025b      	lsls	r3, r3, #9
    2c7a:	9308      	str	r3, [sp, #32]
	 config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    2c7c:	2380      	movs	r3, #128	; 0x80
    2c7e:	035b      	lsls	r3, r3, #13
    2c80:	9303      	str	r3, [sp, #12]
	 config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    2c82:	4b0d      	ldr	r3, [pc, #52]	; (2cb8 <configureUsart+0x8c>)
    2c84:	930c      	str	r3, [sp, #48]	; 0x30
	 config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    2c86:	4b0d      	ldr	r3, [pc, #52]	; (2cbc <configureUsart+0x90>)
    2c88:	930d      	str	r3, [sp, #52]	; 0x34
	 config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    2c8a:	2301      	movs	r3, #1
    2c8c:	425b      	negs	r3, r3
    2c8e:	930e      	str	r3, [sp, #56]	; 0x38
	 config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    2c90:	930f      	str	r3, [sp, #60]	; 0x3c
	 while (usart_init(&USART,EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {    }
    2c92:	4d0b      	ldr	r5, [pc, #44]	; (2cc0 <configureUsart+0x94>)
    2c94:	4c0b      	ldr	r4, [pc, #44]	; (2cc4 <configureUsart+0x98>)
    2c96:	466a      	mov	r2, sp
    2c98:	490b      	ldr	r1, [pc, #44]	; (2cc8 <configureUsart+0x9c>)
    2c9a:	0028      	movs	r0, r5
    2c9c:	47a0      	blx	r4
    2c9e:	2800      	cmp	r0, #0
    2ca0:	d1f9      	bne.n	2c96 <configureUsart+0x6a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2ca2:	4b07      	ldr	r3, [pc, #28]	; (2cc0 <configureUsart+0x94>)
    2ca4:	681a      	ldr	r2, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    2ca6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2ca8:	2b00      	cmp	r3, #0
    2caa:	d1fc      	bne.n	2ca6 <configureUsart+0x7a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2cac:	6813      	ldr	r3, [r2, #0]
    2cae:	2102      	movs	r1, #2
    2cb0:	430b      	orrs	r3, r1
    2cb2:	6013      	str	r3, [r2, #0]
	 usart_enable(&USART);
 }
    2cb4:	b011      	add	sp, #68	; 0x44
    2cb6:	bd30      	pop	{r4, r5, pc}
    2cb8:	00040003 	.word	0x00040003
    2cbc:	00050003 	.word	0x00050003
    2cc0:	200001fc 	.word	0x200001fc
    2cc4:	0000074d 	.word	0x0000074d
    2cc8:	42000800 	.word	0x42000800

00002ccc <usartWriteBuffer>:


void usartWriteBuffer(const char *tx_data,uint16_t length){
    2ccc:	b510      	push	{r4, lr}
    2cce:	000a      	movs	r2, r1
	usart_write_buffer_wait(&USART, (uint8_t *)tx_data, length);
    2cd0:	0001      	movs	r1, r0
    2cd2:	4802      	ldr	r0, [pc, #8]	; (2cdc <usartWriteBuffer+0x10>)
    2cd4:	4b02      	ldr	r3, [pc, #8]	; (2ce0 <usartWriteBuffer+0x14>)
    2cd6:	4798      	blx	r3
}
    2cd8:	bd10      	pop	{r4, pc}
    2cda:	46c0      	nop			; (mov r8, r8)
    2cdc:	200001fc 	.word	0x200001fc
    2ce0:	00000add 	.word	0x00000add

00002ce4 <usartWriteHex>:

void usartWriteHex(const uint8_t *tx_data,uint16_t length){
    2ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ce6:	46ce      	mov	lr, r9
    2ce8:	4647      	mov	r7, r8
    2cea:	b580      	push	{r7, lr}
    2cec:	0006      	movs	r6, r0
    2cee:	1e0d      	subs	r5, r1, #0
	int numb_hex = 0;
	for(int i = 0; i < length; i++)
    2cf0:	dd34      	ble.n	2d5c <usartWriteHex+0x78>
    2cf2:	2400      	movs	r4, #0
    2cf4:	230f      	movs	r3, #15
    2cf6:	4698      	mov	r8, r3
		numb_hex = tx_data[i] /16 % 16;
		if(numb_hex < 10){
		usart_write_wait(&USART, numb_hex +'0');
		}
		else{
		usart_write_wait(&USART, numb_hex - 10 +'A');
    2cf8:	4b1a      	ldr	r3, [pc, #104]	; (2d64 <usartWriteHex+0x80>)
    2cfa:	4699      	mov	r9, r3
    2cfc:	e012      	b.n	2d24 <usartWriteHex+0x40>
    2cfe:	3137      	adds	r1, #55	; 0x37
    2d00:	4819      	ldr	r0, [pc, #100]	; (2d68 <usartWriteHex+0x84>)
    2d02:	47c8      	blx	r9
    2d04:	e019      	b.n	2d3a <usartWriteHex+0x56>
		numb_hex = tx_data[i] % 16;
		if(numb_hex < 10){
			usart_write_wait(&USART, numb_hex +'0');
		}
		else{
			usart_write_wait(&USART, numb_hex - 10 +'A');
    2d06:	3137      	adds	r1, #55	; 0x37
    2d08:	4817      	ldr	r0, [pc, #92]	; (2d68 <usartWriteHex+0x84>)
    2d0a:	4b16      	ldr	r3, [pc, #88]	; (2d64 <usartWriteHex+0x80>)
    2d0c:	4798      	blx	r3
    2d0e:	e01d      	b.n	2d4c <usartWriteHex+0x68>

		if(i < length - 1){
			usart_write_wait(&USART, ':');
		}
		else{
			usart_write_wait(&USART, '\n');
    2d10:	210a      	movs	r1, #10
    2d12:	4815      	ldr	r0, [pc, #84]	; (2d68 <usartWriteHex+0x84>)
    2d14:	4f13      	ldr	r7, [pc, #76]	; (2d64 <usartWriteHex+0x80>)
    2d16:	47b8      	blx	r7
			usart_write_wait(&USART, '\r');
    2d18:	210d      	movs	r1, #13
    2d1a:	4813      	ldr	r0, [pc, #76]	; (2d68 <usartWriteHex+0x84>)
    2d1c:	47b8      	blx	r7
	for(int i = 0; i < length; i++)
    2d1e:	3401      	adds	r4, #1
    2d20:	42ac      	cmp	r4, r5
    2d22:	da1b      	bge.n	2d5c <usartWriteHex+0x78>
    2d24:	0027      	movs	r7, r4
		numb_hex = tx_data[i] /16 % 16;
    2d26:	5d31      	ldrb	r1, [r6, r4]
    2d28:	0909      	lsrs	r1, r1, #4
    2d2a:	4643      	mov	r3, r8
    2d2c:	4019      	ands	r1, r3
		if(numb_hex < 10){
    2d2e:	2909      	cmp	r1, #9
    2d30:	dce5      	bgt.n	2cfe <usartWriteHex+0x1a>
		usart_write_wait(&USART, numb_hex +'0');
    2d32:	3130      	adds	r1, #48	; 0x30
    2d34:	480c      	ldr	r0, [pc, #48]	; (2d68 <usartWriteHex+0x84>)
    2d36:	4b0b      	ldr	r3, [pc, #44]	; (2d64 <usartWriteHex+0x80>)
    2d38:	4798      	blx	r3
    2d3a:	5df1      	ldrb	r1, [r6, r7]
    2d3c:	4643      	mov	r3, r8
    2d3e:	4019      	ands	r1, r3
		if(numb_hex < 10){
    2d40:	2909      	cmp	r1, #9
    2d42:	dce0      	bgt.n	2d06 <usartWriteHex+0x22>
			usart_write_wait(&USART, numb_hex +'0');
    2d44:	3130      	adds	r1, #48	; 0x30
    2d46:	4808      	ldr	r0, [pc, #32]	; (2d68 <usartWriteHex+0x84>)
    2d48:	4b06      	ldr	r3, [pc, #24]	; (2d64 <usartWriteHex+0x80>)
    2d4a:	4798      	blx	r3
		if(i < length - 1){
    2d4c:	1e6b      	subs	r3, r5, #1
    2d4e:	42a3      	cmp	r3, r4
    2d50:	ddde      	ble.n	2d10 <usartWriteHex+0x2c>
			usart_write_wait(&USART, ':');
    2d52:	213a      	movs	r1, #58	; 0x3a
    2d54:	4804      	ldr	r0, [pc, #16]	; (2d68 <usartWriteHex+0x84>)
    2d56:	4b03      	ldr	r3, [pc, #12]	; (2d64 <usartWriteHex+0x80>)
    2d58:	4798      	blx	r3
    2d5a:	e7e0      	b.n	2d1e <usartWriteHex+0x3a>
		}
	}
}
    2d5c:	bc0c      	pop	{r2, r3}
    2d5e:	4690      	mov	r8, r2
    2d60:	4699      	mov	r9, r3
    2d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d64:	00000a49 	.word	0x00000a49
    2d68:	200001fc 	.word	0x200001fc

00002d6c <usartReadNumb>:

void usartNewline(void){
	usart_write_buffer_wait(&USART, (uint8_t*) "\n\r", 2);
}

uint8_t usartReadNumb(){
    2d6c:	b570      	push	{r4, r5, r6, lr}
    2d6e:	b082      	sub	sp, #8
	uint16_t temp;
	bool loop = true;
	uint8_t numb;

	while(loop){
	if (usart_read_wait(&USART, &temp) == STATUS_OK) {
    2d70:	466b      	mov	r3, sp
    2d72:	1d9c      	adds	r4, r3, #6
    2d74:	4d07      	ldr	r5, [pc, #28]	; (2d94 <usartReadNumb+0x28>)
    2d76:	4e08      	ldr	r6, [pc, #32]	; (2d98 <usartReadNumb+0x2c>)
    2d78:	0021      	movs	r1, r4
    2d7a:	0028      	movs	r0, r5
    2d7c:	47b0      	blx	r6
    2d7e:	2800      	cmp	r0, #0
    2d80:	d1fa      	bne.n	2d78 <usartReadNumb+0xc>
			numb = temp;
    2d82:	7820      	ldrb	r0, [r4, #0]
			if(numb >= '1' && numb <= '9')	
    2d84:	0003      	movs	r3, r0
    2d86:	3b31      	subs	r3, #49	; 0x31
    2d88:	2b08      	cmp	r3, #8
    2d8a:	d8f5      	bhi.n	2d78 <usartReadNumb+0xc>
			{
				loop = false;
			}
		}
	}
	return numb - '0';
    2d8c:	3830      	subs	r0, #48	; 0x30
    2d8e:	b2c0      	uxtb	r0, r0
}
    2d90:	b002      	add	sp, #8
    2d92:	bd70      	pop	{r4, r5, r6, pc}
    2d94:	200001fc 	.word	0x200001fc
    2d98:	00000a73 	.word	0x00000a73

00002d9c <usartReadString>:

void usartReadString(char* string, uint16_t length){
    2d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d9e:	b083      	sub	sp, #12
    2da0:	0005      	movs	r5, r0
	for(uint8_t i = 0; i <length;i++){string[i] = 0;}
    2da2:	2900      	cmp	r1, #0
    2da4:	d007      	beq.n	2db6 <usartReadString+0x1a>
    2da6:	2300      	movs	r3, #0
    2da8:	2000      	movs	r0, #0
    2daa:	54e8      	strb	r0, [r5, r3]
    2dac:	3301      	adds	r3, #1
    2dae:	b2db      	uxtb	r3, r3
    2db0:	b29a      	uxth	r2, r3
    2db2:	428a      	cmp	r2, r1
    2db4:	d3f9      	bcc.n	2daa <usartReadString+0xe>
	//char string[32] = {0};
	char tempStr[2]={0,0};
    2db6:	ab01      	add	r3, sp, #4
    2db8:	2200      	movs	r2, #0
    2dba:	701a      	strb	r2, [r3, #0]
    2dbc:	705a      	strb	r2, [r3, #1]
	uint16_t temp;
	bool loop = true;
	uint8_t char_;

	while(loop){
		if (usart_read_wait(&USART, &temp) == STATUS_OK) {
    2dbe:	4e23      	ldr	r6, [pc, #140]	; (2e4c <usartReadString+0xb0>)
    2dc0:	4f23      	ldr	r7, [pc, #140]	; (2e50 <usartReadString+0xb4>)
    2dc2:	e009      	b.n	2dd8 <usartReadString+0x3c>
			char_ = temp;
			if(char_ >= 'A' && char_ <= 'Z' )
			{
				usart_write_wait(&USART, char_);
    2dc4:	23ff      	movs	r3, #255	; 0xff
    2dc6:	4019      	ands	r1, r3
    2dc8:	4820      	ldr	r0, [pc, #128]	; (2e4c <usartReadString+0xb0>)
    2dca:	4b22      	ldr	r3, [pc, #136]	; (2e54 <usartReadString+0xb8>)
    2dcc:	4798      	blx	r3
				tempStr[0] = char_;
    2dce:	a901      	add	r1, sp, #4
    2dd0:	700c      	strb	r4, [r1, #0]
				strcat(string, tempStr);
    2dd2:	0028      	movs	r0, r5
    2dd4:	4b20      	ldr	r3, [pc, #128]	; (2e58 <usartReadString+0xbc>)
    2dd6:	4798      	blx	r3
		if (usart_read_wait(&USART, &temp) == STATUS_OK) {
    2dd8:	466b      	mov	r3, sp
    2dda:	1c99      	adds	r1, r3, #2
    2ddc:	0030      	movs	r0, r6
    2dde:	47b8      	blx	r7
    2de0:	2800      	cmp	r0, #0
    2de2:	d1f9      	bne.n	2dd8 <usartReadString+0x3c>
			char_ = temp;
    2de4:	466b      	mov	r3, sp
    2de6:	8859      	ldrh	r1, [r3, #2]
    2de8:	b2cc      	uxtb	r4, r1
			if(char_ >= 'A' && char_ <= 'Z' )
    2dea:	0023      	movs	r3, r4
    2dec:	3b41      	subs	r3, #65	; 0x41
    2dee:	2b19      	cmp	r3, #25
    2df0:	d9e8      	bls.n	2dc4 <usartReadString+0x28>
			} else if(char_ >= 'a' && char_ <= 'z'){
    2df2:	0023      	movs	r3, r4
    2df4:	3b61      	subs	r3, #97	; 0x61
    2df6:	2b19      	cmp	r3, #25
    2df8:	d911      	bls.n	2e1e <usartReadString+0x82>
				usart_write_wait(&USART, char_);
				tempStr[0] = char_;
				strcat(string, tempStr);
			} else if(char_ >= '0' && char_ <= '9'){
    2dfa:	0023      	movs	r3, r4
    2dfc:	3b30      	subs	r3, #48	; 0x30
    2dfe:	2b09      	cmp	r3, #9
    2e00:	d918      	bls.n	2e34 <usartReadString+0x98>
				usart_write_wait(&USART, char_);
				tempStr[0] = char_;
				strcat(string, tempStr);
			} else if(char_ == '\n' || char_ == '\r'){
    2e02:	2c0a      	cmp	r4, #10
    2e04:	d001      	beq.n	2e0a <usartReadString+0x6e>
    2e06:	2c0d      	cmp	r4, #13
    2e08:	d1e6      	bne.n	2dd8 <usartReadString+0x3c>
				loop = false;
			}
		}
	}
	usart_write_wait(&USART, '\n');
    2e0a:	4d10      	ldr	r5, [pc, #64]	; (2e4c <usartReadString+0xb0>)
    2e0c:	210a      	movs	r1, #10
    2e0e:	0028      	movs	r0, r5
    2e10:	4c10      	ldr	r4, [pc, #64]	; (2e54 <usartReadString+0xb8>)
    2e12:	47a0      	blx	r4
	usart_write_wait(&USART, '\r');
    2e14:	210d      	movs	r1, #13
    2e16:	0028      	movs	r0, r5
    2e18:	47a0      	blx	r4
	//usartWriteBuffer(string, sizeof(string));
	//usart_write_wait(&USART, '\n');
	//usart_write_wait(&USART, '\r');
	return;
}
    2e1a:	b003      	add	sp, #12
    2e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				usart_write_wait(&USART, char_);
    2e1e:	23ff      	movs	r3, #255	; 0xff
    2e20:	4019      	ands	r1, r3
    2e22:	480a      	ldr	r0, [pc, #40]	; (2e4c <usartReadString+0xb0>)
    2e24:	4b0b      	ldr	r3, [pc, #44]	; (2e54 <usartReadString+0xb8>)
    2e26:	4798      	blx	r3
				tempStr[0] = char_;
    2e28:	a901      	add	r1, sp, #4
    2e2a:	700c      	strb	r4, [r1, #0]
				strcat(string, tempStr);
    2e2c:	0028      	movs	r0, r5
    2e2e:	4b0a      	ldr	r3, [pc, #40]	; (2e58 <usartReadString+0xbc>)
    2e30:	4798      	blx	r3
    2e32:	e7d1      	b.n	2dd8 <usartReadString+0x3c>
				usart_write_wait(&USART, char_);
    2e34:	23ff      	movs	r3, #255	; 0xff
    2e36:	4019      	ands	r1, r3
    2e38:	4804      	ldr	r0, [pc, #16]	; (2e4c <usartReadString+0xb0>)
    2e3a:	4b06      	ldr	r3, [pc, #24]	; (2e54 <usartReadString+0xb8>)
    2e3c:	4798      	blx	r3
				tempStr[0] = char_;
    2e3e:	a901      	add	r1, sp, #4
    2e40:	700c      	strb	r4, [r1, #0]
				strcat(string, tempStr);
    2e42:	0028      	movs	r0, r5
    2e44:	4b04      	ldr	r3, [pc, #16]	; (2e58 <usartReadString+0xbc>)
    2e46:	4798      	blx	r3
    2e48:	e7c6      	b.n	2dd8 <usartReadString+0x3c>
    2e4a:	46c0      	nop			; (mov r8, r8)
    2e4c:	200001fc 	.word	0x200001fc
    2e50:	00000a73 	.word	0x00000a73
    2e54:	00000a49 	.word	0x00000a49
    2e58:	0000597d 	.word	0x0000597d

00002e5c <usartClearWindow>:


void usartClearWindow(void){
    2e5c:	b570      	push	{r4, r5, r6, lr}
	usart_write_buffer_wait(&USART, (uint8_t *)"\033[2J", 4);
    2e5e:	4d05      	ldr	r5, [pc, #20]	; (2e74 <usartClearWindow+0x18>)
    2e60:	2204      	movs	r2, #4
    2e62:	4905      	ldr	r1, [pc, #20]	; (2e78 <usartClearWindow+0x1c>)
    2e64:	0028      	movs	r0, r5
    2e66:	4c05      	ldr	r4, [pc, #20]	; (2e7c <usartClearWindow+0x20>)
    2e68:	47a0      	blx	r4
	usart_write_buffer_wait(&USART, (uint8_t *)"\033[0;0H", 6);
    2e6a:	2206      	movs	r2, #6
    2e6c:	4904      	ldr	r1, [pc, #16]	; (2e80 <usartClearWindow+0x24>)
    2e6e:	0028      	movs	r0, r5
    2e70:	47a0      	blx	r4
}
    2e72:	bd70      	pop	{r4, r5, r6, pc}
    2e74:	200001fc 	.word	0x200001fc
    2e78:	00005b00 	.word	0x00005b00
    2e7c:	00000add 	.word	0x00000add
    2e80:	00005b08 	.word	0x00005b08

00002e84 <usartLoadingScreen>:

void usartLoadingScreen(int ms)
{
    2e84:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e86:	46de      	mov	lr, fp
    2e88:	4657      	mov	r7, sl
    2e8a:	464e      	mov	r6, r9
    2e8c:	4645      	mov	r5, r8
    2e8e:	b5e0      	push	{r5, r6, r7, lr}
    2e90:	b08d      	sub	sp, #52	; 0x34
    2e92:	0004      	movs	r4, r0
	char string[40] = {0};
    2e94:	ad02      	add	r5, sp, #8
    2e96:	2228      	movs	r2, #40	; 0x28
    2e98:	2100      	movs	r1, #0
    2e9a:	0028      	movs	r0, r5
    2e9c:	4b97      	ldr	r3, [pc, #604]	; (30fc <usartLoadingScreen+0x278>)
    2e9e:	4798      	blx	r3
	
	usartClearWindow();
    2ea0:	4b97      	ldr	r3, [pc, #604]	; (3100 <usartLoadingScreen+0x27c>)
    2ea2:	4798      	blx	r3
	strcpy(string, "Chip gets initialized. Please wait.   \n\r");
    2ea4:	4b97      	ldr	r3, [pc, #604]	; (3104 <usartLoadingScreen+0x280>)
    2ea6:	002a      	movs	r2, r5
    2ea8:	cb43      	ldmia	r3!, {r0, r1, r6}
    2eaa:	c243      	stmia	r2!, {r0, r1, r6}
    2eac:	cb43      	ldmia	r3!, {r0, r1, r6}
    2eae:	c243      	stmia	r2!, {r0, r1, r6}
    2eb0:	cb43      	ldmia	r3!, {r0, r1, r6}
    2eb2:	c243      	stmia	r2!, {r0, r1, r6}
    2eb4:	6819      	ldr	r1, [r3, #0]
    2eb6:	6011      	str	r1, [r2, #0]
    2eb8:	791b      	ldrb	r3, [r3, #4]
    2eba:	7113      	strb	r3, [r2, #4]
	usartWriteBuffer(string, sizeof(string));
    2ebc:	2128      	movs	r1, #40	; 0x28
    2ebe:	0028      	movs	r0, r5
    2ec0:	4e91      	ldr	r6, [pc, #580]	; (3108 <usartLoadingScreen+0x284>)
    2ec2:	47b0      	blx	r6
	strcpy(string, "[--------------------------------------]");
    2ec4:	4b91      	ldr	r3, [pc, #580]	; (310c <usartLoadingScreen+0x288>)
    2ec6:	002a      	movs	r2, r5
    2ec8:	cb83      	ldmia	r3!, {r0, r1, r7}
    2eca:	c283      	stmia	r2!, {r0, r1, r7}
    2ecc:	cb83      	ldmia	r3!, {r0, r1, r7}
    2ece:	c283      	stmia	r2!, {r0, r1, r7}
    2ed0:	cb83      	ldmia	r3!, {r0, r1, r7}
    2ed2:	c283      	stmia	r2!, {r0, r1, r7}
    2ed4:	6819      	ldr	r1, [r3, #0]
    2ed6:	6011      	str	r1, [r2, #0]
    2ed8:	791b      	ldrb	r3, [r3, #4]
    2eda:	7113      	strb	r3, [r2, #4]
	usartWriteBuffer(string, sizeof(string));
    2edc:	2128      	movs	r1, #40	; 0x28
    2ede:	0028      	movs	r0, r5
    2ee0:	47b0      	blx	r6
	delay_ms(ms / 5);
    2ee2:	1d23      	adds	r3, r4, #4
    2ee4:	2b08      	cmp	r3, #8
    2ee6:	d800      	bhi.n	2eea <usartLoadingScreen+0x66>
    2ee8:	e12a      	b.n	3140 <usartLoadingScreen+0x2bc>
    2eea:	2105      	movs	r1, #5
    2eec:	0020      	movs	r0, r4
    2eee:	4b88      	ldr	r3, [pc, #544]	; (3110 <usartLoadingScreen+0x28c>)
    2ef0:	4798      	blx	r3
    2ef2:	0004      	movs	r4, r0
    2ef4:	17c5      	asrs	r5, r0, #31
    2ef6:	2000      	movs	r0, #0
    2ef8:	4b86      	ldr	r3, [pc, #536]	; (3114 <usartLoadingScreen+0x290>)
    2efa:	469a      	mov	sl, r3
    2efc:	4798      	blx	r3
    2efe:	4b86      	ldr	r3, [pc, #536]	; (3118 <usartLoadingScreen+0x294>)
    2f00:	4699      	mov	r9, r3
    2f02:	9400      	str	r4, [sp, #0]
    2f04:	0022      	movs	r2, r4
    2f06:	9501      	str	r5, [sp, #4]
    2f08:	002b      	movs	r3, r5
    2f0a:	2100      	movs	r1, #0
    2f0c:	47c8      	blx	r9
    2f0e:	4b83      	ldr	r3, [pc, #524]	; (311c <usartLoadingScreen+0x298>)
    2f10:	2400      	movs	r4, #0
    2f12:	18c0      	adds	r0, r0, r3
    2f14:	4161      	adcs	r1, r4
    2f16:	4b82      	ldr	r3, [pc, #520]	; (3120 <usartLoadingScreen+0x29c>)
    2f18:	4698      	mov	r8, r3
    2f1a:	4a82      	ldr	r2, [pc, #520]	; (3124 <usartLoadingScreen+0x2a0>)
    2f1c:	2300      	movs	r3, #0
    2f1e:	47c0      	blx	r8
    2f20:	4b81      	ldr	r3, [pc, #516]	; (3128 <usartLoadingScreen+0x2a4>)
    2f22:	4798      	blx	r3

	usartClearWindow();
    2f24:	4b76      	ldr	r3, [pc, #472]	; (3100 <usartLoadingScreen+0x27c>)
    2f26:	469b      	mov	fp, r3
    2f28:	4798      	blx	r3
	strcpy(string, "Chip gets initialized. Please wait.   \n\r");
    2f2a:	ac02      	add	r4, sp, #8
    2f2c:	4d75      	ldr	r5, [pc, #468]	; (3104 <usartLoadingScreen+0x280>)
    2f2e:	0023      	movs	r3, r4
    2f30:	002a      	movs	r2, r5
    2f32:	ca43      	ldmia	r2!, {r0, r1, r6}
    2f34:	c343      	stmia	r3!, {r0, r1, r6}
    2f36:	ca43      	ldmia	r2!, {r0, r1, r6}
    2f38:	c343      	stmia	r3!, {r0, r1, r6}
    2f3a:	ca43      	ldmia	r2!, {r0, r1, r6}
    2f3c:	c343      	stmia	r3!, {r0, r1, r6}
    2f3e:	6811      	ldr	r1, [r2, #0]
    2f40:	6019      	str	r1, [r3, #0]
    2f42:	7912      	ldrb	r2, [r2, #4]
    2f44:	711a      	strb	r2, [r3, #4]
	usartWriteBuffer(string, sizeof(string));
    2f46:	2128      	movs	r1, #40	; 0x28
    2f48:	0020      	movs	r0, r4
    2f4a:	4e6f      	ldr	r6, [pc, #444]	; (3108 <usartLoadingScreen+0x284>)
    2f4c:	47b0      	blx	r6
	strcpy(string, "[#######-------------------------------]");
    2f4e:	4b77      	ldr	r3, [pc, #476]	; (312c <usartLoadingScreen+0x2a8>)
    2f50:	0022      	movs	r2, r4
    2f52:	cb83      	ldmia	r3!, {r0, r1, r7}
    2f54:	c283      	stmia	r2!, {r0, r1, r7}
    2f56:	cb83      	ldmia	r3!, {r0, r1, r7}
    2f58:	c283      	stmia	r2!, {r0, r1, r7}
    2f5a:	cb83      	ldmia	r3!, {r0, r1, r7}
    2f5c:	c283      	stmia	r2!, {r0, r1, r7}
    2f5e:	6819      	ldr	r1, [r3, #0]
    2f60:	6011      	str	r1, [r2, #0]
    2f62:	791b      	ldrb	r3, [r3, #4]
    2f64:	7113      	strb	r3, [r2, #4]
	usartWriteBuffer(string, sizeof(string));
    2f66:	2128      	movs	r1, #40	; 0x28
    2f68:	0020      	movs	r0, r4
    2f6a:	47b0      	blx	r6
	delay_ms(ms / 5);
    2f6c:	2000      	movs	r0, #0
    2f6e:	47d0      	blx	sl
    2f70:	9a00      	ldr	r2, [sp, #0]
    2f72:	9b01      	ldr	r3, [sp, #4]
    2f74:	2100      	movs	r1, #0
    2f76:	47c8      	blx	r9
    2f78:	4a68      	ldr	r2, [pc, #416]	; (311c <usartLoadingScreen+0x298>)
    2f7a:	2300      	movs	r3, #0
    2f7c:	1880      	adds	r0, r0, r2
    2f7e:	4159      	adcs	r1, r3
    2f80:	4a68      	ldr	r2, [pc, #416]	; (3124 <usartLoadingScreen+0x2a0>)
    2f82:	2300      	movs	r3, #0
    2f84:	47c0      	blx	r8
    2f86:	4b68      	ldr	r3, [pc, #416]	; (3128 <usartLoadingScreen+0x2a4>)
    2f88:	4798      	blx	r3

	usartClearWindow();
    2f8a:	47d8      	blx	fp
	strcpy(string, "Chip gets initialized. Please wait.   \n\r");
    2f8c:	0023      	movs	r3, r4
    2f8e:	002a      	movs	r2, r5
    2f90:	ca83      	ldmia	r2!, {r0, r1, r7}
    2f92:	c383      	stmia	r3!, {r0, r1, r7}
    2f94:	ca83      	ldmia	r2!, {r0, r1, r7}
    2f96:	c383      	stmia	r3!, {r0, r1, r7}
    2f98:	ca83      	ldmia	r2!, {r0, r1, r7}
    2f9a:	c383      	stmia	r3!, {r0, r1, r7}
    2f9c:	6811      	ldr	r1, [r2, #0]
    2f9e:	6019      	str	r1, [r3, #0]
    2fa0:	7912      	ldrb	r2, [r2, #4]
    2fa2:	711a      	strb	r2, [r3, #4]
	usartWriteBuffer(string, sizeof(string));
    2fa4:	2128      	movs	r1, #40	; 0x28
    2fa6:	0020      	movs	r0, r4
    2fa8:	47b0      	blx	r6
	strcpy(string, "[###############-----------------------]");
    2faa:	4b61      	ldr	r3, [pc, #388]	; (3130 <usartLoadingScreen+0x2ac>)
    2fac:	0022      	movs	r2, r4
    2fae:	cb83      	ldmia	r3!, {r0, r1, r7}
    2fb0:	c283      	stmia	r2!, {r0, r1, r7}
    2fb2:	cb83      	ldmia	r3!, {r0, r1, r7}
    2fb4:	c283      	stmia	r2!, {r0, r1, r7}
    2fb6:	cb83      	ldmia	r3!, {r0, r1, r7}
    2fb8:	c283      	stmia	r2!, {r0, r1, r7}
    2fba:	6819      	ldr	r1, [r3, #0]
    2fbc:	6011      	str	r1, [r2, #0]
    2fbe:	791b      	ldrb	r3, [r3, #4]
    2fc0:	7113      	strb	r3, [r2, #4]
	usartWriteBuffer(string, sizeof(string));
    2fc2:	2128      	movs	r1, #40	; 0x28
    2fc4:	0020      	movs	r0, r4
    2fc6:	47b0      	blx	r6
	delay_ms(ms / 5);
    2fc8:	2000      	movs	r0, #0
    2fca:	47d0      	blx	sl
    2fcc:	9a00      	ldr	r2, [sp, #0]
    2fce:	9b01      	ldr	r3, [sp, #4]
    2fd0:	2100      	movs	r1, #0
    2fd2:	47c8      	blx	r9
    2fd4:	4a51      	ldr	r2, [pc, #324]	; (311c <usartLoadingScreen+0x298>)
    2fd6:	2300      	movs	r3, #0
    2fd8:	1880      	adds	r0, r0, r2
    2fda:	4159      	adcs	r1, r3
    2fdc:	4a51      	ldr	r2, [pc, #324]	; (3124 <usartLoadingScreen+0x2a0>)
    2fde:	2300      	movs	r3, #0
    2fe0:	47c0      	blx	r8
    2fe2:	4b51      	ldr	r3, [pc, #324]	; (3128 <usartLoadingScreen+0x2a4>)
    2fe4:	4798      	blx	r3

	usartClearWindow();
    2fe6:	47d8      	blx	fp
	strcpy(string, "Chip gets initialized. Please wait.   \n\r");
    2fe8:	0023      	movs	r3, r4
    2fea:	002a      	movs	r2, r5
    2fec:	ca83      	ldmia	r2!, {r0, r1, r7}
    2fee:	c383      	stmia	r3!, {r0, r1, r7}
    2ff0:	ca83      	ldmia	r2!, {r0, r1, r7}
    2ff2:	c383      	stmia	r3!, {r0, r1, r7}
    2ff4:	ca83      	ldmia	r2!, {r0, r1, r7}
    2ff6:	c383      	stmia	r3!, {r0, r1, r7}
    2ff8:	6811      	ldr	r1, [r2, #0]
    2ffa:	6019      	str	r1, [r3, #0]
    2ffc:	7912      	ldrb	r2, [r2, #4]
    2ffe:	711a      	strb	r2, [r3, #4]
	usartWriteBuffer(string, sizeof(string));
    3000:	2128      	movs	r1, #40	; 0x28
    3002:	0020      	movs	r0, r4
    3004:	47b0      	blx	r6
	strcpy(string, "[#######################---------------]");
    3006:	4b4b      	ldr	r3, [pc, #300]	; (3134 <usartLoadingScreen+0x2b0>)
    3008:	0022      	movs	r2, r4
    300a:	cb83      	ldmia	r3!, {r0, r1, r7}
    300c:	c283      	stmia	r2!, {r0, r1, r7}
    300e:	cb83      	ldmia	r3!, {r0, r1, r7}
    3010:	c283      	stmia	r2!, {r0, r1, r7}
    3012:	cb83      	ldmia	r3!, {r0, r1, r7}
    3014:	c283      	stmia	r2!, {r0, r1, r7}
    3016:	6819      	ldr	r1, [r3, #0]
    3018:	6011      	str	r1, [r2, #0]
    301a:	791b      	ldrb	r3, [r3, #4]
    301c:	7113      	strb	r3, [r2, #4]
	usartWriteBuffer(string, sizeof(string));
    301e:	2128      	movs	r1, #40	; 0x28
    3020:	0020      	movs	r0, r4
    3022:	47b0      	blx	r6
	delay_ms(ms / 5);
    3024:	2000      	movs	r0, #0
    3026:	47d0      	blx	sl
    3028:	9a00      	ldr	r2, [sp, #0]
    302a:	9b01      	ldr	r3, [sp, #4]
    302c:	2100      	movs	r1, #0
    302e:	47c8      	blx	r9
    3030:	4a3a      	ldr	r2, [pc, #232]	; (311c <usartLoadingScreen+0x298>)
    3032:	2300      	movs	r3, #0
    3034:	1880      	adds	r0, r0, r2
    3036:	4159      	adcs	r1, r3
    3038:	4a3a      	ldr	r2, [pc, #232]	; (3124 <usartLoadingScreen+0x2a0>)
    303a:	2300      	movs	r3, #0
    303c:	47c0      	blx	r8
    303e:	4b3a      	ldr	r3, [pc, #232]	; (3128 <usartLoadingScreen+0x2a4>)
    3040:	4798      	blx	r3

	usartClearWindow();
    3042:	47d8      	blx	fp
	strcpy(string, "Chip gets initialized. Please wait.   \n\r");
    3044:	0023      	movs	r3, r4
    3046:	002a      	movs	r2, r5
    3048:	ca83      	ldmia	r2!, {r0, r1, r7}
    304a:	c383      	stmia	r3!, {r0, r1, r7}
    304c:	ca83      	ldmia	r2!, {r0, r1, r7}
    304e:	c383      	stmia	r3!, {r0, r1, r7}
    3050:	ca83      	ldmia	r2!, {r0, r1, r7}
    3052:	c383      	stmia	r3!, {r0, r1, r7}
    3054:	6811      	ldr	r1, [r2, #0]
    3056:	6019      	str	r1, [r3, #0]
    3058:	7912      	ldrb	r2, [r2, #4]
    305a:	711a      	strb	r2, [r3, #4]
	usartWriteBuffer(string, sizeof(string));
    305c:	2128      	movs	r1, #40	; 0x28
    305e:	0020      	movs	r0, r4
    3060:	47b0      	blx	r6
	strcpy(string, "[###############################-------]");
    3062:	4b35      	ldr	r3, [pc, #212]	; (3138 <usartLoadingScreen+0x2b4>)
    3064:	0022      	movs	r2, r4
    3066:	cb83      	ldmia	r3!, {r0, r1, r7}
    3068:	c283      	stmia	r2!, {r0, r1, r7}
    306a:	cb83      	ldmia	r3!, {r0, r1, r7}
    306c:	c283      	stmia	r2!, {r0, r1, r7}
    306e:	cb83      	ldmia	r3!, {r0, r1, r7}
    3070:	c283      	stmia	r2!, {r0, r1, r7}
    3072:	6819      	ldr	r1, [r3, #0]
    3074:	6011      	str	r1, [r2, #0]
    3076:	791b      	ldrb	r3, [r3, #4]
    3078:	7113      	strb	r3, [r2, #4]
	usartWriteBuffer(string, sizeof(string));
    307a:	2128      	movs	r1, #40	; 0x28
    307c:	0020      	movs	r0, r4
    307e:	47b0      	blx	r6
	delay_ms(ms / 5);
    3080:	2000      	movs	r0, #0
    3082:	47d0      	blx	sl
    3084:	9a00      	ldr	r2, [sp, #0]
    3086:	9b01      	ldr	r3, [sp, #4]
    3088:	2100      	movs	r1, #0
    308a:	47c8      	blx	r9
    308c:	4a23      	ldr	r2, [pc, #140]	; (311c <usartLoadingScreen+0x298>)
    308e:	2300      	movs	r3, #0
    3090:	1880      	adds	r0, r0, r2
    3092:	4159      	adcs	r1, r3
    3094:	4a23      	ldr	r2, [pc, #140]	; (3124 <usartLoadingScreen+0x2a0>)
    3096:	2300      	movs	r3, #0
    3098:	47c0      	blx	r8
    309a:	4923      	ldr	r1, [pc, #140]	; (3128 <usartLoadingScreen+0x2a4>)
    309c:	4788      	blx	r1

	usartClearWindow();
    309e:	47d8      	blx	fp
	strcpy(string, "Chip gets initialized. Please wait.   \n\r");
    30a0:	0023      	movs	r3, r4
    30a2:	cd83      	ldmia	r5!, {r0, r1, r7}
    30a4:	c383      	stmia	r3!, {r0, r1, r7}
    30a6:	cd83      	ldmia	r5!, {r0, r1, r7}
    30a8:	c383      	stmia	r3!, {r0, r1, r7}
    30aa:	cd83      	ldmia	r5!, {r0, r1, r7}
    30ac:	c383      	stmia	r3!, {r0, r1, r7}
    30ae:	6829      	ldr	r1, [r5, #0]
    30b0:	6019      	str	r1, [r3, #0]
    30b2:	792a      	ldrb	r2, [r5, #4]
    30b4:	711a      	strb	r2, [r3, #4]
	usartWriteBuffer(string, sizeof(string));
    30b6:	2128      	movs	r1, #40	; 0x28
    30b8:	0020      	movs	r0, r4
    30ba:	47b0      	blx	r6
	strcpy(string, "[######################################]");
    30bc:	4b1f      	ldr	r3, [pc, #124]	; (313c <usartLoadingScreen+0x2b8>)
    30be:	0022      	movs	r2, r4
    30c0:	cb83      	ldmia	r3!, {r0, r1, r7}
    30c2:	c283      	stmia	r2!, {r0, r1, r7}
    30c4:	cb83      	ldmia	r3!, {r0, r1, r7}
    30c6:	c283      	stmia	r2!, {r0, r1, r7}
    30c8:	cb83      	ldmia	r3!, {r0, r1, r7}
    30ca:	c283      	stmia	r2!, {r0, r1, r7}
    30cc:	6819      	ldr	r1, [r3, #0]
    30ce:	6011      	str	r1, [r2, #0]
    30d0:	791b      	ldrb	r3, [r3, #4]
    30d2:	7113      	strb	r3, [r2, #4]
	usartWriteBuffer(string, sizeof(string));
    30d4:	2128      	movs	r1, #40	; 0x28
    30d6:	0020      	movs	r0, r4
    30d8:	47b0      	blx	r6
	delay_ms(ms / 5);
    30da:	2000      	movs	r0, #0
    30dc:	47d0      	blx	sl
    30de:	9a00      	ldr	r2, [sp, #0]
    30e0:	9b01      	ldr	r3, [sp, #4]
    30e2:	2100      	movs	r1, #0
    30e4:	47c8      	blx	r9
    30e6:	4b0d      	ldr	r3, [pc, #52]	; (311c <usartLoadingScreen+0x298>)
    30e8:	2400      	movs	r4, #0
    30ea:	18c0      	adds	r0, r0, r3
    30ec:	4161      	adcs	r1, r4
    30ee:	4a0d      	ldr	r2, [pc, #52]	; (3124 <usartLoadingScreen+0x2a0>)
    30f0:	2300      	movs	r3, #0
    30f2:	47c0      	blx	r8
    30f4:	4b0c      	ldr	r3, [pc, #48]	; (3128 <usartLoadingScreen+0x2a4>)
    30f6:	4798      	blx	r3
    30f8:	e110      	b.n	331c <usartLoadingScreen+0x498>
    30fa:	46c0      	nop			; (mov r8, r8)
    30fc:	000057f9 	.word	0x000057f9
    3100:	00002e5d 	.word	0x00002e5d
    3104:	00005b10 	.word	0x00005b10
    3108:	00002ccd 	.word	0x00002ccd
    310c:	00005b3c 	.word	0x00005b3c
    3110:	00003a8d 	.word	0x00003a8d
    3114:	00002641 	.word	0x00002641
    3118:	00003ca5 	.word	0x00003ca5
    311c:	00001b57 	.word	0x00001b57
    3120:	00003c65 	.word	0x00003c65
    3124:	00001b58 	.word	0x00001b58
    3128:	20000001 	.word	0x20000001
    312c:	00005b68 	.word	0x00005b68
    3130:	00005b94 	.word	0x00005b94
    3134:	00005bc0 	.word	0x00005bc0
    3138:	00005bec 	.word	0x00005bec
    313c:	00005c18 	.word	0x00005c18
	delay_ms(ms / 5);
    3140:	2000      	movs	r0, #0
    3142:	4b7a      	ldr	r3, [pc, #488]	; (332c <usartLoadingScreen+0x4a8>)
    3144:	4699      	mov	r9, r3
    3146:	4798      	blx	r3
    3148:	0002      	movs	r2, r0
    314a:	2300      	movs	r3, #0
    314c:	4878      	ldr	r0, [pc, #480]	; (3330 <usartLoadingScreen+0x4ac>)
    314e:	2100      	movs	r1, #0
    3150:	1880      	adds	r0, r0, r2
    3152:	4159      	adcs	r1, r3
    3154:	4b77      	ldr	r3, [pc, #476]	; (3334 <usartLoadingScreen+0x4b0>)
    3156:	4698      	mov	r8, r3
    3158:	4a77      	ldr	r2, [pc, #476]	; (3338 <usartLoadingScreen+0x4b4>)
    315a:	2300      	movs	r3, #0
    315c:	47c0      	blx	r8
    315e:	4f77      	ldr	r7, [pc, #476]	; (333c <usartLoadingScreen+0x4b8>)
    3160:	47b8      	blx	r7
	usartClearWindow();
    3162:	4b77      	ldr	r3, [pc, #476]	; (3340 <usartLoadingScreen+0x4bc>)
    3164:	469a      	mov	sl, r3
    3166:	4798      	blx	r3
	strcpy(string, "Chip gets initialized. Please wait.   \n\r");
    3168:	ac02      	add	r4, sp, #8
    316a:	4b76      	ldr	r3, [pc, #472]	; (3344 <usartLoadingScreen+0x4c0>)
    316c:	469b      	mov	fp, r3
    316e:	0023      	movs	r3, r4
    3170:	465a      	mov	r2, fp
    3172:	ca43      	ldmia	r2!, {r0, r1, r6}
    3174:	c343      	stmia	r3!, {r0, r1, r6}
    3176:	ca43      	ldmia	r2!, {r0, r1, r6}
    3178:	c343      	stmia	r3!, {r0, r1, r6}
    317a:	ca43      	ldmia	r2!, {r0, r1, r6}
    317c:	c343      	stmia	r3!, {r0, r1, r6}
    317e:	6811      	ldr	r1, [r2, #0]
    3180:	6019      	str	r1, [r3, #0]
    3182:	7912      	ldrb	r2, [r2, #4]
    3184:	711a      	strb	r2, [r3, #4]
	usartWriteBuffer(string, sizeof(string));
    3186:	2128      	movs	r1, #40	; 0x28
    3188:	0020      	movs	r0, r4
    318a:	4e6f      	ldr	r6, [pc, #444]	; (3348 <usartLoadingScreen+0x4c4>)
    318c:	47b0      	blx	r6
	strcpy(string, "[#######-------------------------------]");
    318e:	4b6f      	ldr	r3, [pc, #444]	; (334c <usartLoadingScreen+0x4c8>)
    3190:	0022      	movs	r2, r4
    3192:	cb23      	ldmia	r3!, {r0, r1, r5}
    3194:	c223      	stmia	r2!, {r0, r1, r5}
    3196:	cb23      	ldmia	r3!, {r0, r1, r5}
    3198:	c223      	stmia	r2!, {r0, r1, r5}
    319a:	cb23      	ldmia	r3!, {r0, r1, r5}
    319c:	c223      	stmia	r2!, {r0, r1, r5}
    319e:	6819      	ldr	r1, [r3, #0]
    31a0:	6011      	str	r1, [r2, #0]
    31a2:	791b      	ldrb	r3, [r3, #4]
    31a4:	7113      	strb	r3, [r2, #4]
	usartWriteBuffer(string, sizeof(string));
    31a6:	2128      	movs	r1, #40	; 0x28
    31a8:	0020      	movs	r0, r4
    31aa:	47b0      	blx	r6
	delay_ms(ms / 5);
    31ac:	2000      	movs	r0, #0
    31ae:	47c8      	blx	r9
    31b0:	0002      	movs	r2, r0
    31b2:	2300      	movs	r3, #0
    31b4:	485e      	ldr	r0, [pc, #376]	; (3330 <usartLoadingScreen+0x4ac>)
    31b6:	2100      	movs	r1, #0
    31b8:	1880      	adds	r0, r0, r2
    31ba:	4159      	adcs	r1, r3
    31bc:	4a5e      	ldr	r2, [pc, #376]	; (3338 <usartLoadingScreen+0x4b4>)
    31be:	2300      	movs	r3, #0
    31c0:	47c0      	blx	r8
    31c2:	47b8      	blx	r7
	usartClearWindow();
    31c4:	47d0      	blx	sl
	strcpy(string, "Chip gets initialized. Please wait.   \n\r");
    31c6:	0023      	movs	r3, r4
    31c8:	465a      	mov	r2, fp
    31ca:	ca23      	ldmia	r2!, {r0, r1, r5}
    31cc:	c323      	stmia	r3!, {r0, r1, r5}
    31ce:	ca23      	ldmia	r2!, {r0, r1, r5}
    31d0:	c323      	stmia	r3!, {r0, r1, r5}
    31d2:	ca23      	ldmia	r2!, {r0, r1, r5}
    31d4:	c323      	stmia	r3!, {r0, r1, r5}
    31d6:	6811      	ldr	r1, [r2, #0]
    31d8:	6019      	str	r1, [r3, #0]
    31da:	7912      	ldrb	r2, [r2, #4]
    31dc:	711a      	strb	r2, [r3, #4]
	usartWriteBuffer(string, sizeof(string));
    31de:	2128      	movs	r1, #40	; 0x28
    31e0:	0020      	movs	r0, r4
    31e2:	47b0      	blx	r6
	strcpy(string, "[###############-----------------------]");
    31e4:	4b5a      	ldr	r3, [pc, #360]	; (3350 <usartLoadingScreen+0x4cc>)
    31e6:	0022      	movs	r2, r4
    31e8:	cb23      	ldmia	r3!, {r0, r1, r5}
    31ea:	c223      	stmia	r2!, {r0, r1, r5}
    31ec:	cb23      	ldmia	r3!, {r0, r1, r5}
    31ee:	c223      	stmia	r2!, {r0, r1, r5}
    31f0:	cb23      	ldmia	r3!, {r0, r1, r5}
    31f2:	c223      	stmia	r2!, {r0, r1, r5}
    31f4:	6819      	ldr	r1, [r3, #0]
    31f6:	6011      	str	r1, [r2, #0]
    31f8:	791b      	ldrb	r3, [r3, #4]
    31fa:	7113      	strb	r3, [r2, #4]
	usartWriteBuffer(string, sizeof(string));
    31fc:	2128      	movs	r1, #40	; 0x28
    31fe:	0020      	movs	r0, r4
    3200:	47b0      	blx	r6
	delay_ms(ms / 5);
    3202:	2000      	movs	r0, #0
    3204:	47c8      	blx	r9
    3206:	0002      	movs	r2, r0
    3208:	2300      	movs	r3, #0
    320a:	4849      	ldr	r0, [pc, #292]	; (3330 <usartLoadingScreen+0x4ac>)
    320c:	2100      	movs	r1, #0
    320e:	1880      	adds	r0, r0, r2
    3210:	4159      	adcs	r1, r3
    3212:	4a49      	ldr	r2, [pc, #292]	; (3338 <usartLoadingScreen+0x4b4>)
    3214:	2300      	movs	r3, #0
    3216:	47c0      	blx	r8
    3218:	47b8      	blx	r7
	usartClearWindow();
    321a:	47d0      	blx	sl
	strcpy(string, "Chip gets initialized. Please wait.   \n\r");
    321c:	0023      	movs	r3, r4
    321e:	465a      	mov	r2, fp
    3220:	ca23      	ldmia	r2!, {r0, r1, r5}
    3222:	c323      	stmia	r3!, {r0, r1, r5}
    3224:	ca23      	ldmia	r2!, {r0, r1, r5}
    3226:	c323      	stmia	r3!, {r0, r1, r5}
    3228:	ca23      	ldmia	r2!, {r0, r1, r5}
    322a:	c323      	stmia	r3!, {r0, r1, r5}
    322c:	6811      	ldr	r1, [r2, #0]
    322e:	6019      	str	r1, [r3, #0]
    3230:	7912      	ldrb	r2, [r2, #4]
    3232:	711a      	strb	r2, [r3, #4]
	usartWriteBuffer(string, sizeof(string));
    3234:	2128      	movs	r1, #40	; 0x28
    3236:	0020      	movs	r0, r4
    3238:	47b0      	blx	r6
	strcpy(string, "[#######################---------------]");
    323a:	4b46      	ldr	r3, [pc, #280]	; (3354 <usartLoadingScreen+0x4d0>)
    323c:	0022      	movs	r2, r4
    323e:	cb23      	ldmia	r3!, {r0, r1, r5}
    3240:	c223      	stmia	r2!, {r0, r1, r5}
    3242:	cb23      	ldmia	r3!, {r0, r1, r5}
    3244:	c223      	stmia	r2!, {r0, r1, r5}
    3246:	cb23      	ldmia	r3!, {r0, r1, r5}
    3248:	c223      	stmia	r2!, {r0, r1, r5}
    324a:	6819      	ldr	r1, [r3, #0]
    324c:	6011      	str	r1, [r2, #0]
    324e:	791b      	ldrb	r3, [r3, #4]
    3250:	7113      	strb	r3, [r2, #4]
	usartWriteBuffer(string, sizeof(string));
    3252:	2128      	movs	r1, #40	; 0x28
    3254:	0020      	movs	r0, r4
    3256:	47b0      	blx	r6
	delay_ms(ms / 5);
    3258:	2000      	movs	r0, #0
    325a:	47c8      	blx	r9
    325c:	0002      	movs	r2, r0
    325e:	2300      	movs	r3, #0
    3260:	4833      	ldr	r0, [pc, #204]	; (3330 <usartLoadingScreen+0x4ac>)
    3262:	2100      	movs	r1, #0
    3264:	1880      	adds	r0, r0, r2
    3266:	4159      	adcs	r1, r3
    3268:	4a33      	ldr	r2, [pc, #204]	; (3338 <usartLoadingScreen+0x4b4>)
    326a:	2300      	movs	r3, #0
    326c:	47c0      	blx	r8
    326e:	47b8      	blx	r7
	usartClearWindow();
    3270:	47d0      	blx	sl
	strcpy(string, "Chip gets initialized. Please wait.   \n\r");
    3272:	0023      	movs	r3, r4
    3274:	465a      	mov	r2, fp
    3276:	ca23      	ldmia	r2!, {r0, r1, r5}
    3278:	c323      	stmia	r3!, {r0, r1, r5}
    327a:	ca23      	ldmia	r2!, {r0, r1, r5}
    327c:	c323      	stmia	r3!, {r0, r1, r5}
    327e:	ca23      	ldmia	r2!, {r0, r1, r5}
    3280:	c323      	stmia	r3!, {r0, r1, r5}
    3282:	6811      	ldr	r1, [r2, #0]
    3284:	6019      	str	r1, [r3, #0]
    3286:	7912      	ldrb	r2, [r2, #4]
    3288:	711a      	strb	r2, [r3, #4]
	usartWriteBuffer(string, sizeof(string));
    328a:	2128      	movs	r1, #40	; 0x28
    328c:	0020      	movs	r0, r4
    328e:	47b0      	blx	r6
	strcpy(string, "[###############################-------]");
    3290:	4b31      	ldr	r3, [pc, #196]	; (3358 <usartLoadingScreen+0x4d4>)
    3292:	0022      	movs	r2, r4
    3294:	cb23      	ldmia	r3!, {r0, r1, r5}
    3296:	c223      	stmia	r2!, {r0, r1, r5}
    3298:	cb23      	ldmia	r3!, {r0, r1, r5}
    329a:	c223      	stmia	r2!, {r0, r1, r5}
    329c:	cb23      	ldmia	r3!, {r0, r1, r5}
    329e:	c223      	stmia	r2!, {r0, r1, r5}
    32a0:	6819      	ldr	r1, [r3, #0]
    32a2:	6011      	str	r1, [r2, #0]
    32a4:	791b      	ldrb	r3, [r3, #4]
    32a6:	7113      	strb	r3, [r2, #4]
	usartWriteBuffer(string, sizeof(string));
    32a8:	2128      	movs	r1, #40	; 0x28
    32aa:	0020      	movs	r0, r4
    32ac:	47b0      	blx	r6
	delay_ms(ms / 5);
    32ae:	2000      	movs	r0, #0
    32b0:	47c8      	blx	r9
    32b2:	0002      	movs	r2, r0
    32b4:	2300      	movs	r3, #0
    32b6:	481e      	ldr	r0, [pc, #120]	; (3330 <usartLoadingScreen+0x4ac>)
    32b8:	2100      	movs	r1, #0
    32ba:	1880      	adds	r0, r0, r2
    32bc:	4159      	adcs	r1, r3
    32be:	4a1e      	ldr	r2, [pc, #120]	; (3338 <usartLoadingScreen+0x4b4>)
    32c0:	2300      	movs	r3, #0
    32c2:	47c0      	blx	r8
    32c4:	47b8      	blx	r7
	usartClearWindow();
    32c6:	47d0      	blx	sl
	strcpy(string, "Chip gets initialized. Please wait.   \n\r");
    32c8:	0023      	movs	r3, r4
    32ca:	465d      	mov	r5, fp
    32cc:	cd07      	ldmia	r5!, {r0, r1, r2}
    32ce:	c307      	stmia	r3!, {r0, r1, r2}
    32d0:	cd07      	ldmia	r5!, {r0, r1, r2}
    32d2:	c307      	stmia	r3!, {r0, r1, r2}
    32d4:	cd07      	ldmia	r5!, {r0, r1, r2}
    32d6:	c307      	stmia	r3!, {r0, r1, r2}
    32d8:	682a      	ldr	r2, [r5, #0]
    32da:	601a      	str	r2, [r3, #0]
    32dc:	792a      	ldrb	r2, [r5, #4]
    32de:	711a      	strb	r2, [r3, #4]
	usartWriteBuffer(string, sizeof(string));
    32e0:	2128      	movs	r1, #40	; 0x28
    32e2:	0020      	movs	r0, r4
    32e4:	47b0      	blx	r6
	strcpy(string, "[######################################]");
    32e6:	4b1d      	ldr	r3, [pc, #116]	; (335c <usartLoadingScreen+0x4d8>)
    32e8:	0022      	movs	r2, r4
    32ea:	cb23      	ldmia	r3!, {r0, r1, r5}
    32ec:	c223      	stmia	r2!, {r0, r1, r5}
    32ee:	cb23      	ldmia	r3!, {r0, r1, r5}
    32f0:	c223      	stmia	r2!, {r0, r1, r5}
    32f2:	cb23      	ldmia	r3!, {r0, r1, r5}
    32f4:	c223      	stmia	r2!, {r0, r1, r5}
    32f6:	6819      	ldr	r1, [r3, #0]
    32f8:	6011      	str	r1, [r2, #0]
    32fa:	791b      	ldrb	r3, [r3, #4]
    32fc:	7113      	strb	r3, [r2, #4]
	usartWriteBuffer(string, sizeof(string));
    32fe:	2128      	movs	r1, #40	; 0x28
    3300:	0020      	movs	r0, r4
    3302:	47b0      	blx	r6
	delay_ms(ms / 5);
    3304:	2000      	movs	r0, #0
    3306:	47c8      	blx	r9
    3308:	0002      	movs	r2, r0
    330a:	2300      	movs	r3, #0
    330c:	4808      	ldr	r0, [pc, #32]	; (3330 <usartLoadingScreen+0x4ac>)
    330e:	2100      	movs	r1, #0
    3310:	1880      	adds	r0, r0, r2
    3312:	4159      	adcs	r1, r3
    3314:	4a08      	ldr	r2, [pc, #32]	; (3338 <usartLoadingScreen+0x4b4>)
    3316:	2300      	movs	r3, #0
    3318:	47c0      	blx	r8
    331a:	47b8      	blx	r7
}
    331c:	b00d      	add	sp, #52	; 0x34
    331e:	bc3c      	pop	{r2, r3, r4, r5}
    3320:	4690      	mov	r8, r2
    3322:	4699      	mov	r9, r3
    3324:	46a2      	mov	sl, r4
    3326:	46ab      	mov	fp, r5
    3328:	bdf0      	pop	{r4, r5, r6, r7, pc}
    332a:	46c0      	nop			; (mov r8, r8)
    332c:	00002641 	.word	0x00002641
    3330:	006acfbf 	.word	0x006acfbf
    3334:	00003c65 	.word	0x00003c65
    3338:	006acfc0 	.word	0x006acfc0
    333c:	20000001 	.word	0x20000001
    3340:	00002e5d 	.word	0x00002e5d
    3344:	00005b10 	.word	0x00005b10
    3348:	00002ccd 	.word	0x00002ccd
    334c:	00005b68 	.word	0x00005b68
    3350:	00005b94 	.word	0x00005b94
    3354:	00005bc0 	.word	0x00005bc0
    3358:	00005bec 	.word	0x00005bec
    335c:	00005c18 	.word	0x00005c18

00003360 <length>:


uint16_t length(char* string){
    3360:	0002      	movs	r2, r0
	uint8_t i = 0;

	while(string[i] != 0){
    3362:	7803      	ldrb	r3, [r0, #0]
    3364:	2b00      	cmp	r3, #0
    3366:	d006      	beq.n	3376 <length+0x16>
    3368:	2000      	movs	r0, #0
		i++;
    336a:	3001      	adds	r0, #1
    336c:	b2c0      	uxtb	r0, r0
	while(string[i] != 0){
    336e:	5c13      	ldrb	r3, [r2, r0]
    3370:	2b00      	cmp	r3, #0
    3372:	d1fa      	bne.n	336a <length+0xa>
	}
	return i;
}
    3374:	4770      	bx	lr
	uint8_t i = 0;
    3376:	2000      	movs	r0, #0
    3378:	e7fc      	b.n	3374 <length+0x14>
	...

0000337c <atsha204a_menu>:
	/*else if (input == 3){
		ataes132a_menu();
	}*/
}

void atsha204a_menu (void){
    337c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    337e:	46ce      	mov	lr, r9
    3380:	4647      	mov	r7, r8
    3382:	b580      	push	{r7, lr}
	bool changeMenu = false;
	//Starting i2c connection
	status = atcab_init(&cfg_atsha204a_i2c_default);
    3384:	4870      	ldr	r0, [pc, #448]	; (3548 <atsha204a_menu+0x1cc>)
    3386:	4b71      	ldr	r3, [pc, #452]	; (354c <atsha204a_menu+0x1d0>)
    3388:	4798      	blx	r3
    338a:	4b71      	ldr	r3, [pc, #452]	; (3550 <atsha204a_menu+0x1d4>)
    338c:	7018      	strb	r0, [r3, #0]
	if(status != ATCA_SUCCESS){
    338e:	2800      	cmp	r0, #0
    3390:	d110      	bne.n	33b4 <atsha204a_menu+0x38>
		port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
		usart_write_buffer_wait(&USART, (uint8_t *)"Some problem occurred!\n\r", 22);
	}

	//Wake up i2c slave
	status = atcab_wakeup();
    3392:	4b70      	ldr	r3, [pc, #448]	; (3554 <atsha204a_menu+0x1d8>)
    3394:	4798      	blx	r3
    3396:	4b6e      	ldr	r3, [pc, #440]	; (3550 <atsha204a_menu+0x1d4>)
    3398:	7018      	strb	r0, [r3, #0]
	if(status != ATCA_SUCCESS){
    339a:	2800      	cmp	r0, #0
    339c:	d114      	bne.n	33c8 <atsha204a_menu+0x4c>
		port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
		usart_write_buffer_wait(&USART, (uint8_t *)"Some problem occurred!\n\r", 22);
	}
	usartLoadingScreen(3000);
    339e:	486e      	ldr	r0, [pc, #440]	; (3558 <atsha204a_menu+0x1dc>)
    33a0:	4b6e      	ldr	r3, [pc, #440]	; (355c <atsha204a_menu+0x1e0>)
    33a2:	4798      	blx	r3
	input = 0;
    33a4:	2200      	movs	r2, #0
    33a6:	4b6e      	ldr	r3, [pc, #440]	; (3560 <atsha204a_menu+0x1e4>)
    33a8:	701a      	strb	r2, [r3, #0]
	
	while(!changeMenu){
		usartClearWindow();
    33aa:	4f6e      	ldr	r7, [pc, #440]	; (3564 <atsha204a_menu+0x1e8>)
		strcpy(string, "ATSHA204A Menu                        \n\r");
    33ac:	4c6e      	ldr	r4, [pc, #440]	; (3568 <atsha204a_menu+0x1ec>)
    33ae:	4b6f      	ldr	r3, [pc, #444]	; (356c <atsha204a_menu+0x1f0>)
    33b0:	4699      	mov	r9, r3
    33b2:	e037      	b.n	3424 <atsha204a_menu+0xa8>
    33b4:	2280      	movs	r2, #128	; 0x80
    33b6:	0312      	lsls	r2, r2, #12
    33b8:	4b6d      	ldr	r3, [pc, #436]	; (3570 <atsha204a_menu+0x1f4>)
    33ba:	615a      	str	r2, [r3, #20]
		usart_write_buffer_wait(&USART, (uint8_t *)"Some problem occurred!\n\r", 22);
    33bc:	2216      	movs	r2, #22
    33be:	496d      	ldr	r1, [pc, #436]	; (3574 <atsha204a_menu+0x1f8>)
    33c0:	486d      	ldr	r0, [pc, #436]	; (3578 <atsha204a_menu+0x1fc>)
    33c2:	4b6e      	ldr	r3, [pc, #440]	; (357c <atsha204a_menu+0x200>)
    33c4:	4798      	blx	r3
    33c6:	e7e4      	b.n	3392 <atsha204a_menu+0x16>
    33c8:	2280      	movs	r2, #128	; 0x80
    33ca:	0312      	lsls	r2, r2, #12
    33cc:	4b68      	ldr	r3, [pc, #416]	; (3570 <atsha204a_menu+0x1f4>)
    33ce:	615a      	str	r2, [r3, #20]
		usart_write_buffer_wait(&USART, (uint8_t *)"Some problem occurred!\n\r", 22);
    33d0:	2216      	movs	r2, #22
    33d2:	4968      	ldr	r1, [pc, #416]	; (3574 <atsha204a_menu+0x1f8>)
    33d4:	4868      	ldr	r0, [pc, #416]	; (3578 <atsha204a_menu+0x1fc>)
    33d6:	4b69      	ldr	r3, [pc, #420]	; (357c <atsha204a_menu+0x200>)
    33d8:	4798      	blx	r3
    33da:	e7e0      	b.n	339e <atsha204a_menu+0x22>
		switch(input){
			case 0:
				break;
			
			case 1:	
				usart_write_buffer_wait(&USART, (uint8_t *)"\033[5B", 6);
    33dc:	2206      	movs	r2, #6
    33de:	4968      	ldr	r1, [pc, #416]	; (3580 <atsha204a_menu+0x204>)
    33e0:	4865      	ldr	r0, [pc, #404]	; (3578 <atsha204a_menu+0x1fc>)
    33e2:	4b66      	ldr	r3, [pc, #408]	; (357c <atsha204a_menu+0x200>)
    33e4:	4798      	blx	r3
				strcpy(string, "Serial number:                        \n\r");
    33e6:	4860      	ldr	r0, [pc, #384]	; (3568 <atsha204a_menu+0x1ec>)
    33e8:	4b66      	ldr	r3, [pc, #408]	; (3584 <atsha204a_menu+0x208>)
    33ea:	0002      	movs	r2, r0
    33ec:	cb62      	ldmia	r3!, {r1, r5, r6}
    33ee:	c262      	stmia	r2!, {r1, r5, r6}
    33f0:	cb62      	ldmia	r3!, {r1, r5, r6}
    33f2:	c262      	stmia	r2!, {r1, r5, r6}
    33f4:	cb62      	ldmia	r3!, {r1, r5, r6}
    33f6:	c262      	stmia	r2!, {r1, r5, r6}
    33f8:	6819      	ldr	r1, [r3, #0]
    33fa:	6011      	str	r1, [r2, #0]
    33fc:	791b      	ldrb	r3, [r3, #4]
    33fe:	7113      	strb	r3, [r2, #4]
				usartWriteBuffer(string, sizeof(string));
    3400:	2128      	movs	r1, #40	; 0x28
    3402:	4b61      	ldr	r3, [pc, #388]	; (3588 <atsha204a_menu+0x20c>)
    3404:	4798      	blx	r3
				getsAtshaSerialNumber();
    3406:	4b61      	ldr	r3, [pc, #388]	; (358c <atsha204a_menu+0x210>)
    3408:	4798      	blx	r3
			default:
				strcpy(string, "Please enter a number between 1 and x \n\r");
				usartWriteBuffer(string, sizeof(string));
				break;
		}
		if(input != 3){
    340a:	4b55      	ldr	r3, [pc, #340]	; (3560 <atsha204a_menu+0x1e4>)
    340c:	781b      	ldrb	r3, [r3, #0]
    340e:	2b03      	cmp	r3, #3
    3410:	d100      	bne.n	3414 <atsha204a_menu+0x98>
    3412:	e093      	b.n	353c <atsha204a_menu+0x1c0>
		input = usartReadNumb();
    3414:	4b5e      	ldr	r3, [pc, #376]	; (3590 <atsha204a_menu+0x214>)
    3416:	4798      	blx	r3
    3418:	4b51      	ldr	r3, [pc, #324]	; (3560 <atsha204a_menu+0x1e4>)
    341a:	7018      	strb	r0, [r3, #0]
    341c:	2200      	movs	r2, #0
	while(!changeMenu){
    341e:	2a00      	cmp	r2, #0
    3420:	d000      	beq.n	3424 <atsha204a_menu+0xa8>
    3422:	e08d      	b.n	3540 <atsha204a_menu+0x1c4>
		usartClearWindow();
    3424:	47b8      	blx	r7
		strcpy(string, "ATSHA204A Menu                        \n\r");
    3426:	0023      	movs	r3, r4
    3428:	464a      	mov	r2, r9
    342a:	ca23      	ldmia	r2!, {r0, r1, r5}
    342c:	c323      	stmia	r3!, {r0, r1, r5}
    342e:	ca23      	ldmia	r2!, {r0, r1, r5}
    3430:	c323      	stmia	r3!, {r0, r1, r5}
    3432:	ca23      	ldmia	r2!, {r0, r1, r5}
    3434:	c323      	stmia	r3!, {r0, r1, r5}
    3436:	6811      	ldr	r1, [r2, #0]
    3438:	6019      	str	r1, [r3, #0]
    343a:	7912      	ldrb	r2, [r2, #4]
    343c:	711a      	strb	r2, [r3, #4]
		usartWriteBuffer(string, sizeof(string));
    343e:	2128      	movs	r1, #40	; 0x28
    3440:	0020      	movs	r0, r4
    3442:	4d51      	ldr	r5, [pc, #324]	; (3588 <atsha204a_menu+0x20c>)
    3444:	47a8      	blx	r5
		strcpy(string, "1) Get Serial number of ATSHA204A Chip\n\r");
    3446:	4b53      	ldr	r3, [pc, #332]	; (3594 <atsha204a_menu+0x218>)
    3448:	0022      	movs	r2, r4
    344a:	cb43      	ldmia	r3!, {r0, r1, r6}
    344c:	c243      	stmia	r2!, {r0, r1, r6}
    344e:	cb43      	ldmia	r3!, {r0, r1, r6}
    3450:	c243      	stmia	r2!, {r0, r1, r6}
    3452:	cb43      	ldmia	r3!, {r0, r1, r6}
    3454:	c243      	stmia	r2!, {r0, r1, r6}
    3456:	6819      	ldr	r1, [r3, #0]
    3458:	6011      	str	r1, [r2, #0]
    345a:	791b      	ldrb	r3, [r3, #4]
    345c:	7113      	strb	r3, [r2, #4]
		usartWriteBuffer(string, sizeof(string));
    345e:	2128      	movs	r1, #40	; 0x28
    3460:	0020      	movs	r0, r4
    3462:	47a8      	blx	r5
		strcpy(string, "2) Hash Message                       \n\r");
    3464:	4b4c      	ldr	r3, [pc, #304]	; (3598 <atsha204a_menu+0x21c>)
    3466:	0022      	movs	r2, r4
    3468:	cb43      	ldmia	r3!, {r0, r1, r6}
    346a:	c243      	stmia	r2!, {r0, r1, r6}
    346c:	cb43      	ldmia	r3!, {r0, r1, r6}
    346e:	c243      	stmia	r2!, {r0, r1, r6}
    3470:	cb43      	ldmia	r3!, {r0, r1, r6}
    3472:	c243      	stmia	r2!, {r0, r1, r6}
    3474:	6819      	ldr	r1, [r3, #0]
    3476:	6011      	str	r1, [r2, #0]
    3478:	791b      	ldrb	r3, [r3, #4]
    347a:	7113      	strb	r3, [r2, #4]
		usartWriteBuffer(string, sizeof(string));
    347c:	2128      	movs	r1, #40	; 0x28
    347e:	0020      	movs	r0, r4
    3480:	47a8      	blx	r5
		strcpy(string, "3) Change Chip                        \n\r");
    3482:	4b46      	ldr	r3, [pc, #280]	; (359c <atsha204a_menu+0x220>)
    3484:	0022      	movs	r2, r4
    3486:	cb43      	ldmia	r3!, {r0, r1, r6}
    3488:	c243      	stmia	r2!, {r0, r1, r6}
    348a:	cb43      	ldmia	r3!, {r0, r1, r6}
    348c:	c243      	stmia	r2!, {r0, r1, r6}
    348e:	cb43      	ldmia	r3!, {r0, r1, r6}
    3490:	c243      	stmia	r2!, {r0, r1, r6}
    3492:	6819      	ldr	r1, [r3, #0]
    3494:	6011      	str	r1, [r2, #0]
    3496:	791b      	ldrb	r3, [r3, #4]
    3498:	7113      	strb	r3, [r2, #4]
		usartWriteBuffer(string, sizeof(string));
    349a:	2128      	movs	r1, #40	; 0x28
    349c:	0020      	movs	r0, r4
    349e:	47a8      	blx	r5
		switch(input){
    34a0:	4b2f      	ldr	r3, [pc, #188]	; (3560 <atsha204a_menu+0x1e4>)
    34a2:	781b      	ldrb	r3, [r3, #0]
    34a4:	2b01      	cmp	r3, #1
    34a6:	d099      	beq.n	33dc <atsha204a_menu+0x60>
    34a8:	2b00      	cmp	r3, #0
    34aa:	d0ae      	beq.n	340a <atsha204a_menu+0x8e>
    34ac:	2b02      	cmp	r3, #2
    34ae:	d013      	beq.n	34d8 <atsha204a_menu+0x15c>
				changeMenu = true;
    34b0:	2201      	movs	r2, #1
		switch(input){
    34b2:	2b03      	cmp	r3, #3
    34b4:	d0b3      	beq.n	341e <atsha204a_menu+0xa2>
				strcpy(string, "Please enter a number between 1 and x \n\r");
    34b6:	482c      	ldr	r0, [pc, #176]	; (3568 <atsha204a_menu+0x1ec>)
    34b8:	4b39      	ldr	r3, [pc, #228]	; (35a0 <atsha204a_menu+0x224>)
    34ba:	0002      	movs	r2, r0
    34bc:	cb62      	ldmia	r3!, {r1, r5, r6}
    34be:	c262      	stmia	r2!, {r1, r5, r6}
    34c0:	cb62      	ldmia	r3!, {r1, r5, r6}
    34c2:	c262      	stmia	r2!, {r1, r5, r6}
    34c4:	cb62      	ldmia	r3!, {r1, r5, r6}
    34c6:	c262      	stmia	r2!, {r1, r5, r6}
    34c8:	6819      	ldr	r1, [r3, #0]
    34ca:	6011      	str	r1, [r2, #0]
    34cc:	791b      	ldrb	r3, [r3, #4]
    34ce:	7113      	strb	r3, [r2, #4]
				usartWriteBuffer(string, sizeof(string));
    34d0:	2128      	movs	r1, #40	; 0x28
    34d2:	4b2d      	ldr	r3, [pc, #180]	; (3588 <atsha204a_menu+0x20c>)
    34d4:	4798      	blx	r3
				break;
    34d6:	e798      	b.n	340a <atsha204a_menu+0x8e>
				usart_write_buffer_wait(&USART, (uint8_t *)"\033[5B", 6);
    34d8:	2206      	movs	r2, #6
    34da:	4929      	ldr	r1, [pc, #164]	; (3580 <atsha204a_menu+0x204>)
    34dc:	4826      	ldr	r0, [pc, #152]	; (3578 <atsha204a_menu+0x1fc>)
    34de:	4b27      	ldr	r3, [pc, #156]	; (357c <atsha204a_menu+0x200>)
    34e0:	4798      	blx	r3
				strcpy(string, "Please enter the message:             \n\r");
    34e2:	4b21      	ldr	r3, [pc, #132]	; (3568 <atsha204a_menu+0x1ec>)
    34e4:	4698      	mov	r8, r3
    34e6:	4b2f      	ldr	r3, [pc, #188]	; (35a4 <atsha204a_menu+0x228>)
    34e8:	4642      	mov	r2, r8
    34ea:	cb23      	ldmia	r3!, {r0, r1, r5}
    34ec:	c223      	stmia	r2!, {r0, r1, r5}
    34ee:	cb23      	ldmia	r3!, {r0, r1, r5}
    34f0:	c223      	stmia	r2!, {r0, r1, r5}
    34f2:	cb23      	ldmia	r3!, {r0, r1, r5}
    34f4:	c223      	stmia	r2!, {r0, r1, r5}
    34f6:	6819      	ldr	r1, [r3, #0]
    34f8:	6011      	str	r1, [r2, #0]
    34fa:	791b      	ldrb	r3, [r3, #4]
    34fc:	7113      	strb	r3, [r2, #4]
				usartWriteBuffer(string, sizeof(string));
    34fe:	2128      	movs	r1, #40	; 0x28
    3500:	4640      	mov	r0, r8
    3502:	4d21      	ldr	r5, [pc, #132]	; (3588 <atsha204a_menu+0x20c>)
    3504:	47a8      	blx	r5
				usartReadString(input_string, sizeof(input_string));
    3506:	2120      	movs	r1, #32
    3508:	4827      	ldr	r0, [pc, #156]	; (35a8 <atsha204a_menu+0x22c>)
    350a:	4b28      	ldr	r3, [pc, #160]	; (35ac <atsha204a_menu+0x230>)
    350c:	4798      	blx	r3
				strcpy(string, "Hashed message:                       \n\r");
    350e:	4b28      	ldr	r3, [pc, #160]	; (35b0 <atsha204a_menu+0x234>)
    3510:	4642      	mov	r2, r8
    3512:	cb43      	ldmia	r3!, {r0, r1, r6}
    3514:	c243      	stmia	r2!, {r0, r1, r6}
    3516:	cb43      	ldmia	r3!, {r0, r1, r6}
    3518:	c243      	stmia	r2!, {r0, r1, r6}
    351a:	cb43      	ldmia	r3!, {r0, r1, r6}
    351c:	c243      	stmia	r2!, {r0, r1, r6}
    351e:	6819      	ldr	r1, [r3, #0]
    3520:	6011      	str	r1, [r2, #0]
    3522:	791b      	ldrb	r3, [r3, #4]
    3524:	7113      	strb	r3, [r2, #4]
				usartWriteBuffer(string, sizeof(string));
    3526:	2128      	movs	r1, #40	; 0x28
    3528:	4640      	mov	r0, r8
    352a:	47a8      	blx	r5
				hashMessage((uint8_t*)input_string,length(input_string));
    352c:	481e      	ldr	r0, [pc, #120]	; (35a8 <atsha204a_menu+0x22c>)
    352e:	4b21      	ldr	r3, [pc, #132]	; (35b4 <atsha204a_menu+0x238>)
    3530:	4798      	blx	r3
    3532:	0001      	movs	r1, r0
    3534:	481c      	ldr	r0, [pc, #112]	; (35a8 <atsha204a_menu+0x22c>)
    3536:	4b20      	ldr	r3, [pc, #128]	; (35b8 <atsha204a_menu+0x23c>)
    3538:	4798      	blx	r3
				break;
    353a:	e766      	b.n	340a <atsha204a_menu+0x8e>
    353c:	2200      	movs	r2, #0
    353e:	e76e      	b.n	341e <atsha204a_menu+0xa2>
		}
	}

}
    3540:	bc0c      	pop	{r2, r3}
    3542:	4690      	mov	r8, r2
    3544:	4699      	mov	r9, r3
    3546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3548:	2000003c 	.word	0x2000003c
    354c:	0000103d 	.word	0x0000103d
    3550:	20000212 	.word	0x20000212
    3554:	000010b5 	.word	0x000010b5
    3558:	00000bb8 	.word	0x00000bb8
    355c:	00002e85 	.word	0x00002e85
    3560:	20000211 	.word	0x20000211
    3564:	00002e5d 	.word	0x00002e5d
    3568:	200001b4 	.word	0x200001b4
    356c:	00005e18 	.word	0x00005e18
    3570:	41004400 	.word	0x41004400
    3574:	00005a6c 	.word	0x00005a6c
    3578:	200001fc 	.word	0x200001fc
    357c:	00000add 	.word	0x00000add
    3580:	00005ec8 	.word	0x00005ec8
    3584:	00005ed0 	.word	0x00005ed0
    3588:	00002ccd 	.word	0x00002ccd
    358c:	00002b89 	.word	0x00002b89
    3590:	00002d6d 	.word	0x00002d6d
    3594:	00005e44 	.word	0x00005e44
    3598:	00005e70 	.word	0x00005e70
    359c:	00005e9c 	.word	0x00005e9c
    35a0:	00005f54 	.word	0x00005f54
    35a4:	00005efc 	.word	0x00005efc
    35a8:	20000154 	.word	0x20000154
    35ac:	00002d9d 	.word	0x00002d9d
    35b0:	00005f28 	.word	0x00005f28
    35b4:	00003361 	.word	0x00003361
    35b8:	00002bd1 	.word	0x00002bd1

000035bc <ateccx08a_menu>:
		}
	}

}*/

void ateccx08a_menu (void){
    35bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    35be:	46c6      	mov	lr, r8
    35c0:	b500      	push	{lr}
	

	bool changeMenu = false;
	//Starting i2c connection
	status = atcab_init(&cfg_ateccx08a_i2c_default);
    35c2:	4890      	ldr	r0, [pc, #576]	; (3804 <ateccx08a_menu+0x248>)
    35c4:	4b90      	ldr	r3, [pc, #576]	; (3808 <ateccx08a_menu+0x24c>)
    35c6:	4798      	blx	r3
    35c8:	4b90      	ldr	r3, [pc, #576]	; (380c <ateccx08a_menu+0x250>)
    35ca:	7018      	strb	r0, [r3, #0]

	if(status != ATCA_SUCCESS){
    35cc:	2800      	cmp	r0, #0
    35ce:	d110      	bne.n	35f2 <ateccx08a_menu+0x36>
		port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
		usart_write_buffer_wait(&USART, (uint8_t *)"Some problem occurred!\n\r", 22);
	}

	//Wake up i2c slave
	status = atcab_wakeup();
    35d0:	4b8f      	ldr	r3, [pc, #572]	; (3810 <ateccx08a_menu+0x254>)
    35d2:	4798      	blx	r3
    35d4:	4b8d      	ldr	r3, [pc, #564]	; (380c <ateccx08a_menu+0x250>)
    35d6:	7018      	strb	r0, [r3, #0]
	if(status != ATCA_SUCCESS){
    35d8:	2800      	cmp	r0, #0
    35da:	d114      	bne.n	3606 <ateccx08a_menu+0x4a>
		port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
		usart_write_buffer_wait(&USART, (uint8_t *)"Some problem occurred!\n\r", 22);
	}
	
	usartLoadingScreen(3000);
    35dc:	488d      	ldr	r0, [pc, #564]	; (3814 <ateccx08a_menu+0x258>)
    35de:	4b8e      	ldr	r3, [pc, #568]	; (3818 <ateccx08a_menu+0x25c>)
    35e0:	4798      	blx	r3
	input = 0;
    35e2:	2200      	movs	r2, #0
    35e4:	4b8d      	ldr	r3, [pc, #564]	; (381c <ateccx08a_menu+0x260>)
    35e6:	701a      	strb	r2, [r3, #0]




while(!changeMenu){
	usartClearWindow();
    35e8:	4f8d      	ldr	r7, [pc, #564]	; (3820 <ateccx08a_menu+0x264>)
	strcpy(string, "ATECCx08A Menu                        \n\r");
    35ea:	4c8e      	ldr	r4, [pc, #568]	; (3824 <ateccx08a_menu+0x268>)
    35ec:	4b8e      	ldr	r3, [pc, #568]	; (3828 <ateccx08a_menu+0x26c>)
    35ee:	4698      	mov	r8, r3
    35f0:	e037      	b.n	3662 <ateccx08a_menu+0xa6>
    35f2:	2280      	movs	r2, #128	; 0x80
    35f4:	0312      	lsls	r2, r2, #12
    35f6:	4b8d      	ldr	r3, [pc, #564]	; (382c <ateccx08a_menu+0x270>)
    35f8:	615a      	str	r2, [r3, #20]
		usart_write_buffer_wait(&USART, (uint8_t *)"Some problem occurred!\n\r", 22);
    35fa:	2216      	movs	r2, #22
    35fc:	498c      	ldr	r1, [pc, #560]	; (3830 <ateccx08a_menu+0x274>)
    35fe:	488d      	ldr	r0, [pc, #564]	; (3834 <ateccx08a_menu+0x278>)
    3600:	4b8d      	ldr	r3, [pc, #564]	; (3838 <ateccx08a_menu+0x27c>)
    3602:	4798      	blx	r3
    3604:	e7e4      	b.n	35d0 <ateccx08a_menu+0x14>
    3606:	2280      	movs	r2, #128	; 0x80
    3608:	0312      	lsls	r2, r2, #12
    360a:	4b88      	ldr	r3, [pc, #544]	; (382c <ateccx08a_menu+0x270>)
    360c:	615a      	str	r2, [r3, #20]
		usart_write_buffer_wait(&USART, (uint8_t *)"Some problem occurred!\n\r", 22);
    360e:	2216      	movs	r2, #22
    3610:	4987      	ldr	r1, [pc, #540]	; (3830 <ateccx08a_menu+0x274>)
    3612:	4888      	ldr	r0, [pc, #544]	; (3834 <ateccx08a_menu+0x278>)
    3614:	4b88      	ldr	r3, [pc, #544]	; (3838 <ateccx08a_menu+0x27c>)
    3616:	4798      	blx	r3
    3618:	e7e0      	b.n	35dc <ateccx08a_menu+0x20>

	switch(input){
		case 0:
		break;
		case 1:		
			usart_write_buffer_wait(&USART, (uint8_t *)"\033[5B", 6);
    361a:	2206      	movs	r2, #6
    361c:	4987      	ldr	r1, [pc, #540]	; (383c <ateccx08a_menu+0x280>)
    361e:	4885      	ldr	r0, [pc, #532]	; (3834 <ateccx08a_menu+0x278>)
    3620:	4b85      	ldr	r3, [pc, #532]	; (3838 <ateccx08a_menu+0x27c>)
    3622:	4798      	blx	r3
			strcpy(string, "Serial number:                        \n\r");
    3624:	487f      	ldr	r0, [pc, #508]	; (3824 <ateccx08a_menu+0x268>)
    3626:	4b86      	ldr	r3, [pc, #536]	; (3840 <ateccx08a_menu+0x284>)
    3628:	0002      	movs	r2, r0
    362a:	cb62      	ldmia	r3!, {r1, r5, r6}
    362c:	c262      	stmia	r2!, {r1, r5, r6}
    362e:	cb62      	ldmia	r3!, {r1, r5, r6}
    3630:	c262      	stmia	r2!, {r1, r5, r6}
    3632:	cb62      	ldmia	r3!, {r1, r5, r6}
    3634:	c262      	stmia	r2!, {r1, r5, r6}
    3636:	6819      	ldr	r1, [r3, #0]
    3638:	6011      	str	r1, [r2, #0]
    363a:	791b      	ldrb	r3, [r3, #4]
    363c:	7113      	strb	r3, [r2, #4]
			usartWriteBuffer(string, sizeof(string));
    363e:	2128      	movs	r1, #40	; 0x28
    3640:	4b80      	ldr	r3, [pc, #512]	; (3844 <ateccx08a_menu+0x288>)
    3642:	4798      	blx	r3
			getsAtshaSerialNumber();
    3644:	4b80      	ldr	r3, [pc, #512]	; (3848 <ateccx08a_menu+0x28c>)
    3646:	4798      	blx	r3
		default:
			strcpy(string, "Please enter a number between 1 and 6 \n\r");
			usartWriteBuffer(string, sizeof(string));
			break;
	}
	if(input != 6){
    3648:	4b74      	ldr	r3, [pc, #464]	; (381c <ateccx08a_menu+0x260>)
    364a:	781a      	ldrb	r2, [r3, #0]
    364c:	2300      	movs	r3, #0
    364e:	2a06      	cmp	r2, #6
    3650:	d004      	beq.n	365c <ateccx08a_menu+0xa0>
		input = usartReadNumb();
    3652:	4b7e      	ldr	r3, [pc, #504]	; (384c <ateccx08a_menu+0x290>)
    3654:	4798      	blx	r3
    3656:	4b71      	ldr	r3, [pc, #452]	; (381c <ateccx08a_menu+0x260>)
    3658:	7018      	strb	r0, [r3, #0]
    365a:	2300      	movs	r3, #0
while(!changeMenu){
    365c:	2b00      	cmp	r3, #0
    365e:	d000      	beq.n	3662 <ateccx08a_menu+0xa6>
    3660:	e0cd      	b.n	37fe <ateccx08a_menu+0x242>
	usartClearWindow();
    3662:	47b8      	blx	r7
	strcpy(string, "ATECCx08A Menu                        \n\r");
    3664:	0023      	movs	r3, r4
    3666:	4642      	mov	r2, r8
    3668:	ca23      	ldmia	r2!, {r0, r1, r5}
    366a:	c323      	stmia	r3!, {r0, r1, r5}
    366c:	ca23      	ldmia	r2!, {r0, r1, r5}
    366e:	c323      	stmia	r3!, {r0, r1, r5}
    3670:	ca23      	ldmia	r2!, {r0, r1, r5}
    3672:	c323      	stmia	r3!, {r0, r1, r5}
    3674:	6811      	ldr	r1, [r2, #0]
    3676:	6019      	str	r1, [r3, #0]
    3678:	7912      	ldrb	r2, [r2, #4]
    367a:	711a      	strb	r2, [r3, #4]
	usartWriteBuffer(string, sizeof(string));
    367c:	2128      	movs	r1, #40	; 0x28
    367e:	0020      	movs	r0, r4
    3680:	4d70      	ldr	r5, [pc, #448]	; (3844 <ateccx08a_menu+0x288>)
    3682:	47a8      	blx	r5
	strcpy(string, "1) Get Serial number of ATECCx08  Chip\n\r");
    3684:	4b72      	ldr	r3, [pc, #456]	; (3850 <ateccx08a_menu+0x294>)
    3686:	0022      	movs	r2, r4
    3688:	cb43      	ldmia	r3!, {r0, r1, r6}
    368a:	c243      	stmia	r2!, {r0, r1, r6}
    368c:	cb43      	ldmia	r3!, {r0, r1, r6}
    368e:	c243      	stmia	r2!, {r0, r1, r6}
    3690:	cb43      	ldmia	r3!, {r0, r1, r6}
    3692:	c243      	stmia	r2!, {r0, r1, r6}
    3694:	6819      	ldr	r1, [r3, #0]
    3696:	6011      	str	r1, [r2, #0]
    3698:	791b      	ldrb	r3, [r3, #4]
    369a:	7113      	strb	r3, [r2, #4]
	usartWriteBuffer(string, sizeof(string));
    369c:	2128      	movs	r1, #40	; 0x28
    369e:	0020      	movs	r0, r4
    36a0:	47a8      	blx	r5
	strcpy(string, "2) Check if device is locked          \n\r");
    36a2:	4b6c      	ldr	r3, [pc, #432]	; (3854 <ateccx08a_menu+0x298>)
    36a4:	0022      	movs	r2, r4
    36a6:	cb43      	ldmia	r3!, {r0, r1, r6}
    36a8:	c243      	stmia	r2!, {r0, r1, r6}
    36aa:	cb43      	ldmia	r3!, {r0, r1, r6}
    36ac:	c243      	stmia	r2!, {r0, r1, r6}
    36ae:	cb43      	ldmia	r3!, {r0, r1, r6}
    36b0:	c243      	stmia	r2!, {r0, r1, r6}
    36b2:	6819      	ldr	r1, [r3, #0]
    36b4:	6011      	str	r1, [r2, #0]
    36b6:	791b      	ldrb	r3, [r3, #4]
    36b8:	7113      	strb	r3, [r2, #4]
	usartWriteBuffer(string, sizeof(string));
    36ba:	2128      	movs	r1, #40	; 0x28
    36bc:	0020      	movs	r0, r4
    36be:	47a8      	blx	r5
	strcpy(string, "3) Lock Zones                         \n\r");
    36c0:	4b65      	ldr	r3, [pc, #404]	; (3858 <ateccx08a_menu+0x29c>)
    36c2:	0022      	movs	r2, r4
    36c4:	cb43      	ldmia	r3!, {r0, r1, r6}
    36c6:	c243      	stmia	r2!, {r0, r1, r6}
    36c8:	cb43      	ldmia	r3!, {r0, r1, r6}
    36ca:	c243      	stmia	r2!, {r0, r1, r6}
    36cc:	cb43      	ldmia	r3!, {r0, r1, r6}
    36ce:	c243      	stmia	r2!, {r0, r1, r6}
    36d0:	6819      	ldr	r1, [r3, #0]
    36d2:	6011      	str	r1, [r2, #0]
    36d4:	791b      	ldrb	r3, [r3, #4]
    36d6:	7113      	strb	r3, [r2, #4]
	usartWriteBuffer(string, sizeof(string));
    36d8:	2128      	movs	r1, #40	; 0x28
    36da:	0020      	movs	r0, r4
    36dc:	47a8      	blx	r5
	strcpy(string, "4) Generate random number             \n\r");
    36de:	4b5f      	ldr	r3, [pc, #380]	; (385c <ateccx08a_menu+0x2a0>)
    36e0:	0022      	movs	r2, r4
    36e2:	cb43      	ldmia	r3!, {r0, r1, r6}
    36e4:	c243      	stmia	r2!, {r0, r1, r6}
    36e6:	cb43      	ldmia	r3!, {r0, r1, r6}
    36e8:	c243      	stmia	r2!, {r0, r1, r6}
    36ea:	cb43      	ldmia	r3!, {r0, r1, r6}
    36ec:	c243      	stmia	r2!, {r0, r1, r6}
    36ee:	6819      	ldr	r1, [r3, #0]
    36f0:	6011      	str	r1, [r2, #0]
    36f2:	791b      	ldrb	r3, [r3, #4]
    36f4:	7113      	strb	r3, [r2, #4]
	usartWriteBuffer(string, sizeof(string));
    36f6:	2128      	movs	r1, #40	; 0x28
    36f8:	0020      	movs	r0, r4
    36fa:	47a8      	blx	r5
	strcpy(string, "5) Generate Key                       \n\r");
    36fc:	4b58      	ldr	r3, [pc, #352]	; (3860 <ateccx08a_menu+0x2a4>)
    36fe:	0022      	movs	r2, r4
    3700:	cb43      	ldmia	r3!, {r0, r1, r6}
    3702:	c243      	stmia	r2!, {r0, r1, r6}
    3704:	cb43      	ldmia	r3!, {r0, r1, r6}
    3706:	c243      	stmia	r2!, {r0, r1, r6}
    3708:	cb43      	ldmia	r3!, {r0, r1, r6}
    370a:	c243      	stmia	r2!, {r0, r1, r6}
    370c:	6819      	ldr	r1, [r3, #0]
    370e:	6011      	str	r1, [r2, #0]
    3710:	791b      	ldrb	r3, [r3, #4]
    3712:	7113      	strb	r3, [r2, #4]
	usartWriteBuffer(string, sizeof(string));
    3714:	2128      	movs	r1, #40	; 0x28
    3716:	0020      	movs	r0, r4
    3718:	47a8      	blx	r5
	strcpy(string, "6) Change Chip                        \n\r");
    371a:	4b52      	ldr	r3, [pc, #328]	; (3864 <ateccx08a_menu+0x2a8>)
    371c:	0022      	movs	r2, r4
    371e:	cb43      	ldmia	r3!, {r0, r1, r6}
    3720:	c243      	stmia	r2!, {r0, r1, r6}
    3722:	cb43      	ldmia	r3!, {r0, r1, r6}
    3724:	c243      	stmia	r2!, {r0, r1, r6}
    3726:	cb43      	ldmia	r3!, {r0, r1, r6}
    3728:	c243      	stmia	r2!, {r0, r1, r6}
    372a:	6819      	ldr	r1, [r3, #0]
    372c:	6011      	str	r1, [r2, #0]
    372e:	791b      	ldrb	r3, [r3, #4]
    3730:	7113      	strb	r3, [r2, #4]
	usartWriteBuffer(string, sizeof(string));
    3732:	2128      	movs	r1, #40	; 0x28
    3734:	0020      	movs	r0, r4
    3736:	47a8      	blx	r5
	switch(input){
    3738:	4b38      	ldr	r3, [pc, #224]	; (381c <ateccx08a_menu+0x260>)
    373a:	781a      	ldrb	r2, [r3, #0]
    373c:	2a06      	cmp	r2, #6
    373e:	d84b      	bhi.n	37d8 <ateccx08a_menu+0x21c>
    3740:	0093      	lsls	r3, r2, #2
    3742:	4a49      	ldr	r2, [pc, #292]	; (3868 <ateccx08a_menu+0x2ac>)
    3744:	58d3      	ldr	r3, [r2, r3]
    3746:	469f      	mov	pc, r3
			usart_write_buffer_wait(&USART, (uint8_t *)"\033[5B", 6);
    3748:	2206      	movs	r2, #6
    374a:	493c      	ldr	r1, [pc, #240]	; (383c <ateccx08a_menu+0x280>)
    374c:	4839      	ldr	r0, [pc, #228]	; (3834 <ateccx08a_menu+0x278>)
    374e:	4b3a      	ldr	r3, [pc, #232]	; (3838 <ateccx08a_menu+0x27c>)
    3750:	4798      	blx	r3
			isDeviceLocked();
    3752:	4b46      	ldr	r3, [pc, #280]	; (386c <ateccx08a_menu+0x2b0>)
    3754:	4798      	blx	r3
			break;
    3756:	e777      	b.n	3648 <ateccx08a_menu+0x8c>
			usart_write_buffer_wait(&USART, (uint8_t *)"\033[5B", 6);
    3758:	2206      	movs	r2, #6
    375a:	4938      	ldr	r1, [pc, #224]	; (383c <ateccx08a_menu+0x280>)
    375c:	4835      	ldr	r0, [pc, #212]	; (3834 <ateccx08a_menu+0x278>)
    375e:	4b36      	ldr	r3, [pc, #216]	; (3838 <ateccx08a_menu+0x27c>)
    3760:	4798      	blx	r3
			lockZones();
    3762:	4b43      	ldr	r3, [pc, #268]	; (3870 <ateccx08a_menu+0x2b4>)
    3764:	4798      	blx	r3
			break;		
    3766:	e76f      	b.n	3648 <ateccx08a_menu+0x8c>
			usart_write_buffer_wait(&USART, (uint8_t *)"\033[5B", 6);
    3768:	2206      	movs	r2, #6
    376a:	4934      	ldr	r1, [pc, #208]	; (383c <ateccx08a_menu+0x280>)
    376c:	4831      	ldr	r0, [pc, #196]	; (3834 <ateccx08a_menu+0x278>)
    376e:	4b32      	ldr	r3, [pc, #200]	; (3838 <ateccx08a_menu+0x27c>)
    3770:	4798      	blx	r3
			strcpy(string, "Random number:                        \n\r");
    3772:	482c      	ldr	r0, [pc, #176]	; (3824 <ateccx08a_menu+0x268>)
    3774:	4b3f      	ldr	r3, [pc, #252]	; (3874 <ateccx08a_menu+0x2b8>)
    3776:	0002      	movs	r2, r0
    3778:	cb62      	ldmia	r3!, {r1, r5, r6}
    377a:	c262      	stmia	r2!, {r1, r5, r6}
    377c:	cb62      	ldmia	r3!, {r1, r5, r6}
    377e:	c262      	stmia	r2!, {r1, r5, r6}
    3780:	cb62      	ldmia	r3!, {r1, r5, r6}
    3782:	c262      	stmia	r2!, {r1, r5, r6}
    3784:	6819      	ldr	r1, [r3, #0]
    3786:	6011      	str	r1, [r2, #0]
    3788:	791b      	ldrb	r3, [r3, #4]
    378a:	7113      	strb	r3, [r2, #4]
			usartWriteBuffer(string, sizeof(string));
    378c:	2128      	movs	r1, #40	; 0x28
    378e:	4b2d      	ldr	r3, [pc, #180]	; (3844 <ateccx08a_menu+0x288>)
    3790:	4798      	blx	r3
			generateRandom();
    3792:	4b39      	ldr	r3, [pc, #228]	; (3878 <ateccx08a_menu+0x2bc>)
    3794:	4798      	blx	r3
			break;
    3796:	e757      	b.n	3648 <ateccx08a_menu+0x8c>
			usart_write_buffer_wait(&USART, (uint8_t *)"\033[5B", 6);
    3798:	2206      	movs	r2, #6
    379a:	4928      	ldr	r1, [pc, #160]	; (383c <ateccx08a_menu+0x280>)
    379c:	4825      	ldr	r0, [pc, #148]	; (3834 <ateccx08a_menu+0x278>)
    379e:	4b26      	ldr	r3, [pc, #152]	; (3838 <ateccx08a_menu+0x27c>)
    37a0:	4798      	blx	r3
			strcpy(string, "Public key:                           \n\r");
    37a2:	4820      	ldr	r0, [pc, #128]	; (3824 <ateccx08a_menu+0x268>)
    37a4:	4b35      	ldr	r3, [pc, #212]	; (387c <ateccx08a_menu+0x2c0>)
    37a6:	0002      	movs	r2, r0
    37a8:	cb62      	ldmia	r3!, {r1, r5, r6}
    37aa:	c262      	stmia	r2!, {r1, r5, r6}
    37ac:	cb62      	ldmia	r3!, {r1, r5, r6}
    37ae:	c262      	stmia	r2!, {r1, r5, r6}
    37b0:	cb62      	ldmia	r3!, {r1, r5, r6}
    37b2:	c262      	stmia	r2!, {r1, r5, r6}
    37b4:	6819      	ldr	r1, [r3, #0]
    37b6:	6011      	str	r1, [r2, #0]
    37b8:	791b      	ldrb	r3, [r3, #4]
    37ba:	7113      	strb	r3, [r2, #4]
			usartWriteBuffer(string, sizeof(string));
    37bc:	2128      	movs	r1, #40	; 0x28
    37be:	4b21      	ldr	r3, [pc, #132]	; (3844 <ateccx08a_menu+0x288>)
    37c0:	4798      	blx	r3
			if(generateKeyPair(pub_key)){
    37c2:	482f      	ldr	r0, [pc, #188]	; (3880 <ateccx08a_menu+0x2c4>)
    37c4:	4b2f      	ldr	r3, [pc, #188]	; (3884 <ateccx08a_menu+0x2c8>)
    37c6:	4798      	blx	r3
    37c8:	2800      	cmp	r0, #0
    37ca:	d100      	bne.n	37ce <ateccx08a_menu+0x212>
    37cc:	e73c      	b.n	3648 <ateccx08a_menu+0x8c>
			usartWriteHex(pub_key, sizeof(pub_key));
    37ce:	2140      	movs	r1, #64	; 0x40
    37d0:	482b      	ldr	r0, [pc, #172]	; (3880 <ateccx08a_menu+0x2c4>)
    37d2:	4b2d      	ldr	r3, [pc, #180]	; (3888 <ateccx08a_menu+0x2cc>)
    37d4:	4798      	blx	r3
    37d6:	e737      	b.n	3648 <ateccx08a_menu+0x8c>
			strcpy(string, "Please enter a number between 1 and 6 \n\r");
    37d8:	4812      	ldr	r0, [pc, #72]	; (3824 <ateccx08a_menu+0x268>)
    37da:	4b2c      	ldr	r3, [pc, #176]	; (388c <ateccx08a_menu+0x2d0>)
    37dc:	0002      	movs	r2, r0
    37de:	cb62      	ldmia	r3!, {r1, r5, r6}
    37e0:	c262      	stmia	r2!, {r1, r5, r6}
    37e2:	cb62      	ldmia	r3!, {r1, r5, r6}
    37e4:	c262      	stmia	r2!, {r1, r5, r6}
    37e6:	cb62      	ldmia	r3!, {r1, r5, r6}
    37e8:	c262      	stmia	r2!, {r1, r5, r6}
    37ea:	6819      	ldr	r1, [r3, #0]
    37ec:	6011      	str	r1, [r2, #0]
    37ee:	791b      	ldrb	r3, [r3, #4]
    37f0:	7113      	strb	r3, [r2, #4]
			usartWriteBuffer(string, sizeof(string));
    37f2:	2128      	movs	r1, #40	; 0x28
    37f4:	4b13      	ldr	r3, [pc, #76]	; (3844 <ateccx08a_menu+0x288>)
    37f6:	4798      	blx	r3
			break;
    37f8:	e726      	b.n	3648 <ateccx08a_menu+0x8c>
			changeMenu = true;
    37fa:	2301      	movs	r3, #1
    37fc:	e72e      	b.n	365c <ateccx08a_menu+0xa0>
	}
}

    37fe:	bc04      	pop	{r2}
    3800:	4690      	mov	r8, r2
    3802:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3804:	2000000c 	.word	0x2000000c
    3808:	0000103d 	.word	0x0000103d
    380c:	20000212 	.word	0x20000212
    3810:	000010b5 	.word	0x000010b5
    3814:	00000bb8 	.word	0x00000bb8
    3818:	00002e85 	.word	0x00002e85
    381c:	20000211 	.word	0x20000211
    3820:	00002e5d 	.word	0x00002e5d
    3824:	200001b4 	.word	0x200001b4
    3828:	00005c60 	.word	0x00005c60
    382c:	41004400 	.word	0x41004400
    3830:	00005a6c 	.word	0x00005a6c
    3834:	200001fc 	.word	0x200001fc
    3838:	00000add 	.word	0x00000add
    383c:	00005ec8 	.word	0x00005ec8
    3840:	00005ed0 	.word	0x00005ed0
    3844:	00002ccd 	.word	0x00002ccd
    3848:	00002b89 	.word	0x00002b89
    384c:	00002d6d 	.word	0x00002d6d
    3850:	00005c8c 	.word	0x00005c8c
    3854:	00005cb8 	.word	0x00005cb8
    3858:	00005ce4 	.word	0x00005ce4
    385c:	00005d10 	.word	0x00005d10
    3860:	00005d3c 	.word	0x00005d3c
    3864:	00005d68 	.word	0x00005d68
    3868:	00005c44 	.word	0x00005c44
    386c:	000029fd 	.word	0x000029fd
    3870:	00002ab5 	.word	0x00002ab5
    3874:	00005d94 	.word	0x00005d94
    3878:	00002b35 	.word	0x00002b35
    387c:	00005dc0 	.word	0x00005dc0
    3880:	20000174 	.word	0x20000174
    3884:	000029bd 	.word	0x000029bd
    3888:	00002ce5 	.word	0x00002ce5
    388c:	00005dec 	.word	0x00005dec

00003890 <menu>:
void menu (void){
    3890:	b570      	push	{r4, r5, r6, lr}
	usartClearWindow();
    3892:	4b27      	ldr	r3, [pc, #156]	; (3930 <menu+0xa0>)
    3894:	4798      	blx	r3
	strcpy(string, "Menu                                  \n\r");
    3896:	4c27      	ldr	r4, [pc, #156]	; (3934 <menu+0xa4>)
    3898:	4b27      	ldr	r3, [pc, #156]	; (3938 <menu+0xa8>)
    389a:	0022      	movs	r2, r4
    389c:	cb23      	ldmia	r3!, {r0, r1, r5}
    389e:	c223      	stmia	r2!, {r0, r1, r5}
    38a0:	cb23      	ldmia	r3!, {r0, r1, r5}
    38a2:	c223      	stmia	r2!, {r0, r1, r5}
    38a4:	cb23      	ldmia	r3!, {r0, r1, r5}
    38a6:	c223      	stmia	r2!, {r0, r1, r5}
    38a8:	6819      	ldr	r1, [r3, #0]
    38aa:	6011      	str	r1, [r2, #0]
    38ac:	791b      	ldrb	r3, [r3, #4]
    38ae:	7113      	strb	r3, [r2, #4]
	usartWriteBuffer(string, sizeof(string));
    38b0:	2128      	movs	r1, #40	; 0x28
    38b2:	0020      	movs	r0, r4
    38b4:	4d21      	ldr	r5, [pc, #132]	; (393c <menu+0xac>)
    38b6:	47a8      	blx	r5
	strcpy(string, "1)ATSHA204A                           \n\r");
    38b8:	4b21      	ldr	r3, [pc, #132]	; (3940 <menu+0xb0>)
    38ba:	0022      	movs	r2, r4
    38bc:	cb43      	ldmia	r3!, {r0, r1, r6}
    38be:	c243      	stmia	r2!, {r0, r1, r6}
    38c0:	cb43      	ldmia	r3!, {r0, r1, r6}
    38c2:	c243      	stmia	r2!, {r0, r1, r6}
    38c4:	cb43      	ldmia	r3!, {r0, r1, r6}
    38c6:	c243      	stmia	r2!, {r0, r1, r6}
    38c8:	6819      	ldr	r1, [r3, #0]
    38ca:	6011      	str	r1, [r2, #0]
    38cc:	791b      	ldrb	r3, [r3, #4]
    38ce:	7113      	strb	r3, [r2, #4]
	usartWriteBuffer(string, sizeof(string));
    38d0:	2128      	movs	r1, #40	; 0x28
    38d2:	0020      	movs	r0, r4
    38d4:	47a8      	blx	r5
	strcpy(string, "2)ATECCx08A                           \n\r");
    38d6:	4b1b      	ldr	r3, [pc, #108]	; (3944 <menu+0xb4>)
    38d8:	0022      	movs	r2, r4
    38da:	cb43      	ldmia	r3!, {r0, r1, r6}
    38dc:	c243      	stmia	r2!, {r0, r1, r6}
    38de:	cb43      	ldmia	r3!, {r0, r1, r6}
    38e0:	c243      	stmia	r2!, {r0, r1, r6}
    38e2:	cb43      	ldmia	r3!, {r0, r1, r6}
    38e4:	c243      	stmia	r2!, {r0, r1, r6}
    38e6:	6819      	ldr	r1, [r3, #0]
    38e8:	6011      	str	r1, [r2, #0]
    38ea:	791b      	ldrb	r3, [r3, #4]
    38ec:	7113      	strb	r3, [r2, #4]
	usartWriteBuffer(string, sizeof(string));
    38ee:	2128      	movs	r1, #40	; 0x28
    38f0:	0020      	movs	r0, r4
    38f2:	47a8      	blx	r5
	strcpy(string, "3)ATAES132A                           \n\r");
    38f4:	4b14      	ldr	r3, [pc, #80]	; (3948 <menu+0xb8>)
    38f6:	0022      	movs	r2, r4
    38f8:	cb43      	ldmia	r3!, {r0, r1, r6}
    38fa:	c243      	stmia	r2!, {r0, r1, r6}
    38fc:	cb43      	ldmia	r3!, {r0, r1, r6}
    38fe:	c243      	stmia	r2!, {r0, r1, r6}
    3900:	cb43      	ldmia	r3!, {r0, r1, r6}
    3902:	c243      	stmia	r2!, {r0, r1, r6}
    3904:	6819      	ldr	r1, [r3, #0]
    3906:	6011      	str	r1, [r2, #0]
    3908:	791b      	ldrb	r3, [r3, #4]
    390a:	7113      	strb	r3, [r2, #4]
	usartWriteBuffer(string, sizeof(string));
    390c:	2128      	movs	r1, #40	; 0x28
    390e:	0020      	movs	r0, r4
    3910:	47a8      	blx	r5
	input = usartReadNumb();
    3912:	4b0e      	ldr	r3, [pc, #56]	; (394c <menu+0xbc>)
    3914:	4798      	blx	r3
    3916:	4a0e      	ldr	r2, [pc, #56]	; (3950 <menu+0xc0>)
    3918:	7010      	strb	r0, [r2, #0]
	if(input == 1){
    391a:	2801      	cmp	r0, #1
    391c:	d002      	beq.n	3924 <menu+0x94>
	}else if (input == 2){
    391e:	2802      	cmp	r0, #2
    3920:	d003      	beq.n	392a <menu+0x9a>
}
    3922:	bd70      	pop	{r4, r5, r6, pc}
		atsha204a_menu();
    3924:	4b0b      	ldr	r3, [pc, #44]	; (3954 <menu+0xc4>)
    3926:	4798      	blx	r3
    3928:	e7fb      	b.n	3922 <menu+0x92>
		ateccx08a_menu();
    392a:	4b0b      	ldr	r3, [pc, #44]	; (3958 <menu+0xc8>)
    392c:	4798      	blx	r3
}
    392e:	e7f8      	b.n	3922 <menu+0x92>
    3930:	00002e5d 	.word	0x00002e5d
    3934:	200001b4 	.word	0x200001b4
    3938:	00005f80 	.word	0x00005f80
    393c:	00002ccd 	.word	0x00002ccd
    3940:	00005fac 	.word	0x00005fac
    3944:	00005fd8 	.word	0x00005fd8
    3948:	00006004 	.word	0x00006004
    394c:	00002d6d 	.word	0x00002d6d
    3950:	20000211 	.word	0x20000211
    3954:	0000337d 	.word	0x0000337d
    3958:	000035bd 	.word	0x000035bd

0000395c <main>:
{
    395c:	b510      	push	{r4, lr}
	system_init();
    395e:	4b03      	ldr	r3, [pc, #12]	; (396c <main+0x10>)
    3960:	4798      	blx	r3
	configureUsart();
    3962:	4b03      	ldr	r3, [pc, #12]	; (3970 <main+0x14>)
    3964:	4798      	blx	r3
		menu();
    3966:	4c03      	ldr	r4, [pc, #12]	; (3974 <main+0x18>)
    3968:	47a0      	blx	r4
    396a:	e7fd      	b.n	3968 <main+0xc>
    396c:	00002885 	.word	0x00002885
    3970:	00002c2d 	.word	0x00002c2d
    3974:	00003891 	.word	0x00003891

00003978 <__udivsi3>:
    3978:	2200      	movs	r2, #0
    397a:	0843      	lsrs	r3, r0, #1
    397c:	428b      	cmp	r3, r1
    397e:	d374      	bcc.n	3a6a <__udivsi3+0xf2>
    3980:	0903      	lsrs	r3, r0, #4
    3982:	428b      	cmp	r3, r1
    3984:	d35f      	bcc.n	3a46 <__udivsi3+0xce>
    3986:	0a03      	lsrs	r3, r0, #8
    3988:	428b      	cmp	r3, r1
    398a:	d344      	bcc.n	3a16 <__udivsi3+0x9e>
    398c:	0b03      	lsrs	r3, r0, #12
    398e:	428b      	cmp	r3, r1
    3990:	d328      	bcc.n	39e4 <__udivsi3+0x6c>
    3992:	0c03      	lsrs	r3, r0, #16
    3994:	428b      	cmp	r3, r1
    3996:	d30d      	bcc.n	39b4 <__udivsi3+0x3c>
    3998:	22ff      	movs	r2, #255	; 0xff
    399a:	0209      	lsls	r1, r1, #8
    399c:	ba12      	rev	r2, r2
    399e:	0c03      	lsrs	r3, r0, #16
    39a0:	428b      	cmp	r3, r1
    39a2:	d302      	bcc.n	39aa <__udivsi3+0x32>
    39a4:	1212      	asrs	r2, r2, #8
    39a6:	0209      	lsls	r1, r1, #8
    39a8:	d065      	beq.n	3a76 <__udivsi3+0xfe>
    39aa:	0b03      	lsrs	r3, r0, #12
    39ac:	428b      	cmp	r3, r1
    39ae:	d319      	bcc.n	39e4 <__udivsi3+0x6c>
    39b0:	e000      	b.n	39b4 <__udivsi3+0x3c>
    39b2:	0a09      	lsrs	r1, r1, #8
    39b4:	0bc3      	lsrs	r3, r0, #15
    39b6:	428b      	cmp	r3, r1
    39b8:	d301      	bcc.n	39be <__udivsi3+0x46>
    39ba:	03cb      	lsls	r3, r1, #15
    39bc:	1ac0      	subs	r0, r0, r3
    39be:	4152      	adcs	r2, r2
    39c0:	0b83      	lsrs	r3, r0, #14
    39c2:	428b      	cmp	r3, r1
    39c4:	d301      	bcc.n	39ca <__udivsi3+0x52>
    39c6:	038b      	lsls	r3, r1, #14
    39c8:	1ac0      	subs	r0, r0, r3
    39ca:	4152      	adcs	r2, r2
    39cc:	0b43      	lsrs	r3, r0, #13
    39ce:	428b      	cmp	r3, r1
    39d0:	d301      	bcc.n	39d6 <__udivsi3+0x5e>
    39d2:	034b      	lsls	r3, r1, #13
    39d4:	1ac0      	subs	r0, r0, r3
    39d6:	4152      	adcs	r2, r2
    39d8:	0b03      	lsrs	r3, r0, #12
    39da:	428b      	cmp	r3, r1
    39dc:	d301      	bcc.n	39e2 <__udivsi3+0x6a>
    39de:	030b      	lsls	r3, r1, #12
    39e0:	1ac0      	subs	r0, r0, r3
    39e2:	4152      	adcs	r2, r2
    39e4:	0ac3      	lsrs	r3, r0, #11
    39e6:	428b      	cmp	r3, r1
    39e8:	d301      	bcc.n	39ee <__udivsi3+0x76>
    39ea:	02cb      	lsls	r3, r1, #11
    39ec:	1ac0      	subs	r0, r0, r3
    39ee:	4152      	adcs	r2, r2
    39f0:	0a83      	lsrs	r3, r0, #10
    39f2:	428b      	cmp	r3, r1
    39f4:	d301      	bcc.n	39fa <__udivsi3+0x82>
    39f6:	028b      	lsls	r3, r1, #10
    39f8:	1ac0      	subs	r0, r0, r3
    39fa:	4152      	adcs	r2, r2
    39fc:	0a43      	lsrs	r3, r0, #9
    39fe:	428b      	cmp	r3, r1
    3a00:	d301      	bcc.n	3a06 <__udivsi3+0x8e>
    3a02:	024b      	lsls	r3, r1, #9
    3a04:	1ac0      	subs	r0, r0, r3
    3a06:	4152      	adcs	r2, r2
    3a08:	0a03      	lsrs	r3, r0, #8
    3a0a:	428b      	cmp	r3, r1
    3a0c:	d301      	bcc.n	3a12 <__udivsi3+0x9a>
    3a0e:	020b      	lsls	r3, r1, #8
    3a10:	1ac0      	subs	r0, r0, r3
    3a12:	4152      	adcs	r2, r2
    3a14:	d2cd      	bcs.n	39b2 <__udivsi3+0x3a>
    3a16:	09c3      	lsrs	r3, r0, #7
    3a18:	428b      	cmp	r3, r1
    3a1a:	d301      	bcc.n	3a20 <__udivsi3+0xa8>
    3a1c:	01cb      	lsls	r3, r1, #7
    3a1e:	1ac0      	subs	r0, r0, r3
    3a20:	4152      	adcs	r2, r2
    3a22:	0983      	lsrs	r3, r0, #6
    3a24:	428b      	cmp	r3, r1
    3a26:	d301      	bcc.n	3a2c <__udivsi3+0xb4>
    3a28:	018b      	lsls	r3, r1, #6
    3a2a:	1ac0      	subs	r0, r0, r3
    3a2c:	4152      	adcs	r2, r2
    3a2e:	0943      	lsrs	r3, r0, #5
    3a30:	428b      	cmp	r3, r1
    3a32:	d301      	bcc.n	3a38 <__udivsi3+0xc0>
    3a34:	014b      	lsls	r3, r1, #5
    3a36:	1ac0      	subs	r0, r0, r3
    3a38:	4152      	adcs	r2, r2
    3a3a:	0903      	lsrs	r3, r0, #4
    3a3c:	428b      	cmp	r3, r1
    3a3e:	d301      	bcc.n	3a44 <__udivsi3+0xcc>
    3a40:	010b      	lsls	r3, r1, #4
    3a42:	1ac0      	subs	r0, r0, r3
    3a44:	4152      	adcs	r2, r2
    3a46:	08c3      	lsrs	r3, r0, #3
    3a48:	428b      	cmp	r3, r1
    3a4a:	d301      	bcc.n	3a50 <__udivsi3+0xd8>
    3a4c:	00cb      	lsls	r3, r1, #3
    3a4e:	1ac0      	subs	r0, r0, r3
    3a50:	4152      	adcs	r2, r2
    3a52:	0883      	lsrs	r3, r0, #2
    3a54:	428b      	cmp	r3, r1
    3a56:	d301      	bcc.n	3a5c <__udivsi3+0xe4>
    3a58:	008b      	lsls	r3, r1, #2
    3a5a:	1ac0      	subs	r0, r0, r3
    3a5c:	4152      	adcs	r2, r2
    3a5e:	0843      	lsrs	r3, r0, #1
    3a60:	428b      	cmp	r3, r1
    3a62:	d301      	bcc.n	3a68 <__udivsi3+0xf0>
    3a64:	004b      	lsls	r3, r1, #1
    3a66:	1ac0      	subs	r0, r0, r3
    3a68:	4152      	adcs	r2, r2
    3a6a:	1a41      	subs	r1, r0, r1
    3a6c:	d200      	bcs.n	3a70 <__udivsi3+0xf8>
    3a6e:	4601      	mov	r1, r0
    3a70:	4152      	adcs	r2, r2
    3a72:	4610      	mov	r0, r2
    3a74:	4770      	bx	lr
    3a76:	e7ff      	b.n	3a78 <__udivsi3+0x100>
    3a78:	b501      	push	{r0, lr}
    3a7a:	2000      	movs	r0, #0
    3a7c:	f000 f8f0 	bl	3c60 <__aeabi_idiv0>
    3a80:	bd02      	pop	{r1, pc}
    3a82:	46c0      	nop			; (mov r8, r8)

00003a84 <__aeabi_uidivmod>:
    3a84:	2900      	cmp	r1, #0
    3a86:	d0f7      	beq.n	3a78 <__udivsi3+0x100>
    3a88:	e776      	b.n	3978 <__udivsi3>
    3a8a:	4770      	bx	lr

00003a8c <__divsi3>:
    3a8c:	4603      	mov	r3, r0
    3a8e:	430b      	orrs	r3, r1
    3a90:	d47f      	bmi.n	3b92 <__divsi3+0x106>
    3a92:	2200      	movs	r2, #0
    3a94:	0843      	lsrs	r3, r0, #1
    3a96:	428b      	cmp	r3, r1
    3a98:	d374      	bcc.n	3b84 <__divsi3+0xf8>
    3a9a:	0903      	lsrs	r3, r0, #4
    3a9c:	428b      	cmp	r3, r1
    3a9e:	d35f      	bcc.n	3b60 <__divsi3+0xd4>
    3aa0:	0a03      	lsrs	r3, r0, #8
    3aa2:	428b      	cmp	r3, r1
    3aa4:	d344      	bcc.n	3b30 <__divsi3+0xa4>
    3aa6:	0b03      	lsrs	r3, r0, #12
    3aa8:	428b      	cmp	r3, r1
    3aaa:	d328      	bcc.n	3afe <__divsi3+0x72>
    3aac:	0c03      	lsrs	r3, r0, #16
    3aae:	428b      	cmp	r3, r1
    3ab0:	d30d      	bcc.n	3ace <__divsi3+0x42>
    3ab2:	22ff      	movs	r2, #255	; 0xff
    3ab4:	0209      	lsls	r1, r1, #8
    3ab6:	ba12      	rev	r2, r2
    3ab8:	0c03      	lsrs	r3, r0, #16
    3aba:	428b      	cmp	r3, r1
    3abc:	d302      	bcc.n	3ac4 <__divsi3+0x38>
    3abe:	1212      	asrs	r2, r2, #8
    3ac0:	0209      	lsls	r1, r1, #8
    3ac2:	d065      	beq.n	3b90 <__divsi3+0x104>
    3ac4:	0b03      	lsrs	r3, r0, #12
    3ac6:	428b      	cmp	r3, r1
    3ac8:	d319      	bcc.n	3afe <__divsi3+0x72>
    3aca:	e000      	b.n	3ace <__divsi3+0x42>
    3acc:	0a09      	lsrs	r1, r1, #8
    3ace:	0bc3      	lsrs	r3, r0, #15
    3ad0:	428b      	cmp	r3, r1
    3ad2:	d301      	bcc.n	3ad8 <__divsi3+0x4c>
    3ad4:	03cb      	lsls	r3, r1, #15
    3ad6:	1ac0      	subs	r0, r0, r3
    3ad8:	4152      	adcs	r2, r2
    3ada:	0b83      	lsrs	r3, r0, #14
    3adc:	428b      	cmp	r3, r1
    3ade:	d301      	bcc.n	3ae4 <__divsi3+0x58>
    3ae0:	038b      	lsls	r3, r1, #14
    3ae2:	1ac0      	subs	r0, r0, r3
    3ae4:	4152      	adcs	r2, r2
    3ae6:	0b43      	lsrs	r3, r0, #13
    3ae8:	428b      	cmp	r3, r1
    3aea:	d301      	bcc.n	3af0 <__divsi3+0x64>
    3aec:	034b      	lsls	r3, r1, #13
    3aee:	1ac0      	subs	r0, r0, r3
    3af0:	4152      	adcs	r2, r2
    3af2:	0b03      	lsrs	r3, r0, #12
    3af4:	428b      	cmp	r3, r1
    3af6:	d301      	bcc.n	3afc <__divsi3+0x70>
    3af8:	030b      	lsls	r3, r1, #12
    3afa:	1ac0      	subs	r0, r0, r3
    3afc:	4152      	adcs	r2, r2
    3afe:	0ac3      	lsrs	r3, r0, #11
    3b00:	428b      	cmp	r3, r1
    3b02:	d301      	bcc.n	3b08 <__divsi3+0x7c>
    3b04:	02cb      	lsls	r3, r1, #11
    3b06:	1ac0      	subs	r0, r0, r3
    3b08:	4152      	adcs	r2, r2
    3b0a:	0a83      	lsrs	r3, r0, #10
    3b0c:	428b      	cmp	r3, r1
    3b0e:	d301      	bcc.n	3b14 <__divsi3+0x88>
    3b10:	028b      	lsls	r3, r1, #10
    3b12:	1ac0      	subs	r0, r0, r3
    3b14:	4152      	adcs	r2, r2
    3b16:	0a43      	lsrs	r3, r0, #9
    3b18:	428b      	cmp	r3, r1
    3b1a:	d301      	bcc.n	3b20 <__divsi3+0x94>
    3b1c:	024b      	lsls	r3, r1, #9
    3b1e:	1ac0      	subs	r0, r0, r3
    3b20:	4152      	adcs	r2, r2
    3b22:	0a03      	lsrs	r3, r0, #8
    3b24:	428b      	cmp	r3, r1
    3b26:	d301      	bcc.n	3b2c <__divsi3+0xa0>
    3b28:	020b      	lsls	r3, r1, #8
    3b2a:	1ac0      	subs	r0, r0, r3
    3b2c:	4152      	adcs	r2, r2
    3b2e:	d2cd      	bcs.n	3acc <__divsi3+0x40>
    3b30:	09c3      	lsrs	r3, r0, #7
    3b32:	428b      	cmp	r3, r1
    3b34:	d301      	bcc.n	3b3a <__divsi3+0xae>
    3b36:	01cb      	lsls	r3, r1, #7
    3b38:	1ac0      	subs	r0, r0, r3
    3b3a:	4152      	adcs	r2, r2
    3b3c:	0983      	lsrs	r3, r0, #6
    3b3e:	428b      	cmp	r3, r1
    3b40:	d301      	bcc.n	3b46 <__divsi3+0xba>
    3b42:	018b      	lsls	r3, r1, #6
    3b44:	1ac0      	subs	r0, r0, r3
    3b46:	4152      	adcs	r2, r2
    3b48:	0943      	lsrs	r3, r0, #5
    3b4a:	428b      	cmp	r3, r1
    3b4c:	d301      	bcc.n	3b52 <__divsi3+0xc6>
    3b4e:	014b      	lsls	r3, r1, #5
    3b50:	1ac0      	subs	r0, r0, r3
    3b52:	4152      	adcs	r2, r2
    3b54:	0903      	lsrs	r3, r0, #4
    3b56:	428b      	cmp	r3, r1
    3b58:	d301      	bcc.n	3b5e <__divsi3+0xd2>
    3b5a:	010b      	lsls	r3, r1, #4
    3b5c:	1ac0      	subs	r0, r0, r3
    3b5e:	4152      	adcs	r2, r2
    3b60:	08c3      	lsrs	r3, r0, #3
    3b62:	428b      	cmp	r3, r1
    3b64:	d301      	bcc.n	3b6a <__divsi3+0xde>
    3b66:	00cb      	lsls	r3, r1, #3
    3b68:	1ac0      	subs	r0, r0, r3
    3b6a:	4152      	adcs	r2, r2
    3b6c:	0883      	lsrs	r3, r0, #2
    3b6e:	428b      	cmp	r3, r1
    3b70:	d301      	bcc.n	3b76 <__divsi3+0xea>
    3b72:	008b      	lsls	r3, r1, #2
    3b74:	1ac0      	subs	r0, r0, r3
    3b76:	4152      	adcs	r2, r2
    3b78:	0843      	lsrs	r3, r0, #1
    3b7a:	428b      	cmp	r3, r1
    3b7c:	d301      	bcc.n	3b82 <__divsi3+0xf6>
    3b7e:	004b      	lsls	r3, r1, #1
    3b80:	1ac0      	subs	r0, r0, r3
    3b82:	4152      	adcs	r2, r2
    3b84:	1a41      	subs	r1, r0, r1
    3b86:	d200      	bcs.n	3b8a <__divsi3+0xfe>
    3b88:	4601      	mov	r1, r0
    3b8a:	4152      	adcs	r2, r2
    3b8c:	4610      	mov	r0, r2
    3b8e:	4770      	bx	lr
    3b90:	e05d      	b.n	3c4e <__divsi3+0x1c2>
    3b92:	0fca      	lsrs	r2, r1, #31
    3b94:	d000      	beq.n	3b98 <__divsi3+0x10c>
    3b96:	4249      	negs	r1, r1
    3b98:	1003      	asrs	r3, r0, #32
    3b9a:	d300      	bcc.n	3b9e <__divsi3+0x112>
    3b9c:	4240      	negs	r0, r0
    3b9e:	4053      	eors	r3, r2
    3ba0:	2200      	movs	r2, #0
    3ba2:	469c      	mov	ip, r3
    3ba4:	0903      	lsrs	r3, r0, #4
    3ba6:	428b      	cmp	r3, r1
    3ba8:	d32d      	bcc.n	3c06 <__divsi3+0x17a>
    3baa:	0a03      	lsrs	r3, r0, #8
    3bac:	428b      	cmp	r3, r1
    3bae:	d312      	bcc.n	3bd6 <__divsi3+0x14a>
    3bb0:	22fc      	movs	r2, #252	; 0xfc
    3bb2:	0189      	lsls	r1, r1, #6
    3bb4:	ba12      	rev	r2, r2
    3bb6:	0a03      	lsrs	r3, r0, #8
    3bb8:	428b      	cmp	r3, r1
    3bba:	d30c      	bcc.n	3bd6 <__divsi3+0x14a>
    3bbc:	0189      	lsls	r1, r1, #6
    3bbe:	1192      	asrs	r2, r2, #6
    3bc0:	428b      	cmp	r3, r1
    3bc2:	d308      	bcc.n	3bd6 <__divsi3+0x14a>
    3bc4:	0189      	lsls	r1, r1, #6
    3bc6:	1192      	asrs	r2, r2, #6
    3bc8:	428b      	cmp	r3, r1
    3bca:	d304      	bcc.n	3bd6 <__divsi3+0x14a>
    3bcc:	0189      	lsls	r1, r1, #6
    3bce:	d03a      	beq.n	3c46 <__divsi3+0x1ba>
    3bd0:	1192      	asrs	r2, r2, #6
    3bd2:	e000      	b.n	3bd6 <__divsi3+0x14a>
    3bd4:	0989      	lsrs	r1, r1, #6
    3bd6:	09c3      	lsrs	r3, r0, #7
    3bd8:	428b      	cmp	r3, r1
    3bda:	d301      	bcc.n	3be0 <__divsi3+0x154>
    3bdc:	01cb      	lsls	r3, r1, #7
    3bde:	1ac0      	subs	r0, r0, r3
    3be0:	4152      	adcs	r2, r2
    3be2:	0983      	lsrs	r3, r0, #6
    3be4:	428b      	cmp	r3, r1
    3be6:	d301      	bcc.n	3bec <__divsi3+0x160>
    3be8:	018b      	lsls	r3, r1, #6
    3bea:	1ac0      	subs	r0, r0, r3
    3bec:	4152      	adcs	r2, r2
    3bee:	0943      	lsrs	r3, r0, #5
    3bf0:	428b      	cmp	r3, r1
    3bf2:	d301      	bcc.n	3bf8 <__divsi3+0x16c>
    3bf4:	014b      	lsls	r3, r1, #5
    3bf6:	1ac0      	subs	r0, r0, r3
    3bf8:	4152      	adcs	r2, r2
    3bfa:	0903      	lsrs	r3, r0, #4
    3bfc:	428b      	cmp	r3, r1
    3bfe:	d301      	bcc.n	3c04 <__divsi3+0x178>
    3c00:	010b      	lsls	r3, r1, #4
    3c02:	1ac0      	subs	r0, r0, r3
    3c04:	4152      	adcs	r2, r2
    3c06:	08c3      	lsrs	r3, r0, #3
    3c08:	428b      	cmp	r3, r1
    3c0a:	d301      	bcc.n	3c10 <__divsi3+0x184>
    3c0c:	00cb      	lsls	r3, r1, #3
    3c0e:	1ac0      	subs	r0, r0, r3
    3c10:	4152      	adcs	r2, r2
    3c12:	0883      	lsrs	r3, r0, #2
    3c14:	428b      	cmp	r3, r1
    3c16:	d301      	bcc.n	3c1c <__divsi3+0x190>
    3c18:	008b      	lsls	r3, r1, #2
    3c1a:	1ac0      	subs	r0, r0, r3
    3c1c:	4152      	adcs	r2, r2
    3c1e:	d2d9      	bcs.n	3bd4 <__divsi3+0x148>
    3c20:	0843      	lsrs	r3, r0, #1
    3c22:	428b      	cmp	r3, r1
    3c24:	d301      	bcc.n	3c2a <__divsi3+0x19e>
    3c26:	004b      	lsls	r3, r1, #1
    3c28:	1ac0      	subs	r0, r0, r3
    3c2a:	4152      	adcs	r2, r2
    3c2c:	1a41      	subs	r1, r0, r1
    3c2e:	d200      	bcs.n	3c32 <__divsi3+0x1a6>
    3c30:	4601      	mov	r1, r0
    3c32:	4663      	mov	r3, ip
    3c34:	4152      	adcs	r2, r2
    3c36:	105b      	asrs	r3, r3, #1
    3c38:	4610      	mov	r0, r2
    3c3a:	d301      	bcc.n	3c40 <__divsi3+0x1b4>
    3c3c:	4240      	negs	r0, r0
    3c3e:	2b00      	cmp	r3, #0
    3c40:	d500      	bpl.n	3c44 <__divsi3+0x1b8>
    3c42:	4249      	negs	r1, r1
    3c44:	4770      	bx	lr
    3c46:	4663      	mov	r3, ip
    3c48:	105b      	asrs	r3, r3, #1
    3c4a:	d300      	bcc.n	3c4e <__divsi3+0x1c2>
    3c4c:	4240      	negs	r0, r0
    3c4e:	b501      	push	{r0, lr}
    3c50:	2000      	movs	r0, #0
    3c52:	f000 f805 	bl	3c60 <__aeabi_idiv0>
    3c56:	bd02      	pop	{r1, pc}

00003c58 <__aeabi_idivmod>:
    3c58:	2900      	cmp	r1, #0
    3c5a:	d0f8      	beq.n	3c4e <__divsi3+0x1c2>
    3c5c:	e716      	b.n	3a8c <__divsi3>
    3c5e:	4770      	bx	lr

00003c60 <__aeabi_idiv0>:
    3c60:	4770      	bx	lr
    3c62:	46c0      	nop			; (mov r8, r8)

00003c64 <__aeabi_uldivmod>:
    3c64:	2b00      	cmp	r3, #0
    3c66:	d111      	bne.n	3c8c <__aeabi_uldivmod+0x28>
    3c68:	2a00      	cmp	r2, #0
    3c6a:	d10f      	bne.n	3c8c <__aeabi_uldivmod+0x28>
    3c6c:	2900      	cmp	r1, #0
    3c6e:	d100      	bne.n	3c72 <__aeabi_uldivmod+0xe>
    3c70:	2800      	cmp	r0, #0
    3c72:	d002      	beq.n	3c7a <__aeabi_uldivmod+0x16>
    3c74:	2100      	movs	r1, #0
    3c76:	43c9      	mvns	r1, r1
    3c78:	1c08      	adds	r0, r1, #0
    3c7a:	b407      	push	{r0, r1, r2}
    3c7c:	4802      	ldr	r0, [pc, #8]	; (3c88 <__aeabi_uldivmod+0x24>)
    3c7e:	a102      	add	r1, pc, #8	; (adr r1, 3c88 <__aeabi_uldivmod+0x24>)
    3c80:	1840      	adds	r0, r0, r1
    3c82:	9002      	str	r0, [sp, #8]
    3c84:	bd03      	pop	{r0, r1, pc}
    3c86:	46c0      	nop			; (mov r8, r8)
    3c88:	ffffffd9 	.word	0xffffffd9
    3c8c:	b403      	push	{r0, r1}
    3c8e:	4668      	mov	r0, sp
    3c90:	b501      	push	{r0, lr}
    3c92:	9802      	ldr	r0, [sp, #8]
    3c94:	f000 f830 	bl	3cf8 <__udivmoddi4>
    3c98:	9b01      	ldr	r3, [sp, #4]
    3c9a:	469e      	mov	lr, r3
    3c9c:	b002      	add	sp, #8
    3c9e:	bc0c      	pop	{r2, r3}
    3ca0:	4770      	bx	lr
    3ca2:	46c0      	nop			; (mov r8, r8)

00003ca4 <__aeabi_lmul>:
    3ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ca6:	46ce      	mov	lr, r9
    3ca8:	4647      	mov	r7, r8
    3caa:	0415      	lsls	r5, r2, #16
    3cac:	0c2d      	lsrs	r5, r5, #16
    3cae:	002e      	movs	r6, r5
    3cb0:	b580      	push	{r7, lr}
    3cb2:	0407      	lsls	r7, r0, #16
    3cb4:	0c14      	lsrs	r4, r2, #16
    3cb6:	0c3f      	lsrs	r7, r7, #16
    3cb8:	4699      	mov	r9, r3
    3cba:	0c03      	lsrs	r3, r0, #16
    3cbc:	437e      	muls	r6, r7
    3cbe:	435d      	muls	r5, r3
    3cc0:	4367      	muls	r7, r4
    3cc2:	4363      	muls	r3, r4
    3cc4:	197f      	adds	r7, r7, r5
    3cc6:	0c34      	lsrs	r4, r6, #16
    3cc8:	19e4      	adds	r4, r4, r7
    3cca:	469c      	mov	ip, r3
    3ccc:	42a5      	cmp	r5, r4
    3cce:	d903      	bls.n	3cd8 <__aeabi_lmul+0x34>
    3cd0:	2380      	movs	r3, #128	; 0x80
    3cd2:	025b      	lsls	r3, r3, #9
    3cd4:	4698      	mov	r8, r3
    3cd6:	44c4      	add	ip, r8
    3cd8:	464b      	mov	r3, r9
    3cda:	4351      	muls	r1, r2
    3cdc:	4343      	muls	r3, r0
    3cde:	0436      	lsls	r6, r6, #16
    3ce0:	0c36      	lsrs	r6, r6, #16
    3ce2:	0c25      	lsrs	r5, r4, #16
    3ce4:	0424      	lsls	r4, r4, #16
    3ce6:	4465      	add	r5, ip
    3ce8:	19a4      	adds	r4, r4, r6
    3cea:	1859      	adds	r1, r3, r1
    3cec:	1949      	adds	r1, r1, r5
    3cee:	0020      	movs	r0, r4
    3cf0:	bc0c      	pop	{r2, r3}
    3cf2:	4690      	mov	r8, r2
    3cf4:	4699      	mov	r9, r3
    3cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003cf8 <__udivmoddi4>:
    3cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cfa:	4657      	mov	r7, sl
    3cfc:	464e      	mov	r6, r9
    3cfe:	4645      	mov	r5, r8
    3d00:	46de      	mov	lr, fp
    3d02:	b5e0      	push	{r5, r6, r7, lr}
    3d04:	0004      	movs	r4, r0
    3d06:	b083      	sub	sp, #12
    3d08:	000d      	movs	r5, r1
    3d0a:	4692      	mov	sl, r2
    3d0c:	4699      	mov	r9, r3
    3d0e:	428b      	cmp	r3, r1
    3d10:	d82f      	bhi.n	3d72 <__udivmoddi4+0x7a>
    3d12:	d02c      	beq.n	3d6e <__udivmoddi4+0x76>
    3d14:	4649      	mov	r1, r9
    3d16:	4650      	mov	r0, sl
    3d18:	f001 fd12 	bl	5740 <__clzdi2>
    3d1c:	0029      	movs	r1, r5
    3d1e:	0006      	movs	r6, r0
    3d20:	0020      	movs	r0, r4
    3d22:	f001 fd0d 	bl	5740 <__clzdi2>
    3d26:	1a33      	subs	r3, r6, r0
    3d28:	4698      	mov	r8, r3
    3d2a:	3b20      	subs	r3, #32
    3d2c:	469b      	mov	fp, r3
    3d2e:	d500      	bpl.n	3d32 <__udivmoddi4+0x3a>
    3d30:	e074      	b.n	3e1c <__udivmoddi4+0x124>
    3d32:	4653      	mov	r3, sl
    3d34:	465a      	mov	r2, fp
    3d36:	4093      	lsls	r3, r2
    3d38:	001f      	movs	r7, r3
    3d3a:	4653      	mov	r3, sl
    3d3c:	4642      	mov	r2, r8
    3d3e:	4093      	lsls	r3, r2
    3d40:	001e      	movs	r6, r3
    3d42:	42af      	cmp	r7, r5
    3d44:	d829      	bhi.n	3d9a <__udivmoddi4+0xa2>
    3d46:	d026      	beq.n	3d96 <__udivmoddi4+0x9e>
    3d48:	465b      	mov	r3, fp
    3d4a:	1ba4      	subs	r4, r4, r6
    3d4c:	41bd      	sbcs	r5, r7
    3d4e:	2b00      	cmp	r3, #0
    3d50:	da00      	bge.n	3d54 <__udivmoddi4+0x5c>
    3d52:	e079      	b.n	3e48 <__udivmoddi4+0x150>
    3d54:	2200      	movs	r2, #0
    3d56:	2300      	movs	r3, #0
    3d58:	9200      	str	r2, [sp, #0]
    3d5a:	9301      	str	r3, [sp, #4]
    3d5c:	2301      	movs	r3, #1
    3d5e:	465a      	mov	r2, fp
    3d60:	4093      	lsls	r3, r2
    3d62:	9301      	str	r3, [sp, #4]
    3d64:	2301      	movs	r3, #1
    3d66:	4642      	mov	r2, r8
    3d68:	4093      	lsls	r3, r2
    3d6a:	9300      	str	r3, [sp, #0]
    3d6c:	e019      	b.n	3da2 <__udivmoddi4+0xaa>
    3d6e:	4282      	cmp	r2, r0
    3d70:	d9d0      	bls.n	3d14 <__udivmoddi4+0x1c>
    3d72:	2200      	movs	r2, #0
    3d74:	2300      	movs	r3, #0
    3d76:	9200      	str	r2, [sp, #0]
    3d78:	9301      	str	r3, [sp, #4]
    3d7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3d7c:	2b00      	cmp	r3, #0
    3d7e:	d001      	beq.n	3d84 <__udivmoddi4+0x8c>
    3d80:	601c      	str	r4, [r3, #0]
    3d82:	605d      	str	r5, [r3, #4]
    3d84:	9800      	ldr	r0, [sp, #0]
    3d86:	9901      	ldr	r1, [sp, #4]
    3d88:	b003      	add	sp, #12
    3d8a:	bc3c      	pop	{r2, r3, r4, r5}
    3d8c:	4690      	mov	r8, r2
    3d8e:	4699      	mov	r9, r3
    3d90:	46a2      	mov	sl, r4
    3d92:	46ab      	mov	fp, r5
    3d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d96:	42a3      	cmp	r3, r4
    3d98:	d9d6      	bls.n	3d48 <__udivmoddi4+0x50>
    3d9a:	2200      	movs	r2, #0
    3d9c:	2300      	movs	r3, #0
    3d9e:	9200      	str	r2, [sp, #0]
    3da0:	9301      	str	r3, [sp, #4]
    3da2:	4643      	mov	r3, r8
    3da4:	2b00      	cmp	r3, #0
    3da6:	d0e8      	beq.n	3d7a <__udivmoddi4+0x82>
    3da8:	07fb      	lsls	r3, r7, #31
    3daa:	0872      	lsrs	r2, r6, #1
    3dac:	431a      	orrs	r2, r3
    3dae:	4646      	mov	r6, r8
    3db0:	087b      	lsrs	r3, r7, #1
    3db2:	e00e      	b.n	3dd2 <__udivmoddi4+0xda>
    3db4:	42ab      	cmp	r3, r5
    3db6:	d101      	bne.n	3dbc <__udivmoddi4+0xc4>
    3db8:	42a2      	cmp	r2, r4
    3dba:	d80c      	bhi.n	3dd6 <__udivmoddi4+0xde>
    3dbc:	1aa4      	subs	r4, r4, r2
    3dbe:	419d      	sbcs	r5, r3
    3dc0:	2001      	movs	r0, #1
    3dc2:	1924      	adds	r4, r4, r4
    3dc4:	416d      	adcs	r5, r5
    3dc6:	2100      	movs	r1, #0
    3dc8:	3e01      	subs	r6, #1
    3dca:	1824      	adds	r4, r4, r0
    3dcc:	414d      	adcs	r5, r1
    3dce:	2e00      	cmp	r6, #0
    3dd0:	d006      	beq.n	3de0 <__udivmoddi4+0xe8>
    3dd2:	42ab      	cmp	r3, r5
    3dd4:	d9ee      	bls.n	3db4 <__udivmoddi4+0xbc>
    3dd6:	3e01      	subs	r6, #1
    3dd8:	1924      	adds	r4, r4, r4
    3dda:	416d      	adcs	r5, r5
    3ddc:	2e00      	cmp	r6, #0
    3dde:	d1f8      	bne.n	3dd2 <__udivmoddi4+0xda>
    3de0:	465b      	mov	r3, fp
    3de2:	9800      	ldr	r0, [sp, #0]
    3de4:	9901      	ldr	r1, [sp, #4]
    3de6:	1900      	adds	r0, r0, r4
    3de8:	4169      	adcs	r1, r5
    3dea:	2b00      	cmp	r3, #0
    3dec:	db22      	blt.n	3e34 <__udivmoddi4+0x13c>
    3dee:	002b      	movs	r3, r5
    3df0:	465a      	mov	r2, fp
    3df2:	40d3      	lsrs	r3, r2
    3df4:	002a      	movs	r2, r5
    3df6:	4644      	mov	r4, r8
    3df8:	40e2      	lsrs	r2, r4
    3dfa:	001c      	movs	r4, r3
    3dfc:	465b      	mov	r3, fp
    3dfe:	0015      	movs	r5, r2
    3e00:	2b00      	cmp	r3, #0
    3e02:	db2c      	blt.n	3e5e <__udivmoddi4+0x166>
    3e04:	0026      	movs	r6, r4
    3e06:	409e      	lsls	r6, r3
    3e08:	0033      	movs	r3, r6
    3e0a:	0026      	movs	r6, r4
    3e0c:	4647      	mov	r7, r8
    3e0e:	40be      	lsls	r6, r7
    3e10:	0032      	movs	r2, r6
    3e12:	1a80      	subs	r0, r0, r2
    3e14:	4199      	sbcs	r1, r3
    3e16:	9000      	str	r0, [sp, #0]
    3e18:	9101      	str	r1, [sp, #4]
    3e1a:	e7ae      	b.n	3d7a <__udivmoddi4+0x82>
    3e1c:	4642      	mov	r2, r8
    3e1e:	2320      	movs	r3, #32
    3e20:	1a9b      	subs	r3, r3, r2
    3e22:	4652      	mov	r2, sl
    3e24:	40da      	lsrs	r2, r3
    3e26:	4641      	mov	r1, r8
    3e28:	0013      	movs	r3, r2
    3e2a:	464a      	mov	r2, r9
    3e2c:	408a      	lsls	r2, r1
    3e2e:	0017      	movs	r7, r2
    3e30:	431f      	orrs	r7, r3
    3e32:	e782      	b.n	3d3a <__udivmoddi4+0x42>
    3e34:	4642      	mov	r2, r8
    3e36:	2320      	movs	r3, #32
    3e38:	1a9b      	subs	r3, r3, r2
    3e3a:	002a      	movs	r2, r5
    3e3c:	4646      	mov	r6, r8
    3e3e:	409a      	lsls	r2, r3
    3e40:	0023      	movs	r3, r4
    3e42:	40f3      	lsrs	r3, r6
    3e44:	4313      	orrs	r3, r2
    3e46:	e7d5      	b.n	3df4 <__udivmoddi4+0xfc>
    3e48:	4642      	mov	r2, r8
    3e4a:	2320      	movs	r3, #32
    3e4c:	2100      	movs	r1, #0
    3e4e:	1a9b      	subs	r3, r3, r2
    3e50:	2200      	movs	r2, #0
    3e52:	9100      	str	r1, [sp, #0]
    3e54:	9201      	str	r2, [sp, #4]
    3e56:	2201      	movs	r2, #1
    3e58:	40da      	lsrs	r2, r3
    3e5a:	9201      	str	r2, [sp, #4]
    3e5c:	e782      	b.n	3d64 <__udivmoddi4+0x6c>
    3e5e:	4642      	mov	r2, r8
    3e60:	2320      	movs	r3, #32
    3e62:	0026      	movs	r6, r4
    3e64:	1a9b      	subs	r3, r3, r2
    3e66:	40de      	lsrs	r6, r3
    3e68:	002f      	movs	r7, r5
    3e6a:	46b4      	mov	ip, r6
    3e6c:	4097      	lsls	r7, r2
    3e6e:	4666      	mov	r6, ip
    3e70:	003b      	movs	r3, r7
    3e72:	4333      	orrs	r3, r6
    3e74:	e7c9      	b.n	3e0a <__udivmoddi4+0x112>
    3e76:	46c0      	nop			; (mov r8, r8)

00003e78 <__aeabi_dadd>:
    3e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e7a:	4645      	mov	r5, r8
    3e7c:	46de      	mov	lr, fp
    3e7e:	4657      	mov	r7, sl
    3e80:	464e      	mov	r6, r9
    3e82:	030c      	lsls	r4, r1, #12
    3e84:	b5e0      	push	{r5, r6, r7, lr}
    3e86:	004e      	lsls	r6, r1, #1
    3e88:	0fc9      	lsrs	r1, r1, #31
    3e8a:	4688      	mov	r8, r1
    3e8c:	000d      	movs	r5, r1
    3e8e:	0a61      	lsrs	r1, r4, #9
    3e90:	0f44      	lsrs	r4, r0, #29
    3e92:	430c      	orrs	r4, r1
    3e94:	00c7      	lsls	r7, r0, #3
    3e96:	0319      	lsls	r1, r3, #12
    3e98:	0058      	lsls	r0, r3, #1
    3e9a:	0fdb      	lsrs	r3, r3, #31
    3e9c:	469b      	mov	fp, r3
    3e9e:	0a4b      	lsrs	r3, r1, #9
    3ea0:	0f51      	lsrs	r1, r2, #29
    3ea2:	430b      	orrs	r3, r1
    3ea4:	0d76      	lsrs	r6, r6, #21
    3ea6:	0d40      	lsrs	r0, r0, #21
    3ea8:	0019      	movs	r1, r3
    3eaa:	00d2      	lsls	r2, r2, #3
    3eac:	45d8      	cmp	r8, fp
    3eae:	d100      	bne.n	3eb2 <__aeabi_dadd+0x3a>
    3eb0:	e0ae      	b.n	4010 <__aeabi_dadd+0x198>
    3eb2:	1a35      	subs	r5, r6, r0
    3eb4:	2d00      	cmp	r5, #0
    3eb6:	dc00      	bgt.n	3eba <__aeabi_dadd+0x42>
    3eb8:	e0f6      	b.n	40a8 <__aeabi_dadd+0x230>
    3eba:	2800      	cmp	r0, #0
    3ebc:	d10f      	bne.n	3ede <__aeabi_dadd+0x66>
    3ebe:	4313      	orrs	r3, r2
    3ec0:	d100      	bne.n	3ec4 <__aeabi_dadd+0x4c>
    3ec2:	e0db      	b.n	407c <__aeabi_dadd+0x204>
    3ec4:	1e6b      	subs	r3, r5, #1
    3ec6:	2b00      	cmp	r3, #0
    3ec8:	d000      	beq.n	3ecc <__aeabi_dadd+0x54>
    3eca:	e137      	b.n	413c <__aeabi_dadd+0x2c4>
    3ecc:	1aba      	subs	r2, r7, r2
    3ece:	4297      	cmp	r7, r2
    3ed0:	41bf      	sbcs	r7, r7
    3ed2:	1a64      	subs	r4, r4, r1
    3ed4:	427f      	negs	r7, r7
    3ed6:	1be4      	subs	r4, r4, r7
    3ed8:	2601      	movs	r6, #1
    3eda:	0017      	movs	r7, r2
    3edc:	e024      	b.n	3f28 <__aeabi_dadd+0xb0>
    3ede:	4bc6      	ldr	r3, [pc, #792]	; (41f8 <__aeabi_dadd+0x380>)
    3ee0:	429e      	cmp	r6, r3
    3ee2:	d04d      	beq.n	3f80 <__aeabi_dadd+0x108>
    3ee4:	2380      	movs	r3, #128	; 0x80
    3ee6:	041b      	lsls	r3, r3, #16
    3ee8:	4319      	orrs	r1, r3
    3eea:	2d38      	cmp	r5, #56	; 0x38
    3eec:	dd00      	ble.n	3ef0 <__aeabi_dadd+0x78>
    3eee:	e107      	b.n	4100 <__aeabi_dadd+0x288>
    3ef0:	2d1f      	cmp	r5, #31
    3ef2:	dd00      	ble.n	3ef6 <__aeabi_dadd+0x7e>
    3ef4:	e138      	b.n	4168 <__aeabi_dadd+0x2f0>
    3ef6:	2020      	movs	r0, #32
    3ef8:	1b43      	subs	r3, r0, r5
    3efa:	469a      	mov	sl, r3
    3efc:	000b      	movs	r3, r1
    3efe:	4650      	mov	r0, sl
    3f00:	4083      	lsls	r3, r0
    3f02:	4699      	mov	r9, r3
    3f04:	0013      	movs	r3, r2
    3f06:	4648      	mov	r0, r9
    3f08:	40eb      	lsrs	r3, r5
    3f0a:	4318      	orrs	r0, r3
    3f0c:	0003      	movs	r3, r0
    3f0e:	4650      	mov	r0, sl
    3f10:	4082      	lsls	r2, r0
    3f12:	1e50      	subs	r0, r2, #1
    3f14:	4182      	sbcs	r2, r0
    3f16:	40e9      	lsrs	r1, r5
    3f18:	431a      	orrs	r2, r3
    3f1a:	1aba      	subs	r2, r7, r2
    3f1c:	1a61      	subs	r1, r4, r1
    3f1e:	4297      	cmp	r7, r2
    3f20:	41a4      	sbcs	r4, r4
    3f22:	0017      	movs	r7, r2
    3f24:	4264      	negs	r4, r4
    3f26:	1b0c      	subs	r4, r1, r4
    3f28:	0223      	lsls	r3, r4, #8
    3f2a:	d562      	bpl.n	3ff2 <__aeabi_dadd+0x17a>
    3f2c:	0264      	lsls	r4, r4, #9
    3f2e:	0a65      	lsrs	r5, r4, #9
    3f30:	2d00      	cmp	r5, #0
    3f32:	d100      	bne.n	3f36 <__aeabi_dadd+0xbe>
    3f34:	e0df      	b.n	40f6 <__aeabi_dadd+0x27e>
    3f36:	0028      	movs	r0, r5
    3f38:	f001 fbe4 	bl	5704 <__clzsi2>
    3f3c:	0003      	movs	r3, r0
    3f3e:	3b08      	subs	r3, #8
    3f40:	2b1f      	cmp	r3, #31
    3f42:	dd00      	ble.n	3f46 <__aeabi_dadd+0xce>
    3f44:	e0d2      	b.n	40ec <__aeabi_dadd+0x274>
    3f46:	2220      	movs	r2, #32
    3f48:	003c      	movs	r4, r7
    3f4a:	1ad2      	subs	r2, r2, r3
    3f4c:	409d      	lsls	r5, r3
    3f4e:	40d4      	lsrs	r4, r2
    3f50:	409f      	lsls	r7, r3
    3f52:	4325      	orrs	r5, r4
    3f54:	429e      	cmp	r6, r3
    3f56:	dd00      	ble.n	3f5a <__aeabi_dadd+0xe2>
    3f58:	e0c4      	b.n	40e4 <__aeabi_dadd+0x26c>
    3f5a:	1b9e      	subs	r6, r3, r6
    3f5c:	1c73      	adds	r3, r6, #1
    3f5e:	2b1f      	cmp	r3, #31
    3f60:	dd00      	ble.n	3f64 <__aeabi_dadd+0xec>
    3f62:	e0f1      	b.n	4148 <__aeabi_dadd+0x2d0>
    3f64:	2220      	movs	r2, #32
    3f66:	0038      	movs	r0, r7
    3f68:	0029      	movs	r1, r5
    3f6a:	1ad2      	subs	r2, r2, r3
    3f6c:	40d8      	lsrs	r0, r3
    3f6e:	4091      	lsls	r1, r2
    3f70:	4097      	lsls	r7, r2
    3f72:	002c      	movs	r4, r5
    3f74:	4301      	orrs	r1, r0
    3f76:	1e78      	subs	r0, r7, #1
    3f78:	4187      	sbcs	r7, r0
    3f7a:	40dc      	lsrs	r4, r3
    3f7c:	2600      	movs	r6, #0
    3f7e:	430f      	orrs	r7, r1
    3f80:	077b      	lsls	r3, r7, #29
    3f82:	d009      	beq.n	3f98 <__aeabi_dadd+0x120>
    3f84:	230f      	movs	r3, #15
    3f86:	403b      	ands	r3, r7
    3f88:	2b04      	cmp	r3, #4
    3f8a:	d005      	beq.n	3f98 <__aeabi_dadd+0x120>
    3f8c:	1d3b      	adds	r3, r7, #4
    3f8e:	42bb      	cmp	r3, r7
    3f90:	41bf      	sbcs	r7, r7
    3f92:	427f      	negs	r7, r7
    3f94:	19e4      	adds	r4, r4, r7
    3f96:	001f      	movs	r7, r3
    3f98:	0223      	lsls	r3, r4, #8
    3f9a:	d52c      	bpl.n	3ff6 <__aeabi_dadd+0x17e>
    3f9c:	4b96      	ldr	r3, [pc, #600]	; (41f8 <__aeabi_dadd+0x380>)
    3f9e:	3601      	adds	r6, #1
    3fa0:	429e      	cmp	r6, r3
    3fa2:	d100      	bne.n	3fa6 <__aeabi_dadd+0x12e>
    3fa4:	e09a      	b.n	40dc <__aeabi_dadd+0x264>
    3fa6:	4645      	mov	r5, r8
    3fa8:	4b94      	ldr	r3, [pc, #592]	; (41fc <__aeabi_dadd+0x384>)
    3faa:	08ff      	lsrs	r7, r7, #3
    3fac:	401c      	ands	r4, r3
    3fae:	0760      	lsls	r0, r4, #29
    3fb0:	0576      	lsls	r6, r6, #21
    3fb2:	0264      	lsls	r4, r4, #9
    3fb4:	4307      	orrs	r7, r0
    3fb6:	0b24      	lsrs	r4, r4, #12
    3fb8:	0d76      	lsrs	r6, r6, #21
    3fba:	2100      	movs	r1, #0
    3fbc:	0324      	lsls	r4, r4, #12
    3fbe:	0b23      	lsrs	r3, r4, #12
    3fc0:	0d0c      	lsrs	r4, r1, #20
    3fc2:	4a8f      	ldr	r2, [pc, #572]	; (4200 <__aeabi_dadd+0x388>)
    3fc4:	0524      	lsls	r4, r4, #20
    3fc6:	431c      	orrs	r4, r3
    3fc8:	4014      	ands	r4, r2
    3fca:	0533      	lsls	r3, r6, #20
    3fcc:	4323      	orrs	r3, r4
    3fce:	005b      	lsls	r3, r3, #1
    3fd0:	07ed      	lsls	r5, r5, #31
    3fd2:	085b      	lsrs	r3, r3, #1
    3fd4:	432b      	orrs	r3, r5
    3fd6:	0038      	movs	r0, r7
    3fd8:	0019      	movs	r1, r3
    3fda:	bc3c      	pop	{r2, r3, r4, r5}
    3fdc:	4690      	mov	r8, r2
    3fde:	4699      	mov	r9, r3
    3fe0:	46a2      	mov	sl, r4
    3fe2:	46ab      	mov	fp, r5
    3fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3fe6:	4664      	mov	r4, ip
    3fe8:	4304      	orrs	r4, r0
    3fea:	d100      	bne.n	3fee <__aeabi_dadd+0x176>
    3fec:	e211      	b.n	4412 <__aeabi_dadd+0x59a>
    3fee:	0004      	movs	r4, r0
    3ff0:	4667      	mov	r7, ip
    3ff2:	077b      	lsls	r3, r7, #29
    3ff4:	d1c6      	bne.n	3f84 <__aeabi_dadd+0x10c>
    3ff6:	4645      	mov	r5, r8
    3ff8:	0760      	lsls	r0, r4, #29
    3ffa:	08ff      	lsrs	r7, r7, #3
    3ffc:	4307      	orrs	r7, r0
    3ffe:	08e4      	lsrs	r4, r4, #3
    4000:	4b7d      	ldr	r3, [pc, #500]	; (41f8 <__aeabi_dadd+0x380>)
    4002:	429e      	cmp	r6, r3
    4004:	d030      	beq.n	4068 <__aeabi_dadd+0x1f0>
    4006:	0324      	lsls	r4, r4, #12
    4008:	0576      	lsls	r6, r6, #21
    400a:	0b24      	lsrs	r4, r4, #12
    400c:	0d76      	lsrs	r6, r6, #21
    400e:	e7d4      	b.n	3fba <__aeabi_dadd+0x142>
    4010:	1a33      	subs	r3, r6, r0
    4012:	469a      	mov	sl, r3
    4014:	2b00      	cmp	r3, #0
    4016:	dd78      	ble.n	410a <__aeabi_dadd+0x292>
    4018:	2800      	cmp	r0, #0
    401a:	d031      	beq.n	4080 <__aeabi_dadd+0x208>
    401c:	4876      	ldr	r0, [pc, #472]	; (41f8 <__aeabi_dadd+0x380>)
    401e:	4286      	cmp	r6, r0
    4020:	d0ae      	beq.n	3f80 <__aeabi_dadd+0x108>
    4022:	2080      	movs	r0, #128	; 0x80
    4024:	0400      	lsls	r0, r0, #16
    4026:	4301      	orrs	r1, r0
    4028:	4653      	mov	r3, sl
    402a:	2b38      	cmp	r3, #56	; 0x38
    402c:	dc00      	bgt.n	4030 <__aeabi_dadd+0x1b8>
    402e:	e0e9      	b.n	4204 <__aeabi_dadd+0x38c>
    4030:	430a      	orrs	r2, r1
    4032:	1e51      	subs	r1, r2, #1
    4034:	418a      	sbcs	r2, r1
    4036:	2100      	movs	r1, #0
    4038:	19d2      	adds	r2, r2, r7
    403a:	42ba      	cmp	r2, r7
    403c:	41bf      	sbcs	r7, r7
    403e:	1909      	adds	r1, r1, r4
    4040:	427c      	negs	r4, r7
    4042:	0017      	movs	r7, r2
    4044:	190c      	adds	r4, r1, r4
    4046:	0223      	lsls	r3, r4, #8
    4048:	d5d3      	bpl.n	3ff2 <__aeabi_dadd+0x17a>
    404a:	4b6b      	ldr	r3, [pc, #428]	; (41f8 <__aeabi_dadd+0x380>)
    404c:	3601      	adds	r6, #1
    404e:	429e      	cmp	r6, r3
    4050:	d100      	bne.n	4054 <__aeabi_dadd+0x1dc>
    4052:	e13a      	b.n	42ca <__aeabi_dadd+0x452>
    4054:	2001      	movs	r0, #1
    4056:	4b69      	ldr	r3, [pc, #420]	; (41fc <__aeabi_dadd+0x384>)
    4058:	401c      	ands	r4, r3
    405a:	087b      	lsrs	r3, r7, #1
    405c:	4007      	ands	r7, r0
    405e:	431f      	orrs	r7, r3
    4060:	07e0      	lsls	r0, r4, #31
    4062:	4307      	orrs	r7, r0
    4064:	0864      	lsrs	r4, r4, #1
    4066:	e78b      	b.n	3f80 <__aeabi_dadd+0x108>
    4068:	0023      	movs	r3, r4
    406a:	433b      	orrs	r3, r7
    406c:	d100      	bne.n	4070 <__aeabi_dadd+0x1f8>
    406e:	e1cb      	b.n	4408 <__aeabi_dadd+0x590>
    4070:	2280      	movs	r2, #128	; 0x80
    4072:	0312      	lsls	r2, r2, #12
    4074:	4314      	orrs	r4, r2
    4076:	0324      	lsls	r4, r4, #12
    4078:	0b24      	lsrs	r4, r4, #12
    407a:	e79e      	b.n	3fba <__aeabi_dadd+0x142>
    407c:	002e      	movs	r6, r5
    407e:	e77f      	b.n	3f80 <__aeabi_dadd+0x108>
    4080:	0008      	movs	r0, r1
    4082:	4310      	orrs	r0, r2
    4084:	d100      	bne.n	4088 <__aeabi_dadd+0x210>
    4086:	e0b4      	b.n	41f2 <__aeabi_dadd+0x37a>
    4088:	1e58      	subs	r0, r3, #1
    408a:	2800      	cmp	r0, #0
    408c:	d000      	beq.n	4090 <__aeabi_dadd+0x218>
    408e:	e0de      	b.n	424e <__aeabi_dadd+0x3d6>
    4090:	18ba      	adds	r2, r7, r2
    4092:	42ba      	cmp	r2, r7
    4094:	419b      	sbcs	r3, r3
    4096:	1864      	adds	r4, r4, r1
    4098:	425b      	negs	r3, r3
    409a:	18e4      	adds	r4, r4, r3
    409c:	0017      	movs	r7, r2
    409e:	2601      	movs	r6, #1
    40a0:	0223      	lsls	r3, r4, #8
    40a2:	d5a6      	bpl.n	3ff2 <__aeabi_dadd+0x17a>
    40a4:	2602      	movs	r6, #2
    40a6:	e7d5      	b.n	4054 <__aeabi_dadd+0x1dc>
    40a8:	2d00      	cmp	r5, #0
    40aa:	d16e      	bne.n	418a <__aeabi_dadd+0x312>
    40ac:	1c70      	adds	r0, r6, #1
    40ae:	0540      	lsls	r0, r0, #21
    40b0:	0d40      	lsrs	r0, r0, #21
    40b2:	2801      	cmp	r0, #1
    40b4:	dc00      	bgt.n	40b8 <__aeabi_dadd+0x240>
    40b6:	e0f9      	b.n	42ac <__aeabi_dadd+0x434>
    40b8:	1ab8      	subs	r0, r7, r2
    40ba:	4684      	mov	ip, r0
    40bc:	4287      	cmp	r7, r0
    40be:	4180      	sbcs	r0, r0
    40c0:	1ae5      	subs	r5, r4, r3
    40c2:	4240      	negs	r0, r0
    40c4:	1a2d      	subs	r5, r5, r0
    40c6:	0228      	lsls	r0, r5, #8
    40c8:	d400      	bmi.n	40cc <__aeabi_dadd+0x254>
    40ca:	e089      	b.n	41e0 <__aeabi_dadd+0x368>
    40cc:	1bd7      	subs	r7, r2, r7
    40ce:	42ba      	cmp	r2, r7
    40d0:	4192      	sbcs	r2, r2
    40d2:	1b1c      	subs	r4, r3, r4
    40d4:	4252      	negs	r2, r2
    40d6:	1aa5      	subs	r5, r4, r2
    40d8:	46d8      	mov	r8, fp
    40da:	e729      	b.n	3f30 <__aeabi_dadd+0xb8>
    40dc:	4645      	mov	r5, r8
    40de:	2400      	movs	r4, #0
    40e0:	2700      	movs	r7, #0
    40e2:	e76a      	b.n	3fba <__aeabi_dadd+0x142>
    40e4:	4c45      	ldr	r4, [pc, #276]	; (41fc <__aeabi_dadd+0x384>)
    40e6:	1af6      	subs	r6, r6, r3
    40e8:	402c      	ands	r4, r5
    40ea:	e749      	b.n	3f80 <__aeabi_dadd+0x108>
    40ec:	003d      	movs	r5, r7
    40ee:	3828      	subs	r0, #40	; 0x28
    40f0:	4085      	lsls	r5, r0
    40f2:	2700      	movs	r7, #0
    40f4:	e72e      	b.n	3f54 <__aeabi_dadd+0xdc>
    40f6:	0038      	movs	r0, r7
    40f8:	f001 fb04 	bl	5704 <__clzsi2>
    40fc:	3020      	adds	r0, #32
    40fe:	e71d      	b.n	3f3c <__aeabi_dadd+0xc4>
    4100:	430a      	orrs	r2, r1
    4102:	1e51      	subs	r1, r2, #1
    4104:	418a      	sbcs	r2, r1
    4106:	2100      	movs	r1, #0
    4108:	e707      	b.n	3f1a <__aeabi_dadd+0xa2>
    410a:	2b00      	cmp	r3, #0
    410c:	d000      	beq.n	4110 <__aeabi_dadd+0x298>
    410e:	e0f3      	b.n	42f8 <__aeabi_dadd+0x480>
    4110:	1c70      	adds	r0, r6, #1
    4112:	0543      	lsls	r3, r0, #21
    4114:	0d5b      	lsrs	r3, r3, #21
    4116:	2b01      	cmp	r3, #1
    4118:	dc00      	bgt.n	411c <__aeabi_dadd+0x2a4>
    411a:	e0ad      	b.n	4278 <__aeabi_dadd+0x400>
    411c:	4b36      	ldr	r3, [pc, #216]	; (41f8 <__aeabi_dadd+0x380>)
    411e:	4298      	cmp	r0, r3
    4120:	d100      	bne.n	4124 <__aeabi_dadd+0x2ac>
    4122:	e0d1      	b.n	42c8 <__aeabi_dadd+0x450>
    4124:	18ba      	adds	r2, r7, r2
    4126:	42ba      	cmp	r2, r7
    4128:	41bf      	sbcs	r7, r7
    412a:	1864      	adds	r4, r4, r1
    412c:	427f      	negs	r7, r7
    412e:	19e4      	adds	r4, r4, r7
    4130:	07e7      	lsls	r7, r4, #31
    4132:	0852      	lsrs	r2, r2, #1
    4134:	4317      	orrs	r7, r2
    4136:	0864      	lsrs	r4, r4, #1
    4138:	0006      	movs	r6, r0
    413a:	e721      	b.n	3f80 <__aeabi_dadd+0x108>
    413c:	482e      	ldr	r0, [pc, #184]	; (41f8 <__aeabi_dadd+0x380>)
    413e:	4285      	cmp	r5, r0
    4140:	d100      	bne.n	4144 <__aeabi_dadd+0x2cc>
    4142:	e093      	b.n	426c <__aeabi_dadd+0x3f4>
    4144:	001d      	movs	r5, r3
    4146:	e6d0      	b.n	3eea <__aeabi_dadd+0x72>
    4148:	0029      	movs	r1, r5
    414a:	3e1f      	subs	r6, #31
    414c:	40f1      	lsrs	r1, r6
    414e:	2b20      	cmp	r3, #32
    4150:	d100      	bne.n	4154 <__aeabi_dadd+0x2dc>
    4152:	e08d      	b.n	4270 <__aeabi_dadd+0x3f8>
    4154:	2240      	movs	r2, #64	; 0x40
    4156:	1ad3      	subs	r3, r2, r3
    4158:	409d      	lsls	r5, r3
    415a:	432f      	orrs	r7, r5
    415c:	1e7d      	subs	r5, r7, #1
    415e:	41af      	sbcs	r7, r5
    4160:	2400      	movs	r4, #0
    4162:	430f      	orrs	r7, r1
    4164:	2600      	movs	r6, #0
    4166:	e744      	b.n	3ff2 <__aeabi_dadd+0x17a>
    4168:	002b      	movs	r3, r5
    416a:	0008      	movs	r0, r1
    416c:	3b20      	subs	r3, #32
    416e:	40d8      	lsrs	r0, r3
    4170:	0003      	movs	r3, r0
    4172:	2d20      	cmp	r5, #32
    4174:	d100      	bne.n	4178 <__aeabi_dadd+0x300>
    4176:	e07d      	b.n	4274 <__aeabi_dadd+0x3fc>
    4178:	2040      	movs	r0, #64	; 0x40
    417a:	1b45      	subs	r5, r0, r5
    417c:	40a9      	lsls	r1, r5
    417e:	430a      	orrs	r2, r1
    4180:	1e51      	subs	r1, r2, #1
    4182:	418a      	sbcs	r2, r1
    4184:	2100      	movs	r1, #0
    4186:	431a      	orrs	r2, r3
    4188:	e6c7      	b.n	3f1a <__aeabi_dadd+0xa2>
    418a:	2e00      	cmp	r6, #0
    418c:	d050      	beq.n	4230 <__aeabi_dadd+0x3b8>
    418e:	4e1a      	ldr	r6, [pc, #104]	; (41f8 <__aeabi_dadd+0x380>)
    4190:	42b0      	cmp	r0, r6
    4192:	d057      	beq.n	4244 <__aeabi_dadd+0x3cc>
    4194:	2680      	movs	r6, #128	; 0x80
    4196:	426b      	negs	r3, r5
    4198:	4699      	mov	r9, r3
    419a:	0436      	lsls	r6, r6, #16
    419c:	4334      	orrs	r4, r6
    419e:	464b      	mov	r3, r9
    41a0:	2b38      	cmp	r3, #56	; 0x38
    41a2:	dd00      	ble.n	41a6 <__aeabi_dadd+0x32e>
    41a4:	e0d6      	b.n	4354 <__aeabi_dadd+0x4dc>
    41a6:	2b1f      	cmp	r3, #31
    41a8:	dd00      	ble.n	41ac <__aeabi_dadd+0x334>
    41aa:	e135      	b.n	4418 <__aeabi_dadd+0x5a0>
    41ac:	2620      	movs	r6, #32
    41ae:	1af5      	subs	r5, r6, r3
    41b0:	0026      	movs	r6, r4
    41b2:	40ae      	lsls	r6, r5
    41b4:	46b2      	mov	sl, r6
    41b6:	003e      	movs	r6, r7
    41b8:	40de      	lsrs	r6, r3
    41ba:	46ac      	mov	ip, r5
    41bc:	0035      	movs	r5, r6
    41be:	4656      	mov	r6, sl
    41c0:	432e      	orrs	r6, r5
    41c2:	4665      	mov	r5, ip
    41c4:	40af      	lsls	r7, r5
    41c6:	1e7d      	subs	r5, r7, #1
    41c8:	41af      	sbcs	r7, r5
    41ca:	40dc      	lsrs	r4, r3
    41cc:	4337      	orrs	r7, r6
    41ce:	1bd7      	subs	r7, r2, r7
    41d0:	42ba      	cmp	r2, r7
    41d2:	4192      	sbcs	r2, r2
    41d4:	1b0c      	subs	r4, r1, r4
    41d6:	4252      	negs	r2, r2
    41d8:	1aa4      	subs	r4, r4, r2
    41da:	0006      	movs	r6, r0
    41dc:	46d8      	mov	r8, fp
    41de:	e6a3      	b.n	3f28 <__aeabi_dadd+0xb0>
    41e0:	4664      	mov	r4, ip
    41e2:	4667      	mov	r7, ip
    41e4:	432c      	orrs	r4, r5
    41e6:	d000      	beq.n	41ea <__aeabi_dadd+0x372>
    41e8:	e6a2      	b.n	3f30 <__aeabi_dadd+0xb8>
    41ea:	2500      	movs	r5, #0
    41ec:	2600      	movs	r6, #0
    41ee:	2700      	movs	r7, #0
    41f0:	e706      	b.n	4000 <__aeabi_dadd+0x188>
    41f2:	001e      	movs	r6, r3
    41f4:	e6c4      	b.n	3f80 <__aeabi_dadd+0x108>
    41f6:	46c0      	nop			; (mov r8, r8)
    41f8:	000007ff 	.word	0x000007ff
    41fc:	ff7fffff 	.word	0xff7fffff
    4200:	800fffff 	.word	0x800fffff
    4204:	2b1f      	cmp	r3, #31
    4206:	dc63      	bgt.n	42d0 <__aeabi_dadd+0x458>
    4208:	2020      	movs	r0, #32
    420a:	1ac3      	subs	r3, r0, r3
    420c:	0008      	movs	r0, r1
    420e:	4098      	lsls	r0, r3
    4210:	469c      	mov	ip, r3
    4212:	4683      	mov	fp, r0
    4214:	4653      	mov	r3, sl
    4216:	0010      	movs	r0, r2
    4218:	40d8      	lsrs	r0, r3
    421a:	0003      	movs	r3, r0
    421c:	4658      	mov	r0, fp
    421e:	4318      	orrs	r0, r3
    4220:	4663      	mov	r3, ip
    4222:	409a      	lsls	r2, r3
    4224:	1e53      	subs	r3, r2, #1
    4226:	419a      	sbcs	r2, r3
    4228:	4653      	mov	r3, sl
    422a:	4302      	orrs	r2, r0
    422c:	40d9      	lsrs	r1, r3
    422e:	e703      	b.n	4038 <__aeabi_dadd+0x1c0>
    4230:	0026      	movs	r6, r4
    4232:	433e      	orrs	r6, r7
    4234:	d006      	beq.n	4244 <__aeabi_dadd+0x3cc>
    4236:	43eb      	mvns	r3, r5
    4238:	4699      	mov	r9, r3
    423a:	2b00      	cmp	r3, #0
    423c:	d0c7      	beq.n	41ce <__aeabi_dadd+0x356>
    423e:	4e94      	ldr	r6, [pc, #592]	; (4490 <__aeabi_dadd+0x618>)
    4240:	42b0      	cmp	r0, r6
    4242:	d1ac      	bne.n	419e <__aeabi_dadd+0x326>
    4244:	000c      	movs	r4, r1
    4246:	0017      	movs	r7, r2
    4248:	0006      	movs	r6, r0
    424a:	46d8      	mov	r8, fp
    424c:	e698      	b.n	3f80 <__aeabi_dadd+0x108>
    424e:	4b90      	ldr	r3, [pc, #576]	; (4490 <__aeabi_dadd+0x618>)
    4250:	459a      	cmp	sl, r3
    4252:	d00b      	beq.n	426c <__aeabi_dadd+0x3f4>
    4254:	4682      	mov	sl, r0
    4256:	e6e7      	b.n	4028 <__aeabi_dadd+0x1b0>
    4258:	2800      	cmp	r0, #0
    425a:	d000      	beq.n	425e <__aeabi_dadd+0x3e6>
    425c:	e09e      	b.n	439c <__aeabi_dadd+0x524>
    425e:	0018      	movs	r0, r3
    4260:	4310      	orrs	r0, r2
    4262:	d100      	bne.n	4266 <__aeabi_dadd+0x3ee>
    4264:	e0e9      	b.n	443a <__aeabi_dadd+0x5c2>
    4266:	001c      	movs	r4, r3
    4268:	0017      	movs	r7, r2
    426a:	46d8      	mov	r8, fp
    426c:	4e88      	ldr	r6, [pc, #544]	; (4490 <__aeabi_dadd+0x618>)
    426e:	e687      	b.n	3f80 <__aeabi_dadd+0x108>
    4270:	2500      	movs	r5, #0
    4272:	e772      	b.n	415a <__aeabi_dadd+0x2e2>
    4274:	2100      	movs	r1, #0
    4276:	e782      	b.n	417e <__aeabi_dadd+0x306>
    4278:	0023      	movs	r3, r4
    427a:	433b      	orrs	r3, r7
    427c:	2e00      	cmp	r6, #0
    427e:	d000      	beq.n	4282 <__aeabi_dadd+0x40a>
    4280:	e0ab      	b.n	43da <__aeabi_dadd+0x562>
    4282:	2b00      	cmp	r3, #0
    4284:	d100      	bne.n	4288 <__aeabi_dadd+0x410>
    4286:	e0e7      	b.n	4458 <__aeabi_dadd+0x5e0>
    4288:	000b      	movs	r3, r1
    428a:	4313      	orrs	r3, r2
    428c:	d100      	bne.n	4290 <__aeabi_dadd+0x418>
    428e:	e677      	b.n	3f80 <__aeabi_dadd+0x108>
    4290:	18ba      	adds	r2, r7, r2
    4292:	42ba      	cmp	r2, r7
    4294:	41bf      	sbcs	r7, r7
    4296:	1864      	adds	r4, r4, r1
    4298:	427f      	negs	r7, r7
    429a:	19e4      	adds	r4, r4, r7
    429c:	0223      	lsls	r3, r4, #8
    429e:	d400      	bmi.n	42a2 <__aeabi_dadd+0x42a>
    42a0:	e0f2      	b.n	4488 <__aeabi_dadd+0x610>
    42a2:	4b7c      	ldr	r3, [pc, #496]	; (4494 <__aeabi_dadd+0x61c>)
    42a4:	0017      	movs	r7, r2
    42a6:	401c      	ands	r4, r3
    42a8:	0006      	movs	r6, r0
    42aa:	e669      	b.n	3f80 <__aeabi_dadd+0x108>
    42ac:	0020      	movs	r0, r4
    42ae:	4338      	orrs	r0, r7
    42b0:	2e00      	cmp	r6, #0
    42b2:	d1d1      	bne.n	4258 <__aeabi_dadd+0x3e0>
    42b4:	2800      	cmp	r0, #0
    42b6:	d15b      	bne.n	4370 <__aeabi_dadd+0x4f8>
    42b8:	001c      	movs	r4, r3
    42ba:	4314      	orrs	r4, r2
    42bc:	d100      	bne.n	42c0 <__aeabi_dadd+0x448>
    42be:	e0a8      	b.n	4412 <__aeabi_dadd+0x59a>
    42c0:	001c      	movs	r4, r3
    42c2:	0017      	movs	r7, r2
    42c4:	46d8      	mov	r8, fp
    42c6:	e65b      	b.n	3f80 <__aeabi_dadd+0x108>
    42c8:	0006      	movs	r6, r0
    42ca:	2400      	movs	r4, #0
    42cc:	2700      	movs	r7, #0
    42ce:	e697      	b.n	4000 <__aeabi_dadd+0x188>
    42d0:	4650      	mov	r0, sl
    42d2:	000b      	movs	r3, r1
    42d4:	3820      	subs	r0, #32
    42d6:	40c3      	lsrs	r3, r0
    42d8:	4699      	mov	r9, r3
    42da:	4653      	mov	r3, sl
    42dc:	2b20      	cmp	r3, #32
    42de:	d100      	bne.n	42e2 <__aeabi_dadd+0x46a>
    42e0:	e095      	b.n	440e <__aeabi_dadd+0x596>
    42e2:	2340      	movs	r3, #64	; 0x40
    42e4:	4650      	mov	r0, sl
    42e6:	1a1b      	subs	r3, r3, r0
    42e8:	4099      	lsls	r1, r3
    42ea:	430a      	orrs	r2, r1
    42ec:	1e51      	subs	r1, r2, #1
    42ee:	418a      	sbcs	r2, r1
    42f0:	464b      	mov	r3, r9
    42f2:	2100      	movs	r1, #0
    42f4:	431a      	orrs	r2, r3
    42f6:	e69f      	b.n	4038 <__aeabi_dadd+0x1c0>
    42f8:	2e00      	cmp	r6, #0
    42fa:	d130      	bne.n	435e <__aeabi_dadd+0x4e6>
    42fc:	0026      	movs	r6, r4
    42fe:	433e      	orrs	r6, r7
    4300:	d067      	beq.n	43d2 <__aeabi_dadd+0x55a>
    4302:	43db      	mvns	r3, r3
    4304:	469a      	mov	sl, r3
    4306:	2b00      	cmp	r3, #0
    4308:	d01c      	beq.n	4344 <__aeabi_dadd+0x4cc>
    430a:	4e61      	ldr	r6, [pc, #388]	; (4490 <__aeabi_dadd+0x618>)
    430c:	42b0      	cmp	r0, r6
    430e:	d060      	beq.n	43d2 <__aeabi_dadd+0x55a>
    4310:	4653      	mov	r3, sl
    4312:	2b38      	cmp	r3, #56	; 0x38
    4314:	dd00      	ble.n	4318 <__aeabi_dadd+0x4a0>
    4316:	e096      	b.n	4446 <__aeabi_dadd+0x5ce>
    4318:	2b1f      	cmp	r3, #31
    431a:	dd00      	ble.n	431e <__aeabi_dadd+0x4a6>
    431c:	e09f      	b.n	445e <__aeabi_dadd+0x5e6>
    431e:	2620      	movs	r6, #32
    4320:	1af3      	subs	r3, r6, r3
    4322:	0026      	movs	r6, r4
    4324:	409e      	lsls	r6, r3
    4326:	469c      	mov	ip, r3
    4328:	46b3      	mov	fp, r6
    432a:	4653      	mov	r3, sl
    432c:	003e      	movs	r6, r7
    432e:	40de      	lsrs	r6, r3
    4330:	0033      	movs	r3, r6
    4332:	465e      	mov	r6, fp
    4334:	431e      	orrs	r6, r3
    4336:	4663      	mov	r3, ip
    4338:	409f      	lsls	r7, r3
    433a:	1e7b      	subs	r3, r7, #1
    433c:	419f      	sbcs	r7, r3
    433e:	4653      	mov	r3, sl
    4340:	40dc      	lsrs	r4, r3
    4342:	4337      	orrs	r7, r6
    4344:	18bf      	adds	r7, r7, r2
    4346:	4297      	cmp	r7, r2
    4348:	4192      	sbcs	r2, r2
    434a:	1864      	adds	r4, r4, r1
    434c:	4252      	negs	r2, r2
    434e:	18a4      	adds	r4, r4, r2
    4350:	0006      	movs	r6, r0
    4352:	e678      	b.n	4046 <__aeabi_dadd+0x1ce>
    4354:	4327      	orrs	r7, r4
    4356:	1e7c      	subs	r4, r7, #1
    4358:	41a7      	sbcs	r7, r4
    435a:	2400      	movs	r4, #0
    435c:	e737      	b.n	41ce <__aeabi_dadd+0x356>
    435e:	4e4c      	ldr	r6, [pc, #304]	; (4490 <__aeabi_dadd+0x618>)
    4360:	42b0      	cmp	r0, r6
    4362:	d036      	beq.n	43d2 <__aeabi_dadd+0x55a>
    4364:	2680      	movs	r6, #128	; 0x80
    4366:	425b      	negs	r3, r3
    4368:	0436      	lsls	r6, r6, #16
    436a:	469a      	mov	sl, r3
    436c:	4334      	orrs	r4, r6
    436e:	e7cf      	b.n	4310 <__aeabi_dadd+0x498>
    4370:	0018      	movs	r0, r3
    4372:	4310      	orrs	r0, r2
    4374:	d100      	bne.n	4378 <__aeabi_dadd+0x500>
    4376:	e603      	b.n	3f80 <__aeabi_dadd+0x108>
    4378:	1ab8      	subs	r0, r7, r2
    437a:	4684      	mov	ip, r0
    437c:	4567      	cmp	r7, ip
    437e:	41ad      	sbcs	r5, r5
    4380:	1ae0      	subs	r0, r4, r3
    4382:	426d      	negs	r5, r5
    4384:	1b40      	subs	r0, r0, r5
    4386:	0205      	lsls	r5, r0, #8
    4388:	d400      	bmi.n	438c <__aeabi_dadd+0x514>
    438a:	e62c      	b.n	3fe6 <__aeabi_dadd+0x16e>
    438c:	1bd7      	subs	r7, r2, r7
    438e:	42ba      	cmp	r2, r7
    4390:	4192      	sbcs	r2, r2
    4392:	1b1c      	subs	r4, r3, r4
    4394:	4252      	negs	r2, r2
    4396:	1aa4      	subs	r4, r4, r2
    4398:	46d8      	mov	r8, fp
    439a:	e5f1      	b.n	3f80 <__aeabi_dadd+0x108>
    439c:	0018      	movs	r0, r3
    439e:	4310      	orrs	r0, r2
    43a0:	d100      	bne.n	43a4 <__aeabi_dadd+0x52c>
    43a2:	e763      	b.n	426c <__aeabi_dadd+0x3f4>
    43a4:	08f8      	lsrs	r0, r7, #3
    43a6:	0767      	lsls	r7, r4, #29
    43a8:	4307      	orrs	r7, r0
    43aa:	2080      	movs	r0, #128	; 0x80
    43ac:	08e4      	lsrs	r4, r4, #3
    43ae:	0300      	lsls	r0, r0, #12
    43b0:	4204      	tst	r4, r0
    43b2:	d008      	beq.n	43c6 <__aeabi_dadd+0x54e>
    43b4:	08dd      	lsrs	r5, r3, #3
    43b6:	4205      	tst	r5, r0
    43b8:	d105      	bne.n	43c6 <__aeabi_dadd+0x54e>
    43ba:	08d2      	lsrs	r2, r2, #3
    43bc:	0759      	lsls	r1, r3, #29
    43be:	4311      	orrs	r1, r2
    43c0:	000f      	movs	r7, r1
    43c2:	002c      	movs	r4, r5
    43c4:	46d8      	mov	r8, fp
    43c6:	0f7b      	lsrs	r3, r7, #29
    43c8:	00e4      	lsls	r4, r4, #3
    43ca:	431c      	orrs	r4, r3
    43cc:	00ff      	lsls	r7, r7, #3
    43ce:	4e30      	ldr	r6, [pc, #192]	; (4490 <__aeabi_dadd+0x618>)
    43d0:	e5d6      	b.n	3f80 <__aeabi_dadd+0x108>
    43d2:	000c      	movs	r4, r1
    43d4:	0017      	movs	r7, r2
    43d6:	0006      	movs	r6, r0
    43d8:	e5d2      	b.n	3f80 <__aeabi_dadd+0x108>
    43da:	2b00      	cmp	r3, #0
    43dc:	d038      	beq.n	4450 <__aeabi_dadd+0x5d8>
    43de:	000b      	movs	r3, r1
    43e0:	4313      	orrs	r3, r2
    43e2:	d100      	bne.n	43e6 <__aeabi_dadd+0x56e>
    43e4:	e742      	b.n	426c <__aeabi_dadd+0x3f4>
    43e6:	08f8      	lsrs	r0, r7, #3
    43e8:	0767      	lsls	r7, r4, #29
    43ea:	4307      	orrs	r7, r0
    43ec:	2080      	movs	r0, #128	; 0x80
    43ee:	08e4      	lsrs	r4, r4, #3
    43f0:	0300      	lsls	r0, r0, #12
    43f2:	4204      	tst	r4, r0
    43f4:	d0e7      	beq.n	43c6 <__aeabi_dadd+0x54e>
    43f6:	08cb      	lsrs	r3, r1, #3
    43f8:	4203      	tst	r3, r0
    43fa:	d1e4      	bne.n	43c6 <__aeabi_dadd+0x54e>
    43fc:	08d2      	lsrs	r2, r2, #3
    43fe:	0749      	lsls	r1, r1, #29
    4400:	4311      	orrs	r1, r2
    4402:	000f      	movs	r7, r1
    4404:	001c      	movs	r4, r3
    4406:	e7de      	b.n	43c6 <__aeabi_dadd+0x54e>
    4408:	2700      	movs	r7, #0
    440a:	2400      	movs	r4, #0
    440c:	e5d5      	b.n	3fba <__aeabi_dadd+0x142>
    440e:	2100      	movs	r1, #0
    4410:	e76b      	b.n	42ea <__aeabi_dadd+0x472>
    4412:	2500      	movs	r5, #0
    4414:	2700      	movs	r7, #0
    4416:	e5f3      	b.n	4000 <__aeabi_dadd+0x188>
    4418:	464e      	mov	r6, r9
    441a:	0025      	movs	r5, r4
    441c:	3e20      	subs	r6, #32
    441e:	40f5      	lsrs	r5, r6
    4420:	464b      	mov	r3, r9
    4422:	002e      	movs	r6, r5
    4424:	2b20      	cmp	r3, #32
    4426:	d02d      	beq.n	4484 <__aeabi_dadd+0x60c>
    4428:	2540      	movs	r5, #64	; 0x40
    442a:	1aed      	subs	r5, r5, r3
    442c:	40ac      	lsls	r4, r5
    442e:	4327      	orrs	r7, r4
    4430:	1e7c      	subs	r4, r7, #1
    4432:	41a7      	sbcs	r7, r4
    4434:	2400      	movs	r4, #0
    4436:	4337      	orrs	r7, r6
    4438:	e6c9      	b.n	41ce <__aeabi_dadd+0x356>
    443a:	2480      	movs	r4, #128	; 0x80
    443c:	2500      	movs	r5, #0
    443e:	0324      	lsls	r4, r4, #12
    4440:	4e13      	ldr	r6, [pc, #76]	; (4490 <__aeabi_dadd+0x618>)
    4442:	2700      	movs	r7, #0
    4444:	e5dc      	b.n	4000 <__aeabi_dadd+0x188>
    4446:	4327      	orrs	r7, r4
    4448:	1e7c      	subs	r4, r7, #1
    444a:	41a7      	sbcs	r7, r4
    444c:	2400      	movs	r4, #0
    444e:	e779      	b.n	4344 <__aeabi_dadd+0x4cc>
    4450:	000c      	movs	r4, r1
    4452:	0017      	movs	r7, r2
    4454:	4e0e      	ldr	r6, [pc, #56]	; (4490 <__aeabi_dadd+0x618>)
    4456:	e593      	b.n	3f80 <__aeabi_dadd+0x108>
    4458:	000c      	movs	r4, r1
    445a:	0017      	movs	r7, r2
    445c:	e590      	b.n	3f80 <__aeabi_dadd+0x108>
    445e:	4656      	mov	r6, sl
    4460:	0023      	movs	r3, r4
    4462:	3e20      	subs	r6, #32
    4464:	40f3      	lsrs	r3, r6
    4466:	4699      	mov	r9, r3
    4468:	4653      	mov	r3, sl
    446a:	2b20      	cmp	r3, #32
    446c:	d00e      	beq.n	448c <__aeabi_dadd+0x614>
    446e:	2340      	movs	r3, #64	; 0x40
    4470:	4656      	mov	r6, sl
    4472:	1b9b      	subs	r3, r3, r6
    4474:	409c      	lsls	r4, r3
    4476:	4327      	orrs	r7, r4
    4478:	1e7c      	subs	r4, r7, #1
    447a:	41a7      	sbcs	r7, r4
    447c:	464b      	mov	r3, r9
    447e:	2400      	movs	r4, #0
    4480:	431f      	orrs	r7, r3
    4482:	e75f      	b.n	4344 <__aeabi_dadd+0x4cc>
    4484:	2400      	movs	r4, #0
    4486:	e7d2      	b.n	442e <__aeabi_dadd+0x5b6>
    4488:	0017      	movs	r7, r2
    448a:	e5b2      	b.n	3ff2 <__aeabi_dadd+0x17a>
    448c:	2400      	movs	r4, #0
    448e:	e7f2      	b.n	4476 <__aeabi_dadd+0x5fe>
    4490:	000007ff 	.word	0x000007ff
    4494:	ff7fffff 	.word	0xff7fffff

00004498 <__aeabi_ddiv>:
    4498:	b5f0      	push	{r4, r5, r6, r7, lr}
    449a:	4657      	mov	r7, sl
    449c:	4645      	mov	r5, r8
    449e:	46de      	mov	lr, fp
    44a0:	464e      	mov	r6, r9
    44a2:	b5e0      	push	{r5, r6, r7, lr}
    44a4:	004c      	lsls	r4, r1, #1
    44a6:	030e      	lsls	r6, r1, #12
    44a8:	b087      	sub	sp, #28
    44aa:	4683      	mov	fp, r0
    44ac:	4692      	mov	sl, r2
    44ae:	001d      	movs	r5, r3
    44b0:	4680      	mov	r8, r0
    44b2:	0b36      	lsrs	r6, r6, #12
    44b4:	0d64      	lsrs	r4, r4, #21
    44b6:	0fcf      	lsrs	r7, r1, #31
    44b8:	2c00      	cmp	r4, #0
    44ba:	d04f      	beq.n	455c <__aeabi_ddiv+0xc4>
    44bc:	4b6f      	ldr	r3, [pc, #444]	; (467c <__aeabi_ddiv+0x1e4>)
    44be:	429c      	cmp	r4, r3
    44c0:	d035      	beq.n	452e <__aeabi_ddiv+0x96>
    44c2:	2380      	movs	r3, #128	; 0x80
    44c4:	0f42      	lsrs	r2, r0, #29
    44c6:	041b      	lsls	r3, r3, #16
    44c8:	00f6      	lsls	r6, r6, #3
    44ca:	4313      	orrs	r3, r2
    44cc:	4333      	orrs	r3, r6
    44ce:	4699      	mov	r9, r3
    44d0:	00c3      	lsls	r3, r0, #3
    44d2:	4698      	mov	r8, r3
    44d4:	4b6a      	ldr	r3, [pc, #424]	; (4680 <__aeabi_ddiv+0x1e8>)
    44d6:	2600      	movs	r6, #0
    44d8:	469c      	mov	ip, r3
    44da:	2300      	movs	r3, #0
    44dc:	4464      	add	r4, ip
    44de:	9303      	str	r3, [sp, #12]
    44e0:	032b      	lsls	r3, r5, #12
    44e2:	0b1b      	lsrs	r3, r3, #12
    44e4:	469b      	mov	fp, r3
    44e6:	006b      	lsls	r3, r5, #1
    44e8:	0fed      	lsrs	r5, r5, #31
    44ea:	4650      	mov	r0, sl
    44ec:	0d5b      	lsrs	r3, r3, #21
    44ee:	9501      	str	r5, [sp, #4]
    44f0:	d05e      	beq.n	45b0 <__aeabi_ddiv+0x118>
    44f2:	4a62      	ldr	r2, [pc, #392]	; (467c <__aeabi_ddiv+0x1e4>)
    44f4:	4293      	cmp	r3, r2
    44f6:	d053      	beq.n	45a0 <__aeabi_ddiv+0x108>
    44f8:	465a      	mov	r2, fp
    44fa:	00d1      	lsls	r1, r2, #3
    44fc:	2280      	movs	r2, #128	; 0x80
    44fe:	0f40      	lsrs	r0, r0, #29
    4500:	0412      	lsls	r2, r2, #16
    4502:	4302      	orrs	r2, r0
    4504:	430a      	orrs	r2, r1
    4506:	4693      	mov	fp, r2
    4508:	4652      	mov	r2, sl
    450a:	00d1      	lsls	r1, r2, #3
    450c:	4a5c      	ldr	r2, [pc, #368]	; (4680 <__aeabi_ddiv+0x1e8>)
    450e:	4694      	mov	ip, r2
    4510:	2200      	movs	r2, #0
    4512:	4463      	add	r3, ip
    4514:	0038      	movs	r0, r7
    4516:	4068      	eors	r0, r5
    4518:	4684      	mov	ip, r0
    451a:	9002      	str	r0, [sp, #8]
    451c:	1ae4      	subs	r4, r4, r3
    451e:	4316      	orrs	r6, r2
    4520:	2e0f      	cmp	r6, #15
    4522:	d900      	bls.n	4526 <__aeabi_ddiv+0x8e>
    4524:	e0b4      	b.n	4690 <__aeabi_ddiv+0x1f8>
    4526:	4b57      	ldr	r3, [pc, #348]	; (4684 <__aeabi_ddiv+0x1ec>)
    4528:	00b6      	lsls	r6, r6, #2
    452a:	599b      	ldr	r3, [r3, r6]
    452c:	469f      	mov	pc, r3
    452e:	0003      	movs	r3, r0
    4530:	4333      	orrs	r3, r6
    4532:	4699      	mov	r9, r3
    4534:	d16c      	bne.n	4610 <__aeabi_ddiv+0x178>
    4536:	2300      	movs	r3, #0
    4538:	4698      	mov	r8, r3
    453a:	3302      	adds	r3, #2
    453c:	2608      	movs	r6, #8
    453e:	9303      	str	r3, [sp, #12]
    4540:	e7ce      	b.n	44e0 <__aeabi_ddiv+0x48>
    4542:	46cb      	mov	fp, r9
    4544:	4641      	mov	r1, r8
    4546:	9a03      	ldr	r2, [sp, #12]
    4548:	9701      	str	r7, [sp, #4]
    454a:	2a02      	cmp	r2, #2
    454c:	d165      	bne.n	461a <__aeabi_ddiv+0x182>
    454e:	9b01      	ldr	r3, [sp, #4]
    4550:	4c4a      	ldr	r4, [pc, #296]	; (467c <__aeabi_ddiv+0x1e4>)
    4552:	469c      	mov	ip, r3
    4554:	2300      	movs	r3, #0
    4556:	2200      	movs	r2, #0
    4558:	4698      	mov	r8, r3
    455a:	e06b      	b.n	4634 <__aeabi_ddiv+0x19c>
    455c:	0003      	movs	r3, r0
    455e:	4333      	orrs	r3, r6
    4560:	4699      	mov	r9, r3
    4562:	d04e      	beq.n	4602 <__aeabi_ddiv+0x16a>
    4564:	2e00      	cmp	r6, #0
    4566:	d100      	bne.n	456a <__aeabi_ddiv+0xd2>
    4568:	e1bc      	b.n	48e4 <__aeabi_ddiv+0x44c>
    456a:	0030      	movs	r0, r6
    456c:	f001 f8ca 	bl	5704 <__clzsi2>
    4570:	0003      	movs	r3, r0
    4572:	3b0b      	subs	r3, #11
    4574:	2b1c      	cmp	r3, #28
    4576:	dd00      	ble.n	457a <__aeabi_ddiv+0xe2>
    4578:	e1ac      	b.n	48d4 <__aeabi_ddiv+0x43c>
    457a:	221d      	movs	r2, #29
    457c:	1ad3      	subs	r3, r2, r3
    457e:	465a      	mov	r2, fp
    4580:	0001      	movs	r1, r0
    4582:	40da      	lsrs	r2, r3
    4584:	3908      	subs	r1, #8
    4586:	408e      	lsls	r6, r1
    4588:	0013      	movs	r3, r2
    458a:	4333      	orrs	r3, r6
    458c:	4699      	mov	r9, r3
    458e:	465b      	mov	r3, fp
    4590:	408b      	lsls	r3, r1
    4592:	4698      	mov	r8, r3
    4594:	2300      	movs	r3, #0
    4596:	4c3c      	ldr	r4, [pc, #240]	; (4688 <__aeabi_ddiv+0x1f0>)
    4598:	2600      	movs	r6, #0
    459a:	1a24      	subs	r4, r4, r0
    459c:	9303      	str	r3, [sp, #12]
    459e:	e79f      	b.n	44e0 <__aeabi_ddiv+0x48>
    45a0:	4651      	mov	r1, sl
    45a2:	465a      	mov	r2, fp
    45a4:	4311      	orrs	r1, r2
    45a6:	d129      	bne.n	45fc <__aeabi_ddiv+0x164>
    45a8:	2200      	movs	r2, #0
    45aa:	4693      	mov	fp, r2
    45ac:	3202      	adds	r2, #2
    45ae:	e7b1      	b.n	4514 <__aeabi_ddiv+0x7c>
    45b0:	4659      	mov	r1, fp
    45b2:	4301      	orrs	r1, r0
    45b4:	d01e      	beq.n	45f4 <__aeabi_ddiv+0x15c>
    45b6:	465b      	mov	r3, fp
    45b8:	2b00      	cmp	r3, #0
    45ba:	d100      	bne.n	45be <__aeabi_ddiv+0x126>
    45bc:	e19e      	b.n	48fc <__aeabi_ddiv+0x464>
    45be:	4658      	mov	r0, fp
    45c0:	f001 f8a0 	bl	5704 <__clzsi2>
    45c4:	0003      	movs	r3, r0
    45c6:	3b0b      	subs	r3, #11
    45c8:	2b1c      	cmp	r3, #28
    45ca:	dd00      	ble.n	45ce <__aeabi_ddiv+0x136>
    45cc:	e18f      	b.n	48ee <__aeabi_ddiv+0x456>
    45ce:	0002      	movs	r2, r0
    45d0:	4659      	mov	r1, fp
    45d2:	3a08      	subs	r2, #8
    45d4:	4091      	lsls	r1, r2
    45d6:	468b      	mov	fp, r1
    45d8:	211d      	movs	r1, #29
    45da:	1acb      	subs	r3, r1, r3
    45dc:	4651      	mov	r1, sl
    45de:	40d9      	lsrs	r1, r3
    45e0:	000b      	movs	r3, r1
    45e2:	4659      	mov	r1, fp
    45e4:	430b      	orrs	r3, r1
    45e6:	4651      	mov	r1, sl
    45e8:	469b      	mov	fp, r3
    45ea:	4091      	lsls	r1, r2
    45ec:	4b26      	ldr	r3, [pc, #152]	; (4688 <__aeabi_ddiv+0x1f0>)
    45ee:	2200      	movs	r2, #0
    45f0:	1a1b      	subs	r3, r3, r0
    45f2:	e78f      	b.n	4514 <__aeabi_ddiv+0x7c>
    45f4:	2300      	movs	r3, #0
    45f6:	2201      	movs	r2, #1
    45f8:	469b      	mov	fp, r3
    45fa:	e78b      	b.n	4514 <__aeabi_ddiv+0x7c>
    45fc:	4651      	mov	r1, sl
    45fe:	2203      	movs	r2, #3
    4600:	e788      	b.n	4514 <__aeabi_ddiv+0x7c>
    4602:	2300      	movs	r3, #0
    4604:	4698      	mov	r8, r3
    4606:	3301      	adds	r3, #1
    4608:	2604      	movs	r6, #4
    460a:	2400      	movs	r4, #0
    460c:	9303      	str	r3, [sp, #12]
    460e:	e767      	b.n	44e0 <__aeabi_ddiv+0x48>
    4610:	2303      	movs	r3, #3
    4612:	46b1      	mov	r9, r6
    4614:	9303      	str	r3, [sp, #12]
    4616:	260c      	movs	r6, #12
    4618:	e762      	b.n	44e0 <__aeabi_ddiv+0x48>
    461a:	2a03      	cmp	r2, #3
    461c:	d100      	bne.n	4620 <__aeabi_ddiv+0x188>
    461e:	e25c      	b.n	4ada <__aeabi_ddiv+0x642>
    4620:	9b01      	ldr	r3, [sp, #4]
    4622:	2a01      	cmp	r2, #1
    4624:	d000      	beq.n	4628 <__aeabi_ddiv+0x190>
    4626:	e1e4      	b.n	49f2 <__aeabi_ddiv+0x55a>
    4628:	4013      	ands	r3, r2
    462a:	469c      	mov	ip, r3
    462c:	2300      	movs	r3, #0
    462e:	2400      	movs	r4, #0
    4630:	2200      	movs	r2, #0
    4632:	4698      	mov	r8, r3
    4634:	2100      	movs	r1, #0
    4636:	0312      	lsls	r2, r2, #12
    4638:	0b13      	lsrs	r3, r2, #12
    463a:	0d0a      	lsrs	r2, r1, #20
    463c:	0512      	lsls	r2, r2, #20
    463e:	431a      	orrs	r2, r3
    4640:	0523      	lsls	r3, r4, #20
    4642:	4c12      	ldr	r4, [pc, #72]	; (468c <__aeabi_ddiv+0x1f4>)
    4644:	4640      	mov	r0, r8
    4646:	4022      	ands	r2, r4
    4648:	4313      	orrs	r3, r2
    464a:	4662      	mov	r2, ip
    464c:	005b      	lsls	r3, r3, #1
    464e:	07d2      	lsls	r2, r2, #31
    4650:	085b      	lsrs	r3, r3, #1
    4652:	4313      	orrs	r3, r2
    4654:	0019      	movs	r1, r3
    4656:	b007      	add	sp, #28
    4658:	bc3c      	pop	{r2, r3, r4, r5}
    465a:	4690      	mov	r8, r2
    465c:	4699      	mov	r9, r3
    465e:	46a2      	mov	sl, r4
    4660:	46ab      	mov	fp, r5
    4662:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4664:	2300      	movs	r3, #0
    4666:	2280      	movs	r2, #128	; 0x80
    4668:	469c      	mov	ip, r3
    466a:	0312      	lsls	r2, r2, #12
    466c:	4698      	mov	r8, r3
    466e:	4c03      	ldr	r4, [pc, #12]	; (467c <__aeabi_ddiv+0x1e4>)
    4670:	e7e0      	b.n	4634 <__aeabi_ddiv+0x19c>
    4672:	2300      	movs	r3, #0
    4674:	4c01      	ldr	r4, [pc, #4]	; (467c <__aeabi_ddiv+0x1e4>)
    4676:	2200      	movs	r2, #0
    4678:	4698      	mov	r8, r3
    467a:	e7db      	b.n	4634 <__aeabi_ddiv+0x19c>
    467c:	000007ff 	.word	0x000007ff
    4680:	fffffc01 	.word	0xfffffc01
    4684:	00006030 	.word	0x00006030
    4688:	fffffc0d 	.word	0xfffffc0d
    468c:	800fffff 	.word	0x800fffff
    4690:	45d9      	cmp	r9, fp
    4692:	d900      	bls.n	4696 <__aeabi_ddiv+0x1fe>
    4694:	e139      	b.n	490a <__aeabi_ddiv+0x472>
    4696:	d100      	bne.n	469a <__aeabi_ddiv+0x202>
    4698:	e134      	b.n	4904 <__aeabi_ddiv+0x46c>
    469a:	2300      	movs	r3, #0
    469c:	4646      	mov	r6, r8
    469e:	464d      	mov	r5, r9
    46a0:	469a      	mov	sl, r3
    46a2:	3c01      	subs	r4, #1
    46a4:	465b      	mov	r3, fp
    46a6:	0e0a      	lsrs	r2, r1, #24
    46a8:	021b      	lsls	r3, r3, #8
    46aa:	431a      	orrs	r2, r3
    46ac:	020b      	lsls	r3, r1, #8
    46ae:	0c17      	lsrs	r7, r2, #16
    46b0:	9303      	str	r3, [sp, #12]
    46b2:	0413      	lsls	r3, r2, #16
    46b4:	0c1b      	lsrs	r3, r3, #16
    46b6:	0039      	movs	r1, r7
    46b8:	0028      	movs	r0, r5
    46ba:	4690      	mov	r8, r2
    46bc:	9301      	str	r3, [sp, #4]
    46be:	f7ff f95b 	bl	3978 <__udivsi3>
    46c2:	0002      	movs	r2, r0
    46c4:	9b01      	ldr	r3, [sp, #4]
    46c6:	4683      	mov	fp, r0
    46c8:	435a      	muls	r2, r3
    46ca:	0028      	movs	r0, r5
    46cc:	0039      	movs	r1, r7
    46ce:	4691      	mov	r9, r2
    46d0:	f7ff f9d8 	bl	3a84 <__aeabi_uidivmod>
    46d4:	0c35      	lsrs	r5, r6, #16
    46d6:	0409      	lsls	r1, r1, #16
    46d8:	430d      	orrs	r5, r1
    46da:	45a9      	cmp	r9, r5
    46dc:	d90d      	bls.n	46fa <__aeabi_ddiv+0x262>
    46de:	465b      	mov	r3, fp
    46e0:	4445      	add	r5, r8
    46e2:	3b01      	subs	r3, #1
    46e4:	45a8      	cmp	r8, r5
    46e6:	d900      	bls.n	46ea <__aeabi_ddiv+0x252>
    46e8:	e13a      	b.n	4960 <__aeabi_ddiv+0x4c8>
    46ea:	45a9      	cmp	r9, r5
    46ec:	d800      	bhi.n	46f0 <__aeabi_ddiv+0x258>
    46ee:	e137      	b.n	4960 <__aeabi_ddiv+0x4c8>
    46f0:	2302      	movs	r3, #2
    46f2:	425b      	negs	r3, r3
    46f4:	469c      	mov	ip, r3
    46f6:	4445      	add	r5, r8
    46f8:	44e3      	add	fp, ip
    46fa:	464b      	mov	r3, r9
    46fc:	1aeb      	subs	r3, r5, r3
    46fe:	0039      	movs	r1, r7
    4700:	0018      	movs	r0, r3
    4702:	9304      	str	r3, [sp, #16]
    4704:	f7ff f938 	bl	3978 <__udivsi3>
    4708:	9b01      	ldr	r3, [sp, #4]
    470a:	0005      	movs	r5, r0
    470c:	4343      	muls	r3, r0
    470e:	0039      	movs	r1, r7
    4710:	9804      	ldr	r0, [sp, #16]
    4712:	4699      	mov	r9, r3
    4714:	f7ff f9b6 	bl	3a84 <__aeabi_uidivmod>
    4718:	0433      	lsls	r3, r6, #16
    471a:	0409      	lsls	r1, r1, #16
    471c:	0c1b      	lsrs	r3, r3, #16
    471e:	430b      	orrs	r3, r1
    4720:	4599      	cmp	r9, r3
    4722:	d909      	bls.n	4738 <__aeabi_ddiv+0x2a0>
    4724:	4443      	add	r3, r8
    4726:	1e6a      	subs	r2, r5, #1
    4728:	4598      	cmp	r8, r3
    472a:	d900      	bls.n	472e <__aeabi_ddiv+0x296>
    472c:	e11a      	b.n	4964 <__aeabi_ddiv+0x4cc>
    472e:	4599      	cmp	r9, r3
    4730:	d800      	bhi.n	4734 <__aeabi_ddiv+0x29c>
    4732:	e117      	b.n	4964 <__aeabi_ddiv+0x4cc>
    4734:	3d02      	subs	r5, #2
    4736:	4443      	add	r3, r8
    4738:	464a      	mov	r2, r9
    473a:	1a9b      	subs	r3, r3, r2
    473c:	465a      	mov	r2, fp
    473e:	0412      	lsls	r2, r2, #16
    4740:	432a      	orrs	r2, r5
    4742:	9903      	ldr	r1, [sp, #12]
    4744:	4693      	mov	fp, r2
    4746:	0c10      	lsrs	r0, r2, #16
    4748:	0c0a      	lsrs	r2, r1, #16
    474a:	4691      	mov	r9, r2
    474c:	0409      	lsls	r1, r1, #16
    474e:	465a      	mov	r2, fp
    4750:	0c09      	lsrs	r1, r1, #16
    4752:	464e      	mov	r6, r9
    4754:	000d      	movs	r5, r1
    4756:	0412      	lsls	r2, r2, #16
    4758:	0c12      	lsrs	r2, r2, #16
    475a:	4345      	muls	r5, r0
    475c:	9105      	str	r1, [sp, #20]
    475e:	4351      	muls	r1, r2
    4760:	4372      	muls	r2, r6
    4762:	4370      	muls	r0, r6
    4764:	1952      	adds	r2, r2, r5
    4766:	0c0e      	lsrs	r6, r1, #16
    4768:	18b2      	adds	r2, r6, r2
    476a:	4295      	cmp	r5, r2
    476c:	d903      	bls.n	4776 <__aeabi_ddiv+0x2de>
    476e:	2580      	movs	r5, #128	; 0x80
    4770:	026d      	lsls	r5, r5, #9
    4772:	46ac      	mov	ip, r5
    4774:	4460      	add	r0, ip
    4776:	0c15      	lsrs	r5, r2, #16
    4778:	0409      	lsls	r1, r1, #16
    477a:	0412      	lsls	r2, r2, #16
    477c:	0c09      	lsrs	r1, r1, #16
    477e:	1828      	adds	r0, r5, r0
    4780:	1852      	adds	r2, r2, r1
    4782:	4283      	cmp	r3, r0
    4784:	d200      	bcs.n	4788 <__aeabi_ddiv+0x2f0>
    4786:	e0ce      	b.n	4926 <__aeabi_ddiv+0x48e>
    4788:	d100      	bne.n	478c <__aeabi_ddiv+0x2f4>
    478a:	e0c8      	b.n	491e <__aeabi_ddiv+0x486>
    478c:	1a1d      	subs	r5, r3, r0
    478e:	4653      	mov	r3, sl
    4790:	1a9e      	subs	r6, r3, r2
    4792:	45b2      	cmp	sl, r6
    4794:	4192      	sbcs	r2, r2
    4796:	4252      	negs	r2, r2
    4798:	1aab      	subs	r3, r5, r2
    479a:	469a      	mov	sl, r3
    479c:	4598      	cmp	r8, r3
    479e:	d100      	bne.n	47a2 <__aeabi_ddiv+0x30a>
    47a0:	e117      	b.n	49d2 <__aeabi_ddiv+0x53a>
    47a2:	0039      	movs	r1, r7
    47a4:	0018      	movs	r0, r3
    47a6:	f7ff f8e7 	bl	3978 <__udivsi3>
    47aa:	9b01      	ldr	r3, [sp, #4]
    47ac:	0005      	movs	r5, r0
    47ae:	4343      	muls	r3, r0
    47b0:	0039      	movs	r1, r7
    47b2:	4650      	mov	r0, sl
    47b4:	9304      	str	r3, [sp, #16]
    47b6:	f7ff f965 	bl	3a84 <__aeabi_uidivmod>
    47ba:	9804      	ldr	r0, [sp, #16]
    47bc:	040b      	lsls	r3, r1, #16
    47be:	0c31      	lsrs	r1, r6, #16
    47c0:	4319      	orrs	r1, r3
    47c2:	4288      	cmp	r0, r1
    47c4:	d909      	bls.n	47da <__aeabi_ddiv+0x342>
    47c6:	4441      	add	r1, r8
    47c8:	1e6b      	subs	r3, r5, #1
    47ca:	4588      	cmp	r8, r1
    47cc:	d900      	bls.n	47d0 <__aeabi_ddiv+0x338>
    47ce:	e107      	b.n	49e0 <__aeabi_ddiv+0x548>
    47d0:	4288      	cmp	r0, r1
    47d2:	d800      	bhi.n	47d6 <__aeabi_ddiv+0x33e>
    47d4:	e104      	b.n	49e0 <__aeabi_ddiv+0x548>
    47d6:	3d02      	subs	r5, #2
    47d8:	4441      	add	r1, r8
    47da:	9b04      	ldr	r3, [sp, #16]
    47dc:	1acb      	subs	r3, r1, r3
    47de:	0018      	movs	r0, r3
    47e0:	0039      	movs	r1, r7
    47e2:	9304      	str	r3, [sp, #16]
    47e4:	f7ff f8c8 	bl	3978 <__udivsi3>
    47e8:	9b01      	ldr	r3, [sp, #4]
    47ea:	4682      	mov	sl, r0
    47ec:	4343      	muls	r3, r0
    47ee:	0039      	movs	r1, r7
    47f0:	9804      	ldr	r0, [sp, #16]
    47f2:	9301      	str	r3, [sp, #4]
    47f4:	f7ff f946 	bl	3a84 <__aeabi_uidivmod>
    47f8:	9801      	ldr	r0, [sp, #4]
    47fa:	040b      	lsls	r3, r1, #16
    47fc:	0431      	lsls	r1, r6, #16
    47fe:	0c09      	lsrs	r1, r1, #16
    4800:	4319      	orrs	r1, r3
    4802:	4288      	cmp	r0, r1
    4804:	d90d      	bls.n	4822 <__aeabi_ddiv+0x38a>
    4806:	4653      	mov	r3, sl
    4808:	4441      	add	r1, r8
    480a:	3b01      	subs	r3, #1
    480c:	4588      	cmp	r8, r1
    480e:	d900      	bls.n	4812 <__aeabi_ddiv+0x37a>
    4810:	e0e8      	b.n	49e4 <__aeabi_ddiv+0x54c>
    4812:	4288      	cmp	r0, r1
    4814:	d800      	bhi.n	4818 <__aeabi_ddiv+0x380>
    4816:	e0e5      	b.n	49e4 <__aeabi_ddiv+0x54c>
    4818:	2302      	movs	r3, #2
    481a:	425b      	negs	r3, r3
    481c:	469c      	mov	ip, r3
    481e:	4441      	add	r1, r8
    4820:	44e2      	add	sl, ip
    4822:	9b01      	ldr	r3, [sp, #4]
    4824:	042d      	lsls	r5, r5, #16
    4826:	1ace      	subs	r6, r1, r3
    4828:	4651      	mov	r1, sl
    482a:	4329      	orrs	r1, r5
    482c:	9d05      	ldr	r5, [sp, #20]
    482e:	464f      	mov	r7, r9
    4830:	002a      	movs	r2, r5
    4832:	040b      	lsls	r3, r1, #16
    4834:	0c08      	lsrs	r0, r1, #16
    4836:	0c1b      	lsrs	r3, r3, #16
    4838:	435a      	muls	r2, r3
    483a:	4345      	muls	r5, r0
    483c:	437b      	muls	r3, r7
    483e:	4378      	muls	r0, r7
    4840:	195b      	adds	r3, r3, r5
    4842:	0c17      	lsrs	r7, r2, #16
    4844:	18fb      	adds	r3, r7, r3
    4846:	429d      	cmp	r5, r3
    4848:	d903      	bls.n	4852 <__aeabi_ddiv+0x3ba>
    484a:	2580      	movs	r5, #128	; 0x80
    484c:	026d      	lsls	r5, r5, #9
    484e:	46ac      	mov	ip, r5
    4850:	4460      	add	r0, ip
    4852:	0c1d      	lsrs	r5, r3, #16
    4854:	0412      	lsls	r2, r2, #16
    4856:	041b      	lsls	r3, r3, #16
    4858:	0c12      	lsrs	r2, r2, #16
    485a:	1828      	adds	r0, r5, r0
    485c:	189b      	adds	r3, r3, r2
    485e:	4286      	cmp	r6, r0
    4860:	d200      	bcs.n	4864 <__aeabi_ddiv+0x3cc>
    4862:	e093      	b.n	498c <__aeabi_ddiv+0x4f4>
    4864:	d100      	bne.n	4868 <__aeabi_ddiv+0x3d0>
    4866:	e08e      	b.n	4986 <__aeabi_ddiv+0x4ee>
    4868:	2301      	movs	r3, #1
    486a:	4319      	orrs	r1, r3
    486c:	4ba0      	ldr	r3, [pc, #640]	; (4af0 <__aeabi_ddiv+0x658>)
    486e:	18e3      	adds	r3, r4, r3
    4870:	2b00      	cmp	r3, #0
    4872:	dc00      	bgt.n	4876 <__aeabi_ddiv+0x3de>
    4874:	e099      	b.n	49aa <__aeabi_ddiv+0x512>
    4876:	074a      	lsls	r2, r1, #29
    4878:	d000      	beq.n	487c <__aeabi_ddiv+0x3e4>
    487a:	e09e      	b.n	49ba <__aeabi_ddiv+0x522>
    487c:	465a      	mov	r2, fp
    487e:	01d2      	lsls	r2, r2, #7
    4880:	d506      	bpl.n	4890 <__aeabi_ddiv+0x3f8>
    4882:	465a      	mov	r2, fp
    4884:	4b9b      	ldr	r3, [pc, #620]	; (4af4 <__aeabi_ddiv+0x65c>)
    4886:	401a      	ands	r2, r3
    4888:	2380      	movs	r3, #128	; 0x80
    488a:	4693      	mov	fp, r2
    488c:	00db      	lsls	r3, r3, #3
    488e:	18e3      	adds	r3, r4, r3
    4890:	4a99      	ldr	r2, [pc, #612]	; (4af8 <__aeabi_ddiv+0x660>)
    4892:	4293      	cmp	r3, r2
    4894:	dd68      	ble.n	4968 <__aeabi_ddiv+0x4d0>
    4896:	2301      	movs	r3, #1
    4898:	9a02      	ldr	r2, [sp, #8]
    489a:	4c98      	ldr	r4, [pc, #608]	; (4afc <__aeabi_ddiv+0x664>)
    489c:	401a      	ands	r2, r3
    489e:	2300      	movs	r3, #0
    48a0:	4694      	mov	ip, r2
    48a2:	4698      	mov	r8, r3
    48a4:	2200      	movs	r2, #0
    48a6:	e6c5      	b.n	4634 <__aeabi_ddiv+0x19c>
    48a8:	2280      	movs	r2, #128	; 0x80
    48aa:	464b      	mov	r3, r9
    48ac:	0312      	lsls	r2, r2, #12
    48ae:	4213      	tst	r3, r2
    48b0:	d00a      	beq.n	48c8 <__aeabi_ddiv+0x430>
    48b2:	465b      	mov	r3, fp
    48b4:	4213      	tst	r3, r2
    48b6:	d106      	bne.n	48c6 <__aeabi_ddiv+0x42e>
    48b8:	431a      	orrs	r2, r3
    48ba:	0312      	lsls	r2, r2, #12
    48bc:	0b12      	lsrs	r2, r2, #12
    48be:	46ac      	mov	ip, r5
    48c0:	4688      	mov	r8, r1
    48c2:	4c8e      	ldr	r4, [pc, #568]	; (4afc <__aeabi_ddiv+0x664>)
    48c4:	e6b6      	b.n	4634 <__aeabi_ddiv+0x19c>
    48c6:	464b      	mov	r3, r9
    48c8:	431a      	orrs	r2, r3
    48ca:	0312      	lsls	r2, r2, #12
    48cc:	0b12      	lsrs	r2, r2, #12
    48ce:	46bc      	mov	ip, r7
    48d0:	4c8a      	ldr	r4, [pc, #552]	; (4afc <__aeabi_ddiv+0x664>)
    48d2:	e6af      	b.n	4634 <__aeabi_ddiv+0x19c>
    48d4:	0003      	movs	r3, r0
    48d6:	465a      	mov	r2, fp
    48d8:	3b28      	subs	r3, #40	; 0x28
    48da:	409a      	lsls	r2, r3
    48dc:	2300      	movs	r3, #0
    48de:	4691      	mov	r9, r2
    48e0:	4698      	mov	r8, r3
    48e2:	e657      	b.n	4594 <__aeabi_ddiv+0xfc>
    48e4:	4658      	mov	r0, fp
    48e6:	f000 ff0d 	bl	5704 <__clzsi2>
    48ea:	3020      	adds	r0, #32
    48ec:	e640      	b.n	4570 <__aeabi_ddiv+0xd8>
    48ee:	0003      	movs	r3, r0
    48f0:	4652      	mov	r2, sl
    48f2:	3b28      	subs	r3, #40	; 0x28
    48f4:	409a      	lsls	r2, r3
    48f6:	2100      	movs	r1, #0
    48f8:	4693      	mov	fp, r2
    48fa:	e677      	b.n	45ec <__aeabi_ddiv+0x154>
    48fc:	f000 ff02 	bl	5704 <__clzsi2>
    4900:	3020      	adds	r0, #32
    4902:	e65f      	b.n	45c4 <__aeabi_ddiv+0x12c>
    4904:	4588      	cmp	r8, r1
    4906:	d200      	bcs.n	490a <__aeabi_ddiv+0x472>
    4908:	e6c7      	b.n	469a <__aeabi_ddiv+0x202>
    490a:	464b      	mov	r3, r9
    490c:	07de      	lsls	r6, r3, #31
    490e:	085d      	lsrs	r5, r3, #1
    4910:	4643      	mov	r3, r8
    4912:	085b      	lsrs	r3, r3, #1
    4914:	431e      	orrs	r6, r3
    4916:	4643      	mov	r3, r8
    4918:	07db      	lsls	r3, r3, #31
    491a:	469a      	mov	sl, r3
    491c:	e6c2      	b.n	46a4 <__aeabi_ddiv+0x20c>
    491e:	2500      	movs	r5, #0
    4920:	4592      	cmp	sl, r2
    4922:	d300      	bcc.n	4926 <__aeabi_ddiv+0x48e>
    4924:	e733      	b.n	478e <__aeabi_ddiv+0x2f6>
    4926:	9e03      	ldr	r6, [sp, #12]
    4928:	4659      	mov	r1, fp
    492a:	46b4      	mov	ip, r6
    492c:	44e2      	add	sl, ip
    492e:	45b2      	cmp	sl, r6
    4930:	41ad      	sbcs	r5, r5
    4932:	426d      	negs	r5, r5
    4934:	4445      	add	r5, r8
    4936:	18eb      	adds	r3, r5, r3
    4938:	3901      	subs	r1, #1
    493a:	4598      	cmp	r8, r3
    493c:	d207      	bcs.n	494e <__aeabi_ddiv+0x4b6>
    493e:	4298      	cmp	r0, r3
    4940:	d900      	bls.n	4944 <__aeabi_ddiv+0x4ac>
    4942:	e07f      	b.n	4a44 <__aeabi_ddiv+0x5ac>
    4944:	d100      	bne.n	4948 <__aeabi_ddiv+0x4b0>
    4946:	e0bc      	b.n	4ac2 <__aeabi_ddiv+0x62a>
    4948:	1a1d      	subs	r5, r3, r0
    494a:	468b      	mov	fp, r1
    494c:	e71f      	b.n	478e <__aeabi_ddiv+0x2f6>
    494e:	4598      	cmp	r8, r3
    4950:	d1fa      	bne.n	4948 <__aeabi_ddiv+0x4b0>
    4952:	9d03      	ldr	r5, [sp, #12]
    4954:	4555      	cmp	r5, sl
    4956:	d9f2      	bls.n	493e <__aeabi_ddiv+0x4a6>
    4958:	4643      	mov	r3, r8
    495a:	468b      	mov	fp, r1
    495c:	1a1d      	subs	r5, r3, r0
    495e:	e716      	b.n	478e <__aeabi_ddiv+0x2f6>
    4960:	469b      	mov	fp, r3
    4962:	e6ca      	b.n	46fa <__aeabi_ddiv+0x262>
    4964:	0015      	movs	r5, r2
    4966:	e6e7      	b.n	4738 <__aeabi_ddiv+0x2a0>
    4968:	465a      	mov	r2, fp
    496a:	08c9      	lsrs	r1, r1, #3
    496c:	0752      	lsls	r2, r2, #29
    496e:	430a      	orrs	r2, r1
    4970:	055b      	lsls	r3, r3, #21
    4972:	4690      	mov	r8, r2
    4974:	0d5c      	lsrs	r4, r3, #21
    4976:	465a      	mov	r2, fp
    4978:	2301      	movs	r3, #1
    497a:	9902      	ldr	r1, [sp, #8]
    497c:	0252      	lsls	r2, r2, #9
    497e:	4019      	ands	r1, r3
    4980:	0b12      	lsrs	r2, r2, #12
    4982:	468c      	mov	ip, r1
    4984:	e656      	b.n	4634 <__aeabi_ddiv+0x19c>
    4986:	2b00      	cmp	r3, #0
    4988:	d100      	bne.n	498c <__aeabi_ddiv+0x4f4>
    498a:	e76f      	b.n	486c <__aeabi_ddiv+0x3d4>
    498c:	4446      	add	r6, r8
    498e:	1e4a      	subs	r2, r1, #1
    4990:	45b0      	cmp	r8, r6
    4992:	d929      	bls.n	49e8 <__aeabi_ddiv+0x550>
    4994:	0011      	movs	r1, r2
    4996:	4286      	cmp	r6, r0
    4998:	d000      	beq.n	499c <__aeabi_ddiv+0x504>
    499a:	e765      	b.n	4868 <__aeabi_ddiv+0x3d0>
    499c:	9a03      	ldr	r2, [sp, #12]
    499e:	4293      	cmp	r3, r2
    49a0:	d000      	beq.n	49a4 <__aeabi_ddiv+0x50c>
    49a2:	e761      	b.n	4868 <__aeabi_ddiv+0x3d0>
    49a4:	e762      	b.n	486c <__aeabi_ddiv+0x3d4>
    49a6:	2101      	movs	r1, #1
    49a8:	4249      	negs	r1, r1
    49aa:	2001      	movs	r0, #1
    49ac:	1ac2      	subs	r2, r0, r3
    49ae:	2a38      	cmp	r2, #56	; 0x38
    49b0:	dd21      	ble.n	49f6 <__aeabi_ddiv+0x55e>
    49b2:	9b02      	ldr	r3, [sp, #8]
    49b4:	4003      	ands	r3, r0
    49b6:	469c      	mov	ip, r3
    49b8:	e638      	b.n	462c <__aeabi_ddiv+0x194>
    49ba:	220f      	movs	r2, #15
    49bc:	400a      	ands	r2, r1
    49be:	2a04      	cmp	r2, #4
    49c0:	d100      	bne.n	49c4 <__aeabi_ddiv+0x52c>
    49c2:	e75b      	b.n	487c <__aeabi_ddiv+0x3e4>
    49c4:	000a      	movs	r2, r1
    49c6:	1d11      	adds	r1, r2, #4
    49c8:	4291      	cmp	r1, r2
    49ca:	4192      	sbcs	r2, r2
    49cc:	4252      	negs	r2, r2
    49ce:	4493      	add	fp, r2
    49d0:	e754      	b.n	487c <__aeabi_ddiv+0x3e4>
    49d2:	4b47      	ldr	r3, [pc, #284]	; (4af0 <__aeabi_ddiv+0x658>)
    49d4:	18e3      	adds	r3, r4, r3
    49d6:	2b00      	cmp	r3, #0
    49d8:	dde5      	ble.n	49a6 <__aeabi_ddiv+0x50e>
    49da:	2201      	movs	r2, #1
    49dc:	4252      	negs	r2, r2
    49de:	e7f2      	b.n	49c6 <__aeabi_ddiv+0x52e>
    49e0:	001d      	movs	r5, r3
    49e2:	e6fa      	b.n	47da <__aeabi_ddiv+0x342>
    49e4:	469a      	mov	sl, r3
    49e6:	e71c      	b.n	4822 <__aeabi_ddiv+0x38a>
    49e8:	42b0      	cmp	r0, r6
    49ea:	d839      	bhi.n	4a60 <__aeabi_ddiv+0x5c8>
    49ec:	d06e      	beq.n	4acc <__aeabi_ddiv+0x634>
    49ee:	0011      	movs	r1, r2
    49f0:	e73a      	b.n	4868 <__aeabi_ddiv+0x3d0>
    49f2:	9302      	str	r3, [sp, #8]
    49f4:	e73a      	b.n	486c <__aeabi_ddiv+0x3d4>
    49f6:	2a1f      	cmp	r2, #31
    49f8:	dc3c      	bgt.n	4a74 <__aeabi_ddiv+0x5dc>
    49fa:	2320      	movs	r3, #32
    49fc:	1a9b      	subs	r3, r3, r2
    49fe:	000c      	movs	r4, r1
    4a00:	4658      	mov	r0, fp
    4a02:	4099      	lsls	r1, r3
    4a04:	4098      	lsls	r0, r3
    4a06:	1e4b      	subs	r3, r1, #1
    4a08:	4199      	sbcs	r1, r3
    4a0a:	465b      	mov	r3, fp
    4a0c:	40d4      	lsrs	r4, r2
    4a0e:	40d3      	lsrs	r3, r2
    4a10:	4320      	orrs	r0, r4
    4a12:	4308      	orrs	r0, r1
    4a14:	001a      	movs	r2, r3
    4a16:	0743      	lsls	r3, r0, #29
    4a18:	d009      	beq.n	4a2e <__aeabi_ddiv+0x596>
    4a1a:	230f      	movs	r3, #15
    4a1c:	4003      	ands	r3, r0
    4a1e:	2b04      	cmp	r3, #4
    4a20:	d005      	beq.n	4a2e <__aeabi_ddiv+0x596>
    4a22:	0001      	movs	r1, r0
    4a24:	1d08      	adds	r0, r1, #4
    4a26:	4288      	cmp	r0, r1
    4a28:	419b      	sbcs	r3, r3
    4a2a:	425b      	negs	r3, r3
    4a2c:	18d2      	adds	r2, r2, r3
    4a2e:	0213      	lsls	r3, r2, #8
    4a30:	d53a      	bpl.n	4aa8 <__aeabi_ddiv+0x610>
    4a32:	2301      	movs	r3, #1
    4a34:	9a02      	ldr	r2, [sp, #8]
    4a36:	2401      	movs	r4, #1
    4a38:	401a      	ands	r2, r3
    4a3a:	2300      	movs	r3, #0
    4a3c:	4694      	mov	ip, r2
    4a3e:	4698      	mov	r8, r3
    4a40:	2200      	movs	r2, #0
    4a42:	e5f7      	b.n	4634 <__aeabi_ddiv+0x19c>
    4a44:	2102      	movs	r1, #2
    4a46:	4249      	negs	r1, r1
    4a48:	468c      	mov	ip, r1
    4a4a:	9d03      	ldr	r5, [sp, #12]
    4a4c:	44e3      	add	fp, ip
    4a4e:	46ac      	mov	ip, r5
    4a50:	44e2      	add	sl, ip
    4a52:	45aa      	cmp	sl, r5
    4a54:	41ad      	sbcs	r5, r5
    4a56:	426d      	negs	r5, r5
    4a58:	4445      	add	r5, r8
    4a5a:	18ed      	adds	r5, r5, r3
    4a5c:	1a2d      	subs	r5, r5, r0
    4a5e:	e696      	b.n	478e <__aeabi_ddiv+0x2f6>
    4a60:	1e8a      	subs	r2, r1, #2
    4a62:	9903      	ldr	r1, [sp, #12]
    4a64:	004d      	lsls	r5, r1, #1
    4a66:	428d      	cmp	r5, r1
    4a68:	4189      	sbcs	r1, r1
    4a6a:	4249      	negs	r1, r1
    4a6c:	4441      	add	r1, r8
    4a6e:	1876      	adds	r6, r6, r1
    4a70:	9503      	str	r5, [sp, #12]
    4a72:	e78f      	b.n	4994 <__aeabi_ddiv+0x4fc>
    4a74:	201f      	movs	r0, #31
    4a76:	4240      	negs	r0, r0
    4a78:	1ac3      	subs	r3, r0, r3
    4a7a:	4658      	mov	r0, fp
    4a7c:	40d8      	lsrs	r0, r3
    4a7e:	0003      	movs	r3, r0
    4a80:	2a20      	cmp	r2, #32
    4a82:	d028      	beq.n	4ad6 <__aeabi_ddiv+0x63e>
    4a84:	2040      	movs	r0, #64	; 0x40
    4a86:	465d      	mov	r5, fp
    4a88:	1a82      	subs	r2, r0, r2
    4a8a:	4095      	lsls	r5, r2
    4a8c:	4329      	orrs	r1, r5
    4a8e:	1e4a      	subs	r2, r1, #1
    4a90:	4191      	sbcs	r1, r2
    4a92:	4319      	orrs	r1, r3
    4a94:	2307      	movs	r3, #7
    4a96:	2200      	movs	r2, #0
    4a98:	400b      	ands	r3, r1
    4a9a:	d009      	beq.n	4ab0 <__aeabi_ddiv+0x618>
    4a9c:	230f      	movs	r3, #15
    4a9e:	2200      	movs	r2, #0
    4aa0:	400b      	ands	r3, r1
    4aa2:	0008      	movs	r0, r1
    4aa4:	2b04      	cmp	r3, #4
    4aa6:	d1bd      	bne.n	4a24 <__aeabi_ddiv+0x58c>
    4aa8:	0001      	movs	r1, r0
    4aaa:	0753      	lsls	r3, r2, #29
    4aac:	0252      	lsls	r2, r2, #9
    4aae:	0b12      	lsrs	r2, r2, #12
    4ab0:	08c9      	lsrs	r1, r1, #3
    4ab2:	4319      	orrs	r1, r3
    4ab4:	2301      	movs	r3, #1
    4ab6:	4688      	mov	r8, r1
    4ab8:	9902      	ldr	r1, [sp, #8]
    4aba:	2400      	movs	r4, #0
    4abc:	4019      	ands	r1, r3
    4abe:	468c      	mov	ip, r1
    4ac0:	e5b8      	b.n	4634 <__aeabi_ddiv+0x19c>
    4ac2:	4552      	cmp	r2, sl
    4ac4:	d8be      	bhi.n	4a44 <__aeabi_ddiv+0x5ac>
    4ac6:	468b      	mov	fp, r1
    4ac8:	2500      	movs	r5, #0
    4aca:	e660      	b.n	478e <__aeabi_ddiv+0x2f6>
    4acc:	9d03      	ldr	r5, [sp, #12]
    4ace:	429d      	cmp	r5, r3
    4ad0:	d3c6      	bcc.n	4a60 <__aeabi_ddiv+0x5c8>
    4ad2:	0011      	movs	r1, r2
    4ad4:	e762      	b.n	499c <__aeabi_ddiv+0x504>
    4ad6:	2500      	movs	r5, #0
    4ad8:	e7d8      	b.n	4a8c <__aeabi_ddiv+0x5f4>
    4ada:	2280      	movs	r2, #128	; 0x80
    4adc:	465b      	mov	r3, fp
    4ade:	0312      	lsls	r2, r2, #12
    4ae0:	431a      	orrs	r2, r3
    4ae2:	9b01      	ldr	r3, [sp, #4]
    4ae4:	0312      	lsls	r2, r2, #12
    4ae6:	0b12      	lsrs	r2, r2, #12
    4ae8:	469c      	mov	ip, r3
    4aea:	4688      	mov	r8, r1
    4aec:	4c03      	ldr	r4, [pc, #12]	; (4afc <__aeabi_ddiv+0x664>)
    4aee:	e5a1      	b.n	4634 <__aeabi_ddiv+0x19c>
    4af0:	000003ff 	.word	0x000003ff
    4af4:	feffffff 	.word	0xfeffffff
    4af8:	000007fe 	.word	0x000007fe
    4afc:	000007ff 	.word	0x000007ff

00004b00 <__aeabi_dmul>:
    4b00:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b02:	4657      	mov	r7, sl
    4b04:	4645      	mov	r5, r8
    4b06:	46de      	mov	lr, fp
    4b08:	464e      	mov	r6, r9
    4b0a:	b5e0      	push	{r5, r6, r7, lr}
    4b0c:	030c      	lsls	r4, r1, #12
    4b0e:	4698      	mov	r8, r3
    4b10:	004e      	lsls	r6, r1, #1
    4b12:	0b23      	lsrs	r3, r4, #12
    4b14:	b087      	sub	sp, #28
    4b16:	0007      	movs	r7, r0
    4b18:	4692      	mov	sl, r2
    4b1a:	469b      	mov	fp, r3
    4b1c:	0d76      	lsrs	r6, r6, #21
    4b1e:	0fcd      	lsrs	r5, r1, #31
    4b20:	2e00      	cmp	r6, #0
    4b22:	d06b      	beq.n	4bfc <__aeabi_dmul+0xfc>
    4b24:	4b6d      	ldr	r3, [pc, #436]	; (4cdc <__aeabi_dmul+0x1dc>)
    4b26:	429e      	cmp	r6, r3
    4b28:	d035      	beq.n	4b96 <__aeabi_dmul+0x96>
    4b2a:	2480      	movs	r4, #128	; 0x80
    4b2c:	465b      	mov	r3, fp
    4b2e:	0f42      	lsrs	r2, r0, #29
    4b30:	0424      	lsls	r4, r4, #16
    4b32:	00db      	lsls	r3, r3, #3
    4b34:	4314      	orrs	r4, r2
    4b36:	431c      	orrs	r4, r3
    4b38:	00c3      	lsls	r3, r0, #3
    4b3a:	4699      	mov	r9, r3
    4b3c:	4b68      	ldr	r3, [pc, #416]	; (4ce0 <__aeabi_dmul+0x1e0>)
    4b3e:	46a3      	mov	fp, r4
    4b40:	469c      	mov	ip, r3
    4b42:	2300      	movs	r3, #0
    4b44:	2700      	movs	r7, #0
    4b46:	4466      	add	r6, ip
    4b48:	9302      	str	r3, [sp, #8]
    4b4a:	4643      	mov	r3, r8
    4b4c:	031c      	lsls	r4, r3, #12
    4b4e:	005a      	lsls	r2, r3, #1
    4b50:	0fdb      	lsrs	r3, r3, #31
    4b52:	4650      	mov	r0, sl
    4b54:	0b24      	lsrs	r4, r4, #12
    4b56:	0d52      	lsrs	r2, r2, #21
    4b58:	4698      	mov	r8, r3
    4b5a:	d100      	bne.n	4b5e <__aeabi_dmul+0x5e>
    4b5c:	e076      	b.n	4c4c <__aeabi_dmul+0x14c>
    4b5e:	4b5f      	ldr	r3, [pc, #380]	; (4cdc <__aeabi_dmul+0x1dc>)
    4b60:	429a      	cmp	r2, r3
    4b62:	d06d      	beq.n	4c40 <__aeabi_dmul+0x140>
    4b64:	2380      	movs	r3, #128	; 0x80
    4b66:	0f41      	lsrs	r1, r0, #29
    4b68:	041b      	lsls	r3, r3, #16
    4b6a:	430b      	orrs	r3, r1
    4b6c:	495c      	ldr	r1, [pc, #368]	; (4ce0 <__aeabi_dmul+0x1e0>)
    4b6e:	00e4      	lsls	r4, r4, #3
    4b70:	468c      	mov	ip, r1
    4b72:	431c      	orrs	r4, r3
    4b74:	00c3      	lsls	r3, r0, #3
    4b76:	2000      	movs	r0, #0
    4b78:	4462      	add	r2, ip
    4b7a:	4641      	mov	r1, r8
    4b7c:	18b6      	adds	r6, r6, r2
    4b7e:	4069      	eors	r1, r5
    4b80:	1c72      	adds	r2, r6, #1
    4b82:	9101      	str	r1, [sp, #4]
    4b84:	4694      	mov	ip, r2
    4b86:	4307      	orrs	r7, r0
    4b88:	2f0f      	cmp	r7, #15
    4b8a:	d900      	bls.n	4b8e <__aeabi_dmul+0x8e>
    4b8c:	e0b0      	b.n	4cf0 <__aeabi_dmul+0x1f0>
    4b8e:	4a55      	ldr	r2, [pc, #340]	; (4ce4 <__aeabi_dmul+0x1e4>)
    4b90:	00bf      	lsls	r7, r7, #2
    4b92:	59d2      	ldr	r2, [r2, r7]
    4b94:	4697      	mov	pc, r2
    4b96:	465b      	mov	r3, fp
    4b98:	4303      	orrs	r3, r0
    4b9a:	4699      	mov	r9, r3
    4b9c:	d000      	beq.n	4ba0 <__aeabi_dmul+0xa0>
    4b9e:	e087      	b.n	4cb0 <__aeabi_dmul+0x1b0>
    4ba0:	2300      	movs	r3, #0
    4ba2:	469b      	mov	fp, r3
    4ba4:	3302      	adds	r3, #2
    4ba6:	2708      	movs	r7, #8
    4ba8:	9302      	str	r3, [sp, #8]
    4baa:	e7ce      	b.n	4b4a <__aeabi_dmul+0x4a>
    4bac:	4642      	mov	r2, r8
    4bae:	9201      	str	r2, [sp, #4]
    4bb0:	2802      	cmp	r0, #2
    4bb2:	d067      	beq.n	4c84 <__aeabi_dmul+0x184>
    4bb4:	2803      	cmp	r0, #3
    4bb6:	d100      	bne.n	4bba <__aeabi_dmul+0xba>
    4bb8:	e20e      	b.n	4fd8 <__aeabi_dmul+0x4d8>
    4bba:	2801      	cmp	r0, #1
    4bbc:	d000      	beq.n	4bc0 <__aeabi_dmul+0xc0>
    4bbe:	e162      	b.n	4e86 <__aeabi_dmul+0x386>
    4bc0:	2300      	movs	r3, #0
    4bc2:	2400      	movs	r4, #0
    4bc4:	2200      	movs	r2, #0
    4bc6:	4699      	mov	r9, r3
    4bc8:	9901      	ldr	r1, [sp, #4]
    4bca:	4001      	ands	r1, r0
    4bcc:	b2cd      	uxtb	r5, r1
    4bce:	2100      	movs	r1, #0
    4bd0:	0312      	lsls	r2, r2, #12
    4bd2:	0d0b      	lsrs	r3, r1, #20
    4bd4:	0b12      	lsrs	r2, r2, #12
    4bd6:	051b      	lsls	r3, r3, #20
    4bd8:	4313      	orrs	r3, r2
    4bda:	4a43      	ldr	r2, [pc, #268]	; (4ce8 <__aeabi_dmul+0x1e8>)
    4bdc:	0524      	lsls	r4, r4, #20
    4bde:	4013      	ands	r3, r2
    4be0:	431c      	orrs	r4, r3
    4be2:	0064      	lsls	r4, r4, #1
    4be4:	07ed      	lsls	r5, r5, #31
    4be6:	0864      	lsrs	r4, r4, #1
    4be8:	432c      	orrs	r4, r5
    4bea:	4648      	mov	r0, r9
    4bec:	0021      	movs	r1, r4
    4bee:	b007      	add	sp, #28
    4bf0:	bc3c      	pop	{r2, r3, r4, r5}
    4bf2:	4690      	mov	r8, r2
    4bf4:	4699      	mov	r9, r3
    4bf6:	46a2      	mov	sl, r4
    4bf8:	46ab      	mov	fp, r5
    4bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4bfc:	4303      	orrs	r3, r0
    4bfe:	4699      	mov	r9, r3
    4c00:	d04f      	beq.n	4ca2 <__aeabi_dmul+0x1a2>
    4c02:	465b      	mov	r3, fp
    4c04:	2b00      	cmp	r3, #0
    4c06:	d100      	bne.n	4c0a <__aeabi_dmul+0x10a>
    4c08:	e189      	b.n	4f1e <__aeabi_dmul+0x41e>
    4c0a:	4658      	mov	r0, fp
    4c0c:	f000 fd7a 	bl	5704 <__clzsi2>
    4c10:	0003      	movs	r3, r0
    4c12:	3b0b      	subs	r3, #11
    4c14:	2b1c      	cmp	r3, #28
    4c16:	dd00      	ble.n	4c1a <__aeabi_dmul+0x11a>
    4c18:	e17a      	b.n	4f10 <__aeabi_dmul+0x410>
    4c1a:	221d      	movs	r2, #29
    4c1c:	1ad3      	subs	r3, r2, r3
    4c1e:	003a      	movs	r2, r7
    4c20:	0001      	movs	r1, r0
    4c22:	465c      	mov	r4, fp
    4c24:	40da      	lsrs	r2, r3
    4c26:	3908      	subs	r1, #8
    4c28:	408c      	lsls	r4, r1
    4c2a:	0013      	movs	r3, r2
    4c2c:	408f      	lsls	r7, r1
    4c2e:	4323      	orrs	r3, r4
    4c30:	469b      	mov	fp, r3
    4c32:	46b9      	mov	r9, r7
    4c34:	2300      	movs	r3, #0
    4c36:	4e2d      	ldr	r6, [pc, #180]	; (4cec <__aeabi_dmul+0x1ec>)
    4c38:	2700      	movs	r7, #0
    4c3a:	1a36      	subs	r6, r6, r0
    4c3c:	9302      	str	r3, [sp, #8]
    4c3e:	e784      	b.n	4b4a <__aeabi_dmul+0x4a>
    4c40:	4653      	mov	r3, sl
    4c42:	4323      	orrs	r3, r4
    4c44:	d12a      	bne.n	4c9c <__aeabi_dmul+0x19c>
    4c46:	2400      	movs	r4, #0
    4c48:	2002      	movs	r0, #2
    4c4a:	e796      	b.n	4b7a <__aeabi_dmul+0x7a>
    4c4c:	4653      	mov	r3, sl
    4c4e:	4323      	orrs	r3, r4
    4c50:	d020      	beq.n	4c94 <__aeabi_dmul+0x194>
    4c52:	2c00      	cmp	r4, #0
    4c54:	d100      	bne.n	4c58 <__aeabi_dmul+0x158>
    4c56:	e157      	b.n	4f08 <__aeabi_dmul+0x408>
    4c58:	0020      	movs	r0, r4
    4c5a:	f000 fd53 	bl	5704 <__clzsi2>
    4c5e:	0003      	movs	r3, r0
    4c60:	3b0b      	subs	r3, #11
    4c62:	2b1c      	cmp	r3, #28
    4c64:	dd00      	ble.n	4c68 <__aeabi_dmul+0x168>
    4c66:	e149      	b.n	4efc <__aeabi_dmul+0x3fc>
    4c68:	211d      	movs	r1, #29
    4c6a:	1acb      	subs	r3, r1, r3
    4c6c:	4651      	mov	r1, sl
    4c6e:	0002      	movs	r2, r0
    4c70:	40d9      	lsrs	r1, r3
    4c72:	4653      	mov	r3, sl
    4c74:	3a08      	subs	r2, #8
    4c76:	4094      	lsls	r4, r2
    4c78:	4093      	lsls	r3, r2
    4c7a:	430c      	orrs	r4, r1
    4c7c:	4a1b      	ldr	r2, [pc, #108]	; (4cec <__aeabi_dmul+0x1ec>)
    4c7e:	1a12      	subs	r2, r2, r0
    4c80:	2000      	movs	r0, #0
    4c82:	e77a      	b.n	4b7a <__aeabi_dmul+0x7a>
    4c84:	2501      	movs	r5, #1
    4c86:	9b01      	ldr	r3, [sp, #4]
    4c88:	4c14      	ldr	r4, [pc, #80]	; (4cdc <__aeabi_dmul+0x1dc>)
    4c8a:	401d      	ands	r5, r3
    4c8c:	2300      	movs	r3, #0
    4c8e:	2200      	movs	r2, #0
    4c90:	4699      	mov	r9, r3
    4c92:	e79c      	b.n	4bce <__aeabi_dmul+0xce>
    4c94:	2400      	movs	r4, #0
    4c96:	2200      	movs	r2, #0
    4c98:	2001      	movs	r0, #1
    4c9a:	e76e      	b.n	4b7a <__aeabi_dmul+0x7a>
    4c9c:	4653      	mov	r3, sl
    4c9e:	2003      	movs	r0, #3
    4ca0:	e76b      	b.n	4b7a <__aeabi_dmul+0x7a>
    4ca2:	2300      	movs	r3, #0
    4ca4:	469b      	mov	fp, r3
    4ca6:	3301      	adds	r3, #1
    4ca8:	2704      	movs	r7, #4
    4caa:	2600      	movs	r6, #0
    4cac:	9302      	str	r3, [sp, #8]
    4cae:	e74c      	b.n	4b4a <__aeabi_dmul+0x4a>
    4cb0:	2303      	movs	r3, #3
    4cb2:	4681      	mov	r9, r0
    4cb4:	270c      	movs	r7, #12
    4cb6:	9302      	str	r3, [sp, #8]
    4cb8:	e747      	b.n	4b4a <__aeabi_dmul+0x4a>
    4cba:	2280      	movs	r2, #128	; 0x80
    4cbc:	2300      	movs	r3, #0
    4cbe:	2500      	movs	r5, #0
    4cc0:	0312      	lsls	r2, r2, #12
    4cc2:	4699      	mov	r9, r3
    4cc4:	4c05      	ldr	r4, [pc, #20]	; (4cdc <__aeabi_dmul+0x1dc>)
    4cc6:	e782      	b.n	4bce <__aeabi_dmul+0xce>
    4cc8:	465c      	mov	r4, fp
    4cca:	464b      	mov	r3, r9
    4ccc:	9802      	ldr	r0, [sp, #8]
    4cce:	e76f      	b.n	4bb0 <__aeabi_dmul+0xb0>
    4cd0:	465c      	mov	r4, fp
    4cd2:	464b      	mov	r3, r9
    4cd4:	9501      	str	r5, [sp, #4]
    4cd6:	9802      	ldr	r0, [sp, #8]
    4cd8:	e76a      	b.n	4bb0 <__aeabi_dmul+0xb0>
    4cda:	46c0      	nop			; (mov r8, r8)
    4cdc:	000007ff 	.word	0x000007ff
    4ce0:	fffffc01 	.word	0xfffffc01
    4ce4:	00006070 	.word	0x00006070
    4ce8:	800fffff 	.word	0x800fffff
    4cec:	fffffc0d 	.word	0xfffffc0d
    4cf0:	464a      	mov	r2, r9
    4cf2:	4649      	mov	r1, r9
    4cf4:	0c17      	lsrs	r7, r2, #16
    4cf6:	0c1a      	lsrs	r2, r3, #16
    4cf8:	041b      	lsls	r3, r3, #16
    4cfa:	0c1b      	lsrs	r3, r3, #16
    4cfc:	0408      	lsls	r0, r1, #16
    4cfe:	0019      	movs	r1, r3
    4d00:	0c00      	lsrs	r0, r0, #16
    4d02:	4341      	muls	r1, r0
    4d04:	0015      	movs	r5, r2
    4d06:	4688      	mov	r8, r1
    4d08:	0019      	movs	r1, r3
    4d0a:	437d      	muls	r5, r7
    4d0c:	4379      	muls	r1, r7
    4d0e:	9503      	str	r5, [sp, #12]
    4d10:	4689      	mov	r9, r1
    4d12:	0029      	movs	r1, r5
    4d14:	0015      	movs	r5, r2
    4d16:	4345      	muls	r5, r0
    4d18:	444d      	add	r5, r9
    4d1a:	9502      	str	r5, [sp, #8]
    4d1c:	4645      	mov	r5, r8
    4d1e:	0c2d      	lsrs	r5, r5, #16
    4d20:	46aa      	mov	sl, r5
    4d22:	9d02      	ldr	r5, [sp, #8]
    4d24:	4455      	add	r5, sl
    4d26:	45a9      	cmp	r9, r5
    4d28:	d906      	bls.n	4d38 <__aeabi_dmul+0x238>
    4d2a:	468a      	mov	sl, r1
    4d2c:	2180      	movs	r1, #128	; 0x80
    4d2e:	0249      	lsls	r1, r1, #9
    4d30:	4689      	mov	r9, r1
    4d32:	44ca      	add	sl, r9
    4d34:	4651      	mov	r1, sl
    4d36:	9103      	str	r1, [sp, #12]
    4d38:	0c29      	lsrs	r1, r5, #16
    4d3a:	9104      	str	r1, [sp, #16]
    4d3c:	4641      	mov	r1, r8
    4d3e:	0409      	lsls	r1, r1, #16
    4d40:	042d      	lsls	r5, r5, #16
    4d42:	0c09      	lsrs	r1, r1, #16
    4d44:	4688      	mov	r8, r1
    4d46:	0029      	movs	r1, r5
    4d48:	0c25      	lsrs	r5, r4, #16
    4d4a:	0424      	lsls	r4, r4, #16
    4d4c:	4441      	add	r1, r8
    4d4e:	0c24      	lsrs	r4, r4, #16
    4d50:	9105      	str	r1, [sp, #20]
    4d52:	0021      	movs	r1, r4
    4d54:	4341      	muls	r1, r0
    4d56:	4688      	mov	r8, r1
    4d58:	0021      	movs	r1, r4
    4d5a:	4379      	muls	r1, r7
    4d5c:	468a      	mov	sl, r1
    4d5e:	4368      	muls	r0, r5
    4d60:	4641      	mov	r1, r8
    4d62:	4450      	add	r0, sl
    4d64:	4681      	mov	r9, r0
    4d66:	0c08      	lsrs	r0, r1, #16
    4d68:	4448      	add	r0, r9
    4d6a:	436f      	muls	r7, r5
    4d6c:	4582      	cmp	sl, r0
    4d6e:	d903      	bls.n	4d78 <__aeabi_dmul+0x278>
    4d70:	2180      	movs	r1, #128	; 0x80
    4d72:	0249      	lsls	r1, r1, #9
    4d74:	4689      	mov	r9, r1
    4d76:	444f      	add	r7, r9
    4d78:	0c01      	lsrs	r1, r0, #16
    4d7a:	4689      	mov	r9, r1
    4d7c:	0039      	movs	r1, r7
    4d7e:	4449      	add	r1, r9
    4d80:	9102      	str	r1, [sp, #8]
    4d82:	4641      	mov	r1, r8
    4d84:	040f      	lsls	r7, r1, #16
    4d86:	9904      	ldr	r1, [sp, #16]
    4d88:	0c3f      	lsrs	r7, r7, #16
    4d8a:	4688      	mov	r8, r1
    4d8c:	0400      	lsls	r0, r0, #16
    4d8e:	19c0      	adds	r0, r0, r7
    4d90:	4480      	add	r8, r0
    4d92:	4641      	mov	r1, r8
    4d94:	9104      	str	r1, [sp, #16]
    4d96:	4659      	mov	r1, fp
    4d98:	0c0f      	lsrs	r7, r1, #16
    4d9a:	0409      	lsls	r1, r1, #16
    4d9c:	0c09      	lsrs	r1, r1, #16
    4d9e:	4688      	mov	r8, r1
    4da0:	4359      	muls	r1, r3
    4da2:	468a      	mov	sl, r1
    4da4:	0039      	movs	r1, r7
    4da6:	4351      	muls	r1, r2
    4da8:	4689      	mov	r9, r1
    4daa:	4641      	mov	r1, r8
    4dac:	434a      	muls	r2, r1
    4dae:	4651      	mov	r1, sl
    4db0:	0c09      	lsrs	r1, r1, #16
    4db2:	468b      	mov	fp, r1
    4db4:	437b      	muls	r3, r7
    4db6:	18d2      	adds	r2, r2, r3
    4db8:	445a      	add	r2, fp
    4dba:	4293      	cmp	r3, r2
    4dbc:	d903      	bls.n	4dc6 <__aeabi_dmul+0x2c6>
    4dbe:	2380      	movs	r3, #128	; 0x80
    4dc0:	025b      	lsls	r3, r3, #9
    4dc2:	469b      	mov	fp, r3
    4dc4:	44d9      	add	r9, fp
    4dc6:	4651      	mov	r1, sl
    4dc8:	0409      	lsls	r1, r1, #16
    4dca:	0c09      	lsrs	r1, r1, #16
    4dcc:	468a      	mov	sl, r1
    4dce:	4641      	mov	r1, r8
    4dd0:	4361      	muls	r1, r4
    4dd2:	437c      	muls	r4, r7
    4dd4:	0c13      	lsrs	r3, r2, #16
    4dd6:	0412      	lsls	r2, r2, #16
    4dd8:	444b      	add	r3, r9
    4dda:	4452      	add	r2, sl
    4ddc:	46a1      	mov	r9, r4
    4dde:	468a      	mov	sl, r1
    4de0:	003c      	movs	r4, r7
    4de2:	4641      	mov	r1, r8
    4de4:	436c      	muls	r4, r5
    4de6:	434d      	muls	r5, r1
    4de8:	4651      	mov	r1, sl
    4dea:	444d      	add	r5, r9
    4dec:	0c0f      	lsrs	r7, r1, #16
    4dee:	197d      	adds	r5, r7, r5
    4df0:	45a9      	cmp	r9, r5
    4df2:	d903      	bls.n	4dfc <__aeabi_dmul+0x2fc>
    4df4:	2180      	movs	r1, #128	; 0x80
    4df6:	0249      	lsls	r1, r1, #9
    4df8:	4688      	mov	r8, r1
    4dfa:	4444      	add	r4, r8
    4dfc:	9f04      	ldr	r7, [sp, #16]
    4dfe:	9903      	ldr	r1, [sp, #12]
    4e00:	46b8      	mov	r8, r7
    4e02:	4441      	add	r1, r8
    4e04:	468b      	mov	fp, r1
    4e06:	4583      	cmp	fp, r0
    4e08:	4180      	sbcs	r0, r0
    4e0a:	4241      	negs	r1, r0
    4e0c:	4688      	mov	r8, r1
    4e0e:	4651      	mov	r1, sl
    4e10:	0408      	lsls	r0, r1, #16
    4e12:	042f      	lsls	r7, r5, #16
    4e14:	0c00      	lsrs	r0, r0, #16
    4e16:	183f      	adds	r7, r7, r0
    4e18:	4658      	mov	r0, fp
    4e1a:	9902      	ldr	r1, [sp, #8]
    4e1c:	1810      	adds	r0, r2, r0
    4e1e:	4689      	mov	r9, r1
    4e20:	4290      	cmp	r0, r2
    4e22:	4192      	sbcs	r2, r2
    4e24:	444f      	add	r7, r9
    4e26:	46ba      	mov	sl, r7
    4e28:	4252      	negs	r2, r2
    4e2a:	4699      	mov	r9, r3
    4e2c:	4693      	mov	fp, r2
    4e2e:	44c2      	add	sl, r8
    4e30:	44d1      	add	r9, sl
    4e32:	44cb      	add	fp, r9
    4e34:	428f      	cmp	r7, r1
    4e36:	41bf      	sbcs	r7, r7
    4e38:	45c2      	cmp	sl, r8
    4e3a:	4189      	sbcs	r1, r1
    4e3c:	4599      	cmp	r9, r3
    4e3e:	419b      	sbcs	r3, r3
    4e40:	4593      	cmp	fp, r2
    4e42:	4192      	sbcs	r2, r2
    4e44:	427f      	negs	r7, r7
    4e46:	4249      	negs	r1, r1
    4e48:	0c2d      	lsrs	r5, r5, #16
    4e4a:	4252      	negs	r2, r2
    4e4c:	430f      	orrs	r7, r1
    4e4e:	425b      	negs	r3, r3
    4e50:	4313      	orrs	r3, r2
    4e52:	197f      	adds	r7, r7, r5
    4e54:	18ff      	adds	r7, r7, r3
    4e56:	465b      	mov	r3, fp
    4e58:	193c      	adds	r4, r7, r4
    4e5a:	0ddb      	lsrs	r3, r3, #23
    4e5c:	9a05      	ldr	r2, [sp, #20]
    4e5e:	0264      	lsls	r4, r4, #9
    4e60:	431c      	orrs	r4, r3
    4e62:	0243      	lsls	r3, r0, #9
    4e64:	4313      	orrs	r3, r2
    4e66:	1e5d      	subs	r5, r3, #1
    4e68:	41ab      	sbcs	r3, r5
    4e6a:	465a      	mov	r2, fp
    4e6c:	0dc0      	lsrs	r0, r0, #23
    4e6e:	4303      	orrs	r3, r0
    4e70:	0252      	lsls	r2, r2, #9
    4e72:	4313      	orrs	r3, r2
    4e74:	01e2      	lsls	r2, r4, #7
    4e76:	d556      	bpl.n	4f26 <__aeabi_dmul+0x426>
    4e78:	2001      	movs	r0, #1
    4e7a:	085a      	lsrs	r2, r3, #1
    4e7c:	4003      	ands	r3, r0
    4e7e:	4313      	orrs	r3, r2
    4e80:	07e2      	lsls	r2, r4, #31
    4e82:	4313      	orrs	r3, r2
    4e84:	0864      	lsrs	r4, r4, #1
    4e86:	485a      	ldr	r0, [pc, #360]	; (4ff0 <__aeabi_dmul+0x4f0>)
    4e88:	4460      	add	r0, ip
    4e8a:	2800      	cmp	r0, #0
    4e8c:	dd4d      	ble.n	4f2a <__aeabi_dmul+0x42a>
    4e8e:	075a      	lsls	r2, r3, #29
    4e90:	d009      	beq.n	4ea6 <__aeabi_dmul+0x3a6>
    4e92:	220f      	movs	r2, #15
    4e94:	401a      	ands	r2, r3
    4e96:	2a04      	cmp	r2, #4
    4e98:	d005      	beq.n	4ea6 <__aeabi_dmul+0x3a6>
    4e9a:	1d1a      	adds	r2, r3, #4
    4e9c:	429a      	cmp	r2, r3
    4e9e:	419b      	sbcs	r3, r3
    4ea0:	425b      	negs	r3, r3
    4ea2:	18e4      	adds	r4, r4, r3
    4ea4:	0013      	movs	r3, r2
    4ea6:	01e2      	lsls	r2, r4, #7
    4ea8:	d504      	bpl.n	4eb4 <__aeabi_dmul+0x3b4>
    4eaa:	2080      	movs	r0, #128	; 0x80
    4eac:	4a51      	ldr	r2, [pc, #324]	; (4ff4 <__aeabi_dmul+0x4f4>)
    4eae:	00c0      	lsls	r0, r0, #3
    4eb0:	4014      	ands	r4, r2
    4eb2:	4460      	add	r0, ip
    4eb4:	4a50      	ldr	r2, [pc, #320]	; (4ff8 <__aeabi_dmul+0x4f8>)
    4eb6:	4290      	cmp	r0, r2
    4eb8:	dd00      	ble.n	4ebc <__aeabi_dmul+0x3bc>
    4eba:	e6e3      	b.n	4c84 <__aeabi_dmul+0x184>
    4ebc:	2501      	movs	r5, #1
    4ebe:	08db      	lsrs	r3, r3, #3
    4ec0:	0762      	lsls	r2, r4, #29
    4ec2:	431a      	orrs	r2, r3
    4ec4:	0264      	lsls	r4, r4, #9
    4ec6:	9b01      	ldr	r3, [sp, #4]
    4ec8:	4691      	mov	r9, r2
    4eca:	0b22      	lsrs	r2, r4, #12
    4ecc:	0544      	lsls	r4, r0, #21
    4ece:	0d64      	lsrs	r4, r4, #21
    4ed0:	401d      	ands	r5, r3
    4ed2:	e67c      	b.n	4bce <__aeabi_dmul+0xce>
    4ed4:	2280      	movs	r2, #128	; 0x80
    4ed6:	4659      	mov	r1, fp
    4ed8:	0312      	lsls	r2, r2, #12
    4eda:	4211      	tst	r1, r2
    4edc:	d008      	beq.n	4ef0 <__aeabi_dmul+0x3f0>
    4ede:	4214      	tst	r4, r2
    4ee0:	d106      	bne.n	4ef0 <__aeabi_dmul+0x3f0>
    4ee2:	4322      	orrs	r2, r4
    4ee4:	0312      	lsls	r2, r2, #12
    4ee6:	0b12      	lsrs	r2, r2, #12
    4ee8:	4645      	mov	r5, r8
    4eea:	4699      	mov	r9, r3
    4eec:	4c43      	ldr	r4, [pc, #268]	; (4ffc <__aeabi_dmul+0x4fc>)
    4eee:	e66e      	b.n	4bce <__aeabi_dmul+0xce>
    4ef0:	465b      	mov	r3, fp
    4ef2:	431a      	orrs	r2, r3
    4ef4:	0312      	lsls	r2, r2, #12
    4ef6:	0b12      	lsrs	r2, r2, #12
    4ef8:	4c40      	ldr	r4, [pc, #256]	; (4ffc <__aeabi_dmul+0x4fc>)
    4efa:	e668      	b.n	4bce <__aeabi_dmul+0xce>
    4efc:	0003      	movs	r3, r0
    4efe:	4654      	mov	r4, sl
    4f00:	3b28      	subs	r3, #40	; 0x28
    4f02:	409c      	lsls	r4, r3
    4f04:	2300      	movs	r3, #0
    4f06:	e6b9      	b.n	4c7c <__aeabi_dmul+0x17c>
    4f08:	f000 fbfc 	bl	5704 <__clzsi2>
    4f0c:	3020      	adds	r0, #32
    4f0e:	e6a6      	b.n	4c5e <__aeabi_dmul+0x15e>
    4f10:	0003      	movs	r3, r0
    4f12:	3b28      	subs	r3, #40	; 0x28
    4f14:	409f      	lsls	r7, r3
    4f16:	2300      	movs	r3, #0
    4f18:	46bb      	mov	fp, r7
    4f1a:	4699      	mov	r9, r3
    4f1c:	e68a      	b.n	4c34 <__aeabi_dmul+0x134>
    4f1e:	f000 fbf1 	bl	5704 <__clzsi2>
    4f22:	3020      	adds	r0, #32
    4f24:	e674      	b.n	4c10 <__aeabi_dmul+0x110>
    4f26:	46b4      	mov	ip, r6
    4f28:	e7ad      	b.n	4e86 <__aeabi_dmul+0x386>
    4f2a:	2501      	movs	r5, #1
    4f2c:	1a2a      	subs	r2, r5, r0
    4f2e:	2a38      	cmp	r2, #56	; 0x38
    4f30:	dd06      	ble.n	4f40 <__aeabi_dmul+0x440>
    4f32:	9b01      	ldr	r3, [sp, #4]
    4f34:	2400      	movs	r4, #0
    4f36:	401d      	ands	r5, r3
    4f38:	2300      	movs	r3, #0
    4f3a:	2200      	movs	r2, #0
    4f3c:	4699      	mov	r9, r3
    4f3e:	e646      	b.n	4bce <__aeabi_dmul+0xce>
    4f40:	2a1f      	cmp	r2, #31
    4f42:	dc21      	bgt.n	4f88 <__aeabi_dmul+0x488>
    4f44:	2520      	movs	r5, #32
    4f46:	0020      	movs	r0, r4
    4f48:	1aad      	subs	r5, r5, r2
    4f4a:	001e      	movs	r6, r3
    4f4c:	40ab      	lsls	r3, r5
    4f4e:	40a8      	lsls	r0, r5
    4f50:	40d6      	lsrs	r6, r2
    4f52:	1e5d      	subs	r5, r3, #1
    4f54:	41ab      	sbcs	r3, r5
    4f56:	4330      	orrs	r0, r6
    4f58:	4318      	orrs	r0, r3
    4f5a:	40d4      	lsrs	r4, r2
    4f5c:	0743      	lsls	r3, r0, #29
    4f5e:	d009      	beq.n	4f74 <__aeabi_dmul+0x474>
    4f60:	230f      	movs	r3, #15
    4f62:	4003      	ands	r3, r0
    4f64:	2b04      	cmp	r3, #4
    4f66:	d005      	beq.n	4f74 <__aeabi_dmul+0x474>
    4f68:	0003      	movs	r3, r0
    4f6a:	1d18      	adds	r0, r3, #4
    4f6c:	4298      	cmp	r0, r3
    4f6e:	419b      	sbcs	r3, r3
    4f70:	425b      	negs	r3, r3
    4f72:	18e4      	adds	r4, r4, r3
    4f74:	0223      	lsls	r3, r4, #8
    4f76:	d521      	bpl.n	4fbc <__aeabi_dmul+0x4bc>
    4f78:	2501      	movs	r5, #1
    4f7a:	9b01      	ldr	r3, [sp, #4]
    4f7c:	2401      	movs	r4, #1
    4f7e:	401d      	ands	r5, r3
    4f80:	2300      	movs	r3, #0
    4f82:	2200      	movs	r2, #0
    4f84:	4699      	mov	r9, r3
    4f86:	e622      	b.n	4bce <__aeabi_dmul+0xce>
    4f88:	251f      	movs	r5, #31
    4f8a:	0021      	movs	r1, r4
    4f8c:	426d      	negs	r5, r5
    4f8e:	1a28      	subs	r0, r5, r0
    4f90:	40c1      	lsrs	r1, r0
    4f92:	0008      	movs	r0, r1
    4f94:	2a20      	cmp	r2, #32
    4f96:	d01d      	beq.n	4fd4 <__aeabi_dmul+0x4d4>
    4f98:	355f      	adds	r5, #95	; 0x5f
    4f9a:	1aaa      	subs	r2, r5, r2
    4f9c:	4094      	lsls	r4, r2
    4f9e:	4323      	orrs	r3, r4
    4fa0:	1e5c      	subs	r4, r3, #1
    4fa2:	41a3      	sbcs	r3, r4
    4fa4:	2507      	movs	r5, #7
    4fa6:	4303      	orrs	r3, r0
    4fa8:	401d      	ands	r5, r3
    4faa:	2200      	movs	r2, #0
    4fac:	2d00      	cmp	r5, #0
    4fae:	d009      	beq.n	4fc4 <__aeabi_dmul+0x4c4>
    4fb0:	220f      	movs	r2, #15
    4fb2:	2400      	movs	r4, #0
    4fb4:	401a      	ands	r2, r3
    4fb6:	0018      	movs	r0, r3
    4fb8:	2a04      	cmp	r2, #4
    4fba:	d1d6      	bne.n	4f6a <__aeabi_dmul+0x46a>
    4fbc:	0003      	movs	r3, r0
    4fbe:	0765      	lsls	r5, r4, #29
    4fc0:	0264      	lsls	r4, r4, #9
    4fc2:	0b22      	lsrs	r2, r4, #12
    4fc4:	08db      	lsrs	r3, r3, #3
    4fc6:	432b      	orrs	r3, r5
    4fc8:	2501      	movs	r5, #1
    4fca:	4699      	mov	r9, r3
    4fcc:	9b01      	ldr	r3, [sp, #4]
    4fce:	2400      	movs	r4, #0
    4fd0:	401d      	ands	r5, r3
    4fd2:	e5fc      	b.n	4bce <__aeabi_dmul+0xce>
    4fd4:	2400      	movs	r4, #0
    4fd6:	e7e2      	b.n	4f9e <__aeabi_dmul+0x49e>
    4fd8:	2280      	movs	r2, #128	; 0x80
    4fda:	2501      	movs	r5, #1
    4fdc:	0312      	lsls	r2, r2, #12
    4fde:	4322      	orrs	r2, r4
    4fe0:	9901      	ldr	r1, [sp, #4]
    4fe2:	0312      	lsls	r2, r2, #12
    4fe4:	0b12      	lsrs	r2, r2, #12
    4fe6:	400d      	ands	r5, r1
    4fe8:	4699      	mov	r9, r3
    4fea:	4c04      	ldr	r4, [pc, #16]	; (4ffc <__aeabi_dmul+0x4fc>)
    4fec:	e5ef      	b.n	4bce <__aeabi_dmul+0xce>
    4fee:	46c0      	nop			; (mov r8, r8)
    4ff0:	000003ff 	.word	0x000003ff
    4ff4:	feffffff 	.word	0xfeffffff
    4ff8:	000007fe 	.word	0x000007fe
    4ffc:	000007ff 	.word	0x000007ff

00005000 <__aeabi_dsub>:
    5000:	b5f0      	push	{r4, r5, r6, r7, lr}
    5002:	4646      	mov	r6, r8
    5004:	46d6      	mov	lr, sl
    5006:	464f      	mov	r7, r9
    5008:	030c      	lsls	r4, r1, #12
    500a:	b5c0      	push	{r6, r7, lr}
    500c:	0fcd      	lsrs	r5, r1, #31
    500e:	004e      	lsls	r6, r1, #1
    5010:	0a61      	lsrs	r1, r4, #9
    5012:	0f44      	lsrs	r4, r0, #29
    5014:	430c      	orrs	r4, r1
    5016:	00c1      	lsls	r1, r0, #3
    5018:	0058      	lsls	r0, r3, #1
    501a:	0d40      	lsrs	r0, r0, #21
    501c:	4684      	mov	ip, r0
    501e:	468a      	mov	sl, r1
    5020:	000f      	movs	r7, r1
    5022:	0319      	lsls	r1, r3, #12
    5024:	0f50      	lsrs	r0, r2, #29
    5026:	0a49      	lsrs	r1, r1, #9
    5028:	4301      	orrs	r1, r0
    502a:	48c6      	ldr	r0, [pc, #792]	; (5344 <__aeabi_dsub+0x344>)
    502c:	0d76      	lsrs	r6, r6, #21
    502e:	46a8      	mov	r8, r5
    5030:	0fdb      	lsrs	r3, r3, #31
    5032:	00d2      	lsls	r2, r2, #3
    5034:	4584      	cmp	ip, r0
    5036:	d100      	bne.n	503a <__aeabi_dsub+0x3a>
    5038:	e0d8      	b.n	51ec <__aeabi_dsub+0x1ec>
    503a:	2001      	movs	r0, #1
    503c:	4043      	eors	r3, r0
    503e:	42ab      	cmp	r3, r5
    5040:	d100      	bne.n	5044 <__aeabi_dsub+0x44>
    5042:	e0a6      	b.n	5192 <__aeabi_dsub+0x192>
    5044:	4660      	mov	r0, ip
    5046:	1a35      	subs	r5, r6, r0
    5048:	2d00      	cmp	r5, #0
    504a:	dc00      	bgt.n	504e <__aeabi_dsub+0x4e>
    504c:	e105      	b.n	525a <__aeabi_dsub+0x25a>
    504e:	2800      	cmp	r0, #0
    5050:	d110      	bne.n	5074 <__aeabi_dsub+0x74>
    5052:	000b      	movs	r3, r1
    5054:	4313      	orrs	r3, r2
    5056:	d100      	bne.n	505a <__aeabi_dsub+0x5a>
    5058:	e0d7      	b.n	520a <__aeabi_dsub+0x20a>
    505a:	1e6b      	subs	r3, r5, #1
    505c:	2b00      	cmp	r3, #0
    505e:	d000      	beq.n	5062 <__aeabi_dsub+0x62>
    5060:	e14b      	b.n	52fa <__aeabi_dsub+0x2fa>
    5062:	4653      	mov	r3, sl
    5064:	1a9f      	subs	r7, r3, r2
    5066:	45ba      	cmp	sl, r7
    5068:	4180      	sbcs	r0, r0
    506a:	1a64      	subs	r4, r4, r1
    506c:	4240      	negs	r0, r0
    506e:	1a24      	subs	r4, r4, r0
    5070:	2601      	movs	r6, #1
    5072:	e01e      	b.n	50b2 <__aeabi_dsub+0xb2>
    5074:	4bb3      	ldr	r3, [pc, #716]	; (5344 <__aeabi_dsub+0x344>)
    5076:	429e      	cmp	r6, r3
    5078:	d048      	beq.n	510c <__aeabi_dsub+0x10c>
    507a:	2380      	movs	r3, #128	; 0x80
    507c:	041b      	lsls	r3, r3, #16
    507e:	4319      	orrs	r1, r3
    5080:	2d38      	cmp	r5, #56	; 0x38
    5082:	dd00      	ble.n	5086 <__aeabi_dsub+0x86>
    5084:	e119      	b.n	52ba <__aeabi_dsub+0x2ba>
    5086:	2d1f      	cmp	r5, #31
    5088:	dd00      	ble.n	508c <__aeabi_dsub+0x8c>
    508a:	e14c      	b.n	5326 <__aeabi_dsub+0x326>
    508c:	2320      	movs	r3, #32
    508e:	000f      	movs	r7, r1
    5090:	1b5b      	subs	r3, r3, r5
    5092:	0010      	movs	r0, r2
    5094:	409a      	lsls	r2, r3
    5096:	409f      	lsls	r7, r3
    5098:	40e8      	lsrs	r0, r5
    509a:	1e53      	subs	r3, r2, #1
    509c:	419a      	sbcs	r2, r3
    509e:	40e9      	lsrs	r1, r5
    50a0:	4307      	orrs	r7, r0
    50a2:	4317      	orrs	r7, r2
    50a4:	4653      	mov	r3, sl
    50a6:	1bdf      	subs	r7, r3, r7
    50a8:	1a61      	subs	r1, r4, r1
    50aa:	45ba      	cmp	sl, r7
    50ac:	41a4      	sbcs	r4, r4
    50ae:	4264      	negs	r4, r4
    50b0:	1b0c      	subs	r4, r1, r4
    50b2:	0223      	lsls	r3, r4, #8
    50b4:	d400      	bmi.n	50b8 <__aeabi_dsub+0xb8>
    50b6:	e0c5      	b.n	5244 <__aeabi_dsub+0x244>
    50b8:	0264      	lsls	r4, r4, #9
    50ba:	0a65      	lsrs	r5, r4, #9
    50bc:	2d00      	cmp	r5, #0
    50be:	d100      	bne.n	50c2 <__aeabi_dsub+0xc2>
    50c0:	e0f6      	b.n	52b0 <__aeabi_dsub+0x2b0>
    50c2:	0028      	movs	r0, r5
    50c4:	f000 fb1e 	bl	5704 <__clzsi2>
    50c8:	0003      	movs	r3, r0
    50ca:	3b08      	subs	r3, #8
    50cc:	2b1f      	cmp	r3, #31
    50ce:	dd00      	ble.n	50d2 <__aeabi_dsub+0xd2>
    50d0:	e0e9      	b.n	52a6 <__aeabi_dsub+0x2a6>
    50d2:	2220      	movs	r2, #32
    50d4:	003c      	movs	r4, r7
    50d6:	1ad2      	subs	r2, r2, r3
    50d8:	409d      	lsls	r5, r3
    50da:	40d4      	lsrs	r4, r2
    50dc:	409f      	lsls	r7, r3
    50de:	4325      	orrs	r5, r4
    50e0:	429e      	cmp	r6, r3
    50e2:	dd00      	ble.n	50e6 <__aeabi_dsub+0xe6>
    50e4:	e0db      	b.n	529e <__aeabi_dsub+0x29e>
    50e6:	1b9e      	subs	r6, r3, r6
    50e8:	1c73      	adds	r3, r6, #1
    50ea:	2b1f      	cmp	r3, #31
    50ec:	dd00      	ble.n	50f0 <__aeabi_dsub+0xf0>
    50ee:	e10a      	b.n	5306 <__aeabi_dsub+0x306>
    50f0:	2220      	movs	r2, #32
    50f2:	0038      	movs	r0, r7
    50f4:	1ad2      	subs	r2, r2, r3
    50f6:	0029      	movs	r1, r5
    50f8:	4097      	lsls	r7, r2
    50fa:	002c      	movs	r4, r5
    50fc:	4091      	lsls	r1, r2
    50fe:	40d8      	lsrs	r0, r3
    5100:	1e7a      	subs	r2, r7, #1
    5102:	4197      	sbcs	r7, r2
    5104:	40dc      	lsrs	r4, r3
    5106:	2600      	movs	r6, #0
    5108:	4301      	orrs	r1, r0
    510a:	430f      	orrs	r7, r1
    510c:	077b      	lsls	r3, r7, #29
    510e:	d009      	beq.n	5124 <__aeabi_dsub+0x124>
    5110:	230f      	movs	r3, #15
    5112:	403b      	ands	r3, r7
    5114:	2b04      	cmp	r3, #4
    5116:	d005      	beq.n	5124 <__aeabi_dsub+0x124>
    5118:	1d3b      	adds	r3, r7, #4
    511a:	42bb      	cmp	r3, r7
    511c:	41bf      	sbcs	r7, r7
    511e:	427f      	negs	r7, r7
    5120:	19e4      	adds	r4, r4, r7
    5122:	001f      	movs	r7, r3
    5124:	0223      	lsls	r3, r4, #8
    5126:	d525      	bpl.n	5174 <__aeabi_dsub+0x174>
    5128:	4b86      	ldr	r3, [pc, #536]	; (5344 <__aeabi_dsub+0x344>)
    512a:	3601      	adds	r6, #1
    512c:	429e      	cmp	r6, r3
    512e:	d100      	bne.n	5132 <__aeabi_dsub+0x132>
    5130:	e0af      	b.n	5292 <__aeabi_dsub+0x292>
    5132:	4b85      	ldr	r3, [pc, #532]	; (5348 <__aeabi_dsub+0x348>)
    5134:	2501      	movs	r5, #1
    5136:	401c      	ands	r4, r3
    5138:	4643      	mov	r3, r8
    513a:	0762      	lsls	r2, r4, #29
    513c:	08ff      	lsrs	r7, r7, #3
    513e:	0264      	lsls	r4, r4, #9
    5140:	0576      	lsls	r6, r6, #21
    5142:	4317      	orrs	r7, r2
    5144:	0b24      	lsrs	r4, r4, #12
    5146:	0d76      	lsrs	r6, r6, #21
    5148:	401d      	ands	r5, r3
    514a:	2100      	movs	r1, #0
    514c:	0324      	lsls	r4, r4, #12
    514e:	0b23      	lsrs	r3, r4, #12
    5150:	0d0c      	lsrs	r4, r1, #20
    5152:	4a7e      	ldr	r2, [pc, #504]	; (534c <__aeabi_dsub+0x34c>)
    5154:	0524      	lsls	r4, r4, #20
    5156:	431c      	orrs	r4, r3
    5158:	4014      	ands	r4, r2
    515a:	0533      	lsls	r3, r6, #20
    515c:	4323      	orrs	r3, r4
    515e:	005b      	lsls	r3, r3, #1
    5160:	07ed      	lsls	r5, r5, #31
    5162:	085b      	lsrs	r3, r3, #1
    5164:	432b      	orrs	r3, r5
    5166:	0038      	movs	r0, r7
    5168:	0019      	movs	r1, r3
    516a:	bc1c      	pop	{r2, r3, r4}
    516c:	4690      	mov	r8, r2
    516e:	4699      	mov	r9, r3
    5170:	46a2      	mov	sl, r4
    5172:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5174:	2501      	movs	r5, #1
    5176:	4643      	mov	r3, r8
    5178:	0762      	lsls	r2, r4, #29
    517a:	08ff      	lsrs	r7, r7, #3
    517c:	4317      	orrs	r7, r2
    517e:	08e4      	lsrs	r4, r4, #3
    5180:	401d      	ands	r5, r3
    5182:	4b70      	ldr	r3, [pc, #448]	; (5344 <__aeabi_dsub+0x344>)
    5184:	429e      	cmp	r6, r3
    5186:	d036      	beq.n	51f6 <__aeabi_dsub+0x1f6>
    5188:	0324      	lsls	r4, r4, #12
    518a:	0576      	lsls	r6, r6, #21
    518c:	0b24      	lsrs	r4, r4, #12
    518e:	0d76      	lsrs	r6, r6, #21
    5190:	e7db      	b.n	514a <__aeabi_dsub+0x14a>
    5192:	4663      	mov	r3, ip
    5194:	1af3      	subs	r3, r6, r3
    5196:	2b00      	cmp	r3, #0
    5198:	dc00      	bgt.n	519c <__aeabi_dsub+0x19c>
    519a:	e094      	b.n	52c6 <__aeabi_dsub+0x2c6>
    519c:	4660      	mov	r0, ip
    519e:	2800      	cmp	r0, #0
    51a0:	d035      	beq.n	520e <__aeabi_dsub+0x20e>
    51a2:	4868      	ldr	r0, [pc, #416]	; (5344 <__aeabi_dsub+0x344>)
    51a4:	4286      	cmp	r6, r0
    51a6:	d0b1      	beq.n	510c <__aeabi_dsub+0x10c>
    51a8:	2780      	movs	r7, #128	; 0x80
    51aa:	043f      	lsls	r7, r7, #16
    51ac:	4339      	orrs	r1, r7
    51ae:	2b38      	cmp	r3, #56	; 0x38
    51b0:	dc00      	bgt.n	51b4 <__aeabi_dsub+0x1b4>
    51b2:	e0fd      	b.n	53b0 <__aeabi_dsub+0x3b0>
    51b4:	430a      	orrs	r2, r1
    51b6:	0017      	movs	r7, r2
    51b8:	2100      	movs	r1, #0
    51ba:	1e7a      	subs	r2, r7, #1
    51bc:	4197      	sbcs	r7, r2
    51be:	4457      	add	r7, sl
    51c0:	4557      	cmp	r7, sl
    51c2:	4180      	sbcs	r0, r0
    51c4:	1909      	adds	r1, r1, r4
    51c6:	4244      	negs	r4, r0
    51c8:	190c      	adds	r4, r1, r4
    51ca:	0223      	lsls	r3, r4, #8
    51cc:	d53a      	bpl.n	5244 <__aeabi_dsub+0x244>
    51ce:	4b5d      	ldr	r3, [pc, #372]	; (5344 <__aeabi_dsub+0x344>)
    51d0:	3601      	adds	r6, #1
    51d2:	429e      	cmp	r6, r3
    51d4:	d100      	bne.n	51d8 <__aeabi_dsub+0x1d8>
    51d6:	e14b      	b.n	5470 <__aeabi_dsub+0x470>
    51d8:	2201      	movs	r2, #1
    51da:	4b5b      	ldr	r3, [pc, #364]	; (5348 <__aeabi_dsub+0x348>)
    51dc:	401c      	ands	r4, r3
    51de:	087b      	lsrs	r3, r7, #1
    51e0:	4017      	ands	r7, r2
    51e2:	431f      	orrs	r7, r3
    51e4:	07e2      	lsls	r2, r4, #31
    51e6:	4317      	orrs	r7, r2
    51e8:	0864      	lsrs	r4, r4, #1
    51ea:	e78f      	b.n	510c <__aeabi_dsub+0x10c>
    51ec:	0008      	movs	r0, r1
    51ee:	4310      	orrs	r0, r2
    51f0:	d000      	beq.n	51f4 <__aeabi_dsub+0x1f4>
    51f2:	e724      	b.n	503e <__aeabi_dsub+0x3e>
    51f4:	e721      	b.n	503a <__aeabi_dsub+0x3a>
    51f6:	0023      	movs	r3, r4
    51f8:	433b      	orrs	r3, r7
    51fa:	d100      	bne.n	51fe <__aeabi_dsub+0x1fe>
    51fc:	e1b9      	b.n	5572 <__aeabi_dsub+0x572>
    51fe:	2280      	movs	r2, #128	; 0x80
    5200:	0312      	lsls	r2, r2, #12
    5202:	4314      	orrs	r4, r2
    5204:	0324      	lsls	r4, r4, #12
    5206:	0b24      	lsrs	r4, r4, #12
    5208:	e79f      	b.n	514a <__aeabi_dsub+0x14a>
    520a:	002e      	movs	r6, r5
    520c:	e77e      	b.n	510c <__aeabi_dsub+0x10c>
    520e:	0008      	movs	r0, r1
    5210:	4310      	orrs	r0, r2
    5212:	d100      	bne.n	5216 <__aeabi_dsub+0x216>
    5214:	e0ca      	b.n	53ac <__aeabi_dsub+0x3ac>
    5216:	1e58      	subs	r0, r3, #1
    5218:	4684      	mov	ip, r0
    521a:	2800      	cmp	r0, #0
    521c:	d000      	beq.n	5220 <__aeabi_dsub+0x220>
    521e:	e0e7      	b.n	53f0 <__aeabi_dsub+0x3f0>
    5220:	4452      	add	r2, sl
    5222:	4552      	cmp	r2, sl
    5224:	4180      	sbcs	r0, r0
    5226:	1864      	adds	r4, r4, r1
    5228:	4240      	negs	r0, r0
    522a:	1824      	adds	r4, r4, r0
    522c:	0017      	movs	r7, r2
    522e:	2601      	movs	r6, #1
    5230:	0223      	lsls	r3, r4, #8
    5232:	d507      	bpl.n	5244 <__aeabi_dsub+0x244>
    5234:	2602      	movs	r6, #2
    5236:	e7cf      	b.n	51d8 <__aeabi_dsub+0x1d8>
    5238:	4664      	mov	r4, ip
    523a:	432c      	orrs	r4, r5
    523c:	d100      	bne.n	5240 <__aeabi_dsub+0x240>
    523e:	e1b3      	b.n	55a8 <__aeabi_dsub+0x5a8>
    5240:	002c      	movs	r4, r5
    5242:	4667      	mov	r7, ip
    5244:	077b      	lsls	r3, r7, #29
    5246:	d000      	beq.n	524a <__aeabi_dsub+0x24a>
    5248:	e762      	b.n	5110 <__aeabi_dsub+0x110>
    524a:	0763      	lsls	r3, r4, #29
    524c:	08ff      	lsrs	r7, r7, #3
    524e:	431f      	orrs	r7, r3
    5250:	2501      	movs	r5, #1
    5252:	4643      	mov	r3, r8
    5254:	08e4      	lsrs	r4, r4, #3
    5256:	401d      	ands	r5, r3
    5258:	e793      	b.n	5182 <__aeabi_dsub+0x182>
    525a:	2d00      	cmp	r5, #0
    525c:	d178      	bne.n	5350 <__aeabi_dsub+0x350>
    525e:	1c75      	adds	r5, r6, #1
    5260:	056d      	lsls	r5, r5, #21
    5262:	0d6d      	lsrs	r5, r5, #21
    5264:	2d01      	cmp	r5, #1
    5266:	dc00      	bgt.n	526a <__aeabi_dsub+0x26a>
    5268:	e0f2      	b.n	5450 <__aeabi_dsub+0x450>
    526a:	4650      	mov	r0, sl
    526c:	1a80      	subs	r0, r0, r2
    526e:	4582      	cmp	sl, r0
    5270:	41bf      	sbcs	r7, r7
    5272:	1a65      	subs	r5, r4, r1
    5274:	427f      	negs	r7, r7
    5276:	1bed      	subs	r5, r5, r7
    5278:	4684      	mov	ip, r0
    527a:	0228      	lsls	r0, r5, #8
    527c:	d400      	bmi.n	5280 <__aeabi_dsub+0x280>
    527e:	e08c      	b.n	539a <__aeabi_dsub+0x39a>
    5280:	4650      	mov	r0, sl
    5282:	1a17      	subs	r7, r2, r0
    5284:	42ba      	cmp	r2, r7
    5286:	4192      	sbcs	r2, r2
    5288:	1b0c      	subs	r4, r1, r4
    528a:	4255      	negs	r5, r2
    528c:	1b65      	subs	r5, r4, r5
    528e:	4698      	mov	r8, r3
    5290:	e714      	b.n	50bc <__aeabi_dsub+0xbc>
    5292:	2501      	movs	r5, #1
    5294:	4643      	mov	r3, r8
    5296:	2400      	movs	r4, #0
    5298:	401d      	ands	r5, r3
    529a:	2700      	movs	r7, #0
    529c:	e755      	b.n	514a <__aeabi_dsub+0x14a>
    529e:	4c2a      	ldr	r4, [pc, #168]	; (5348 <__aeabi_dsub+0x348>)
    52a0:	1af6      	subs	r6, r6, r3
    52a2:	402c      	ands	r4, r5
    52a4:	e732      	b.n	510c <__aeabi_dsub+0x10c>
    52a6:	003d      	movs	r5, r7
    52a8:	3828      	subs	r0, #40	; 0x28
    52aa:	4085      	lsls	r5, r0
    52ac:	2700      	movs	r7, #0
    52ae:	e717      	b.n	50e0 <__aeabi_dsub+0xe0>
    52b0:	0038      	movs	r0, r7
    52b2:	f000 fa27 	bl	5704 <__clzsi2>
    52b6:	3020      	adds	r0, #32
    52b8:	e706      	b.n	50c8 <__aeabi_dsub+0xc8>
    52ba:	430a      	orrs	r2, r1
    52bc:	0017      	movs	r7, r2
    52be:	2100      	movs	r1, #0
    52c0:	1e7a      	subs	r2, r7, #1
    52c2:	4197      	sbcs	r7, r2
    52c4:	e6ee      	b.n	50a4 <__aeabi_dsub+0xa4>
    52c6:	2b00      	cmp	r3, #0
    52c8:	d000      	beq.n	52cc <__aeabi_dsub+0x2cc>
    52ca:	e0e5      	b.n	5498 <__aeabi_dsub+0x498>
    52cc:	1c73      	adds	r3, r6, #1
    52ce:	469c      	mov	ip, r3
    52d0:	055b      	lsls	r3, r3, #21
    52d2:	0d5b      	lsrs	r3, r3, #21
    52d4:	2b01      	cmp	r3, #1
    52d6:	dc00      	bgt.n	52da <__aeabi_dsub+0x2da>
    52d8:	e09f      	b.n	541a <__aeabi_dsub+0x41a>
    52da:	4b1a      	ldr	r3, [pc, #104]	; (5344 <__aeabi_dsub+0x344>)
    52dc:	459c      	cmp	ip, r3
    52de:	d100      	bne.n	52e2 <__aeabi_dsub+0x2e2>
    52e0:	e0c5      	b.n	546e <__aeabi_dsub+0x46e>
    52e2:	4452      	add	r2, sl
    52e4:	4552      	cmp	r2, sl
    52e6:	4180      	sbcs	r0, r0
    52e8:	1864      	adds	r4, r4, r1
    52ea:	4240      	negs	r0, r0
    52ec:	1824      	adds	r4, r4, r0
    52ee:	07e7      	lsls	r7, r4, #31
    52f0:	0852      	lsrs	r2, r2, #1
    52f2:	4317      	orrs	r7, r2
    52f4:	0864      	lsrs	r4, r4, #1
    52f6:	4666      	mov	r6, ip
    52f8:	e708      	b.n	510c <__aeabi_dsub+0x10c>
    52fa:	4812      	ldr	r0, [pc, #72]	; (5344 <__aeabi_dsub+0x344>)
    52fc:	4285      	cmp	r5, r0
    52fe:	d100      	bne.n	5302 <__aeabi_dsub+0x302>
    5300:	e085      	b.n	540e <__aeabi_dsub+0x40e>
    5302:	001d      	movs	r5, r3
    5304:	e6bc      	b.n	5080 <__aeabi_dsub+0x80>
    5306:	0029      	movs	r1, r5
    5308:	3e1f      	subs	r6, #31
    530a:	40f1      	lsrs	r1, r6
    530c:	2b20      	cmp	r3, #32
    530e:	d100      	bne.n	5312 <__aeabi_dsub+0x312>
    5310:	e07f      	b.n	5412 <__aeabi_dsub+0x412>
    5312:	2240      	movs	r2, #64	; 0x40
    5314:	1ad3      	subs	r3, r2, r3
    5316:	409d      	lsls	r5, r3
    5318:	432f      	orrs	r7, r5
    531a:	1e7d      	subs	r5, r7, #1
    531c:	41af      	sbcs	r7, r5
    531e:	2400      	movs	r4, #0
    5320:	430f      	orrs	r7, r1
    5322:	2600      	movs	r6, #0
    5324:	e78e      	b.n	5244 <__aeabi_dsub+0x244>
    5326:	002b      	movs	r3, r5
    5328:	000f      	movs	r7, r1
    532a:	3b20      	subs	r3, #32
    532c:	40df      	lsrs	r7, r3
    532e:	2d20      	cmp	r5, #32
    5330:	d071      	beq.n	5416 <__aeabi_dsub+0x416>
    5332:	2340      	movs	r3, #64	; 0x40
    5334:	1b5d      	subs	r5, r3, r5
    5336:	40a9      	lsls	r1, r5
    5338:	430a      	orrs	r2, r1
    533a:	1e51      	subs	r1, r2, #1
    533c:	418a      	sbcs	r2, r1
    533e:	2100      	movs	r1, #0
    5340:	4317      	orrs	r7, r2
    5342:	e6af      	b.n	50a4 <__aeabi_dsub+0xa4>
    5344:	000007ff 	.word	0x000007ff
    5348:	ff7fffff 	.word	0xff7fffff
    534c:	800fffff 	.word	0x800fffff
    5350:	2e00      	cmp	r6, #0
    5352:	d03e      	beq.n	53d2 <__aeabi_dsub+0x3d2>
    5354:	4eb3      	ldr	r6, [pc, #716]	; (5624 <__aeabi_dsub+0x624>)
    5356:	45b4      	cmp	ip, r6
    5358:	d045      	beq.n	53e6 <__aeabi_dsub+0x3e6>
    535a:	2680      	movs	r6, #128	; 0x80
    535c:	0436      	lsls	r6, r6, #16
    535e:	426d      	negs	r5, r5
    5360:	4334      	orrs	r4, r6
    5362:	2d38      	cmp	r5, #56	; 0x38
    5364:	dd00      	ble.n	5368 <__aeabi_dsub+0x368>
    5366:	e0a8      	b.n	54ba <__aeabi_dsub+0x4ba>
    5368:	2d1f      	cmp	r5, #31
    536a:	dd00      	ble.n	536e <__aeabi_dsub+0x36e>
    536c:	e11f      	b.n	55ae <__aeabi_dsub+0x5ae>
    536e:	2620      	movs	r6, #32
    5370:	0027      	movs	r7, r4
    5372:	4650      	mov	r0, sl
    5374:	1b76      	subs	r6, r6, r5
    5376:	40b7      	lsls	r7, r6
    5378:	40e8      	lsrs	r0, r5
    537a:	4307      	orrs	r7, r0
    537c:	4650      	mov	r0, sl
    537e:	40b0      	lsls	r0, r6
    5380:	1e46      	subs	r6, r0, #1
    5382:	41b0      	sbcs	r0, r6
    5384:	40ec      	lsrs	r4, r5
    5386:	4338      	orrs	r0, r7
    5388:	1a17      	subs	r7, r2, r0
    538a:	42ba      	cmp	r2, r7
    538c:	4192      	sbcs	r2, r2
    538e:	1b0c      	subs	r4, r1, r4
    5390:	4252      	negs	r2, r2
    5392:	1aa4      	subs	r4, r4, r2
    5394:	4666      	mov	r6, ip
    5396:	4698      	mov	r8, r3
    5398:	e68b      	b.n	50b2 <__aeabi_dsub+0xb2>
    539a:	4664      	mov	r4, ip
    539c:	4667      	mov	r7, ip
    539e:	432c      	orrs	r4, r5
    53a0:	d000      	beq.n	53a4 <__aeabi_dsub+0x3a4>
    53a2:	e68b      	b.n	50bc <__aeabi_dsub+0xbc>
    53a4:	2500      	movs	r5, #0
    53a6:	2600      	movs	r6, #0
    53a8:	2700      	movs	r7, #0
    53aa:	e6ea      	b.n	5182 <__aeabi_dsub+0x182>
    53ac:	001e      	movs	r6, r3
    53ae:	e6ad      	b.n	510c <__aeabi_dsub+0x10c>
    53b0:	2b1f      	cmp	r3, #31
    53b2:	dc60      	bgt.n	5476 <__aeabi_dsub+0x476>
    53b4:	2720      	movs	r7, #32
    53b6:	1af8      	subs	r0, r7, r3
    53b8:	000f      	movs	r7, r1
    53ba:	4684      	mov	ip, r0
    53bc:	4087      	lsls	r7, r0
    53be:	0010      	movs	r0, r2
    53c0:	40d8      	lsrs	r0, r3
    53c2:	4307      	orrs	r7, r0
    53c4:	4660      	mov	r0, ip
    53c6:	4082      	lsls	r2, r0
    53c8:	1e50      	subs	r0, r2, #1
    53ca:	4182      	sbcs	r2, r0
    53cc:	40d9      	lsrs	r1, r3
    53ce:	4317      	orrs	r7, r2
    53d0:	e6f5      	b.n	51be <__aeabi_dsub+0x1be>
    53d2:	0026      	movs	r6, r4
    53d4:	4650      	mov	r0, sl
    53d6:	4306      	orrs	r6, r0
    53d8:	d005      	beq.n	53e6 <__aeabi_dsub+0x3e6>
    53da:	43ed      	mvns	r5, r5
    53dc:	2d00      	cmp	r5, #0
    53de:	d0d3      	beq.n	5388 <__aeabi_dsub+0x388>
    53e0:	4e90      	ldr	r6, [pc, #576]	; (5624 <__aeabi_dsub+0x624>)
    53e2:	45b4      	cmp	ip, r6
    53e4:	d1bd      	bne.n	5362 <__aeabi_dsub+0x362>
    53e6:	000c      	movs	r4, r1
    53e8:	0017      	movs	r7, r2
    53ea:	4666      	mov	r6, ip
    53ec:	4698      	mov	r8, r3
    53ee:	e68d      	b.n	510c <__aeabi_dsub+0x10c>
    53f0:	488c      	ldr	r0, [pc, #560]	; (5624 <__aeabi_dsub+0x624>)
    53f2:	4283      	cmp	r3, r0
    53f4:	d00b      	beq.n	540e <__aeabi_dsub+0x40e>
    53f6:	4663      	mov	r3, ip
    53f8:	e6d9      	b.n	51ae <__aeabi_dsub+0x1ae>
    53fa:	2d00      	cmp	r5, #0
    53fc:	d000      	beq.n	5400 <__aeabi_dsub+0x400>
    53fe:	e096      	b.n	552e <__aeabi_dsub+0x52e>
    5400:	0008      	movs	r0, r1
    5402:	4310      	orrs	r0, r2
    5404:	d100      	bne.n	5408 <__aeabi_dsub+0x408>
    5406:	e0e2      	b.n	55ce <__aeabi_dsub+0x5ce>
    5408:	000c      	movs	r4, r1
    540a:	0017      	movs	r7, r2
    540c:	4698      	mov	r8, r3
    540e:	4e85      	ldr	r6, [pc, #532]	; (5624 <__aeabi_dsub+0x624>)
    5410:	e67c      	b.n	510c <__aeabi_dsub+0x10c>
    5412:	2500      	movs	r5, #0
    5414:	e780      	b.n	5318 <__aeabi_dsub+0x318>
    5416:	2100      	movs	r1, #0
    5418:	e78e      	b.n	5338 <__aeabi_dsub+0x338>
    541a:	0023      	movs	r3, r4
    541c:	4650      	mov	r0, sl
    541e:	4303      	orrs	r3, r0
    5420:	2e00      	cmp	r6, #0
    5422:	d000      	beq.n	5426 <__aeabi_dsub+0x426>
    5424:	e0a8      	b.n	5578 <__aeabi_dsub+0x578>
    5426:	2b00      	cmp	r3, #0
    5428:	d100      	bne.n	542c <__aeabi_dsub+0x42c>
    542a:	e0de      	b.n	55ea <__aeabi_dsub+0x5ea>
    542c:	000b      	movs	r3, r1
    542e:	4313      	orrs	r3, r2
    5430:	d100      	bne.n	5434 <__aeabi_dsub+0x434>
    5432:	e66b      	b.n	510c <__aeabi_dsub+0x10c>
    5434:	4452      	add	r2, sl
    5436:	4552      	cmp	r2, sl
    5438:	4180      	sbcs	r0, r0
    543a:	1864      	adds	r4, r4, r1
    543c:	4240      	negs	r0, r0
    543e:	1824      	adds	r4, r4, r0
    5440:	0017      	movs	r7, r2
    5442:	0223      	lsls	r3, r4, #8
    5444:	d400      	bmi.n	5448 <__aeabi_dsub+0x448>
    5446:	e6fd      	b.n	5244 <__aeabi_dsub+0x244>
    5448:	4b77      	ldr	r3, [pc, #476]	; (5628 <__aeabi_dsub+0x628>)
    544a:	4666      	mov	r6, ip
    544c:	401c      	ands	r4, r3
    544e:	e65d      	b.n	510c <__aeabi_dsub+0x10c>
    5450:	0025      	movs	r5, r4
    5452:	4650      	mov	r0, sl
    5454:	4305      	orrs	r5, r0
    5456:	2e00      	cmp	r6, #0
    5458:	d1cf      	bne.n	53fa <__aeabi_dsub+0x3fa>
    545a:	2d00      	cmp	r5, #0
    545c:	d14f      	bne.n	54fe <__aeabi_dsub+0x4fe>
    545e:	000c      	movs	r4, r1
    5460:	4314      	orrs	r4, r2
    5462:	d100      	bne.n	5466 <__aeabi_dsub+0x466>
    5464:	e0a0      	b.n	55a8 <__aeabi_dsub+0x5a8>
    5466:	000c      	movs	r4, r1
    5468:	0017      	movs	r7, r2
    546a:	4698      	mov	r8, r3
    546c:	e64e      	b.n	510c <__aeabi_dsub+0x10c>
    546e:	4666      	mov	r6, ip
    5470:	2400      	movs	r4, #0
    5472:	2700      	movs	r7, #0
    5474:	e685      	b.n	5182 <__aeabi_dsub+0x182>
    5476:	001f      	movs	r7, r3
    5478:	0008      	movs	r0, r1
    547a:	3f20      	subs	r7, #32
    547c:	40f8      	lsrs	r0, r7
    547e:	0007      	movs	r7, r0
    5480:	2b20      	cmp	r3, #32
    5482:	d100      	bne.n	5486 <__aeabi_dsub+0x486>
    5484:	e08e      	b.n	55a4 <__aeabi_dsub+0x5a4>
    5486:	2040      	movs	r0, #64	; 0x40
    5488:	1ac3      	subs	r3, r0, r3
    548a:	4099      	lsls	r1, r3
    548c:	430a      	orrs	r2, r1
    548e:	1e51      	subs	r1, r2, #1
    5490:	418a      	sbcs	r2, r1
    5492:	2100      	movs	r1, #0
    5494:	4317      	orrs	r7, r2
    5496:	e692      	b.n	51be <__aeabi_dsub+0x1be>
    5498:	2e00      	cmp	r6, #0
    549a:	d114      	bne.n	54c6 <__aeabi_dsub+0x4c6>
    549c:	0026      	movs	r6, r4
    549e:	4650      	mov	r0, sl
    54a0:	4306      	orrs	r6, r0
    54a2:	d062      	beq.n	556a <__aeabi_dsub+0x56a>
    54a4:	43db      	mvns	r3, r3
    54a6:	2b00      	cmp	r3, #0
    54a8:	d15c      	bne.n	5564 <__aeabi_dsub+0x564>
    54aa:	1887      	adds	r7, r0, r2
    54ac:	4297      	cmp	r7, r2
    54ae:	4192      	sbcs	r2, r2
    54b0:	1864      	adds	r4, r4, r1
    54b2:	4252      	negs	r2, r2
    54b4:	18a4      	adds	r4, r4, r2
    54b6:	4666      	mov	r6, ip
    54b8:	e687      	b.n	51ca <__aeabi_dsub+0x1ca>
    54ba:	4650      	mov	r0, sl
    54bc:	4320      	orrs	r0, r4
    54be:	1e44      	subs	r4, r0, #1
    54c0:	41a0      	sbcs	r0, r4
    54c2:	2400      	movs	r4, #0
    54c4:	e760      	b.n	5388 <__aeabi_dsub+0x388>
    54c6:	4e57      	ldr	r6, [pc, #348]	; (5624 <__aeabi_dsub+0x624>)
    54c8:	45b4      	cmp	ip, r6
    54ca:	d04e      	beq.n	556a <__aeabi_dsub+0x56a>
    54cc:	2680      	movs	r6, #128	; 0x80
    54ce:	0436      	lsls	r6, r6, #16
    54d0:	425b      	negs	r3, r3
    54d2:	4334      	orrs	r4, r6
    54d4:	2b38      	cmp	r3, #56	; 0x38
    54d6:	dd00      	ble.n	54da <__aeabi_dsub+0x4da>
    54d8:	e07f      	b.n	55da <__aeabi_dsub+0x5da>
    54da:	2b1f      	cmp	r3, #31
    54dc:	dd00      	ble.n	54e0 <__aeabi_dsub+0x4e0>
    54de:	e08b      	b.n	55f8 <__aeabi_dsub+0x5f8>
    54e0:	2620      	movs	r6, #32
    54e2:	0027      	movs	r7, r4
    54e4:	4650      	mov	r0, sl
    54e6:	1af6      	subs	r6, r6, r3
    54e8:	40b7      	lsls	r7, r6
    54ea:	40d8      	lsrs	r0, r3
    54ec:	4307      	orrs	r7, r0
    54ee:	4650      	mov	r0, sl
    54f0:	40b0      	lsls	r0, r6
    54f2:	1e46      	subs	r6, r0, #1
    54f4:	41b0      	sbcs	r0, r6
    54f6:	4307      	orrs	r7, r0
    54f8:	40dc      	lsrs	r4, r3
    54fa:	18bf      	adds	r7, r7, r2
    54fc:	e7d6      	b.n	54ac <__aeabi_dsub+0x4ac>
    54fe:	000d      	movs	r5, r1
    5500:	4315      	orrs	r5, r2
    5502:	d100      	bne.n	5506 <__aeabi_dsub+0x506>
    5504:	e602      	b.n	510c <__aeabi_dsub+0x10c>
    5506:	4650      	mov	r0, sl
    5508:	1a80      	subs	r0, r0, r2
    550a:	4582      	cmp	sl, r0
    550c:	41bf      	sbcs	r7, r7
    550e:	1a65      	subs	r5, r4, r1
    5510:	427f      	negs	r7, r7
    5512:	1bed      	subs	r5, r5, r7
    5514:	4684      	mov	ip, r0
    5516:	0228      	lsls	r0, r5, #8
    5518:	d400      	bmi.n	551c <__aeabi_dsub+0x51c>
    551a:	e68d      	b.n	5238 <__aeabi_dsub+0x238>
    551c:	4650      	mov	r0, sl
    551e:	1a17      	subs	r7, r2, r0
    5520:	42ba      	cmp	r2, r7
    5522:	4192      	sbcs	r2, r2
    5524:	1b0c      	subs	r4, r1, r4
    5526:	4252      	negs	r2, r2
    5528:	1aa4      	subs	r4, r4, r2
    552a:	4698      	mov	r8, r3
    552c:	e5ee      	b.n	510c <__aeabi_dsub+0x10c>
    552e:	000d      	movs	r5, r1
    5530:	4315      	orrs	r5, r2
    5532:	d100      	bne.n	5536 <__aeabi_dsub+0x536>
    5534:	e76b      	b.n	540e <__aeabi_dsub+0x40e>
    5536:	4650      	mov	r0, sl
    5538:	0767      	lsls	r7, r4, #29
    553a:	08c0      	lsrs	r0, r0, #3
    553c:	4307      	orrs	r7, r0
    553e:	2080      	movs	r0, #128	; 0x80
    5540:	08e4      	lsrs	r4, r4, #3
    5542:	0300      	lsls	r0, r0, #12
    5544:	4204      	tst	r4, r0
    5546:	d007      	beq.n	5558 <__aeabi_dsub+0x558>
    5548:	08cd      	lsrs	r5, r1, #3
    554a:	4205      	tst	r5, r0
    554c:	d104      	bne.n	5558 <__aeabi_dsub+0x558>
    554e:	002c      	movs	r4, r5
    5550:	4698      	mov	r8, r3
    5552:	08d7      	lsrs	r7, r2, #3
    5554:	0749      	lsls	r1, r1, #29
    5556:	430f      	orrs	r7, r1
    5558:	0f7b      	lsrs	r3, r7, #29
    555a:	00e4      	lsls	r4, r4, #3
    555c:	431c      	orrs	r4, r3
    555e:	00ff      	lsls	r7, r7, #3
    5560:	4e30      	ldr	r6, [pc, #192]	; (5624 <__aeabi_dsub+0x624>)
    5562:	e5d3      	b.n	510c <__aeabi_dsub+0x10c>
    5564:	4e2f      	ldr	r6, [pc, #188]	; (5624 <__aeabi_dsub+0x624>)
    5566:	45b4      	cmp	ip, r6
    5568:	d1b4      	bne.n	54d4 <__aeabi_dsub+0x4d4>
    556a:	000c      	movs	r4, r1
    556c:	0017      	movs	r7, r2
    556e:	4666      	mov	r6, ip
    5570:	e5cc      	b.n	510c <__aeabi_dsub+0x10c>
    5572:	2700      	movs	r7, #0
    5574:	2400      	movs	r4, #0
    5576:	e5e8      	b.n	514a <__aeabi_dsub+0x14a>
    5578:	2b00      	cmp	r3, #0
    557a:	d039      	beq.n	55f0 <__aeabi_dsub+0x5f0>
    557c:	000b      	movs	r3, r1
    557e:	4313      	orrs	r3, r2
    5580:	d100      	bne.n	5584 <__aeabi_dsub+0x584>
    5582:	e744      	b.n	540e <__aeabi_dsub+0x40e>
    5584:	08c0      	lsrs	r0, r0, #3
    5586:	0767      	lsls	r7, r4, #29
    5588:	4307      	orrs	r7, r0
    558a:	2080      	movs	r0, #128	; 0x80
    558c:	08e4      	lsrs	r4, r4, #3
    558e:	0300      	lsls	r0, r0, #12
    5590:	4204      	tst	r4, r0
    5592:	d0e1      	beq.n	5558 <__aeabi_dsub+0x558>
    5594:	08cb      	lsrs	r3, r1, #3
    5596:	4203      	tst	r3, r0
    5598:	d1de      	bne.n	5558 <__aeabi_dsub+0x558>
    559a:	08d7      	lsrs	r7, r2, #3
    559c:	0749      	lsls	r1, r1, #29
    559e:	430f      	orrs	r7, r1
    55a0:	001c      	movs	r4, r3
    55a2:	e7d9      	b.n	5558 <__aeabi_dsub+0x558>
    55a4:	2100      	movs	r1, #0
    55a6:	e771      	b.n	548c <__aeabi_dsub+0x48c>
    55a8:	2500      	movs	r5, #0
    55aa:	2700      	movs	r7, #0
    55ac:	e5e9      	b.n	5182 <__aeabi_dsub+0x182>
    55ae:	002e      	movs	r6, r5
    55b0:	0027      	movs	r7, r4
    55b2:	3e20      	subs	r6, #32
    55b4:	40f7      	lsrs	r7, r6
    55b6:	2d20      	cmp	r5, #32
    55b8:	d02f      	beq.n	561a <__aeabi_dsub+0x61a>
    55ba:	2640      	movs	r6, #64	; 0x40
    55bc:	1b75      	subs	r5, r6, r5
    55be:	40ac      	lsls	r4, r5
    55c0:	4650      	mov	r0, sl
    55c2:	4320      	orrs	r0, r4
    55c4:	1e44      	subs	r4, r0, #1
    55c6:	41a0      	sbcs	r0, r4
    55c8:	2400      	movs	r4, #0
    55ca:	4338      	orrs	r0, r7
    55cc:	e6dc      	b.n	5388 <__aeabi_dsub+0x388>
    55ce:	2480      	movs	r4, #128	; 0x80
    55d0:	2500      	movs	r5, #0
    55d2:	0324      	lsls	r4, r4, #12
    55d4:	4e13      	ldr	r6, [pc, #76]	; (5624 <__aeabi_dsub+0x624>)
    55d6:	2700      	movs	r7, #0
    55d8:	e5d3      	b.n	5182 <__aeabi_dsub+0x182>
    55da:	4650      	mov	r0, sl
    55dc:	4320      	orrs	r0, r4
    55de:	0007      	movs	r7, r0
    55e0:	1e78      	subs	r0, r7, #1
    55e2:	4187      	sbcs	r7, r0
    55e4:	2400      	movs	r4, #0
    55e6:	18bf      	adds	r7, r7, r2
    55e8:	e760      	b.n	54ac <__aeabi_dsub+0x4ac>
    55ea:	000c      	movs	r4, r1
    55ec:	0017      	movs	r7, r2
    55ee:	e58d      	b.n	510c <__aeabi_dsub+0x10c>
    55f0:	000c      	movs	r4, r1
    55f2:	0017      	movs	r7, r2
    55f4:	4e0b      	ldr	r6, [pc, #44]	; (5624 <__aeabi_dsub+0x624>)
    55f6:	e589      	b.n	510c <__aeabi_dsub+0x10c>
    55f8:	001e      	movs	r6, r3
    55fa:	0027      	movs	r7, r4
    55fc:	3e20      	subs	r6, #32
    55fe:	40f7      	lsrs	r7, r6
    5600:	2b20      	cmp	r3, #32
    5602:	d00c      	beq.n	561e <__aeabi_dsub+0x61e>
    5604:	2640      	movs	r6, #64	; 0x40
    5606:	1af3      	subs	r3, r6, r3
    5608:	409c      	lsls	r4, r3
    560a:	4650      	mov	r0, sl
    560c:	4320      	orrs	r0, r4
    560e:	1e44      	subs	r4, r0, #1
    5610:	41a0      	sbcs	r0, r4
    5612:	4307      	orrs	r7, r0
    5614:	2400      	movs	r4, #0
    5616:	18bf      	adds	r7, r7, r2
    5618:	e748      	b.n	54ac <__aeabi_dsub+0x4ac>
    561a:	2400      	movs	r4, #0
    561c:	e7d0      	b.n	55c0 <__aeabi_dsub+0x5c0>
    561e:	2400      	movs	r4, #0
    5620:	e7f3      	b.n	560a <__aeabi_dsub+0x60a>
    5622:	46c0      	nop			; (mov r8, r8)
    5624:	000007ff 	.word	0x000007ff
    5628:	ff7fffff 	.word	0xff7fffff

0000562c <__aeabi_d2iz>:
    562c:	b530      	push	{r4, r5, lr}
    562e:	4d13      	ldr	r5, [pc, #76]	; (567c <__aeabi_d2iz+0x50>)
    5630:	030a      	lsls	r2, r1, #12
    5632:	004b      	lsls	r3, r1, #1
    5634:	0b12      	lsrs	r2, r2, #12
    5636:	0d5b      	lsrs	r3, r3, #21
    5638:	0fc9      	lsrs	r1, r1, #31
    563a:	2400      	movs	r4, #0
    563c:	42ab      	cmp	r3, r5
    563e:	dd10      	ble.n	5662 <__aeabi_d2iz+0x36>
    5640:	4c0f      	ldr	r4, [pc, #60]	; (5680 <__aeabi_d2iz+0x54>)
    5642:	42a3      	cmp	r3, r4
    5644:	dc0f      	bgt.n	5666 <__aeabi_d2iz+0x3a>
    5646:	2480      	movs	r4, #128	; 0x80
    5648:	4d0e      	ldr	r5, [pc, #56]	; (5684 <__aeabi_d2iz+0x58>)
    564a:	0364      	lsls	r4, r4, #13
    564c:	4322      	orrs	r2, r4
    564e:	1aed      	subs	r5, r5, r3
    5650:	2d1f      	cmp	r5, #31
    5652:	dd0b      	ble.n	566c <__aeabi_d2iz+0x40>
    5654:	480c      	ldr	r0, [pc, #48]	; (5688 <__aeabi_d2iz+0x5c>)
    5656:	1ac3      	subs	r3, r0, r3
    5658:	40da      	lsrs	r2, r3
    565a:	4254      	negs	r4, r2
    565c:	2900      	cmp	r1, #0
    565e:	d100      	bne.n	5662 <__aeabi_d2iz+0x36>
    5660:	0014      	movs	r4, r2
    5662:	0020      	movs	r0, r4
    5664:	bd30      	pop	{r4, r5, pc}
    5666:	4b09      	ldr	r3, [pc, #36]	; (568c <__aeabi_d2iz+0x60>)
    5668:	18cc      	adds	r4, r1, r3
    566a:	e7fa      	b.n	5662 <__aeabi_d2iz+0x36>
    566c:	4c08      	ldr	r4, [pc, #32]	; (5690 <__aeabi_d2iz+0x64>)
    566e:	40e8      	lsrs	r0, r5
    5670:	46a4      	mov	ip, r4
    5672:	4463      	add	r3, ip
    5674:	409a      	lsls	r2, r3
    5676:	4302      	orrs	r2, r0
    5678:	e7ef      	b.n	565a <__aeabi_d2iz+0x2e>
    567a:	46c0      	nop			; (mov r8, r8)
    567c:	000003fe 	.word	0x000003fe
    5680:	0000041d 	.word	0x0000041d
    5684:	00000433 	.word	0x00000433
    5688:	00000413 	.word	0x00000413
    568c:	7fffffff 	.word	0x7fffffff
    5690:	fffffbed 	.word	0xfffffbed

00005694 <__aeabi_ui2d>:
    5694:	b510      	push	{r4, lr}
    5696:	1e04      	subs	r4, r0, #0
    5698:	d028      	beq.n	56ec <__aeabi_ui2d+0x58>
    569a:	f000 f833 	bl	5704 <__clzsi2>
    569e:	4b15      	ldr	r3, [pc, #84]	; (56f4 <__aeabi_ui2d+0x60>)
    56a0:	4a15      	ldr	r2, [pc, #84]	; (56f8 <__aeabi_ui2d+0x64>)
    56a2:	1a1b      	subs	r3, r3, r0
    56a4:	1ad2      	subs	r2, r2, r3
    56a6:	2a1f      	cmp	r2, #31
    56a8:	dd15      	ble.n	56d6 <__aeabi_ui2d+0x42>
    56aa:	4a14      	ldr	r2, [pc, #80]	; (56fc <__aeabi_ui2d+0x68>)
    56ac:	1ad2      	subs	r2, r2, r3
    56ae:	4094      	lsls	r4, r2
    56b0:	2200      	movs	r2, #0
    56b2:	0324      	lsls	r4, r4, #12
    56b4:	055b      	lsls	r3, r3, #21
    56b6:	0b24      	lsrs	r4, r4, #12
    56b8:	0d5b      	lsrs	r3, r3, #21
    56ba:	2100      	movs	r1, #0
    56bc:	0010      	movs	r0, r2
    56be:	0324      	lsls	r4, r4, #12
    56c0:	0d0a      	lsrs	r2, r1, #20
    56c2:	0b24      	lsrs	r4, r4, #12
    56c4:	0512      	lsls	r2, r2, #20
    56c6:	4322      	orrs	r2, r4
    56c8:	4c0d      	ldr	r4, [pc, #52]	; (5700 <__aeabi_ui2d+0x6c>)
    56ca:	051b      	lsls	r3, r3, #20
    56cc:	4022      	ands	r2, r4
    56ce:	4313      	orrs	r3, r2
    56d0:	005b      	lsls	r3, r3, #1
    56d2:	0859      	lsrs	r1, r3, #1
    56d4:	bd10      	pop	{r4, pc}
    56d6:	0021      	movs	r1, r4
    56d8:	4091      	lsls	r1, r2
    56da:	000a      	movs	r2, r1
    56dc:	210b      	movs	r1, #11
    56de:	1a08      	subs	r0, r1, r0
    56e0:	40c4      	lsrs	r4, r0
    56e2:	055b      	lsls	r3, r3, #21
    56e4:	0324      	lsls	r4, r4, #12
    56e6:	0b24      	lsrs	r4, r4, #12
    56e8:	0d5b      	lsrs	r3, r3, #21
    56ea:	e7e6      	b.n	56ba <__aeabi_ui2d+0x26>
    56ec:	2300      	movs	r3, #0
    56ee:	2400      	movs	r4, #0
    56f0:	2200      	movs	r2, #0
    56f2:	e7e2      	b.n	56ba <__aeabi_ui2d+0x26>
    56f4:	0000041e 	.word	0x0000041e
    56f8:	00000433 	.word	0x00000433
    56fc:	00000413 	.word	0x00000413
    5700:	800fffff 	.word	0x800fffff

00005704 <__clzsi2>:
    5704:	211c      	movs	r1, #28
    5706:	2301      	movs	r3, #1
    5708:	041b      	lsls	r3, r3, #16
    570a:	4298      	cmp	r0, r3
    570c:	d301      	bcc.n	5712 <__clzsi2+0xe>
    570e:	0c00      	lsrs	r0, r0, #16
    5710:	3910      	subs	r1, #16
    5712:	0a1b      	lsrs	r3, r3, #8
    5714:	4298      	cmp	r0, r3
    5716:	d301      	bcc.n	571c <__clzsi2+0x18>
    5718:	0a00      	lsrs	r0, r0, #8
    571a:	3908      	subs	r1, #8
    571c:	091b      	lsrs	r3, r3, #4
    571e:	4298      	cmp	r0, r3
    5720:	d301      	bcc.n	5726 <__clzsi2+0x22>
    5722:	0900      	lsrs	r0, r0, #4
    5724:	3904      	subs	r1, #4
    5726:	a202      	add	r2, pc, #8	; (adr r2, 5730 <__clzsi2+0x2c>)
    5728:	5c10      	ldrb	r0, [r2, r0]
    572a:	1840      	adds	r0, r0, r1
    572c:	4770      	bx	lr
    572e:	46c0      	nop			; (mov r8, r8)
    5730:	02020304 	.word	0x02020304
    5734:	01010101 	.word	0x01010101
	...

00005740 <__clzdi2>:
    5740:	b510      	push	{r4, lr}
    5742:	2900      	cmp	r1, #0
    5744:	d103      	bne.n	574e <__clzdi2+0xe>
    5746:	f7ff ffdd 	bl	5704 <__clzsi2>
    574a:	3020      	adds	r0, #32
    574c:	e002      	b.n	5754 <__clzdi2+0x14>
    574e:	1c08      	adds	r0, r1, #0
    5750:	f7ff ffd8 	bl	5704 <__clzsi2>
    5754:	bd10      	pop	{r4, pc}
    5756:	46c0      	nop			; (mov r8, r8)

00005758 <__libc_init_array>:
    5758:	b570      	push	{r4, r5, r6, lr}
    575a:	2600      	movs	r6, #0
    575c:	4d0c      	ldr	r5, [pc, #48]	; (5790 <__libc_init_array+0x38>)
    575e:	4c0d      	ldr	r4, [pc, #52]	; (5794 <__libc_init_array+0x3c>)
    5760:	1b64      	subs	r4, r4, r5
    5762:	10a4      	asrs	r4, r4, #2
    5764:	42a6      	cmp	r6, r4
    5766:	d109      	bne.n	577c <__libc_init_array+0x24>
    5768:	2600      	movs	r6, #0
    576a:	f000 fcd1 	bl	6110 <_init>
    576e:	4d0a      	ldr	r5, [pc, #40]	; (5798 <__libc_init_array+0x40>)
    5770:	4c0a      	ldr	r4, [pc, #40]	; (579c <__libc_init_array+0x44>)
    5772:	1b64      	subs	r4, r4, r5
    5774:	10a4      	asrs	r4, r4, #2
    5776:	42a6      	cmp	r6, r4
    5778:	d105      	bne.n	5786 <__libc_init_array+0x2e>
    577a:	bd70      	pop	{r4, r5, r6, pc}
    577c:	00b3      	lsls	r3, r6, #2
    577e:	58eb      	ldr	r3, [r5, r3]
    5780:	4798      	blx	r3
    5782:	3601      	adds	r6, #1
    5784:	e7ee      	b.n	5764 <__libc_init_array+0xc>
    5786:	00b3      	lsls	r3, r6, #2
    5788:	58eb      	ldr	r3, [r5, r3]
    578a:	4798      	blx	r3
    578c:	3601      	adds	r6, #1
    578e:	e7f2      	b.n	5776 <__libc_init_array+0x1e>
    5790:	0000611c 	.word	0x0000611c
    5794:	0000611c 	.word	0x0000611c
    5798:	0000611c 	.word	0x0000611c
    579c:	00006120 	.word	0x00006120

000057a0 <malloc>:
    57a0:	b510      	push	{r4, lr}
    57a2:	4b03      	ldr	r3, [pc, #12]	; (57b0 <malloc+0x10>)
    57a4:	0001      	movs	r1, r0
    57a6:	6818      	ldr	r0, [r3, #0]
    57a8:	f000 f878 	bl	589c <_malloc_r>
    57ac:	bd10      	pop	{r4, pc}
    57ae:	46c0      	nop			; (mov r8, r8)
    57b0:	20000070 	.word	0x20000070

000057b4 <free>:
    57b4:	b510      	push	{r4, lr}
    57b6:	4b03      	ldr	r3, [pc, #12]	; (57c4 <free+0x10>)
    57b8:	0001      	movs	r1, r0
    57ba:	6818      	ldr	r0, [r3, #0]
    57bc:	f000 f824 	bl	5808 <_free_r>
    57c0:	bd10      	pop	{r4, pc}
    57c2:	46c0      	nop			; (mov r8, r8)
    57c4:	20000070 	.word	0x20000070

000057c8 <memcmp>:
    57c8:	b530      	push	{r4, r5, lr}
    57ca:	2400      	movs	r4, #0
    57cc:	42a2      	cmp	r2, r4
    57ce:	d101      	bne.n	57d4 <memcmp+0xc>
    57d0:	2000      	movs	r0, #0
    57d2:	e005      	b.n	57e0 <memcmp+0x18>
    57d4:	5d03      	ldrb	r3, [r0, r4]
    57d6:	1c65      	adds	r5, r4, #1
    57d8:	5d0c      	ldrb	r4, [r1, r4]
    57da:	42a3      	cmp	r3, r4
    57dc:	d001      	beq.n	57e2 <memcmp+0x1a>
    57de:	1b18      	subs	r0, r3, r4
    57e0:	bd30      	pop	{r4, r5, pc}
    57e2:	002c      	movs	r4, r5
    57e4:	e7f2      	b.n	57cc <memcmp+0x4>

000057e6 <memcpy>:
    57e6:	2300      	movs	r3, #0
    57e8:	b510      	push	{r4, lr}
    57ea:	429a      	cmp	r2, r3
    57ec:	d100      	bne.n	57f0 <memcpy+0xa>
    57ee:	bd10      	pop	{r4, pc}
    57f0:	5ccc      	ldrb	r4, [r1, r3]
    57f2:	54c4      	strb	r4, [r0, r3]
    57f4:	3301      	adds	r3, #1
    57f6:	e7f8      	b.n	57ea <memcpy+0x4>

000057f8 <memset>:
    57f8:	0003      	movs	r3, r0
    57fa:	1882      	adds	r2, r0, r2
    57fc:	4293      	cmp	r3, r2
    57fe:	d100      	bne.n	5802 <memset+0xa>
    5800:	4770      	bx	lr
    5802:	7019      	strb	r1, [r3, #0]
    5804:	3301      	adds	r3, #1
    5806:	e7f9      	b.n	57fc <memset+0x4>

00005808 <_free_r>:
    5808:	b570      	push	{r4, r5, r6, lr}
    580a:	0005      	movs	r5, r0
    580c:	2900      	cmp	r1, #0
    580e:	d010      	beq.n	5832 <_free_r+0x2a>
    5810:	1f0c      	subs	r4, r1, #4
    5812:	6823      	ldr	r3, [r4, #0]
    5814:	2b00      	cmp	r3, #0
    5816:	da00      	bge.n	581a <_free_r+0x12>
    5818:	18e4      	adds	r4, r4, r3
    581a:	0028      	movs	r0, r5
    581c:	f000 f8bb 	bl	5996 <__malloc_lock>
    5820:	4a1d      	ldr	r2, [pc, #116]	; (5898 <_free_r+0x90>)
    5822:	6813      	ldr	r3, [r2, #0]
    5824:	2b00      	cmp	r3, #0
    5826:	d105      	bne.n	5834 <_free_r+0x2c>
    5828:	6063      	str	r3, [r4, #4]
    582a:	6014      	str	r4, [r2, #0]
    582c:	0028      	movs	r0, r5
    582e:	f000 f8b3 	bl	5998 <__malloc_unlock>
    5832:	bd70      	pop	{r4, r5, r6, pc}
    5834:	42a3      	cmp	r3, r4
    5836:	d909      	bls.n	584c <_free_r+0x44>
    5838:	6821      	ldr	r1, [r4, #0]
    583a:	1860      	adds	r0, r4, r1
    583c:	4283      	cmp	r3, r0
    583e:	d1f3      	bne.n	5828 <_free_r+0x20>
    5840:	6818      	ldr	r0, [r3, #0]
    5842:	685b      	ldr	r3, [r3, #4]
    5844:	1841      	adds	r1, r0, r1
    5846:	6021      	str	r1, [r4, #0]
    5848:	e7ee      	b.n	5828 <_free_r+0x20>
    584a:	0013      	movs	r3, r2
    584c:	685a      	ldr	r2, [r3, #4]
    584e:	2a00      	cmp	r2, #0
    5850:	d001      	beq.n	5856 <_free_r+0x4e>
    5852:	42a2      	cmp	r2, r4
    5854:	d9f9      	bls.n	584a <_free_r+0x42>
    5856:	6819      	ldr	r1, [r3, #0]
    5858:	1858      	adds	r0, r3, r1
    585a:	42a0      	cmp	r0, r4
    585c:	d10b      	bne.n	5876 <_free_r+0x6e>
    585e:	6820      	ldr	r0, [r4, #0]
    5860:	1809      	adds	r1, r1, r0
    5862:	1858      	adds	r0, r3, r1
    5864:	6019      	str	r1, [r3, #0]
    5866:	4282      	cmp	r2, r0
    5868:	d1e0      	bne.n	582c <_free_r+0x24>
    586a:	6810      	ldr	r0, [r2, #0]
    586c:	6852      	ldr	r2, [r2, #4]
    586e:	1841      	adds	r1, r0, r1
    5870:	6019      	str	r1, [r3, #0]
    5872:	605a      	str	r2, [r3, #4]
    5874:	e7da      	b.n	582c <_free_r+0x24>
    5876:	42a0      	cmp	r0, r4
    5878:	d902      	bls.n	5880 <_free_r+0x78>
    587a:	230c      	movs	r3, #12
    587c:	602b      	str	r3, [r5, #0]
    587e:	e7d5      	b.n	582c <_free_r+0x24>
    5880:	6821      	ldr	r1, [r4, #0]
    5882:	1860      	adds	r0, r4, r1
    5884:	4282      	cmp	r2, r0
    5886:	d103      	bne.n	5890 <_free_r+0x88>
    5888:	6810      	ldr	r0, [r2, #0]
    588a:	6852      	ldr	r2, [r2, #4]
    588c:	1841      	adds	r1, r0, r1
    588e:	6021      	str	r1, [r4, #0]
    5890:	6062      	str	r2, [r4, #4]
    5892:	605c      	str	r4, [r3, #4]
    5894:	e7ca      	b.n	582c <_free_r+0x24>
    5896:	46c0      	nop			; (mov r8, r8)
    5898:	200001dc 	.word	0x200001dc

0000589c <_malloc_r>:
    589c:	2303      	movs	r3, #3
    589e:	b570      	push	{r4, r5, r6, lr}
    58a0:	1ccd      	adds	r5, r1, #3
    58a2:	439d      	bics	r5, r3
    58a4:	3508      	adds	r5, #8
    58a6:	0006      	movs	r6, r0
    58a8:	2d0c      	cmp	r5, #12
    58aa:	d21e      	bcs.n	58ea <_malloc_r+0x4e>
    58ac:	250c      	movs	r5, #12
    58ae:	42a9      	cmp	r1, r5
    58b0:	d81d      	bhi.n	58ee <_malloc_r+0x52>
    58b2:	0030      	movs	r0, r6
    58b4:	f000 f86f 	bl	5996 <__malloc_lock>
    58b8:	4a25      	ldr	r2, [pc, #148]	; (5950 <_malloc_r+0xb4>)
    58ba:	6814      	ldr	r4, [r2, #0]
    58bc:	0021      	movs	r1, r4
    58be:	2900      	cmp	r1, #0
    58c0:	d119      	bne.n	58f6 <_malloc_r+0x5a>
    58c2:	4c24      	ldr	r4, [pc, #144]	; (5954 <_malloc_r+0xb8>)
    58c4:	6823      	ldr	r3, [r4, #0]
    58c6:	2b00      	cmp	r3, #0
    58c8:	d103      	bne.n	58d2 <_malloc_r+0x36>
    58ca:	0030      	movs	r0, r6
    58cc:	f000 f844 	bl	5958 <_sbrk_r>
    58d0:	6020      	str	r0, [r4, #0]
    58d2:	0029      	movs	r1, r5
    58d4:	0030      	movs	r0, r6
    58d6:	f000 f83f 	bl	5958 <_sbrk_r>
    58da:	1c43      	adds	r3, r0, #1
    58dc:	d12c      	bne.n	5938 <_malloc_r+0x9c>
    58de:	230c      	movs	r3, #12
    58e0:	0030      	movs	r0, r6
    58e2:	6033      	str	r3, [r6, #0]
    58e4:	f000 f858 	bl	5998 <__malloc_unlock>
    58e8:	e003      	b.n	58f2 <_malloc_r+0x56>
    58ea:	2d00      	cmp	r5, #0
    58ec:	dadf      	bge.n	58ae <_malloc_r+0x12>
    58ee:	230c      	movs	r3, #12
    58f0:	6033      	str	r3, [r6, #0]
    58f2:	2000      	movs	r0, #0
    58f4:	bd70      	pop	{r4, r5, r6, pc}
    58f6:	680b      	ldr	r3, [r1, #0]
    58f8:	1b5b      	subs	r3, r3, r5
    58fa:	d41a      	bmi.n	5932 <_malloc_r+0x96>
    58fc:	2b0b      	cmp	r3, #11
    58fe:	d903      	bls.n	5908 <_malloc_r+0x6c>
    5900:	600b      	str	r3, [r1, #0]
    5902:	18cc      	adds	r4, r1, r3
    5904:	6025      	str	r5, [r4, #0]
    5906:	e003      	b.n	5910 <_malloc_r+0x74>
    5908:	428c      	cmp	r4, r1
    590a:	d10e      	bne.n	592a <_malloc_r+0x8e>
    590c:	6863      	ldr	r3, [r4, #4]
    590e:	6013      	str	r3, [r2, #0]
    5910:	0030      	movs	r0, r6
    5912:	f000 f841 	bl	5998 <__malloc_unlock>
    5916:	0020      	movs	r0, r4
    5918:	2207      	movs	r2, #7
    591a:	300b      	adds	r0, #11
    591c:	1d23      	adds	r3, r4, #4
    591e:	4390      	bics	r0, r2
    5920:	1ac3      	subs	r3, r0, r3
    5922:	d0e7      	beq.n	58f4 <_malloc_r+0x58>
    5924:	425a      	negs	r2, r3
    5926:	50e2      	str	r2, [r4, r3]
    5928:	e7e4      	b.n	58f4 <_malloc_r+0x58>
    592a:	684b      	ldr	r3, [r1, #4]
    592c:	6063      	str	r3, [r4, #4]
    592e:	000c      	movs	r4, r1
    5930:	e7ee      	b.n	5910 <_malloc_r+0x74>
    5932:	000c      	movs	r4, r1
    5934:	6849      	ldr	r1, [r1, #4]
    5936:	e7c2      	b.n	58be <_malloc_r+0x22>
    5938:	2303      	movs	r3, #3
    593a:	1cc4      	adds	r4, r0, #3
    593c:	439c      	bics	r4, r3
    593e:	42a0      	cmp	r0, r4
    5940:	d0e0      	beq.n	5904 <_malloc_r+0x68>
    5942:	1a21      	subs	r1, r4, r0
    5944:	0030      	movs	r0, r6
    5946:	f000 f807 	bl	5958 <_sbrk_r>
    594a:	1c43      	adds	r3, r0, #1
    594c:	d1da      	bne.n	5904 <_malloc_r+0x68>
    594e:	e7c6      	b.n	58de <_malloc_r+0x42>
    5950:	200001dc 	.word	0x200001dc
    5954:	200001e0 	.word	0x200001e0

00005958 <_sbrk_r>:
    5958:	2300      	movs	r3, #0
    595a:	b570      	push	{r4, r5, r6, lr}
    595c:	4c06      	ldr	r4, [pc, #24]	; (5978 <_sbrk_r+0x20>)
    595e:	0005      	movs	r5, r0
    5960:	0008      	movs	r0, r1
    5962:	6023      	str	r3, [r4, #0]
    5964:	f7fd f818 	bl	2998 <_sbrk>
    5968:	1c43      	adds	r3, r0, #1
    596a:	d103      	bne.n	5974 <_sbrk_r+0x1c>
    596c:	6823      	ldr	r3, [r4, #0]
    596e:	2b00      	cmp	r3, #0
    5970:	d000      	beq.n	5974 <_sbrk_r+0x1c>
    5972:	602b      	str	r3, [r5, #0]
    5974:	bd70      	pop	{r4, r5, r6, pc}
    5976:	46c0      	nop			; (mov r8, r8)
    5978:	20000214 	.word	0x20000214

0000597c <strcat>:
    597c:	0002      	movs	r2, r0
    597e:	b510      	push	{r4, lr}
    5980:	7813      	ldrb	r3, [r2, #0]
    5982:	2b00      	cmp	r3, #0
    5984:	d105      	bne.n	5992 <strcat+0x16>
    5986:	5ccc      	ldrb	r4, [r1, r3]
    5988:	54d4      	strb	r4, [r2, r3]
    598a:	3301      	adds	r3, #1
    598c:	2c00      	cmp	r4, #0
    598e:	d1fa      	bne.n	5986 <strcat+0xa>
    5990:	bd10      	pop	{r4, pc}
    5992:	3201      	adds	r2, #1
    5994:	e7f4      	b.n	5980 <strcat+0x4>

00005996 <__malloc_lock>:
    5996:	4770      	bx	lr

00005998 <__malloc_unlock>:
    5998:	4770      	bx	lr
    599a:	0000      	movs	r0, r0
    599c:	00000d00 	.word	0x00000d00
    59a0:	00000d14 	.word	0x00000d14
    59a4:	00000d30 	.word	0x00000d30
    59a8:	00000d00 	.word	0x00000d00
    59ac:	00000d00 	.word	0x00000d00
    59b0:	00000d30 	.word	0x00000d30
    59b4:	00000d3e 	.word	0x00000d3e
    59b8:	00000d4a 	.word	0x00000d4a
    59bc:	40030004 	.word	0x40030004
    59c0:	0000199c 	.word	0x0000199c
    59c4:	00001990 	.word	0x00001990
    59c8:	000019d8 	.word	0x000019d8
    59cc:	000019e4 	.word	0x000019e4
    59d0:	000019f0 	.word	0x000019f0
    59d4:	000019fc 	.word	0x000019fc
    59d8:	00001b52 	.word	0x00001b52
    59dc:	00001b8c 	.word	0x00001b8c
    59e0:	00001b9a 	.word	0x00001b9a
    59e4:	00001ba8 	.word	0x00001ba8
    59e8:	00001bb6 	.word	0x00001bb6
    59ec:	00001bc4 	.word	0x00001bc4
    59f0:	01600000 	.word	0x01600000
    59f4:	02600000 	.word	0x02600000
    59f8:	01100080 	.word	0x01100080
    59fc:	08000200 	.word	0x08000200
    5a00:	09000200 	.word	0x09000200
    5a04:	00050400 	.word	0x00050400
    5a08:	43331104 	.word	0x43331104
    5a0c:	42000800 	.word	0x42000800
    5a10:	42000c00 	.word	0x42000c00
    5a14:	42001000 	.word	0x42001000
    5a18:	42001400 	.word	0x42001400
    5a1c:	42001800 	.word	0x42001800
    5a20:	42001c00 	.word	0x42001c00
    5a24:	00002322 	.word	0x00002322
    5a28:	0000231e 	.word	0x0000231e
    5a2c:	0000231e 	.word	0x0000231e
    5a30:	00002384 	.word	0x00002384
    5a34:	00002384 	.word	0x00002384
    5a38:	00002336 	.word	0x00002336
    5a3c:	00002328 	.word	0x00002328
    5a40:	0000233c 	.word	0x0000233c
    5a44:	00002372 	.word	0x00002372
    5a48:	0000240c 	.word	0x0000240c
    5a4c:	000023ec 	.word	0x000023ec
    5a50:	000023ec 	.word	0x000023ec
    5a54:	00002478 	.word	0x00002478
    5a58:	000023fe 	.word	0x000023fe
    5a5c:	0000241a 	.word	0x0000241a
    5a60:	000023f0 	.word	0x000023f0
    5a64:	00002428 	.word	0x00002428
    5a68:	00002468 	.word	0x00002468
    5a6c:	656d6f53 	.word	0x656d6f53
    5a70:	6f727020 	.word	0x6f727020
    5a74:	6d656c62 	.word	0x6d656c62
    5a78:	63636f20 	.word	0x63636f20
    5a7c:	65727275 	.word	0x65727275
    5a80:	0d0a2164 	.word	0x0d0a2164
    5a84:	00000000 	.word	0x00000000
    5a88:	666e6f43 	.word	0x666e6f43
    5a8c:	69206769 	.word	0x69206769
    5a90:	6f6c2073 	.word	0x6f6c2073
    5a94:	64656b63 	.word	0x64656b63
    5a98:	00000d0a 	.word	0x00000d0a
    5a9c:	666e6f43 	.word	0x666e6f43
    5aa0:	69206769 	.word	0x69206769
    5aa4:	6f6e2073 	.word	0x6f6e2073
    5aa8:	6f6c2074 	.word	0x6f6c2074
    5aac:	64656b63 	.word	0x64656b63
    5ab0:	00000d0a 	.word	0x00000d0a
    5ab4:	61746144 	.word	0x61746144
    5ab8:	20736920 	.word	0x20736920
    5abc:	6b636f6c 	.word	0x6b636f6c
    5ac0:	0d0a6465 	.word	0x0d0a6465
    5ac4:	00000000 	.word	0x00000000
    5ac8:	61746144 	.word	0x61746144
    5acc:	20736920 	.word	0x20736920
    5ad0:	20746f6e 	.word	0x20746f6e
    5ad4:	6b636f6c 	.word	0x6b636f6c
    5ad8:	0d0a6465 	.word	0x0d0a6465
    5adc:	00000000 	.word	0x00000000
    5ae0:	6f4c2931 	.word	0x6f4c2931
    5ae4:	43206b63 	.word	0x43206b63
    5ae8:	69666e6f 	.word	0x69666e6f
    5aec:	000d0a67 	.word	0x000d0a67
    5af0:	6f4c2932 	.word	0x6f4c2932
    5af4:	44206b63 	.word	0x44206b63
    5af8:	0a617461 	.word	0x0a617461
    5afc:	0000000d 	.word	0x0000000d
    5b00:	4a325b1b 	.word	0x4a325b1b
    5b04:	00000000 	.word	0x00000000
    5b08:	3b305b1b 	.word	0x3b305b1b
    5b0c:	00004830 	.word	0x00004830
    5b10:	70696843 	.word	0x70696843
    5b14:	74656720 	.word	0x74656720
    5b18:	6e692073 	.word	0x6e692073
    5b1c:	61697469 	.word	0x61697469
    5b20:	657a696c 	.word	0x657a696c
    5b24:	50202e64 	.word	0x50202e64
    5b28:	7361656c 	.word	0x7361656c
    5b2c:	61772065 	.word	0x61772065
    5b30:	202e7469 	.word	0x202e7469
    5b34:	0d0a2020 	.word	0x0d0a2020
    5b38:	00000000 	.word	0x00000000
    5b3c:	2d2d2d5b 	.word	0x2d2d2d5b
    5b40:	2d2d2d2d 	.word	0x2d2d2d2d
    5b44:	2d2d2d2d 	.word	0x2d2d2d2d
    5b48:	2d2d2d2d 	.word	0x2d2d2d2d
    5b4c:	2d2d2d2d 	.word	0x2d2d2d2d
    5b50:	2d2d2d2d 	.word	0x2d2d2d2d
    5b54:	2d2d2d2d 	.word	0x2d2d2d2d
    5b58:	2d2d2d2d 	.word	0x2d2d2d2d
    5b5c:	2d2d2d2d 	.word	0x2d2d2d2d
    5b60:	5d2d2d2d 	.word	0x5d2d2d2d
    5b64:	00000000 	.word	0x00000000
    5b68:	2323235b 	.word	0x2323235b
    5b6c:	23232323 	.word	0x23232323
    5b70:	2d2d2d2d 	.word	0x2d2d2d2d
    5b74:	2d2d2d2d 	.word	0x2d2d2d2d
    5b78:	2d2d2d2d 	.word	0x2d2d2d2d
    5b7c:	2d2d2d2d 	.word	0x2d2d2d2d
    5b80:	2d2d2d2d 	.word	0x2d2d2d2d
    5b84:	2d2d2d2d 	.word	0x2d2d2d2d
    5b88:	2d2d2d2d 	.word	0x2d2d2d2d
    5b8c:	5d2d2d2d 	.word	0x5d2d2d2d
    5b90:	00000000 	.word	0x00000000
    5b94:	2323235b 	.word	0x2323235b
    5b98:	23232323 	.word	0x23232323
    5b9c:	23232323 	.word	0x23232323
    5ba0:	23232323 	.word	0x23232323
    5ba4:	2d2d2d2d 	.word	0x2d2d2d2d
    5ba8:	2d2d2d2d 	.word	0x2d2d2d2d
    5bac:	2d2d2d2d 	.word	0x2d2d2d2d
    5bb0:	2d2d2d2d 	.word	0x2d2d2d2d
    5bb4:	2d2d2d2d 	.word	0x2d2d2d2d
    5bb8:	5d2d2d2d 	.word	0x5d2d2d2d
    5bbc:	00000000 	.word	0x00000000
    5bc0:	2323235b 	.word	0x2323235b
    5bc4:	23232323 	.word	0x23232323
    5bc8:	23232323 	.word	0x23232323
    5bcc:	23232323 	.word	0x23232323
    5bd0:	23232323 	.word	0x23232323
    5bd4:	23232323 	.word	0x23232323
    5bd8:	2d2d2d2d 	.word	0x2d2d2d2d
    5bdc:	2d2d2d2d 	.word	0x2d2d2d2d
    5be0:	2d2d2d2d 	.word	0x2d2d2d2d
    5be4:	5d2d2d2d 	.word	0x5d2d2d2d
    5be8:	00000000 	.word	0x00000000
    5bec:	2323235b 	.word	0x2323235b
    5bf0:	23232323 	.word	0x23232323
    5bf4:	23232323 	.word	0x23232323
    5bf8:	23232323 	.word	0x23232323
    5bfc:	23232323 	.word	0x23232323
    5c00:	23232323 	.word	0x23232323
    5c04:	23232323 	.word	0x23232323
    5c08:	23232323 	.word	0x23232323
    5c0c:	2d2d2d2d 	.word	0x2d2d2d2d
    5c10:	5d2d2d2d 	.word	0x5d2d2d2d
    5c14:	00000000 	.word	0x00000000
    5c18:	2323235b 	.word	0x2323235b
    5c1c:	23232323 	.word	0x23232323
    5c20:	23232323 	.word	0x23232323
    5c24:	23232323 	.word	0x23232323
    5c28:	23232323 	.word	0x23232323
    5c2c:	23232323 	.word	0x23232323
    5c30:	23232323 	.word	0x23232323
    5c34:	23232323 	.word	0x23232323
    5c38:	23232323 	.word	0x23232323
    5c3c:	5d232323 	.word	0x5d232323
    5c40:	00000000 	.word	0x00000000
    5c44:	00003648 	.word	0x00003648
    5c48:	0000361a 	.word	0x0000361a
    5c4c:	00003748 	.word	0x00003748
    5c50:	00003758 	.word	0x00003758
    5c54:	00003768 	.word	0x00003768
    5c58:	00003798 	.word	0x00003798
    5c5c:	000037fa 	.word	0x000037fa
    5c60:	43455441 	.word	0x43455441
    5c64:	38307843 	.word	0x38307843
    5c68:	654d2041 	.word	0x654d2041
    5c6c:	2020756e 	.word	0x2020756e
    5c70:	20202020 	.word	0x20202020
    5c74:	20202020 	.word	0x20202020
    5c78:	20202020 	.word	0x20202020
    5c7c:	20202020 	.word	0x20202020
    5c80:	20202020 	.word	0x20202020
    5c84:	0d0a2020 	.word	0x0d0a2020
    5c88:	00000000 	.word	0x00000000
    5c8c:	47202931 	.word	0x47202931
    5c90:	53207465 	.word	0x53207465
    5c94:	61697265 	.word	0x61697265
    5c98:	756e206c 	.word	0x756e206c
    5c9c:	7265626d 	.word	0x7265626d
    5ca0:	20666f20 	.word	0x20666f20
    5ca4:	43455441 	.word	0x43455441
    5ca8:	38307843 	.word	0x38307843
    5cac:	68432020 	.word	0x68432020
    5cb0:	0d0a7069 	.word	0x0d0a7069
    5cb4:	00000000 	.word	0x00000000
    5cb8:	43202932 	.word	0x43202932
    5cbc:	6b636568 	.word	0x6b636568
    5cc0:	20666920 	.word	0x20666920
    5cc4:	69766564 	.word	0x69766564
    5cc8:	69206563 	.word	0x69206563
    5ccc:	6f6c2073 	.word	0x6f6c2073
    5cd0:	64656b63 	.word	0x64656b63
    5cd4:	20202020 	.word	0x20202020
    5cd8:	20202020 	.word	0x20202020
    5cdc:	0d0a2020 	.word	0x0d0a2020
    5ce0:	00000000 	.word	0x00000000
    5ce4:	4c202933 	.word	0x4c202933
    5ce8:	206b636f 	.word	0x206b636f
    5cec:	656e6f5a 	.word	0x656e6f5a
    5cf0:	20202073 	.word	0x20202073
    5cf4:	20202020 	.word	0x20202020
    5cf8:	20202020 	.word	0x20202020
    5cfc:	20202020 	.word	0x20202020
    5d00:	20202020 	.word	0x20202020
    5d04:	20202020 	.word	0x20202020
    5d08:	0d0a2020 	.word	0x0d0a2020
    5d0c:	00000000 	.word	0x00000000
    5d10:	47202934 	.word	0x47202934
    5d14:	72656e65 	.word	0x72656e65
    5d18:	20657461 	.word	0x20657461
    5d1c:	646e6172 	.word	0x646e6172
    5d20:	6e206d6f 	.word	0x6e206d6f
    5d24:	65626d75 	.word	0x65626d75
    5d28:	20202072 	.word	0x20202072
    5d2c:	20202020 	.word	0x20202020
    5d30:	20202020 	.word	0x20202020
    5d34:	0d0a2020 	.word	0x0d0a2020
    5d38:	00000000 	.word	0x00000000
    5d3c:	47202935 	.word	0x47202935
    5d40:	72656e65 	.word	0x72656e65
    5d44:	20657461 	.word	0x20657461
    5d48:	2079654b 	.word	0x2079654b
    5d4c:	20202020 	.word	0x20202020
    5d50:	20202020 	.word	0x20202020
    5d54:	20202020 	.word	0x20202020
    5d58:	20202020 	.word	0x20202020
    5d5c:	20202020 	.word	0x20202020
    5d60:	0d0a2020 	.word	0x0d0a2020
    5d64:	00000000 	.word	0x00000000
    5d68:	43202936 	.word	0x43202936
    5d6c:	676e6168 	.word	0x676e6168
    5d70:	68432065 	.word	0x68432065
    5d74:	20207069 	.word	0x20207069
    5d78:	20202020 	.word	0x20202020
    5d7c:	20202020 	.word	0x20202020
    5d80:	20202020 	.word	0x20202020
    5d84:	20202020 	.word	0x20202020
    5d88:	20202020 	.word	0x20202020
    5d8c:	0d0a2020 	.word	0x0d0a2020
    5d90:	00000000 	.word	0x00000000
    5d94:	646e6152 	.word	0x646e6152
    5d98:	6e206d6f 	.word	0x6e206d6f
    5d9c:	65626d75 	.word	0x65626d75
    5da0:	20203a72 	.word	0x20203a72
    5da4:	20202020 	.word	0x20202020
    5da8:	20202020 	.word	0x20202020
    5dac:	20202020 	.word	0x20202020
    5db0:	20202020 	.word	0x20202020
    5db4:	20202020 	.word	0x20202020
    5db8:	0d0a2020 	.word	0x0d0a2020
    5dbc:	00000000 	.word	0x00000000
    5dc0:	6c627550 	.word	0x6c627550
    5dc4:	6b206369 	.word	0x6b206369
    5dc8:	203a7965 	.word	0x203a7965
    5dcc:	20202020 	.word	0x20202020
    5dd0:	20202020 	.word	0x20202020
    5dd4:	20202020 	.word	0x20202020
    5dd8:	20202020 	.word	0x20202020
    5ddc:	20202020 	.word	0x20202020
    5de0:	20202020 	.word	0x20202020
    5de4:	0d0a2020 	.word	0x0d0a2020
    5de8:	00000000 	.word	0x00000000
    5dec:	61656c50 	.word	0x61656c50
    5df0:	65206573 	.word	0x65206573
    5df4:	7265746e 	.word	0x7265746e
    5df8:	6e206120 	.word	0x6e206120
    5dfc:	65626d75 	.word	0x65626d75
    5e00:	65622072 	.word	0x65622072
    5e04:	65657774 	.word	0x65657774
    5e08:	2031206e 	.word	0x2031206e
    5e0c:	20646e61 	.word	0x20646e61
    5e10:	0d0a2036 	.word	0x0d0a2036
    5e14:	00000000 	.word	0x00000000
    5e18:	48535441 	.word	0x48535441
    5e1c:	34303241 	.word	0x34303241
    5e20:	654d2041 	.word	0x654d2041
    5e24:	2020756e 	.word	0x2020756e
    5e28:	20202020 	.word	0x20202020
    5e2c:	20202020 	.word	0x20202020
    5e30:	20202020 	.word	0x20202020
    5e34:	20202020 	.word	0x20202020
    5e38:	20202020 	.word	0x20202020
    5e3c:	0d0a2020 	.word	0x0d0a2020
    5e40:	00000000 	.word	0x00000000
    5e44:	47202931 	.word	0x47202931
    5e48:	53207465 	.word	0x53207465
    5e4c:	61697265 	.word	0x61697265
    5e50:	756e206c 	.word	0x756e206c
    5e54:	7265626d 	.word	0x7265626d
    5e58:	20666f20 	.word	0x20666f20
    5e5c:	48535441 	.word	0x48535441
    5e60:	34303241 	.word	0x34303241
    5e64:	68432041 	.word	0x68432041
    5e68:	0d0a7069 	.word	0x0d0a7069
    5e6c:	00000000 	.word	0x00000000
    5e70:	48202932 	.word	0x48202932
    5e74:	20687361 	.word	0x20687361
    5e78:	7373654d 	.word	0x7373654d
    5e7c:	20656761 	.word	0x20656761
    5e80:	20202020 	.word	0x20202020
    5e84:	20202020 	.word	0x20202020
    5e88:	20202020 	.word	0x20202020
    5e8c:	20202020 	.word	0x20202020
    5e90:	20202020 	.word	0x20202020
    5e94:	0d0a2020 	.word	0x0d0a2020
    5e98:	00000000 	.word	0x00000000
    5e9c:	43202933 	.word	0x43202933
    5ea0:	676e6168 	.word	0x676e6168
    5ea4:	68432065 	.word	0x68432065
    5ea8:	20207069 	.word	0x20207069
    5eac:	20202020 	.word	0x20202020
    5eb0:	20202020 	.word	0x20202020
    5eb4:	20202020 	.word	0x20202020
    5eb8:	20202020 	.word	0x20202020
    5ebc:	20202020 	.word	0x20202020
    5ec0:	0d0a2020 	.word	0x0d0a2020
    5ec4:	00000000 	.word	0x00000000
    5ec8:	42355b1b 	.word	0x42355b1b
    5ecc:	00000000 	.word	0x00000000
    5ed0:	69726553 	.word	0x69726553
    5ed4:	6e206c61 	.word	0x6e206c61
    5ed8:	65626d75 	.word	0x65626d75
    5edc:	20203a72 	.word	0x20203a72
    5ee0:	20202020 	.word	0x20202020
    5ee4:	20202020 	.word	0x20202020
    5ee8:	20202020 	.word	0x20202020
    5eec:	20202020 	.word	0x20202020
    5ef0:	20202020 	.word	0x20202020
    5ef4:	0d0a2020 	.word	0x0d0a2020
    5ef8:	00000000 	.word	0x00000000
    5efc:	61656c50 	.word	0x61656c50
    5f00:	65206573 	.word	0x65206573
    5f04:	7265746e 	.word	0x7265746e
    5f08:	65687420 	.word	0x65687420
    5f0c:	73656d20 	.word	0x73656d20
    5f10:	65676173 	.word	0x65676173
    5f14:	2020203a 	.word	0x2020203a
    5f18:	20202020 	.word	0x20202020
    5f1c:	20202020 	.word	0x20202020
    5f20:	0d0a2020 	.word	0x0d0a2020
    5f24:	00000000 	.word	0x00000000
    5f28:	68736148 	.word	0x68736148
    5f2c:	6d206465 	.word	0x6d206465
    5f30:	61737365 	.word	0x61737365
    5f34:	203a6567 	.word	0x203a6567
    5f38:	20202020 	.word	0x20202020
    5f3c:	20202020 	.word	0x20202020
    5f40:	20202020 	.word	0x20202020
    5f44:	20202020 	.word	0x20202020
    5f48:	20202020 	.word	0x20202020
    5f4c:	0d0a2020 	.word	0x0d0a2020
    5f50:	00000000 	.word	0x00000000
    5f54:	61656c50 	.word	0x61656c50
    5f58:	65206573 	.word	0x65206573
    5f5c:	7265746e 	.word	0x7265746e
    5f60:	6e206120 	.word	0x6e206120
    5f64:	65626d75 	.word	0x65626d75
    5f68:	65622072 	.word	0x65622072
    5f6c:	65657774 	.word	0x65657774
    5f70:	2031206e 	.word	0x2031206e
    5f74:	20646e61 	.word	0x20646e61
    5f78:	0d0a2078 	.word	0x0d0a2078
    5f7c:	00000000 	.word	0x00000000
    5f80:	756e654d 	.word	0x756e654d
    5f84:	20202020 	.word	0x20202020
    5f88:	20202020 	.word	0x20202020
    5f8c:	20202020 	.word	0x20202020
    5f90:	20202020 	.word	0x20202020
    5f94:	20202020 	.word	0x20202020
    5f98:	20202020 	.word	0x20202020
    5f9c:	20202020 	.word	0x20202020
    5fa0:	20202020 	.word	0x20202020
    5fa4:	0d0a2020 	.word	0x0d0a2020
    5fa8:	00000000 	.word	0x00000000
    5fac:	54412931 	.word	0x54412931
    5fb0:	32414853 	.word	0x32414853
    5fb4:	20413430 	.word	0x20413430
    5fb8:	20202020 	.word	0x20202020
    5fbc:	20202020 	.word	0x20202020
    5fc0:	20202020 	.word	0x20202020
    5fc4:	20202020 	.word	0x20202020
    5fc8:	20202020 	.word	0x20202020
    5fcc:	20202020 	.word	0x20202020
    5fd0:	0d0a2020 	.word	0x0d0a2020
    5fd4:	00000000 	.word	0x00000000
    5fd8:	54412932 	.word	0x54412932
    5fdc:	78434345 	.word	0x78434345
    5fe0:	20413830 	.word	0x20413830
    5fe4:	20202020 	.word	0x20202020
    5fe8:	20202020 	.word	0x20202020
    5fec:	20202020 	.word	0x20202020
    5ff0:	20202020 	.word	0x20202020
    5ff4:	20202020 	.word	0x20202020
    5ff8:	20202020 	.word	0x20202020
    5ffc:	0d0a2020 	.word	0x0d0a2020
    6000:	00000000 	.word	0x00000000
    6004:	54412933 	.word	0x54412933
    6008:	31534541 	.word	0x31534541
    600c:	20413233 	.word	0x20413233
    6010:	20202020 	.word	0x20202020
    6014:	20202020 	.word	0x20202020
    6018:	20202020 	.word	0x20202020
    601c:	20202020 	.word	0x20202020
    6020:	20202020 	.word	0x20202020
    6024:	20202020 	.word	0x20202020
    6028:	0d0a2020 	.word	0x0d0a2020
    602c:	00000000 	.word	0x00000000
    6030:	00004690 	.word	0x00004690
    6034:	00004672 	.word	0x00004672
    6038:	0000462c 	.word	0x0000462c
    603c:	0000454a 	.word	0x0000454a
    6040:	0000462c 	.word	0x0000462c
    6044:	00004664 	.word	0x00004664
    6048:	0000462c 	.word	0x0000462c
    604c:	0000454a 	.word	0x0000454a
    6050:	00004672 	.word	0x00004672
    6054:	00004672 	.word	0x00004672
    6058:	00004664 	.word	0x00004664
    605c:	0000454a 	.word	0x0000454a
    6060:	00004542 	.word	0x00004542
    6064:	00004542 	.word	0x00004542
    6068:	00004542 	.word	0x00004542
    606c:	000048a8 	.word	0x000048a8
    6070:	00004cf0 	.word	0x00004cf0
    6074:	00004bb0 	.word	0x00004bb0
    6078:	00004bb0 	.word	0x00004bb0
    607c:	00004bac 	.word	0x00004bac
    6080:	00004cc8 	.word	0x00004cc8
    6084:	00004cc8 	.word	0x00004cc8
    6088:	00004cba 	.word	0x00004cba
    608c:	00004bac 	.word	0x00004bac
    6090:	00004cc8 	.word	0x00004cc8
    6094:	00004cba 	.word	0x00004cba
    6098:	00004cc8 	.word	0x00004cc8
    609c:	00004bac 	.word	0x00004bac
    60a0:	00004cd0 	.word	0x00004cd0
    60a4:	00004cd0 	.word	0x00004cd0
    60a8:	00004cd0 	.word	0x00004cd0
    60ac:	00004ed4 	.word	0x00004ed4

000060b0 <__sf_fake_stderr>:
	...

000060d0 <__sf_fake_stdin>:
	...

000060f0 <__sf_fake_stdout>:
	...

00006110 <_init>:
    6110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6112:	46c0      	nop			; (mov r8, r8)
    6114:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6116:	bc08      	pop	{r3}
    6118:	469e      	mov	lr, r3
    611a:	4770      	bx	lr

0000611c <__init_array_start>:
    611c:	000000dd 	.word	0x000000dd

00006120 <_fini>:
    6120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6122:	46c0      	nop			; (mov r8, r8)
    6124:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6126:	bc08      	pop	{r3}
    6128:	469e      	mov	lr, r3
    612a:	4770      	bx	lr

0000612c <__fini_array_start>:
    612c:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <cfg_ateccx08a_i2c_default>:
2000000c:	0300 0000 01c0 0000 1a80 0006 0000 0000     ................
	...
20000030:	05dc 0000 0014 0000 0000 0000               ............

2000003c <cfg_atsha204a_i2c_default>:
2000003c:	0100 0000 01c8 0000 1a80 0006 0000 0000     ................
	...
20000060:	0a00 0000 0014 0000 0000 0000               ............

2000006c <g_interrupt_enabled>:
2000006c:	0001 0000                                   ....

20000070 <_impure_ptr>:
20000070:	0074 2000                                   t.. 

20000074 <impure_data>:
20000074:	0000 0000 60d0 0000 60f0 0000 60b0 0000     .....`...`...`..
	...

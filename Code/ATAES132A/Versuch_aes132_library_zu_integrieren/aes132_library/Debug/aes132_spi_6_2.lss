
aes132_spi_6_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000047c8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001d8  20000000  000047c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000200  200001d8  000049a0  000201d8  2**2
                  ALLOC
  3 .stack        00002000  200003d8  00004ba0  000201d8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
  6 .debug_info   00027fff  00000000  00000000  00020259  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003ab2  00000000  00000000  00048258  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000538  00000000  00000000  0004bd0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000009c8  00000000  00000000  0004c242  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001afdd  00000000  00000000  0004cc0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c23d  00000000  00000000  00067be7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0008d035  00000000  00000000  00073e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000019ec  00000000  00000000  00100e5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00007eb8  00000000  00000000  00102848  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d8 23 00 20 a1 22 00 00 9d 22 00 00 9d 22 00 00     .#. ."..."..."..
	...
      2c:	9d 22 00 00 00 00 00 00 00 00 00 00 9d 22 00 00     ."..........."..
      3c:	9d 22 00 00 9d 22 00 00 9d 22 00 00 9d 22 00 00     ."..."..."..."..
      4c:	9d 22 00 00 9d 22 00 00 9d 22 00 00 9d 22 00 00     ."..."..."..."..
      5c:	9d 22 00 00 9d 22 00 00 9d 22 00 00 9d 22 00 00     ."..."..."..."..
      6c:	9d 22 00 00 9d 22 00 00 9d 22 00 00 9d 22 00 00     ."..."..."..."..
      7c:	9d 22 00 00 9d 22 00 00 9d 22 00 00 9d 22 00 00     ."..."..."..."..
      8c:	9d 22 00 00 9d 22 00 00 9d 22 00 00 9d 22 00 00     ."..."..."..."..
      9c:	9d 22 00 00 9d 22 00 00 9d 22 00 00 9d 22 00 00     ."..."..."..."..
      ac:	9d 22 00 00                                         ."..

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	200001d8 	.word	0x200001d8
      d0:	00000000 	.word	0x00000000
      d4:	000047c8 	.word	0x000047c8

000000d8 <frame_dummy>:
      d8:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      da:	b510      	push	{r4, lr}
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4907      	ldr	r1, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4808      	ldr	r0, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d100      	bne.n	f2 <frame_dummy+0x1a>
      f0:	bd10      	pop	{r4, pc}
      f2:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f4:	2b00      	cmp	r3, #0
      f6:	d0fb      	beq.n	f0 <frame_dummy+0x18>
      f8:	4798      	blx	r3
      fa:	e7f9      	b.n	f0 <frame_dummy+0x18>
      fc:	00000000 	.word	0x00000000
     100:	200001dc 	.word	0x200001dc
     104:	000047c8 	.word	0x000047c8
     108:	000047c8 	.word	0x000047c8
     10c:	00000000 	.word	0x00000000

00000110 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     110:	4b0c      	ldr	r3, [pc, #48]	; (144 <cpu_irq_enter_critical+0x34>)
     112:	681b      	ldr	r3, [r3, #0]
     114:	2b00      	cmp	r3, #0
     116:	d106      	bne.n	126 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     118:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     11c:	2b00      	cmp	r3, #0
     11e:	d007      	beq.n	130 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     120:	2200      	movs	r2, #0
     122:	4b09      	ldr	r3, [pc, #36]	; (148 <cpu_irq_enter_critical+0x38>)
     124:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     126:	4a07      	ldr	r2, [pc, #28]	; (144 <cpu_irq_enter_critical+0x34>)
     128:	6813      	ldr	r3, [r2, #0]
     12a:	3301      	adds	r3, #1
     12c:	6013      	str	r3, [r2, #0]
}
     12e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     130:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     132:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     136:	2200      	movs	r2, #0
     138:	4b04      	ldr	r3, [pc, #16]	; (14c <cpu_irq_enter_critical+0x3c>)
     13a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     13c:	3201      	adds	r2, #1
     13e:	4b02      	ldr	r3, [pc, #8]	; (148 <cpu_irq_enter_critical+0x38>)
     140:	701a      	strb	r2, [r3, #0]
     142:	e7f0      	b.n	126 <cpu_irq_enter_critical+0x16>
     144:	200001f4 	.word	0x200001f4
     148:	200001f8 	.word	0x200001f8
     14c:	20000000 	.word	0x20000000

00000150 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     150:	4b08      	ldr	r3, [pc, #32]	; (174 <cpu_irq_leave_critical+0x24>)
     152:	681a      	ldr	r2, [r3, #0]
     154:	3a01      	subs	r2, #1
     156:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     158:	681b      	ldr	r3, [r3, #0]
     15a:	2b00      	cmp	r3, #0
     15c:	d109      	bne.n	172 <cpu_irq_leave_critical+0x22>
     15e:	4b06      	ldr	r3, [pc, #24]	; (178 <cpu_irq_leave_critical+0x28>)
     160:	781b      	ldrb	r3, [r3, #0]
     162:	2b00      	cmp	r3, #0
     164:	d005      	beq.n	172 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     166:	2201      	movs	r2, #1
     168:	4b04      	ldr	r3, [pc, #16]	; (17c <cpu_irq_leave_critical+0x2c>)
     16a:	701a      	strb	r2, [r3, #0]
     16c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     170:	b662      	cpsie	i
	}
}
     172:	4770      	bx	lr
     174:	200001f4 	.word	0x200001f4
     178:	200001f8 	.word	0x200001f8
     17c:	20000000 	.word	0x20000000

00000180 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     180:	b500      	push	{lr}
     182:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     184:	ab01      	add	r3, sp, #4
     186:	2280      	movs	r2, #128	; 0x80
     188:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     18a:	780a      	ldrb	r2, [r1, #0]
     18c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     18e:	784a      	ldrb	r2, [r1, #1]
     190:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     192:	788a      	ldrb	r2, [r1, #2]
     194:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     196:	0019      	movs	r1, r3
     198:	4b01      	ldr	r3, [pc, #4]	; (1a0 <port_pin_set_config+0x20>)
     19a:	4798      	blx	r3
}
     19c:	b003      	add	sp, #12
     19e:	bd00      	pop	{pc}
     1a0:	0000024d 	.word	0x0000024d

000001a4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     1a4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     1a6:	78d3      	ldrb	r3, [r2, #3]
     1a8:	2b00      	cmp	r3, #0
     1aa:	d135      	bne.n	218 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     1ac:	7813      	ldrb	r3, [r2, #0]
     1ae:	2b80      	cmp	r3, #128	; 0x80
     1b0:	d029      	beq.n	206 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     1b2:	061b      	lsls	r3, r3, #24
     1b4:	2480      	movs	r4, #128	; 0x80
     1b6:	0264      	lsls	r4, r4, #9
     1b8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     1ba:	7854      	ldrb	r4, [r2, #1]
     1bc:	2502      	movs	r5, #2
     1be:	43ac      	bics	r4, r5
     1c0:	d106      	bne.n	1d0 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     1c2:	7894      	ldrb	r4, [r2, #2]
     1c4:	2c00      	cmp	r4, #0
     1c6:	d120      	bne.n	20a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
     1c8:	2480      	movs	r4, #128	; 0x80
     1ca:	02a4      	lsls	r4, r4, #10
     1cc:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     1ce:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     1d0:	7854      	ldrb	r4, [r2, #1]
     1d2:	3c01      	subs	r4, #1
     1d4:	2c01      	cmp	r4, #1
     1d6:	d91c      	bls.n	212 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     1d8:	040d      	lsls	r5, r1, #16
     1da:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     1dc:	24a0      	movs	r4, #160	; 0xa0
     1de:	05e4      	lsls	r4, r4, #23
     1e0:	432c      	orrs	r4, r5
     1e2:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     1e4:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     1e6:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     1e8:	24d0      	movs	r4, #208	; 0xd0
     1ea:	0624      	lsls	r4, r4, #24
     1ec:	432c      	orrs	r4, r5
     1ee:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     1f0:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     1f2:	78d4      	ldrb	r4, [r2, #3]
     1f4:	2c00      	cmp	r4, #0
     1f6:	d122      	bne.n	23e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
     1f8:	035b      	lsls	r3, r3, #13
     1fa:	d51c      	bpl.n	236 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     1fc:	7893      	ldrb	r3, [r2, #2]
     1fe:	2b01      	cmp	r3, #1
     200:	d01e      	beq.n	240 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
     202:	6141      	str	r1, [r0, #20]
     204:	e017      	b.n	236 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
     206:	2300      	movs	r3, #0
     208:	e7d7      	b.n	1ba <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     20a:	24c0      	movs	r4, #192	; 0xc0
     20c:	02e4      	lsls	r4, r4, #11
     20e:	4323      	orrs	r3, r4
     210:	e7dd      	b.n	1ce <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     212:	4c0d      	ldr	r4, [pc, #52]	; (248 <_system_pinmux_config+0xa4>)
     214:	4023      	ands	r3, r4
     216:	e7df      	b.n	1d8 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
     218:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     21a:	040c      	lsls	r4, r1, #16
     21c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     21e:	23a0      	movs	r3, #160	; 0xa0
     220:	05db      	lsls	r3, r3, #23
     222:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     224:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     226:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     228:	23d0      	movs	r3, #208	; 0xd0
     22a:	061b      	lsls	r3, r3, #24
     22c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     22e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
     230:	78d3      	ldrb	r3, [r2, #3]
     232:	2b00      	cmp	r3, #0
     234:	d103      	bne.n	23e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     236:	7853      	ldrb	r3, [r2, #1]
     238:	3b01      	subs	r3, #1
     23a:	2b01      	cmp	r3, #1
     23c:	d902      	bls.n	244 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
     23e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
     240:	6181      	str	r1, [r0, #24]
     242:	e7f8      	b.n	236 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
     244:	6081      	str	r1, [r0, #8]
}
     246:	e7fa      	b.n	23e <_system_pinmux_config+0x9a>
     248:	fffbffff 	.word	0xfffbffff

0000024c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
     24c:	b510      	push	{r4, lr}
     24e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     250:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     252:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     254:	2900      	cmp	r1, #0
     256:	d104      	bne.n	262 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
     258:	0943      	lsrs	r3, r0, #5
     25a:	01db      	lsls	r3, r3, #7
     25c:	4905      	ldr	r1, [pc, #20]	; (274 <system_pinmux_pin_set_config+0x28>)
     25e:	468c      	mov	ip, r1
     260:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
     262:	241f      	movs	r4, #31
     264:	4020      	ands	r0, r4
     266:	2101      	movs	r1, #1
     268:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
     26a:	0018      	movs	r0, r3
     26c:	4b02      	ldr	r3, [pc, #8]	; (278 <system_pinmux_pin_set_config+0x2c>)
     26e:	4798      	blx	r3
}
     270:	bd10      	pop	{r4, pc}
     272:	46c0      	nop			; (mov r8, r8)
     274:	41004400 	.word	0x41004400
     278:	000001a5 	.word	0x000001a5

0000027c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
     27c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
     27e:	4a06      	ldr	r2, [pc, #24]	; (298 <_sbrk+0x1c>)
     280:	6812      	ldr	r2, [r2, #0]
     282:	2a00      	cmp	r2, #0
     284:	d004      	beq.n	290 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     286:	4a04      	ldr	r2, [pc, #16]	; (298 <_sbrk+0x1c>)
     288:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     28a:	18c3      	adds	r3, r0, r3
     28c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
     28e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     290:	4902      	ldr	r1, [pc, #8]	; (29c <_sbrk+0x20>)
     292:	4a01      	ldr	r2, [pc, #4]	; (298 <_sbrk+0x1c>)
     294:	6011      	str	r1, [r2, #0]
     296:	e7f6      	b.n	286 <_sbrk+0xa>
     298:	200001fc 	.word	0x200001fc
     29c:	200023d8 	.word	0x200023d8

000002a0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
     2a0:	2001      	movs	r0, #1
     2a2:	4240      	negs	r0, r0
     2a4:	4770      	bx	lr

000002a6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
     2a6:	2380      	movs	r3, #128	; 0x80
     2a8:	019b      	lsls	r3, r3, #6
     2aa:	604b      	str	r3, [r1, #4]

	return 0;
}
     2ac:	2000      	movs	r0, #0
     2ae:	4770      	bx	lr

000002b0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
     2b0:	2001      	movs	r0, #1
     2b2:	4770      	bx	lr

000002b4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
     2b4:	2000      	movs	r0, #0
     2b6:	4770      	bx	lr

000002b8 <aes132c_calculate_crc>:
 * \param[in] length number of bytes in data buffer
 * \param[in] data pointer to data
 * \param[out] crc pointer to calculated CRC (high byte at crc[0])
 */
void aes132c_calculate_crc(uint8_t length, uint8_t *data, uint8_t *crc)
{
     2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     2ba:	46de      	mov	lr, fp
     2bc:	4657      	mov	r7, sl
     2be:	464e      	mov	r6, r9
     2c0:	4645      	mov	r5, r8
     2c2:	b5e0      	push	{r5, r6, r7, lr}
     2c4:	4693      	mov	fp, r2
	uint8_t crc_low = 0, crc_high = 0, crc_carry;
	uint8_t poly_low = 0x05, poly_high = 0x80;
	uint8_t shift_register;
	uint8_t data_bit, crc_bit;

	for (counter = 0; counter < length; counter++) {
     2c6:	2800      	cmp	r0, #0
     2c8:	d036      	beq.n	338 <aes132c_calculate_crc+0x80>
     2ca:	3801      	subs	r0, #1
     2cc:	b2c0      	uxtb	r0, r0
     2ce:	3001      	adds	r0, #1
     2d0:	468a      	mov	sl, r1
     2d2:	4482      	add	sl, r0
     2d4:	2300      	movs	r3, #0
     2d6:	2000      	movs	r0, #0
			crc_low <<= 1;
			crc_high <<= 1;
			crc_high |= crc_carry;

			if ((data_bit ^ crc_bit) != 0) {
				crc_low ^= poly_low;
     2d8:	2205      	movs	r2, #5
     2da:	4690      	mov	r8, r2
				crc_high ^= poly_high;
     2dc:	2280      	movs	r2, #128	; 0x80
     2de:	4252      	negs	r2, r2
     2e0:	4694      	mov	ip, r2
     2e2:	4652      	mov	r2, sl
     2e4:	468a      	mov	sl, r1
     2e6:	465e      	mov	r6, fp
     2e8:	4691      	mov	r9, r2
     2ea:	e01f      	b.n	32c <aes132c_calculate_crc+0x74>
		for (shift_register = 0x80; shift_register > 0x00; shift_register >>= 1) {
     2ec:	0849      	lsrs	r1, r1, #1
     2ee:	3c01      	subs	r4, #1
     2f0:	2c00      	cmp	r4, #0
     2f2:	d015      	beq.n	320 <aes132c_calculate_crc+0x68>
			crc_bit = crc_high >> 7;
     2f4:	09da      	lsrs	r2, r3, #7
			crc_carry = crc_low >> 7;
     2f6:	09c6      	lsrs	r6, r0, #7
			crc_low <<= 1;
     2f8:	0040      	lsls	r0, r0, #1
     2fa:	b2c0      	uxtb	r0, r0
			crc_high <<= 1;
     2fc:	005b      	lsls	r3, r3, #1
     2fe:	b2db      	uxtb	r3, r3
			crc_high |= crc_carry;
     300:	4333      	orrs	r3, r6
     302:	b2db      	uxtb	r3, r3
			data_bit = (data[counter] & shift_register) ? 1 : 0;
     304:	000e      	movs	r6, r1
     306:	402e      	ands	r6, r5
     308:	1e77      	subs	r7, r6, #1
     30a:	41be      	sbcs	r6, r7
			if ((data_bit ^ crc_bit) != 0) {
     30c:	b2d2      	uxtb	r2, r2
     30e:	42b2      	cmp	r2, r6
     310:	d0ec      	beq.n	2ec <aes132c_calculate_crc+0x34>
				crc_low ^= poly_low;
     312:	4642      	mov	r2, r8
     314:	4050      	eors	r0, r2
     316:	b2c0      	uxtb	r0, r0
				crc_high ^= poly_high;
     318:	4662      	mov	r2, ip
     31a:	4053      	eors	r3, r2
     31c:	b2db      	uxtb	r3, r3
     31e:	e7e5      	b.n	2ec <aes132c_calculate_crc+0x34>
     320:	465e      	mov	r6, fp
     322:	2201      	movs	r2, #1
     324:	4693      	mov	fp, r2
     326:	44da      	add	sl, fp
	for (counter = 0; counter < length; counter++) {
     328:	45ca      	cmp	sl, r9
     32a:	d007      	beq.n	33c <aes132c_calculate_crc+0x84>
			data_bit = (data[counter] & shift_register) ? 1 : 0;
     32c:	4652      	mov	r2, sl
     32e:	7815      	ldrb	r5, [r2, #0]
     330:	2408      	movs	r4, #8
     332:	2180      	movs	r1, #128	; 0x80
     334:	46b3      	mov	fp, r6
     336:	e7dd      	b.n	2f4 <aes132c_calculate_crc+0x3c>
	uint8_t crc_low = 0, crc_high = 0, crc_carry;
     338:	0003      	movs	r3, r0
     33a:	e000      	b.n	33e <aes132c_calculate_crc+0x86>
     33c:	46b3      	mov	fp, r6
			}
		}
	}
	crc[0] = crc_high;
     33e:	465a      	mov	r2, fp
     340:	7013      	strb	r3, [r2, #0]
	crc[1] = crc_low;
     342:	7050      	strb	r0, [r2, #1]
}
     344:	bc3c      	pop	{r2, r3, r4, r5}
     346:	4690      	mov	r8, r2
     348:	4699      	mov	r9, r3
     34a:	46a2      	mov	sl, r4
     34c:	46ab      	mov	fp, r5
     34e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000350 <aes132c_reset_io_address>:

/** \brief This function resets the command and response buffer address.
 * \return status of the operation
 */
uint8_t aes132c_reset_io_address(void)
{
     350:	b510      	push	{r4, lr}
	return aes132p_write_memory_physical(0, AES132_RESET_ADDR, (void *) 0);
     352:	2200      	movs	r2, #0
     354:	4902      	ldr	r1, [pc, #8]	; (360 <aes132c_reset_io_address+0x10>)
     356:	2000      	movs	r0, #0
     358:	4b02      	ldr	r3, [pc, #8]	; (364 <aes132c_reset_io_address+0x14>)
     35a:	4798      	blx	r3
}
     35c:	bd10      	pop	{r4, pc}
     35e:	46c0      	nop			; (mov r8, r8)
     360:	0000ffe0 	.word	0x0000ffe0
     364:	00000c91 	.word	0x00000c91

00000368 <aes132c_resync>:

/** \brief This function resynchronizes communication with the device.
 * \return status of the operation
 */
uint8_t aes132c_resync()
{
     368:	b510      	push	{r4, lr}
	uint8_t aes132_lib_return = aes132p_resync_physical();
     36a:	4b04      	ldr	r3, [pc, #16]	; (37c <aes132c_resync+0x14>)
     36c:	4798      	blx	r3
	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS)
     36e:	2800      	cmp	r0, #0
     370:	d000      	beq.n	374 <aes132c_resync+0xc>
		return aes132_lib_return;

	return aes132c_reset_io_address();
}
     372:	bd10      	pop	{r4, pc}
	return aes132c_reset_io_address();
     374:	4b02      	ldr	r3, [pc, #8]	; (380 <aes132c_resync+0x18>)
     376:	4798      	blx	r3
     378:	e7fb      	b.n	372 <aes132c_resync+0xa>
     37a:	46c0      	nop			; (mov r8, r8)
     37c:	00000d45 	.word	0x00000d45
     380:	00000351 	.word	0x00000351

00000384 <aes132c_read_device_status_register>:
/** \brief This function reads the device status register.
 * \param[out] device_status_register pointer to byte where the register value is stored
 * \return status of the operation
 */
uint8_t aes132c_read_device_status_register(uint8_t *device_status_register)
{
     384:	b510      	push	{r4, lr}
     386:	0004      	movs	r4, r0
	uint8_t aes132_lib_return;
	uint8_t n_retries = AES132_RETRY_COUNT_ERROR;

	do {
		aes132_lib_return = aes132p_read_memory_physical(1, AES132_STATUS_ADDR, device_status_register);
     388:	0002      	movs	r2, r0
     38a:	4908      	ldr	r1, [pc, #32]	; (3ac <aes132c_read_device_status_register+0x28>)
     38c:	2001      	movs	r0, #1
     38e:	4b08      	ldr	r3, [pc, #32]	; (3b0 <aes132c_read_device_status_register+0x2c>)
     390:	4798      	blx	r3
	} while ((aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) && (--n_retries > 0));
     392:	2800      	cmp	r0, #0
     394:	d007      	beq.n	3a6 <aes132c_read_device_status_register+0x22>
		aes132_lib_return = aes132p_read_memory_physical(1, AES132_STATUS_ADDR, device_status_register);
     396:	0022      	movs	r2, r4
     398:	4904      	ldr	r1, [pc, #16]	; (3ac <aes132c_read_device_status_register+0x28>)
     39a:	2001      	movs	r0, #1
     39c:	4b04      	ldr	r3, [pc, #16]	; (3b0 <aes132c_read_device_status_register+0x2c>)
     39e:	4798      	blx	r3
	} while ((aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) && (--n_retries > 0));
     3a0:	2800      	cmp	r0, #0
     3a2:	d000      	beq.n	3a6 <aes132c_read_device_status_register+0x22>

	return aes132_lib_return;
}
     3a4:	bd10      	pop	{r4, pc}
		aes132_lib_return = aes132p_read_memory_physical(1, AES132_STATUS_ADDR, device_status_register);
     3a6:	2000      	movs	r0, #0
     3a8:	e7fc      	b.n	3a4 <aes132c_read_device_status_register+0x20>
     3aa:	46c0      	nop			; (mov r8, r8)
     3ac:	0000fff0 	.word	0x0000fff0
     3b0:	00000cf9 	.word	0x00000cf9

000003b4 <aes132c_wait_for_status_register_bit>:
 * \param[in] is_set specifies whether to wait until bit is set (#AES132_BIT_SET) or reset (#AES132_BIT_SET)
 * \param[in] n_retries 16-bit number that indicates the number of retries before stopping to poll.
 * \return status of the operation
 */
uint8_t aes132c_wait_for_status_register_bit(uint8_t mask, uint8_t is_set, uint16_t n_retries)
{
     3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     3b6:	46c6      	mov	lr, r8
     3b8:	b500      	push	{lr}
     3ba:	b082      	sub	sp, #8
     3bc:	4680      	mov	r8, r0
     3be:	000d      	movs	r5, r1
     3c0:	0016      	movs	r6, r2
	uint8_t aes132_lib_return;
	uint8_t device_status_register;

	do {
		aes132_lib_return = aes132p_read_memory_physical(1, AES132_STATUS_ADDR, &device_status_register);
     3c2:	466b      	mov	r3, sp
     3c4:	1ddc      	adds	r4, r3, #7
     3c6:	4f0f      	ldr	r7, [pc, #60]	; (404 <aes132c_wait_for_status_register_bit+0x50>)
     3c8:	e009      	b.n	3de <aes132c_wait_for_status_register_bit+0x2a>
			// The device is busy. Continue polling until "n_retries" is depleted.
			continue;

		if (is_set == AES132_BIT_SET) {
			// Wait for the mask bit(s) being set.
			if ((device_status_register & mask) == mask)
     3ca:	7823      	ldrb	r3, [r4, #0]
     3cc:	4642      	mov	r2, r8
     3ce:	4013      	ands	r3, r2
     3d0:	4598      	cmp	r8, r3
     3d2:	d012      	beq.n	3fa <aes132c_wait_for_status_register_bit+0x46>
				return aes132_lib_return;
		}

		// Device is busy, or "mask" pattern does not yet match the device status register value.
		// Continue polling.
	} while (n_retries-- > 0);
     3d4:	1e73      	subs	r3, r6, #1
     3d6:	b29b      	uxth	r3, r3
     3d8:	2e00      	cmp	r6, #0
     3da:	d00d      	beq.n	3f8 <aes132c_wait_for_status_register_bit+0x44>
     3dc:	001e      	movs	r6, r3
		aes132_lib_return = aes132p_read_memory_physical(1, AES132_STATUS_ADDR, &device_status_register);
     3de:	0022      	movs	r2, r4
     3e0:	4909      	ldr	r1, [pc, #36]	; (408 <aes132c_wait_for_status_register_bit+0x54>)
     3e2:	2001      	movs	r0, #1
     3e4:	47b8      	blx	r7
		if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS)
     3e6:	2800      	cmp	r0, #0
     3e8:	d1f4      	bne.n	3d4 <aes132c_wait_for_status_register_bit+0x20>
		if (is_set == AES132_BIT_SET) {
     3ea:	2d01      	cmp	r5, #1
     3ec:	d0ed      	beq.n	3ca <aes132c_wait_for_status_register_bit+0x16>
			if ((device_status_register & mask) == 0)
     3ee:	7823      	ldrb	r3, [r4, #0]
     3f0:	4642      	mov	r2, r8
     3f2:	4213      	tst	r3, r2
     3f4:	d1ee      	bne.n	3d4 <aes132c_wait_for_status_register_bit+0x20>
     3f6:	e000      	b.n	3fa <aes132c_wait_for_status_register_bit+0x46>

	// The mask pattern was not found in the device status register after "n_retries" polling
	// iterations. Return timeout error.
	return AES132_FUNCTION_RETCODE_TIMEOUT;
     3f8:	20e7      	movs	r0, #231	; 0xe7
}
     3fa:	b002      	add	sp, #8
     3fc:	bc04      	pop	{r2}
     3fe:	4690      	mov	r8, r2
     400:	bdf0      	pop	{r4, r5, r6, r7, pc}
     402:	46c0      	nop			; (mov r8, r8)
     404:	00000cf9 	.word	0x00000cf9
     408:	0000fff0 	.word	0x0000fff0

0000040c <aes132c_wait_for_device_ready>:

/** \brief This function waits for the Write-In-Progress (WIP) bit in the device status register to be cleared.
 * \return status of the operation
 */
uint8_t aes132c_wait_for_device_ready(void)
{
     40c:	b510      	push	{r4, lr}
	return aes132c_wait_for_status_register_bit(AES132_WIP_BIT, AES132_BIT_CLEARED, AES132_RETRY_COUNT_DEVICE_READY);
     40e:	4a03      	ldr	r2, [pc, #12]	; (41c <aes132c_wait_for_device_ready+0x10>)
     410:	2100      	movs	r1, #0
     412:	2001      	movs	r0, #1
     414:	4b02      	ldr	r3, [pc, #8]	; (420 <aes132c_wait_for_device_ready+0x14>)
     416:	4798      	blx	r3
}
     418:	bd10      	pop	{r4, pc}
     41a:	46c0      	nop			; (mov r8, r8)
     41c:	000010cc 	.word	0x000010cc
     420:	000003b5 	.word	0x000003b5

00000424 <aes132c_wait_for_response_ready>:

/** \brief This function waits for the Response-Ready (RRDY) bit in the device status register to be set.
 * \ return status of the operation
 */
uint8_t aes132c_wait_for_response_ready(void)
{
     424:	b510      	push	{r4, lr}
	return aes132c_wait_for_status_register_bit(AES132_RESPONSE_READY_BIT, AES132_BIT_SET, AES132_RETRY_COUNT_RESPONSE_READY);
     426:	4a03      	ldr	r2, [pc, #12]	; (434 <aes132c_wait_for_response_ready+0x10>)
     428:	2101      	movs	r1, #1
     42a:	2040      	movs	r0, #64	; 0x40
     42c:	4b02      	ldr	r3, [pc, #8]	; (438 <aes132c_wait_for_response_ready+0x14>)
     42e:	4798      	blx	r3
}
     430:	bd10      	pop	{r4, pc}
     432:	46c0      	nop			; (mov r8, r8)
     434:	000030b6 	.word	0x000030b6
     438:	000003b5 	.word	0x000003b5

0000043c <aes132c_receive_response>:
 * \param[in] size number of bytes to retrieve (<= response buffer size allocated by caller)
 * \param[out] response pointer to retrieved response
 * \return status of the operation
 */
uint8_t aes132c_receive_response(uint8_t size, uint8_t *response)
{
     43c:	b5f0      	push	{r4, r5, r6, r7, lr}
     43e:	46ce      	mov	lr, r9
     440:	b500      	push	{lr}
     442:	b084      	sub	sp, #16
     444:	9001      	str	r0, [sp, #4]
     446:	000d      	movs	r5, r1
     448:	2702      	movs	r7, #2
	uint8_t crc[AES132_CRC_SIZE];
	uint8_t crc_index;
	uint8_t count_byte;

	do {
		aes132_lib_return = aes132c_wait_for_response_ready();
     44a:	4e29      	ldr	r6, [pc, #164]	; (4f0 <aes132c_receive_response+0xb4>)
     44c:	47b0      	blx	r6
     44e:	1e04      	subs	r4, r0, #0
		if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
     450:	d00a      	beq.n	468 <aes132c_receive_response+0x2c>
			// Waiting for the Response-Ready bit timed out. We might have lost communication.
			// Re-synchronize and retry.
			// Do not override the return value from the call to aes132c_wait_for_response_ready.
			(void) aes132c_resync();
     452:	4b28      	ldr	r3, [pc, #160]	; (4f4 <aes132c_receive_response+0xb8>)
     454:	4798      	blx	r3
     456:	3f01      	subs	r7, #1
     458:	b2ff      	uxtb	r7, r7

		// Do not override aes132_lib_return.
		(void) aes132c_resync();

		// Retry if communication failed, or CRC did not match.
	} while ((aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) && (--n_retries > 0));
     45a:	2f00      	cmp	r7, #0
     45c:	d1f6      	bne.n	44c <aes132c_receive_response+0x10>

	// Even after re-synchronizing and retrying, we could not receive a consistent response packet.
	return aes132_lib_return;
}
     45e:	0020      	movs	r0, r4
     460:	b004      	add	sp, #16
     462:	bc04      	pop	{r2}
     464:	4691      	mov	r9, r2
     466:	bdf0      	pop	{r4, r5, r6, r7, pc}
		aes132_lib_return = aes132p_read_memory_physical(1, AES132_IO_ADDR, &response[AES132_COMMAND_INDEX_COUNT]);
     468:	002a      	movs	r2, r5
     46a:	21fe      	movs	r1, #254	; 0xfe
     46c:	0209      	lsls	r1, r1, #8
     46e:	2001      	movs	r0, #1
     470:	4b21      	ldr	r3, [pc, #132]	; (4f8 <aes132c_receive_response+0xbc>)
     472:	4798      	blx	r3
     474:	1e04      	subs	r4, r0, #0
		if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
     476:	d10c      	bne.n	492 <aes132c_receive_response+0x56>
		count_byte = response[AES132_RESPONSE_INDEX_COUNT];
     478:	782b      	ldrb	r3, [r5, #0]
     47a:	4699      	mov	r9, r3
		if (count_byte > size) {
     47c:	9b01      	ldr	r3, [sp, #4]
     47e:	4599      	cmp	r9, r3
     480:	d80a      	bhi.n	498 <aes132c_receive_response+0x5c>
		if ((count_byte < AES132_RESPONSE_SIZE_MIN) || (count_byte > AES132_RESPONSE_SIZE_MAX)) {
     482:	464b      	mov	r3, r9
     484:	3b04      	subs	r3, #4
     486:	2b30      	cmp	r3, #48	; 0x30
     488:	d90a      	bls.n	4a0 <aes132c_receive_response+0x64>
			(void) aes132c_resync();
     48a:	4b1a      	ldr	r3, [pc, #104]	; (4f4 <aes132c_receive_response+0xb8>)
     48c:	4798      	blx	r3
			aes132_lib_return = AES132_FUNCTION_RETCODE_COUNT_INVALID;
     48e:	24e4      	movs	r4, #228	; 0xe4
			continue;
     490:	e7e1      	b.n	456 <aes132c_receive_response+0x1a>
			(void) aes132c_resync();
     492:	4b18      	ldr	r3, [pc, #96]	; (4f4 <aes132c_receive_response+0xb8>)
     494:	4798      	blx	r3
			continue;
     496:	e7de      	b.n	456 <aes132c_receive_response+0x1a>
			(void) aes132c_resync();
     498:	4b16      	ldr	r3, [pc, #88]	; (4f4 <aes132c_receive_response+0xb8>)
     49a:	4798      	blx	r3
			aes132_lib_return = AES132_FUNCTION_RETCODE_SIZE_TOO_SMALL;
     49c:	24a2      	movs	r4, #162	; 0xa2
			continue;
     49e:	e7da      	b.n	456 <aes132c_receive_response+0x1a>
		aes132_lib_return = aes132p_read_memory_physical(count_byte - 1, AES132_IO_ADDR, &response[AES132_RESPONSE_INDEX_RETURN_CODE]);
     4a0:	1c6a      	adds	r2, r5, #1
     4a2:	464b      	mov	r3, r9
     4a4:	1e58      	subs	r0, r3, #1
     4a6:	b2c0      	uxtb	r0, r0
     4a8:	21fe      	movs	r1, #254	; 0xfe
     4aa:	0209      	lsls	r1, r1, #8
     4ac:	4b12      	ldr	r3, [pc, #72]	; (4f8 <aes132c_receive_response+0xbc>)
     4ae:	4798      	blx	r3
     4b0:	1e04      	subs	r4, r0, #0
		if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
     4b2:	d002      	beq.n	4ba <aes132c_receive_response+0x7e>
			(void) aes132c_resync();
     4b4:	4b0f      	ldr	r3, [pc, #60]	; (4f4 <aes132c_receive_response+0xb8>)
     4b6:	4798      	blx	r3
			continue;
     4b8:	e7cd      	b.n	456 <aes132c_receive_response+0x1a>
		crc_index = count_byte - AES132_CRC_SIZE;
     4ba:	464c      	mov	r4, r9
     4bc:	3c02      	subs	r4, #2
     4be:	b2e4      	uxtb	r4, r4
		aes132c_calculate_crc(crc_index, response, crc);
     4c0:	ab03      	add	r3, sp, #12
     4c2:	4699      	mov	r9, r3
     4c4:	001a      	movs	r2, r3
     4c6:	0029      	movs	r1, r5
     4c8:	0020      	movs	r0, r4
     4ca:	4b0c      	ldr	r3, [pc, #48]	; (4fc <aes132c_receive_response+0xc0>)
     4cc:	4798      	blx	r3
		if ((crc[0] == response[crc_index]) && (crc[1] == response[crc_index + 1]))
     4ce:	464b      	mov	r3, r9
     4d0:	781a      	ldrb	r2, [r3, #0]
     4d2:	5d2b      	ldrb	r3, [r5, r4]
     4d4:	429a      	cmp	r2, r3
     4d6:	d003      	beq.n	4e0 <aes132c_receive_response+0xa4>
		(void) aes132c_resync();
     4d8:	4b06      	ldr	r3, [pc, #24]	; (4f4 <aes132c_receive_response+0xb8>)
     4da:	4798      	blx	r3
		aes132_lib_return = AES132_FUNCTION_RETCODE_BAD_CRC_RX;
     4dc:	24e5      	movs	r4, #229	; 0xe5
     4de:	e7ba      	b.n	456 <aes132c_receive_response+0x1a>
		if ((crc[0] == response[crc_index]) && (crc[1] == response[crc_index + 1]))
     4e0:	192c      	adds	r4, r5, r4
     4e2:	ab03      	add	r3, sp, #12
     4e4:	785a      	ldrb	r2, [r3, #1]
     4e6:	7863      	ldrb	r3, [r4, #1]
     4e8:	429a      	cmp	r2, r3
     4ea:	d1f5      	bne.n	4d8 <aes132c_receive_response+0x9c>
			return response[AES132_RESPONSE_INDEX_RETURN_CODE];
     4ec:	786c      	ldrb	r4, [r5, #1]
     4ee:	e7b6      	b.n	45e <aes132c_receive_response+0x22>
     4f0:	00000425 	.word	0x00000425
     4f4:	00000369 	.word	0x00000369
     4f8:	00000cf9 	.word	0x00000cf9
     4fc:	000002b9 	.word	0x000002b9

00000500 <aes132c_access_memory>:
{
     500:	b5f0      	push	{r4, r5, r6, r7, lr}
     502:	46c6      	mov	lr, r8
     504:	b500      	push	{lr}
     506:	b086      	sub	sp, #24
     508:	9002      	str	r0, [sp, #8]
     50a:	9101      	str	r1, [sp, #4]
     50c:	9203      	str	r2, [sp, #12]
     50e:	4698      	mov	r8, r3
     510:	2701      	movs	r7, #1
			aes132_lib_return = aes132c_wait_for_device_ready();
     512:	4e1e      	ldr	r6, [pc, #120]	; (58c <aes132c_access_memory+0x8c>)
{
     514:	2502      	movs	r5, #2
			aes132_lib_return = aes132c_wait_for_device_ready();
     516:	47b0      	blx	r6
     518:	1e04      	subs	r4, r0, #0
			if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS)
     51a:	d131      	bne.n	580 <aes132c_access_memory+0x80>
			if (read == 0) {
     51c:	4643      	mov	r3, r8
     51e:	2b00      	cmp	r3, #0
     520:	d11a      	bne.n	558 <aes132c_access_memory+0x58>
				aes132_lib_return = aes132p_write_memory_physical(count, word_address, data);
     522:	9a03      	ldr	r2, [sp, #12]
     524:	9901      	ldr	r1, [sp, #4]
     526:	9802      	ldr	r0, [sp, #8]
     528:	4b19      	ldr	r3, [pc, #100]	; (590 <aes132c_access_memory+0x90>)
     52a:	4798      	blx	r3
     52c:	1e04      	subs	r4, r0, #0
				if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS)
     52e:	d11a      	bne.n	566 <aes132c_access_memory+0x66>
				if	(word_address >= AES132_IO_ADDR)
     530:	4b18      	ldr	r3, [pc, #96]	; (594 <aes132c_access_memory+0x94>)
     532:	9a01      	ldr	r2, [sp, #4]
     534:	429a      	cmp	r2, r3
     536:	d904      	bls.n	542 <aes132c_access_memory+0x42>
}
     538:	0020      	movs	r0, r4
     53a:	b006      	add	sp, #24
     53c:	bc04      	pop	{r2}
     53e:	4690      	mov	r8, r2
     540:	bdf0      	pop	{r4, r5, r6, r7, pc}
				aes132c_wait_for_response_ready();
     542:	4b15      	ldr	r3, [pc, #84]	; (598 <aes132c_access_memory+0x98>)
     544:	4798      	blx	r3
				aes132_lib_return = aes132c_receive_response(sizeof(response_buffer), response_buffer);
     546:	a905      	add	r1, sp, #20
     548:	2004      	movs	r0, #4
     54a:	4b14      	ldr	r3, [pc, #80]	; (59c <aes132c_access_memory+0x9c>)
     54c:	4798      	blx	r3
     54e:	1e04      	subs	r4, r0, #0
				if (aes132_lib_return == AES132_FUNCTION_RETCODE_SUCCESS)
     550:	d1f2      	bne.n	538 <aes132c_access_memory+0x38>
					return response_buffer[AES132_RESPONSE_INDEX_RETURN_CODE];
     552:	ab05      	add	r3, sp, #20
     554:	785c      	ldrb	r4, [r3, #1]
     556:	e7ef      	b.n	538 <aes132c_access_memory+0x38>
				aes132_lib_return = aes132p_read_memory_physical(count, word_address, data);
     558:	9a03      	ldr	r2, [sp, #12]
     55a:	9901      	ldr	r1, [sp, #4]
     55c:	9802      	ldr	r0, [sp, #8]
     55e:	4b10      	ldr	r3, [pc, #64]	; (5a0 <aes132c_access_memory+0xa0>)
     560:	4798      	blx	r3
     562:	1e04      	subs	r4, r0, #0
				if (aes132_lib_return == AES132_FUNCTION_RETCODE_SUCCESS)
     564:	d0e8      	beq.n	538 <aes132c_access_memory+0x38>
     566:	3d01      	subs	r5, #1
     568:	b2ed      	uxtb	r5, r5
		} while (--n_retries_memory_access > 0);
     56a:	2d00      	cmp	r5, #0
     56c:	d1d3      	bne.n	516 <aes132c_access_memory+0x16>
		if (--n_retries_resync == 0)
     56e:	2f00      	cmp	r7, #0
     570:	d0e2      	beq.n	538 <aes132c_access_memory+0x38>
		(void) aes132c_resync();
     572:	4b0c      	ldr	r3, [pc, #48]	; (5a4 <aes132c_access_memory+0xa4>)
     574:	4798      	blx	r3
	} while (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS);
     576:	2c00      	cmp	r4, #0
     578:	d0de      	beq.n	538 <aes132c_access_memory+0x38>
     57a:	3f01      	subs	r7, #1
     57c:	b2ff      	uxtb	r7, r7
     57e:	e7c9      	b.n	514 <aes132c_access_memory+0x14>
		if (--n_retries_resync == 0)
     580:	2f00      	cmp	r7, #0
     582:	d0d9      	beq.n	538 <aes132c_access_memory+0x38>
		(void) aes132c_resync();
     584:	4b07      	ldr	r3, [pc, #28]	; (5a4 <aes132c_access_memory+0xa4>)
     586:	4798      	blx	r3
     588:	e7f7      	b.n	57a <aes132c_access_memory+0x7a>
     58a:	46c0      	nop			; (mov r8, r8)
     58c:	0000040d 	.word	0x0000040d
     590:	00000c91 	.word	0x00000c91
     594:	0000fdff 	.word	0x0000fdff
     598:	00000425 	.word	0x00000425
     59c:	0000043d 	.word	0x0000043d
     5a0:	00000cf9 	.word	0x00000cf9
     5a4:	00000369 	.word	0x00000369

000005a8 <aes132c_send_command>:
{
     5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5aa:	46ce      	mov	lr, r9
     5ac:	b500      	push	{lr}
     5ae:	b082      	sub	sp, #8
     5b0:	0005      	movs	r5, r0
     5b2:	000c      	movs	r4, r1
	uint8_t count = command[AES132_COMMAND_INDEX_COUNT];
     5b4:	7807      	ldrb	r7, [r0, #0]
	if ((options & AES132_OPTION_NO_APPEND_CRC) == 0)
     5b6:	07cb      	lsls	r3, r1, #31
     5b8:	d51c      	bpl.n	5f4 <aes132c_send_command+0x4c>
{
     5ba:	2602      	movs	r6, #2
		if ((options & AES132_OPTION_NO_STATUS_READ) != 0)
     5bc:	2302      	movs	r3, #2
     5be:	4023      	ands	r3, r4
     5c0:	4699      	mov	r9, r3
		aes132_lib_return = aes132c_access_memory(count, AES132_IO_ADDR, command,  AES132_WRITE);
     5c2:	2300      	movs	r3, #0
     5c4:	002a      	movs	r2, r5
     5c6:	21fe      	movs	r1, #254	; 0xfe
     5c8:	0209      	lsls	r1, r1, #8
     5ca:	0038      	movs	r0, r7
     5cc:	4c15      	ldr	r4, [pc, #84]	; (624 <aes132c_send_command+0x7c>)
     5ce:	47a0      	blx	r4
     5d0:	1e04      	subs	r4, r0, #0
		if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS)
     5d2:	d11e      	bne.n	612 <aes132c_send_command+0x6a>
		if ((options & AES132_OPTION_NO_STATUS_READ) != 0)
     5d4:	464b      	mov	r3, r9
     5d6:	2b00      	cmp	r3, #0
     5d8:	d11f      	bne.n	61a <aes132c_send_command+0x72>
		aes132_lib_return = aes132c_read_device_status_register(&device_status_register);
     5da:	466b      	mov	r3, sp
     5dc:	1dd8      	adds	r0, r3, #7
     5de:	4b12      	ldr	r3, [pc, #72]	; (628 <aes132c_send_command+0x80>)
     5e0:	4798      	blx	r3
		if (aes132_lib_return == AES132_FUNCTION_RETCODE_SUCCESS) {
     5e2:	2800      	cmp	r0, #0
     5e4:	d10d      	bne.n	602 <aes132c_send_command+0x5a>
			if ((device_status_register & AES132_CRC_ERROR_BIT) != 0)
     5e6:	466b      	mov	r3, sp
     5e8:	3307      	adds	r3, #7
     5ea:	781b      	ldrb	r3, [r3, #0]
     5ec:	06db      	lsls	r3, r3, #27
     5ee:	d40f      	bmi.n	610 <aes132c_send_command+0x68>
	return aes132_lib_return;
     5f0:	0004      	movs	r4, r0
     5f2:	e012      	b.n	61a <aes132c_send_command+0x72>
		aes132c_calculate_crc(count - AES132_CRC_SIZE, command, &command[count - AES132_CRC_SIZE]);
     5f4:	1eb8      	subs	r0, r7, #2
     5f6:	182a      	adds	r2, r5, r0
     5f8:	b2c0      	uxtb	r0, r0
     5fa:	0029      	movs	r1, r5
     5fc:	4b0b      	ldr	r3, [pc, #44]	; (62c <aes132c_send_command+0x84>)
     5fe:	4798      	blx	r3
     600:	e7db      	b.n	5ba <aes132c_send_command+0x12>
		else if (aes132_lib_return == AES132_FUNCTION_RETCODE_COMM_FAIL){
     602:	0005      	movs	r5, r0
     604:	28f0      	cmp	r0, #240	; 0xf0
     606:	d008      	beq.n	61a <aes132c_send_command+0x72>
			(void) aes132c_resync();
     608:	4b09      	ldr	r3, [pc, #36]	; (630 <aes132c_send_command+0x88>)
     60a:	4798      	blx	r3
		aes132_lib_return = aes132c_read_device_status_register(&device_status_register);
     60c:	002c      	movs	r4, r5
			return aes132_lib_return;
     60e:	e004      	b.n	61a <aes132c_send_command+0x72>
				aes132_lib_return = AES132_FUNCTION_RETCODE_BAD_CRC_TX;
     610:	24d4      	movs	r4, #212	; 0xd4
     612:	3e01      	subs	r6, #1
     614:	b2f6      	uxtb	r6, r6
	} while ((aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) && (--n_retries > 0));
     616:	2e00      	cmp	r6, #0
     618:	d1d3      	bne.n	5c2 <aes132c_send_command+0x1a>
}
     61a:	0020      	movs	r0, r4
     61c:	b002      	add	sp, #8
     61e:	bc04      	pop	{r2}
     620:	4691      	mov	r9, r2
     622:	bdf0      	pop	{r4, r5, r6, r7, pc}
     624:	00000501 	.word	0x00000501
     628:	00000385 	.word	0x00000385
     62c:	000002b9 	.word	0x000002b9
     630:	00000369 	.word	0x00000369

00000634 <aes132c_send_and_receive>:
 * \param[out] response pointer to response buffer
 * \param[in] options flags for communication behavior
 * \return status of the operation
 */
uint8_t aes132c_send_and_receive(uint8_t *command, uint8_t size, uint8_t *response, uint8_t options)
{
     634:	b570      	push	{r4, r5, r6, lr}
     636:	000c      	movs	r4, r1
     638:	0015      	movs	r5, r2
	uint8_t aes132_lib_return = aes132c_send_command(command, options);
     63a:	0019      	movs	r1, r3
     63c:	4b04      	ldr	r3, [pc, #16]	; (650 <aes132c_send_and_receive+0x1c>)
     63e:	4798      	blx	r3
	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS)
     640:	2800      	cmp	r0, #0
     642:	d000      	beq.n	646 <aes132c_send_and_receive+0x12>
		return aes132_lib_return;

	return aes132c_receive_response(size, response);
}
     644:	bd70      	pop	{r4, r5, r6, pc}
	return aes132c_receive_response(size, response);
     646:	0029      	movs	r1, r5
     648:	0020      	movs	r0, r4
     64a:	4b02      	ldr	r3, [pc, #8]	; (654 <aes132c_send_and_receive+0x20>)
     64c:	4798      	blx	r3
     64e:	e7f9      	b.n	644 <aes132c_send_and_receive+0x10>
     650:	000005a9 	.word	0x000005a9
     654:	0000043d 	.word	0x0000043d

00000658 <aes132m_write_memory>:
 * \param[in] word_address word address
 * \param[in] data pointer to tx data
 * \return status of the operation
 */
uint8_t aes132m_write_memory(uint8_t count, uint16_t word_address, uint8_t *data)
{
     658:	b510      	push	{r4, lr}
	return aes132c_access_memory(count, word_address, data,  AES132_WRITE);
     65a:	2300      	movs	r3, #0
     65c:	4c01      	ldr	r4, [pc, #4]	; (664 <aes132m_write_memory+0xc>)
     65e:	47a0      	blx	r4
}
     660:	bd10      	pop	{r4, pc}
     662:	46c0      	nop			; (mov r8, r8)
     664:	00000501 	.word	0x00000501

00000668 <aes132m_read_memory>:
 * \param[in] word_address pointer to word address
 * \param[out] data pointer to rx data
 * \return status of the operation
*/
uint8_t aes132m_read_memory(uint8_t size, uint16_t word_address, uint8_t *data)
{
     668:	b510      	push	{r4, lr}
	return aes132c_access_memory(size, word_address, data, AES132_READ);
     66a:	2301      	movs	r3, #1
     66c:	4c01      	ldr	r4, [pc, #4]	; (674 <aes132m_read_memory+0xc>)
     66e:	47a0      	blx	r4
}
     670:	bd10      	pop	{r4, pc}
     672:	46c0      	nop			; (mov r8, r8)
     674:	00000501 	.word	0x00000501

00000678 <aes132m_execute>:
 */
uint8_t aes132m_execute(uint8_t op_code, uint8_t mode, uint16_t param1, uint16_t param2,
			uint8_t datalen1, uint8_t *data1, uint8_t datalen2, uint8_t *data2,
			uint8_t datalen3, uint8_t *data3, uint8_t datalen4, uint8_t *data4,
			uint8_t *tx_buffer, uint8_t *rx_buffer)
{
     678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     67a:	46ce      	mov	lr, r9
     67c:	4647      	mov	r7, r8
     67e:	b580      	push	{r7, lr}
     680:	ac08      	add	r4, sp, #32
     682:	7824      	ldrb	r4, [r4, #0]
     684:	46a0      	mov	r8, r4
     686:	ac0a      	add	r4, sp, #40	; 0x28
     688:	7827      	ldrb	r7, [r4, #0]
     68a:	ac0c      	add	r4, sp, #48	; 0x30
     68c:	7826      	ldrb	r6, [r4, #0]
     68e:	ac0e      	add	r4, sp, #56	; 0x38
     690:	7824      	ldrb	r4, [r4, #0]
     692:	46a1      	mov	r9, r4
     694:	9c10      	ldr	r4, [sp, #64]	; 0x40
	uint8_t *p_buffer;
	uint8_t len;

	// Assemble command.
	len = datalen1 + datalen2 + datalen3 + datalen4 + AES132_COMMAND_SIZE_MIN;
     696:	464d      	mov	r5, r9
     698:	3509      	adds	r5, #9
     69a:	1975      	adds	r5, r6, r5
     69c:	197d      	adds	r5, r7, r5
     69e:	4445      	add	r5, r8
	p_buffer = tx_buffer;
	*p_buffer++ = len;
     6a0:	7025      	strb	r5, [r4, #0]
	*p_buffer++ = op_code;
     6a2:	7060      	strb	r0, [r4, #1]
	*p_buffer++ = mode;
     6a4:	70a1      	strb	r1, [r4, #2]
	*p_buffer++ = param1 >> 8;
     6a6:	0a11      	lsrs	r1, r2, #8
     6a8:	70e1      	strb	r1, [r4, #3]
	*p_buffer++ = param1 & 0xFF;
     6aa:	7122      	strb	r2, [r4, #4]
	*p_buffer++ = param2 >> 8;
     6ac:	0a1a      	lsrs	r2, r3, #8
     6ae:	7162      	strb	r2, [r4, #5]
	*p_buffer++ = param2 & 0xFF;
     6b0:	1de5      	adds	r5, r4, #7
     6b2:	71a3      	strb	r3, [r4, #6]

	if (datalen1 > 0) {
     6b4:	4643      	mov	r3, r8
     6b6:	2b00      	cmp	r3, #0
     6b8:	d110      	bne.n	6dc <aes132m_execute+0x64>
		memcpy(p_buffer, data1, datalen1);
		p_buffer += datalen1;
	}
	if (datalen2 > 0) {
     6ba:	2f00      	cmp	r7, #0
     6bc:	d115      	bne.n	6ea <aes132m_execute+0x72>
		memcpy(p_buffer, data2, datalen2);
		p_buffer += datalen2;
	}
	if (datalen3 > 0) {
     6be:	2e00      	cmp	r6, #0
     6c0:	d11a      	bne.n	6f8 <aes132m_execute+0x80>
		memcpy(p_buffer, data3, datalen3);
		p_buffer += datalen3;
	}
	if (datalen4 > 0) {
     6c2:	464b      	mov	r3, r9
     6c4:	2b00      	cmp	r3, #0
     6c6:	d11e      	bne.n	706 <aes132m_execute+0x8e>
		memcpy(p_buffer, data4, datalen4);
		p_buffer += datalen4;
	}

	// Send command and receive response.
	return aes132c_send_and_receive(&tx_buffer[0], AES132_RESPONSE_SIZE_MAX,
     6c8:	2300      	movs	r3, #0
     6ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
     6cc:	2134      	movs	r1, #52	; 0x34
     6ce:	0020      	movs	r0, r4
     6d0:	4c10      	ldr	r4, [pc, #64]	; (714 <aes132m_execute+0x9c>)
     6d2:	47a0      	blx	r4
				&rx_buffer[0], AES132_OPTION_DEFAULT);
     6d4:	bc0c      	pop	{r2, r3}
     6d6:	4690      	mov	r8, r2
     6d8:	4699      	mov	r9, r3
     6da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(p_buffer, data1, datalen1);
     6dc:	4642      	mov	r2, r8
     6de:	9909      	ldr	r1, [sp, #36]	; 0x24
     6e0:	0028      	movs	r0, r5
     6e2:	4b0d      	ldr	r3, [pc, #52]	; (718 <aes132m_execute+0xa0>)
     6e4:	4798      	blx	r3
		p_buffer += datalen1;
     6e6:	4445      	add	r5, r8
     6e8:	e7e7      	b.n	6ba <aes132m_execute+0x42>
		memcpy(p_buffer, data2, datalen2);
     6ea:	003a      	movs	r2, r7
     6ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
     6ee:	0028      	movs	r0, r5
     6f0:	4b09      	ldr	r3, [pc, #36]	; (718 <aes132m_execute+0xa0>)
     6f2:	4798      	blx	r3
		p_buffer += datalen2;
     6f4:	19ed      	adds	r5, r5, r7
     6f6:	e7e2      	b.n	6be <aes132m_execute+0x46>
		memcpy(p_buffer, data3, datalen3);
     6f8:	0032      	movs	r2, r6
     6fa:	990d      	ldr	r1, [sp, #52]	; 0x34
     6fc:	0028      	movs	r0, r5
     6fe:	4b06      	ldr	r3, [pc, #24]	; (718 <aes132m_execute+0xa0>)
     700:	4798      	blx	r3
		p_buffer += datalen3;
     702:	19ad      	adds	r5, r5, r6
     704:	e7dd      	b.n	6c2 <aes132m_execute+0x4a>
		memcpy(p_buffer, data4, datalen4);
     706:	464a      	mov	r2, r9
     708:	990f      	ldr	r1, [sp, #60]	; 0x3c
     70a:	0028      	movs	r0, r5
     70c:	4b02      	ldr	r3, [pc, #8]	; (718 <aes132m_execute+0xa0>)
     70e:	4798      	blx	r3
     710:	e7da      	b.n	6c8 <aes132m_execute+0x50>
     712:	46c0      	nop			; (mov r8, r8)
     714:	00000635 	.word	0x00000635
     718:	000025eb 	.word	0x000025eb

0000071c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     71c:	b570      	push	{r4, r5, r6, lr}
     71e:	b082      	sub	sp, #8
     720:	0005      	movs	r5, r0
     722:	000e      	movs	r6, r1
	uint16_t temp = 0;
     724:	2200      	movs	r2, #0
     726:	466b      	mov	r3, sp
     728:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     72a:	4c06      	ldr	r4, [pc, #24]	; (744 <usart_serial_getchar+0x28>)
     72c:	466b      	mov	r3, sp
     72e:	1d99      	adds	r1, r3, #6
     730:	0028      	movs	r0, r5
     732:	47a0      	blx	r4
     734:	2800      	cmp	r0, #0
     736:	d1f9      	bne.n	72c <usart_serial_getchar+0x10>

	*c = temp;
     738:	466b      	mov	r3, sp
     73a:	3306      	adds	r3, #6
     73c:	881b      	ldrh	r3, [r3, #0]
     73e:	7033      	strb	r3, [r6, #0]
}
     740:	b002      	add	sp, #8
     742:	bd70      	pop	{r4, r5, r6, pc}
     744:	00001d77 	.word	0x00001d77

00000748 <usart_serial_putchar>:
{
     748:	b570      	push	{r4, r5, r6, lr}
     74a:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     74c:	b28c      	uxth	r4, r1
     74e:	4e03      	ldr	r6, [pc, #12]	; (75c <usart_serial_putchar+0x14>)
     750:	0021      	movs	r1, r4
     752:	0028      	movs	r0, r5
     754:	47b0      	blx	r6
     756:	2800      	cmp	r0, #0
     758:	d1fa      	bne.n	750 <usart_serial_putchar+0x8>
}
     75a:	bd70      	pop	{r4, r5, r6, pc}
     75c:	00001d4d 	.word	0x00001d4d

00000760 <hex_to_nibble>:
 * \param data is the ASCII hex value to be converted
 *
 * \return data is the nibble value
**/
uint8_t hex_to_nibble(uint8_t data)
{
     760:	0002      	movs	r2, r0
	if ((data >= '0') && (data <= '9' )) {
     762:	3830      	subs	r0, #48	; 0x30
     764:	b2c0      	uxtb	r0, r0
     766:	2809      	cmp	r0, #9
     768:	d90d      	bls.n	786 <hex_to_nibble+0x26>
		// Numbers (0-9)
		data -= '0';
	} else if ((data >= 'A') && (data <= 'F' )) {
     76a:	0013      	movs	r3, r2
     76c:	3b41      	subs	r3, #65	; 0x41
     76e:	2b05      	cmp	r3, #5
     770:	d907      	bls.n	782 <hex_to_nibble+0x22>
	} else if ((data >= 'a') && (data <= 'f' )) {
		// Lowercase (a-f)
		data = data -'a' + 10;
	} else {
		// Illegal
		data = 0;
     772:	2000      	movs	r0, #0
	} else if ((data >= 'a') && (data <= 'f' )) {
     774:	0013      	movs	r3, r2
     776:	3b61      	subs	r3, #97	; 0x61
     778:	2b05      	cmp	r3, #5
     77a:	d804      	bhi.n	786 <hex_to_nibble+0x26>
		data = data -'a' + 10;
     77c:	3a57      	subs	r2, #87	; 0x57
     77e:	b2d0      	uxtb	r0, r2
     780:	e001      	b.n	786 <hex_to_nibble+0x26>
		data = data -'A' + 10;
     782:	3a37      	subs	r2, #55	; 0x37
     784:	b2d0      	uxtb	r0, r2
	}
	
	return data;
}
     786:	4770      	bx	lr

00000788 <printf_puthex_array>:
 * \param buffer is array which will be printed to UART
 *
 * \param ucLength is array size
**/
void printf_puthex_array(uint8_t* data_buffer, uint8_t length)
{
     788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t i_data;
	
	for (i_data = 0; i_data < length; i_data++) {
     78a:	2900      	cmp	r1, #0
     78c:	d00e      	beq.n	7ac <printf_puthex_array+0x24>
     78e:	0004      	movs	r4, r0
     790:	3901      	subs	r1, #1
     792:	b2cd      	uxtb	r5, r1
     794:	3501      	adds	r5, #1
     796:	1945      	adds	r5, r0, r5
		printf("%.2X",*data_buffer++);
     798:	4e05      	ldr	r6, [pc, #20]	; (7b0 <printf_puthex_array+0x28>)
		printf(" ");
     79a:	4f06      	ldr	r7, [pc, #24]	; (7b4 <printf_puthex_array+0x2c>)
		printf("%.2X",*data_buffer++);
     79c:	7821      	ldrb	r1, [r4, #0]
     79e:	4806      	ldr	r0, [pc, #24]	; (7b8 <printf_puthex_array+0x30>)
     7a0:	47b0      	blx	r6
		printf(" ");
     7a2:	2020      	movs	r0, #32
     7a4:	47b8      	blx	r7
     7a6:	3401      	adds	r4, #1
	for (i_data = 0; i_data < length; i_data++) {
     7a8:	42ac      	cmp	r4, r5
     7aa:	d1f7      	bne.n	79c <printf_puthex_array+0x14>
	}
}
     7ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     7ae:	46c0      	nop			; (mov r8, r8)
     7b0:	0000260d 	.word	0x0000260d
     7b4:	00002641 	.word	0x00002641
     7b8:	000044d8 	.word	0x000044d8

000007bc <parse_command>:
 *
 *  \param serial_data Data input
 *  \return 1 on complete parsing, 0 otherwise
 */
uint8_t parse_command(uint8_t serial_data)
{
     7bc:	b510      	push	{r4, lr}
	static unsigned char parser_state, nibble_value;
	
	switch (parser_state) {
     7be:	4b2b      	ldr	r3, [pc, #172]	; (86c <parse_command+0xb0>)
     7c0:	781b      	ldrb	r3, [r3, #0]
     7c2:	2b01      	cmp	r3, #1
     7c4:	d01a      	beq.n	7fc <parse_command+0x40>
     7c6:	2b00      	cmp	r3, #0
     7c8:	d008      	beq.n	7dc <parse_command+0x20>
     7ca:	2b02      	cmp	r3, #2
     7cc:	d01f      	beq.n	80e <parse_command+0x52>
     7ce:	2b03      	cmp	r3, #3
     7d0:	d035      	beq.n	83e <parse_command+0x82>
			} else {
				parser_state = 0;
			}
			break;
		default:
			parser_state = 0;
     7d2:	2200      	movs	r2, #0
     7d4:	4b25      	ldr	r3, [pc, #148]	; (86c <parse_command+0xb0>)
     7d6:	701a      	strb	r2, [r3, #0]
	} // switch (parser_state)
	
	return 0;
     7d8:	2000      	movs	r0, #0
     7da:	e017      	b.n	80c <parse_command+0x50>
			g_packet_block_index = 0;
     7dc:	2200      	movs	r2, #0
     7de:	4b24      	ldr	r3, [pc, #144]	; (870 <parse_command+0xb4>)
     7e0:	801a      	strh	r2, [r3, #0]
			if (serial_data == '(') {
     7e2:	2828      	cmp	r0, #40	; 0x28
     7e4:	d005      	beq.n	7f2 <parse_command+0x36>
				printf("Input :%c",serial_data);
     7e6:	0001      	movs	r1, r0
     7e8:	4822      	ldr	r0, [pc, #136]	; (874 <parse_command+0xb8>)
     7ea:	4b23      	ldr	r3, [pc, #140]	; (878 <parse_command+0xbc>)
     7ec:	4798      	blx	r3
	return 0;
     7ee:	2000      	movs	r0, #0
     7f0:	e00c      	b.n	80c <parse_command+0x50>
				parser_state = 1;
     7f2:	3201      	adds	r2, #1
     7f4:	4b1d      	ldr	r3, [pc, #116]	; (86c <parse_command+0xb0>)
     7f6:	701a      	strb	r2, [r3, #0]
	return 0;
     7f8:	2000      	movs	r0, #0
     7fa:	e007      	b.n	80c <parse_command+0x50>
			nibble_value = hex_to_nibble(serial_data);
     7fc:	4b1f      	ldr	r3, [pc, #124]	; (87c <parse_command+0xc0>)
     7fe:	4798      	blx	r3
     800:	4b1f      	ldr	r3, [pc, #124]	; (880 <parse_command+0xc4>)
     802:	7018      	strb	r0, [r3, #0]
			parser_state = 2;
     804:	2202      	movs	r2, #2
     806:	4b19      	ldr	r3, [pc, #100]	; (86c <parse_command+0xb0>)
     808:	701a      	strb	r2, [r3, #0]
	return 0;
     80a:	2000      	movs	r0, #0
}
     80c:	bd10      	pop	{r4, pc}
			g_packet_block[g_packet_block_index] = (nibble_value << 4) + hex_to_nibble(serial_data);
     80e:	4b18      	ldr	r3, [pc, #96]	; (870 <parse_command+0xb4>)
     810:	881c      	ldrh	r4, [r3, #0]
     812:	4b1a      	ldr	r3, [pc, #104]	; (87c <parse_command+0xc0>)
     814:	4798      	blx	r3
     816:	4b1a      	ldr	r3, [pc, #104]	; (880 <parse_command+0xc4>)
     818:	781b      	ldrb	r3, [r3, #0]
     81a:	011b      	lsls	r3, r3, #4
     81c:	18c0      	adds	r0, r0, r3
     81e:	4b19      	ldr	r3, [pc, #100]	; (884 <parse_command+0xc8>)
     820:	5518      	strb	r0, [r3, r4]
			if (g_packet_block_index < PACKET_BLOCK_SIZE_MAX - 1) {
     822:	2cfe      	cmp	r4, #254	; 0xfe
     824:	d807      	bhi.n	836 <parse_command+0x7a>
				g_packet_block_index++;
     826:	3401      	adds	r4, #1
     828:	4b11      	ldr	r3, [pc, #68]	; (870 <parse_command+0xb4>)
     82a:	801c      	strh	r4, [r3, #0]
			parser_state = 3;
     82c:	2203      	movs	r2, #3
     82e:	4b0f      	ldr	r3, [pc, #60]	; (86c <parse_command+0xb0>)
     830:	701a      	strb	r2, [r3, #0]
	return 0;
     832:	2000      	movs	r0, #0
			break;
     834:	e7ea      	b.n	80c <parse_command+0x50>
				printf("Error buffer overflow");
     836:	4814      	ldr	r0, [pc, #80]	; (888 <parse_command+0xcc>)
     838:	4b0f      	ldr	r3, [pc, #60]	; (878 <parse_command+0xbc>)
     83a:	4798      	blx	r3
     83c:	e7f6      	b.n	82c <parse_command+0x70>
			if (serial_data == ' ') {
     83e:	2820      	cmp	r0, #32
     840:	d006      	beq.n	850 <parse_command+0x94>
			} else if (serial_data == ')') {
     842:	2829      	cmp	r0, #41	; 0x29
     844:	d009      	beq.n	85a <parse_command+0x9e>
				parser_state = 0;
     846:	2200      	movs	r2, #0
     848:	4b08      	ldr	r3, [pc, #32]	; (86c <parse_command+0xb0>)
     84a:	701a      	strb	r2, [r3, #0]
	return 0;
     84c:	2000      	movs	r0, #0
     84e:	e7dd      	b.n	80c <parse_command+0x50>
				parser_state = 1;
     850:	2201      	movs	r2, #1
     852:	4b06      	ldr	r3, [pc, #24]	; (86c <parse_command+0xb0>)
     854:	701a      	strb	r2, [r3, #0]
	return 0;
     856:	2000      	movs	r0, #0
     858:	e7d8      	b.n	80c <parse_command+0x50>
				parser_state = 0;
     85a:	2200      	movs	r2, #0
     85c:	4b03      	ldr	r3, [pc, #12]	; (86c <parse_command+0xb0>)
     85e:	701a      	strb	r2, [r3, #0]
				printf("\n");
     860:	381f      	subs	r0, #31
     862:	4b0a      	ldr	r3, [pc, #40]	; (88c <parse_command+0xd0>)
     864:	4798      	blx	r3
				return 1;
     866:	2001      	movs	r0, #1
     868:	e7d0      	b.n	80c <parse_command+0x50>
     86a:	46c0      	nop			; (mov r8, r8)
     86c:	2000020d 	.word	0x2000020d
     870:	20000338 	.word	0x20000338
     874:	000044b4 	.word	0x000044b4
     878:	0000260d 	.word	0x0000260d
     87c:	00000761 	.word	0x00000761
     880:	2000020c 	.word	0x2000020c
     884:	20000238 	.word	0x20000238
     888:	000044c0 	.word	0x000044c0
     88c:	00002641 	.word	0x00002641

00000890 <write_memory_test>:



// Write memory test
uint8_t write_memory_test(void)
{
     890:	b510      	push	{r4, lr}
	// -------------------- Write memory. -----------------------------------
	// Don't put this in an infinite loop. Otherwise the non-volatile memory will wear out.
	aes132_lib_return = aes132m_write_memory(sizeof(tx_buffer_write), word_address, tx_buffer_write);
     892:	4b0e      	ldr	r3, [pc, #56]	; (8cc <write_memory_test+0x3c>)
     894:	8819      	ldrh	r1, [r3, #0]
     896:	4a0e      	ldr	r2, [pc, #56]	; (8d0 <write_memory_test+0x40>)
     898:	2004      	movs	r0, #4
     89a:	4b0e      	ldr	r3, [pc, #56]	; (8d4 <write_memory_test+0x44>)
     89c:	4798      	blx	r3
     89e:	4b0e      	ldr	r3, [pc, #56]	; (8d8 <write_memory_test+0x48>)
     8a0:	7018      	strb	r0, [r3, #0]
	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
     8a2:	2800      	cmp	r0, #0
     8a4:	d005      	beq.n	8b2 <write_memory_test+0x22>
		printf("Write memory failed!\r\n");
     8a6:	480d      	ldr	r0, [pc, #52]	; (8dc <write_memory_test+0x4c>)
     8a8:	4b0d      	ldr	r3, [pc, #52]	; (8e0 <write_memory_test+0x50>)
     8aa:	4798      	blx	r3
		return aes132_lib_return;
     8ac:	4b0a      	ldr	r3, [pc, #40]	; (8d8 <write_memory_test+0x48>)
     8ae:	7818      	ldrb	r0, [r3, #0]
	}
	printf("Write memory success!\r\n");
	printf("Data: ");
	printf_puthex_array(tx_buffer_write,sizeof(tx_buffer_write));
	printf("\r\n");
}
     8b0:	bd10      	pop	{r4, pc}
	printf("Write memory success!\r\n");
     8b2:	480c      	ldr	r0, [pc, #48]	; (8e4 <write_memory_test+0x54>)
     8b4:	4c0a      	ldr	r4, [pc, #40]	; (8e0 <write_memory_test+0x50>)
     8b6:	47a0      	blx	r4
	printf("Data: ");
     8b8:	480b      	ldr	r0, [pc, #44]	; (8e8 <write_memory_test+0x58>)
     8ba:	4b0c      	ldr	r3, [pc, #48]	; (8ec <write_memory_test+0x5c>)
     8bc:	4798      	blx	r3
	printf_puthex_array(tx_buffer_write,sizeof(tx_buffer_write));
     8be:	2104      	movs	r1, #4
     8c0:	4803      	ldr	r0, [pc, #12]	; (8d0 <write_memory_test+0x40>)
     8c2:	4b0b      	ldr	r3, [pc, #44]	; (8f0 <write_memory_test+0x60>)
     8c4:	4798      	blx	r3
	printf("\r\n");
     8c6:	480b      	ldr	r0, [pc, #44]	; (8f4 <write_memory_test+0x64>)
     8c8:	47a0      	blx	r4
}
     8ca:	e7f1      	b.n	8b0 <write_memory_test+0x20>
     8cc:	2000020e 	.word	0x2000020e
     8d0:	20000004 	.word	0x20000004
     8d4:	00000659 	.word	0x00000659
     8d8:	200003b5 	.word	0x200003b5
     8dc:	00004544 	.word	0x00004544
     8e0:	00002729 	.word	0x00002729
     8e4:	0000455c 	.word	0x0000455c
     8e8:	00004574 	.word	0x00004574
     8ec:	0000260d 	.word	0x0000260d
     8f0:	00000789 	.word	0x00000789
     8f4:	00004558 	.word	0x00004558

000008f8 <read_memory_test>:

// Read memory test
uint8_t read_memory_test(void)
{
     8f8:	b570      	push	{r4, r5, r6, lr}
	// -------------------- Read memory. -----------------------------------
	aes132_lib_return = aes132m_read_memory(rx_byte_count, word_address, rx_buffer);
     8fa:	4b19      	ldr	r3, [pc, #100]	; (960 <read_memory_test+0x68>)
     8fc:	8819      	ldrh	r1, [r3, #0]
     8fe:	4b19      	ldr	r3, [pc, #100]	; (964 <read_memory_test+0x6c>)
     900:	7818      	ldrb	r0, [r3, #0]
     902:	4a19      	ldr	r2, [pc, #100]	; (968 <read_memory_test+0x70>)
     904:	4b19      	ldr	r3, [pc, #100]	; (96c <read_memory_test+0x74>)
     906:	4798      	blx	r3
     908:	4b19      	ldr	r3, [pc, #100]	; (970 <read_memory_test+0x78>)
     90a:	7018      	strb	r0, [r3, #0]
	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
     90c:	2800      	cmp	r0, #0
     90e:	d11c      	bne.n	94a <read_memory_test+0x52>
		printf("Read memory failed!\r\n");
		return aes132_lib_return;
	}
	printf("Read memory success!\r\n");
     910:	4818      	ldr	r0, [pc, #96]	; (974 <read_memory_test+0x7c>)
     912:	4d19      	ldr	r5, [pc, #100]	; (978 <read_memory_test+0x80>)
     914:	47a8      	blx	r5
	printf("Data: ");
     916:	4819      	ldr	r0, [pc, #100]	; (97c <read_memory_test+0x84>)
     918:	4b19      	ldr	r3, [pc, #100]	; (980 <read_memory_test+0x88>)
     91a:	4798      	blx	r3
	printf_puthex_array(rx_buffer,sizeof(tx_buffer_write));
     91c:	4c12      	ldr	r4, [pc, #72]	; (968 <read_memory_test+0x70>)
     91e:	2104      	movs	r1, #4
     920:	0020      	movs	r0, r4
     922:	4b18      	ldr	r3, [pc, #96]	; (984 <read_memory_test+0x8c>)
     924:	4798      	blx	r3
	printf("\r\n");
     926:	4818      	ldr	r0, [pc, #96]	; (988 <read_memory_test+0x90>)
     928:	47a8      	blx	r5
	// -------------------- Compare written with read data. -----------------------------------
	aes132_lib_return =  memcmp(tx_buffer_write, rx_buffer, sizeof(tx_buffer_write));
     92a:	2204      	movs	r2, #4
     92c:	0021      	movs	r1, r4
     92e:	4817      	ldr	r0, [pc, #92]	; (98c <read_memory_test+0x94>)
     930:	4b17      	ldr	r3, [pc, #92]	; (990 <read_memory_test+0x98>)
     932:	4798      	blx	r3
     934:	b2c0      	uxtb	r0, r0
     936:	4b0e      	ldr	r3, [pc, #56]	; (970 <read_memory_test+0x78>)
     938:	7018      	strb	r0, [r3, #0]
	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
     93a:	2800      	cmp	r0, #0
     93c:	d00b      	beq.n	956 <read_memory_test+0x5e>
		printf("Compare Memory mismatch!\r\n");
     93e:	4815      	ldr	r0, [pc, #84]	; (994 <read_memory_test+0x9c>)
     940:	4b0d      	ldr	r3, [pc, #52]	; (978 <read_memory_test+0x80>)
     942:	4798      	blx	r3
		return aes132_lib_return;
     944:	4b0a      	ldr	r3, [pc, #40]	; (970 <read_memory_test+0x78>)
     946:	7818      	ldrb	r0, [r3, #0]
     948:	e004      	b.n	954 <read_memory_test+0x5c>
		printf("Read memory failed!\r\n");
     94a:	4813      	ldr	r0, [pc, #76]	; (998 <read_memory_test+0xa0>)
     94c:	4b0a      	ldr	r3, [pc, #40]	; (978 <read_memory_test+0x80>)
     94e:	4798      	blx	r3
		return aes132_lib_return;
     950:	4b07      	ldr	r3, [pc, #28]	; (970 <read_memory_test+0x78>)
     952:	7818      	ldrb	r0, [r3, #0]
	}
	printf("Compare Memory match!\r\n");
}
     954:	bd70      	pop	{r4, r5, r6, pc}
	printf("Compare Memory match!\r\n");
     956:	4811      	ldr	r0, [pc, #68]	; (99c <read_memory_test+0xa4>)
     958:	4b07      	ldr	r3, [pc, #28]	; (978 <read_memory_test+0x80>)
     95a:	4798      	blx	r3
}
     95c:	e7fa      	b.n	954 <read_memory_test+0x5c>
     95e:	46c0      	nop			; (mov r8, r8)
     960:	2000020e 	.word	0x2000020e
     964:	20000002 	.word	0x20000002
     968:	2000033c 	.word	0x2000033c
     96c:	00000669 	.word	0x00000669
     970:	200003b5 	.word	0x200003b5
     974:	000044f8 	.word	0x000044f8
     978:	00002729 	.word	0x00002729
     97c:	00004574 	.word	0x00004574
     980:	0000260d 	.word	0x0000260d
     984:	00000789 	.word	0x00000789
     988:	00004558 	.word	0x00004558
     98c:	20000004 	.word	0x20000004
     990:	000025cd 	.word	0x000025cd
     994:	00004510 	.word	0x00004510
     998:	000044e0 	.word	0x000044e0
     99c:	0000452c 	.word	0x0000452c

000009a0 <block_read_test>:

// Send a BlockRead command
uint8_t block_read_test(void)
{
     9a0:	b510      	push	{r4, lr}
     9a2:	b08a      	sub	sp, #40	; 0x28
	// ------- Send a BlockRead command and receive its response. -----------------------------
	aes132_lib_return = aes132m_execute(AES132_BLOCK_READ, 0, word_address, rx_byte_count,
     9a4:	4b1f      	ldr	r3, [pc, #124]	; (a24 <block_read_test+0x84>)
     9a6:	881b      	ldrh	r3, [r3, #0]
     9a8:	4a1f      	ldr	r2, [pc, #124]	; (a28 <block_read_test+0x88>)
     9aa:	8812      	ldrh	r2, [r2, #0]
     9ac:	491f      	ldr	r1, [pc, #124]	; (a2c <block_read_test+0x8c>)
     9ae:	9109      	str	r1, [sp, #36]	; 0x24
     9b0:	491f      	ldr	r1, [pc, #124]	; (a30 <block_read_test+0x90>)
     9b2:	9108      	str	r1, [sp, #32]
     9b4:	2100      	movs	r1, #0
     9b6:	9107      	str	r1, [sp, #28]
     9b8:	9106      	str	r1, [sp, #24]
     9ba:	9105      	str	r1, [sp, #20]
     9bc:	9104      	str	r1, [sp, #16]
     9be:	9103      	str	r1, [sp, #12]
     9c0:	9102      	str	r1, [sp, #8]
     9c2:	9101      	str	r1, [sp, #4]
     9c4:	9100      	str	r1, [sp, #0]
     9c6:	2010      	movs	r0, #16
     9c8:	4c1a      	ldr	r4, [pc, #104]	; (a34 <block_read_test+0x94>)
     9ca:	47a0      	blx	r4
     9cc:	4b1a      	ldr	r3, [pc, #104]	; (a38 <block_read_test+0x98>)
     9ce:	7018      	strb	r0, [r3, #0]
	0, NULL, 0, NULL, 0, NULL, 0, NULL, tx_buffer, rx_buffer);
	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
     9d0:	2800      	cmp	r0, #0
     9d2:	d11b      	bne.n	a0c <block_read_test+0x6c>
		printf("Block Read memory failed!\r\n");
		return aes132_lib_return;
	}
	printf("Block Read memory success!\r\n");
     9d4:	4819      	ldr	r0, [pc, #100]	; (a3c <block_read_test+0x9c>)
     9d6:	4b1a      	ldr	r3, [pc, #104]	; (a40 <block_read_test+0xa0>)
     9d8:	4798      	blx	r3
	printf("Data: ");
     9da:	481a      	ldr	r0, [pc, #104]	; (a44 <block_read_test+0xa4>)
     9dc:	4b1a      	ldr	r3, [pc, #104]	; (a48 <block_read_test+0xa8>)
     9de:	4798      	blx	r3
	printf_puthex_array(&rx_buffer[AES132_RESPONSE_INDEX_DATA],rx_byte_count);
     9e0:	4b10      	ldr	r3, [pc, #64]	; (a24 <block_read_test+0x84>)
     9e2:	7819      	ldrb	r1, [r3, #0]
     9e4:	4c19      	ldr	r4, [pc, #100]	; (a4c <block_read_test+0xac>)
     9e6:	0020      	movs	r0, r4
     9e8:	4b19      	ldr	r3, [pc, #100]	; (a50 <block_read_test+0xb0>)
     9ea:	4798      	blx	r3
	
	// -------------------- Compare written with read data. -----------------------------------
	aes132_lib_return =  memcmp(tx_buffer_write, &rx_buffer[AES132_RESPONSE_INDEX_DATA], sizeof(tx_buffer_write));
     9ec:	2204      	movs	r2, #4
     9ee:	0021      	movs	r1, r4
     9f0:	4818      	ldr	r0, [pc, #96]	; (a54 <block_read_test+0xb4>)
     9f2:	4b19      	ldr	r3, [pc, #100]	; (a58 <block_read_test+0xb8>)
     9f4:	4798      	blx	r3
     9f6:	b2c0      	uxtb	r0, r0
     9f8:	4b0f      	ldr	r3, [pc, #60]	; (a38 <block_read_test+0x98>)
     9fa:	7018      	strb	r0, [r3, #0]
	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
     9fc:	2800      	cmp	r0, #0
     9fe:	d00c      	beq.n	a1a <block_read_test+0x7a>
		printf("Compare Memory mismatch!\r\n");
     a00:	4816      	ldr	r0, [pc, #88]	; (a5c <block_read_test+0xbc>)
     a02:	4b0f      	ldr	r3, [pc, #60]	; (a40 <block_read_test+0xa0>)
     a04:	4798      	blx	r3
		return aes132_lib_return;
     a06:	4b0c      	ldr	r3, [pc, #48]	; (a38 <block_read_test+0x98>)
     a08:	7818      	ldrb	r0, [r3, #0]
     a0a:	e004      	b.n	a16 <block_read_test+0x76>
		printf("Block Read memory failed!\r\n");
     a0c:	4814      	ldr	r0, [pc, #80]	; (a60 <block_read_test+0xc0>)
     a0e:	4b0c      	ldr	r3, [pc, #48]	; (a40 <block_read_test+0xa0>)
     a10:	4798      	blx	r3
		return aes132_lib_return;
     a12:	4b09      	ldr	r3, [pc, #36]	; (a38 <block_read_test+0x98>)
     a14:	7818      	ldrb	r0, [r3, #0]
	}
	printf("Compare Memory match!\r\n");
}
     a16:	b00a      	add	sp, #40	; 0x28
     a18:	bd10      	pop	{r4, pc}
	printf("Compare Memory match!\r\n");
     a1a:	4812      	ldr	r0, [pc, #72]	; (a64 <block_read_test+0xc4>)
     a1c:	4b08      	ldr	r3, [pc, #32]	; (a40 <block_read_test+0xa0>)
     a1e:	4798      	blx	r3
}
     a20:	e7f9      	b.n	a16 <block_read_test+0x76>
     a22:	46c0      	nop			; (mov r8, r8)
     a24:	20000002 	.word	0x20000002
     a28:	2000020e 	.word	0x2000020e
     a2c:	2000033c 	.word	0x2000033c
     a30:	20000360 	.word	0x20000360
     a34:	00000679 	.word	0x00000679
     a38:	200003b5 	.word	0x200003b5
     a3c:	0000447c 	.word	0x0000447c
     a40:	00002729 	.word	0x00002729
     a44:	00004574 	.word	0x00004574
     a48:	0000260d 	.word	0x0000260d
     a4c:	2000033e 	.word	0x2000033e
     a50:	00000789 	.word	0x00000789
     a54:	20000004 	.word	0x20000004
     a58:	000025cd 	.word	0x000025cd
     a5c:	00004510 	.word	0x00004510
     a60:	00004460 	.word	0x00004460
     a64:	0000452c 	.word	0x0000452c

00000a68 <aes132app_single_execute>:


void aes132app_single_execute(void)
{
     a68:	b5f0      	push	{r4, r5, r6, r7, lr}
     a6a:	b08b      	sub	sp, #44	; 0x2c
	uint8_t  ret_code = 0xFF;

	// 4 bytes Opcode, Param1, Param2
	op_code  =  *p_packet_block++;
	mode	 =	*p_packet_block++;
	param1   = (*p_packet_block++ << 8);
     a6c:	4c1f      	ldr	r4, [pc, #124]	; (aec <aes132app_single_execute+0x84>)
     a6e:	78a2      	ldrb	r2, [r4, #2]
     a70:	0212      	lsls	r2, r2, #8
	param1  |= (*p_packet_block++);
	param2   = (*p_packet_block++ << 8);
     a72:	7923      	ldrb	r3, [r4, #4]
     a74:	021b      	lsls	r3, r3, #8
	param2  |= (*p_packet_block++);
     a76:	7961      	ldrb	r1, [r4, #5]
	// The rest is included as Data1
	datalen1 = g_packet_block_index - 6;
	data1    = p_packet_block;
	
	// Execute
	ret_code = aes132m_execute(op_code,mode, param1, param2,
     a78:	430b      	orrs	r3, r1
	param1  |= (*p_packet_block++);
     a7a:	78e1      	ldrb	r1, [r4, #3]
	ret_code = aes132m_execute(op_code,mode, param1, param2,
     a7c:	430a      	orrs	r2, r1
     a7e:	7861      	ldrb	r1, [r4, #1]
     a80:	7820      	ldrb	r0, [r4, #0]
     a82:	4d1b      	ldr	r5, [pc, #108]	; (af0 <aes132app_single_execute+0x88>)
     a84:	9509      	str	r5, [sp, #36]	; 0x24
     a86:	4e1b      	ldr	r6, [pc, #108]	; (af4 <aes132app_single_execute+0x8c>)
     a88:	9608      	str	r6, [sp, #32]
     a8a:	2500      	movs	r5, #0
     a8c:	9507      	str	r5, [sp, #28]
     a8e:	9506      	str	r5, [sp, #24]
     a90:	9505      	str	r5, [sp, #20]
     a92:	9504      	str	r5, [sp, #16]
     a94:	9503      	str	r5, [sp, #12]
     a96:	9502      	str	r5, [sp, #8]
     a98:	3406      	adds	r4, #6
     a9a:	9401      	str	r4, [sp, #4]
	datalen1 = g_packet_block_index - 6;
     a9c:	4c16      	ldr	r4, [pc, #88]	; (af8 <aes132app_single_execute+0x90>)
     a9e:	8824      	ldrh	r4, [r4, #0]
     aa0:	3c06      	subs	r4, #6
	ret_code = aes132m_execute(op_code,mode, param1, param2,
     aa2:	b2e4      	uxtb	r4, r4
     aa4:	9400      	str	r4, [sp, #0]
     aa6:	4c15      	ldr	r4, [pc, #84]	; (afc <aes132app_single_execute+0x94>)
     aa8:	47a0      	blx	r4
     aaa:	0005      	movs	r5, r0
	datalen1, data1, datalen2, data2, datalen3, data3,
	datalen4, data4, tx_buffer, rx_buffer);
	printf("\n");
     aac:	200a      	movs	r0, #10
     aae:	4c14      	ldr	r4, [pc, #80]	; (b00 <aes132app_single_execute+0x98>)
     ab0:	47a0      	blx	r4
	printf("TX buffer = 0x");
     ab2:	4814      	ldr	r0, [pc, #80]	; (b04 <aes132app_single_execute+0x9c>)
     ab4:	4b14      	ldr	r3, [pc, #80]	; (b08 <aes132app_single_execute+0xa0>)
     ab6:	4798      	blx	r3
	printf_puthex_array(tx_buffer, tx_buffer[0]);
     ab8:	7831      	ldrb	r1, [r6, #0]
     aba:	0030      	movs	r0, r6
     abc:	4b13      	ldr	r3, [pc, #76]	; (b0c <aes132app_single_execute+0xa4>)
     abe:	4798      	blx	r3
	printf("\n");
     ac0:	200a      	movs	r0, #10
     ac2:	47a0      	blx	r4
	if(ret_code == AES132_FUNCTION_RETCODE_SUCCESS){
     ac4:	2d00      	cmp	r5, #0
     ac6:	d005      	beq.n	ad4 <aes132app_single_execute+0x6c>
		printf("RX buffer = 0x");
		printf_puthex_array(rx_buffer, rx_buffer[0]);
		printf("\n");
	}else
		printf("Failed! ret_code = 0x%.2X\n", ret_code);
     ac8:	0029      	movs	r1, r5
     aca:	4811      	ldr	r0, [pc, #68]	; (b10 <aes132app_single_execute+0xa8>)
     acc:	4b0e      	ldr	r3, [pc, #56]	; (b08 <aes132app_single_execute+0xa0>)
     ace:	4798      	blx	r3
	
}
     ad0:	b00b      	add	sp, #44	; 0x2c
     ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("RX buffer = 0x");
     ad4:	480f      	ldr	r0, [pc, #60]	; (b14 <aes132app_single_execute+0xac>)
     ad6:	4b0c      	ldr	r3, [pc, #48]	; (b08 <aes132app_single_execute+0xa0>)
     ad8:	4798      	blx	r3
		printf_puthex_array(rx_buffer, rx_buffer[0]);
     ada:	4805      	ldr	r0, [pc, #20]	; (af0 <aes132app_single_execute+0x88>)
     adc:	7801      	ldrb	r1, [r0, #0]
     ade:	4b0b      	ldr	r3, [pc, #44]	; (b0c <aes132app_single_execute+0xa4>)
     ae0:	4798      	blx	r3
		printf("\n");
     ae2:	200a      	movs	r0, #10
     ae4:	4b06      	ldr	r3, [pc, #24]	; (b00 <aes132app_single_execute+0x98>)
     ae6:	4798      	blx	r3
     ae8:	e7f2      	b.n	ad0 <aes132app_single_execute+0x68>
     aea:	46c0      	nop			; (mov r8, r8)
     aec:	20000238 	.word	0x20000238
     af0:	2000033c 	.word	0x2000033c
     af4:	20000360 	.word	0x20000360
     af8:	20000338 	.word	0x20000338
     afc:	00000679 	.word	0x00000679
     b00:	00002641 	.word	0x00002641
     b04:	00004424 	.word	0x00004424
     b08:	0000260d 	.word	0x0000260d
     b0c:	00000789 	.word	0x00000789
     b10:	00004444 	.word	0x00004444
     b14:	00004434 	.word	0x00004434

00000b18 <aes132app_command_dispatch>:


void aes132app_command_dispatch(void)
{
     b18:	b510      	push	{r4, lr}
	// Dispatch appropriate function, deduce from the opcode (packet block byte #0)
	// Use dummy opcodes for specific cases
	switch (g_packet_block[0]) {
     b1a:	4b0a      	ldr	r3, [pc, #40]	; (b44 <aes132app_command_dispatch+0x2c>)
     b1c:	781b      	ldrb	r3, [r3, #0]
     b1e:	b2da      	uxtb	r2, r3
     b20:	2a81      	cmp	r2, #129	; 0x81
     b22:	d009      	beq.n	b38 <aes132app_command_dispatch+0x20>
     b24:	2a82      	cmp	r2, #130	; 0x82
     b26:	d00a      	beq.n	b3e <aes132app_command_dispatch+0x26>
     b28:	2a80      	cmp	r2, #128	; 0x80
     b2a:	d002      	beq.n	b32 <aes132app_command_dispatch+0x1a>
		break;
		case 0x82:
			block_read_test();
		break;
		default:
			aes132app_single_execute();
     b2c:	4b06      	ldr	r3, [pc, #24]	; (b48 <aes132app_command_dispatch+0x30>)
     b2e:	4798      	blx	r3
		break;
	}
}
     b30:	e001      	b.n	b36 <aes132app_command_dispatch+0x1e>
			write_memory_test();
     b32:	4b06      	ldr	r3, [pc, #24]	; (b4c <aes132app_command_dispatch+0x34>)
     b34:	4798      	blx	r3
}
     b36:	bd10      	pop	{r4, pc}
			read_memory_test();
     b38:	4b05      	ldr	r3, [pc, #20]	; (b50 <aes132app_command_dispatch+0x38>)
     b3a:	4798      	blx	r3
		break;
     b3c:	e7fb      	b.n	b36 <aes132app_command_dispatch+0x1e>
			block_read_test();
     b3e:	4b05      	ldr	r3, [pc, #20]	; (b54 <aes132app_command_dispatch+0x3c>)
     b40:	4798      	blx	r3
		break;
     b42:	e7f8      	b.n	b36 <aes132app_command_dispatch+0x1e>
     b44:	20000238 	.word	0x20000238
     b48:	00000a69 	.word	0x00000a69
     b4c:	00000891 	.word	0x00000891
     b50:	000008f9 	.word	0x000008f9
     b54:	000009a1 	.word	0x000009a1

00000b58 <main>:
/** \brief This function is the entry function for an example application that
           uses the AES132 library.
 * \return result (0: success, otherwise failure)
 */
int main(void)
{
     b58:	b570      	push	{r4, r5, r6, lr}
     b5a:	b090      	sub	sp, #64	; 0x40
	//! [system_init]
	system_init();
     b5c:	4b34      	ldr	r3, [pc, #208]	; (c30 <main+0xd8>)
     b5e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     b60:	2380      	movs	r3, #128	; 0x80
     b62:	05db      	lsls	r3, r3, #23
     b64:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     b66:	2300      	movs	r3, #0
     b68:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     b6a:	22ff      	movs	r2, #255	; 0xff
     b6c:	4669      	mov	r1, sp
     b6e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     b70:	2200      	movs	r2, #0
     b72:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     b74:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     b76:	2101      	movs	r1, #1
     b78:	2024      	movs	r0, #36	; 0x24
     b7a:	466c      	mov	r4, sp
     b7c:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
     b7e:	3001      	adds	r0, #1
     b80:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
     b82:	3125      	adds	r1, #37	; 0x25
     b84:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
     b86:	3101      	adds	r1, #1
     b88:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
     b8a:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     b8c:	3105      	adds	r1, #5
     b8e:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
     b90:	3101      	adds	r1, #1
     b92:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     b94:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     b96:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     b98:	76e3      	strb	r3, [r4, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
     b9a:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
     b9c:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
     b9e:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                        = 19;
     ba0:	2313      	movs	r3, #19
     ba2:	76a3      	strb	r3, [r4, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
     ba4:	7762      	strb	r2, [r4, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
     ba6:	2380      	movs	r3, #128	; 0x80
     ba8:	035b      	lsls	r3, r3, #13
     baa:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
     bac:	4b21      	ldr	r3, [pc, #132]	; (c34 <main+0xdc>)
     bae:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
     bb0:	4b21      	ldr	r3, [pc, #132]	; (c38 <main+0xe0>)
     bb2:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
     bb4:	2301      	movs	r3, #1
     bb6:	425b      	negs	r3, r3
     bb8:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
     bba:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
     bbc:	23e1      	movs	r3, #225	; 0xe1
     bbe:	025b      	lsls	r3, r3, #9
     bc0:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     bc2:	4c1e      	ldr	r4, [pc, #120]	; (c3c <main+0xe4>)
     bc4:	4b1e      	ldr	r3, [pc, #120]	; (c40 <main+0xe8>)
     bc6:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     bc8:	4a1e      	ldr	r2, [pc, #120]	; (c44 <main+0xec>)
     bca:	4b1f      	ldr	r3, [pc, #124]	; (c48 <main+0xf0>)
     bcc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     bce:	4a1f      	ldr	r2, [pc, #124]	; (c4c <main+0xf4>)
     bd0:	4b1f      	ldr	r3, [pc, #124]	; (c50 <main+0xf8>)
     bd2:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
     bd4:	466a      	mov	r2, sp
     bd6:	491f      	ldr	r1, [pc, #124]	; (c54 <main+0xfc>)
     bd8:	0020      	movs	r0, r4
     bda:	4b1f      	ldr	r3, [pc, #124]	; (c58 <main+0x100>)
     bdc:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     bde:	4e1f      	ldr	r6, [pc, #124]	; (c5c <main+0x104>)
     be0:	6833      	ldr	r3, [r6, #0]
     be2:	6898      	ldr	r0, [r3, #8]
     be4:	2100      	movs	r1, #0
     be6:	4d1e      	ldr	r5, [pc, #120]	; (c60 <main+0x108>)
     be8:	47a8      	blx	r5
	setbuf(stdin, NULL);
     bea:	6833      	ldr	r3, [r6, #0]
     bec:	6858      	ldr	r0, [r3, #4]
     bee:	2100      	movs	r1, #0
     bf0:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     bf2:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     bf4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     bf6:	2a00      	cmp	r2, #0
     bf8:	d1fc      	bne.n	bf4 <main+0x9c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     bfa:	681a      	ldr	r2, [r3, #0]
     bfc:	2102      	movs	r1, #2
     bfe:	430a      	orrs	r2, r1
     c00:	601a      	str	r2, [r3, #0]
	//! [configure_console]
	configure_console();
	//! [configure_console]
	
	//! [aes132p_enable_interface]
	aes132p_enable_interface();
     c02:	4b18      	ldr	r3, [pc, #96]	; (c64 <main+0x10c>)
     c04:	4798      	blx	r3
	//! [aes132p_enable_interface]
	printf("*****AES132 TEST*****\r\n");
     c06:	4818      	ldr	r0, [pc, #96]	; (c68 <main+0x110>)
     c08:	4b18      	ldr	r3, [pc, #96]	; (c6c <main+0x114>)
     c0a:	4798      	blx	r3
	while(1){
		if (scanf("%c",&serial_data)>0){
     c0c:	4e18      	ldr	r6, [pc, #96]	; (c70 <main+0x118>)
     c0e:	4d19      	ldr	r5, [pc, #100]	; (c74 <main+0x11c>)
     c10:	4c19      	ldr	r4, [pc, #100]	; (c78 <main+0x120>)
     c12:	0031      	movs	r1, r6
     c14:	0028      	movs	r0, r5
     c16:	47a0      	blx	r4
     c18:	2800      	cmp	r0, #0
     c1a:	ddfa      	ble.n	c12 <main+0xba>
			if (parse_command(serial_data))
     c1c:	4b14      	ldr	r3, [pc, #80]	; (c70 <main+0x118>)
     c1e:	7818      	ldrb	r0, [r3, #0]
     c20:	4b16      	ldr	r3, [pc, #88]	; (c7c <main+0x124>)
     c22:	4798      	blx	r3
     c24:	2800      	cmp	r0, #0
     c26:	d0f4      	beq.n	c12 <main+0xba>
				aes132app_command_dispatch();
     c28:	4b15      	ldr	r3, [pc, #84]	; (c80 <main+0x128>)
     c2a:	4798      	blx	r3
     c2c:	e7f1      	b.n	c12 <main+0xba>
     c2e:	46c0      	nop			; (mov r8, r8)
     c30:	00002279 	.word	0x00002279
     c34:	00160002 	.word	0x00160002
     c38:	00170002 	.word	0x00170002
     c3c:	20000200 	.word	0x20000200
     c40:	200003d0 	.word	0x200003d0
     c44:	00000749 	.word	0x00000749
     c48:	200003cc 	.word	0x200003cc
     c4c:	0000071d 	.word	0x0000071d
     c50:	200003c8 	.word	0x200003c8
     c54:	42001400 	.word	0x42001400
     c58:	00001a45 	.word	0x00001a45
     c5c:	20000008 	.word	0x20000008
     c60:	00002771 	.word	0x00002771
     c64:	00000c85 	.word	0x00000c85
     c68:	00004498 	.word	0x00004498
     c6c:	00002729 	.word	0x00002729
     c70:	200003b4 	.word	0x200003b4
     c74:	000044b0 	.word	0x000044b0
     c78:	0000273d 	.word	0x0000273d
     c7c:	000007bd 	.word	0x000007bd
     c80:	00000b19 	.word	0x00000b19

00000c84 <aes132p_enable_interface>:
#define AES132_SPI_PREFACE_SIZE ((uint8_t) 3)


/** \brief This function initializes and enables the SPI peripheral. */
void aes132p_enable_interface(void)
{
     c84:	b510      	push	{r4, lr}
	spi_enable_phys();
     c86:	4b01      	ldr	r3, [pc, #4]	; (c8c <aes132p_enable_interface+0x8>)
     c88:	4798      	blx	r3
}
     c8a:	bd10      	pop	{r4, pc}
     c8c:	00000d99 	.word	0x00000d99

00000c90 <aes132p_write_memory_physical>:
 * \param[in] word_address word address to write to
 * \param[in] data pointer to tx buffer
 * \return status of the operation
 */
uint8_t aes132p_write_memory_physical(uint8_t count, uint16_t word_address, uint8_t *data)
{
     c90:	b570      	push	{r4, r5, r6, lr}
     c92:	b082      	sub	sp, #8
     c94:	0005      	movs	r5, r0
     c96:	0016      	movs	r6, r2
	uint8_t aes132_lib_return;
	uint8_t writeEnable = AES132_SPI_ENABLE_WRITE;
     c98:	466b      	mov	r3, sp
     c9a:	1ddc      	adds	r4, r3, #7
     c9c:	2306      	movs	r3, #6
     c9e:	7023      	strb	r3, [r4, #0]
	uint8_t preface[] =
     ca0:	ab01      	add	r3, sp, #4
     ca2:	2202      	movs	r2, #2
     ca4:	701a      	strb	r2, [r3, #0]
		{AES132_SPI_WRITE, (uint8_t) (word_address >> 8), (uint8_t) (word_address & 0xFF)};
     ca6:	0a0a      	lsrs	r2, r1, #8
	uint8_t preface[] =
     ca8:	705a      	strb	r2, [r3, #1]
     caa:	7099      	strb	r1, [r3, #2]

	// We don't need to enable write when writing to I/O address,
	// but an "if" condition would increase code space.
	spi_select_slave_phys();
     cac:	4b0f      	ldr	r3, [pc, #60]	; (cec <aes132p_write_memory_physical+0x5c>)
     cae:	4798      	blx	r3
	aes132_lib_return = spi_send_bytes(1, &writeEnable);
     cb0:	0021      	movs	r1, r4
     cb2:	2001      	movs	r0, #1
     cb4:	4b0e      	ldr	r3, [pc, #56]	; (cf0 <aes132p_write_memory_physical+0x60>)
     cb6:	4798      	blx	r3
     cb8:	0004      	movs	r4, r0
	spi_deselect_slave_phys();
     cba:	4b0e      	ldr	r3, [pc, #56]	; (cf4 <aes132p_write_memory_physical+0x64>)
     cbc:	4798      	blx	r3

	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS)
     cbe:	2c00      	cmp	r4, #0
     cc0:	d002      	beq.n	cc8 <aes132p_write_memory_physical+0x38>
		aes132_lib_return = spi_send_bytes(count, data);

	spi_deselect_slave_phys();

	return aes132_lib_return;
}
     cc2:	0020      	movs	r0, r4
     cc4:	b002      	add	sp, #8
     cc6:	bd70      	pop	{r4, r5, r6, pc}
	spi_select_slave_phys();
     cc8:	4b08      	ldr	r3, [pc, #32]	; (cec <aes132p_write_memory_physical+0x5c>)
     cca:	4798      	blx	r3
	aes132_lib_return = spi_send_bytes(AES132_SPI_PREFACE_SIZE, preface);
     ccc:	a901      	add	r1, sp, #4
     cce:	2003      	movs	r0, #3
     cd0:	4b07      	ldr	r3, [pc, #28]	; (cf0 <aes132p_write_memory_physical+0x60>)
     cd2:	4798      	blx	r3
     cd4:	1e04      	subs	r4, r0, #0
	if (aes132_lib_return == AES132_FUNCTION_RETCODE_SUCCESS)
     cd6:	d002      	beq.n	cde <aes132p_write_memory_physical+0x4e>
	spi_deselect_slave_phys();
     cd8:	4b06      	ldr	r3, [pc, #24]	; (cf4 <aes132p_write_memory_physical+0x64>)
     cda:	4798      	blx	r3
	return aes132_lib_return;
     cdc:	e7f1      	b.n	cc2 <aes132p_write_memory_physical+0x32>
		aes132_lib_return = spi_send_bytes(count, data);
     cde:	0031      	movs	r1, r6
     ce0:	0028      	movs	r0, r5
     ce2:	4b03      	ldr	r3, [pc, #12]	; (cf0 <aes132p_write_memory_physical+0x60>)
     ce4:	4798      	blx	r3
     ce6:	0004      	movs	r4, r0
     ce8:	e7f6      	b.n	cd8 <aes132p_write_memory_physical+0x48>
     cea:	46c0      	nop			; (mov r8, r8)
     cec:	00000d49 	.word	0x00000d49
     cf0:	00000e71 	.word	0x00000e71
     cf4:	00000d71 	.word	0x00000d71

00000cf8 <aes132p_read_memory_physical>:
 * \param[in] word_address word address to read from
 * \param[out] data pointer to rx buffer
 * \return status of the operation
 */
uint8_t aes132p_read_memory_physical(uint8_t size, uint16_t word_address, uint8_t *data)
{
     cf8:	b570      	push	{r4, r5, r6, lr}
     cfa:	b082      	sub	sp, #8
     cfc:	0005      	movs	r5, r0
     cfe:	0016      	movs	r6, r2
	uint8_t aes132_lib_return;
	uint8_t preface[] =
     d00:	ac01      	add	r4, sp, #4
     d02:	2303      	movs	r3, #3
     d04:	7023      	strb	r3, [r4, #0]
		{AES132_SPI_READ, (uint8_t) (word_address >> 8), (uint8_t) (word_address & 0xFF)};
     d06:	0a0b      	lsrs	r3, r1, #8
	uint8_t preface[] =
     d08:	7063      	strb	r3, [r4, #1]
     d0a:	70a1      	strb	r1, [r4, #2]

	spi_select_slave_phys();
     d0c:	4b09      	ldr	r3, [pc, #36]	; (d34 <aes132p_read_memory_physical+0x3c>)
     d0e:	4798      	blx	r3
	aes132_lib_return = spi_send_bytes(AES132_SPI_PREFACE_SIZE, preface);
     d10:	0021      	movs	r1, r4
     d12:	2003      	movs	r0, #3
     d14:	4b08      	ldr	r3, [pc, #32]	; (d38 <aes132p_read_memory_physical+0x40>)
     d16:	4798      	blx	r3
     d18:	1e04      	subs	r4, r0, #0
	if (aes132_lib_return == AES132_FUNCTION_RETCODE_SUCCESS)
     d1a:	d004      	beq.n	d26 <aes132p_read_memory_physical+0x2e>
		aes132_lib_return = spi_receive_bytes(size, data);

	spi_deselect_slave_phys();
     d1c:	4b07      	ldr	r3, [pc, #28]	; (d3c <aes132p_read_memory_physical+0x44>)
     d1e:	4798      	blx	r3

	return aes132_lib_return;
}
     d20:	0020      	movs	r0, r4
     d22:	b002      	add	sp, #8
     d24:	bd70      	pop	{r4, r5, r6, pc}
		aes132_lib_return = spi_receive_bytes(size, data);
     d26:	0031      	movs	r1, r6
     d28:	0028      	movs	r0, r5
     d2a:	4b05      	ldr	r3, [pc, #20]	; (d40 <aes132p_read_memory_physical+0x48>)
     d2c:	4798      	blx	r3
     d2e:	0004      	movs	r4, r0
     d30:	e7f4      	b.n	d1c <aes132p_read_memory_physical+0x24>
     d32:	46c0      	nop			; (mov r8, r8)
     d34:	00000d49 	.word	0x00000d49
     d38:	00000e71 	.word	0x00000e71
     d3c:	00000d71 	.word	0x00000d71
     d40:	00000e95 	.word	0x00000e95

00000d44 <aes132p_resync_physical>:
 * \return always success
 */
uint8_t aes132p_resync_physical(void)
{
	return AES132_FUNCTION_RETCODE_SUCCESS;
}
     d44:	2000      	movs	r0, #0
     d46:	4770      	bx	lr

00000d48 <spi_select_slave_phys>:
}


/** This function selects the SPI slave. */
void spi_select_slave_phys(void)
{
     d48:	b510      	push	{r4, lr}
	//! [select_slave]
		spi_select_slave(&spi_master_instance, &slave[spi_current_index], true);
     d4a:	4b05      	ldr	r3, [pc, #20]	; (d60 <spi_select_slave_phys+0x18>)
     d4c:	781b      	ldrb	r3, [r3, #0]
     d4e:	0059      	lsls	r1, r3, #1
     d50:	18c9      	adds	r1, r1, r3
     d52:	4b04      	ldr	r3, [pc, #16]	; (d64 <spi_select_slave_phys+0x1c>)
     d54:	18c9      	adds	r1, r1, r3
     d56:	2201      	movs	r2, #1
     d58:	4803      	ldr	r0, [pc, #12]	; (d68 <spi_select_slave_phys+0x20>)
     d5a:	4b04      	ldr	r3, [pc, #16]	; (d6c <spi_select_slave_phys+0x24>)
     d5c:	4798      	blx	r3
	//! [select_slave]
}
     d5e:	bd10      	pop	{r4, pc}
     d60:	20000210 	.word	0x20000210
     d64:	200003c4 	.word	0x200003c4
     d68:	200003b8 	.word	0x200003b8
     d6c:	00001739 	.word	0x00001739

00000d70 <spi_deselect_slave_phys>:


/** This function deselects the SPI slave. */
void spi_deselect_slave_phys(void)
{
     d70:	b510      	push	{r4, lr}
	//! [select_slave]
		spi_select_slave(&spi_master_instance, &slave[spi_current_index], false);
     d72:	4b05      	ldr	r3, [pc, #20]	; (d88 <spi_deselect_slave_phys+0x18>)
     d74:	781b      	ldrb	r3, [r3, #0]
     d76:	0059      	lsls	r1, r3, #1
     d78:	18c9      	adds	r1, r1, r3
     d7a:	4b04      	ldr	r3, [pc, #16]	; (d8c <spi_deselect_slave_phys+0x1c>)
     d7c:	18c9      	adds	r1, r1, r3
     d7e:	2200      	movs	r2, #0
     d80:	4803      	ldr	r0, [pc, #12]	; (d90 <spi_deselect_slave_phys+0x20>)
     d82:	4b04      	ldr	r3, [pc, #16]	; (d94 <spi_deselect_slave_phys+0x24>)
     d84:	4798      	blx	r3
	//! [select_slave]
}
     d86:	bd10      	pop	{r4, pc}
     d88:	20000210 	.word	0x20000210
     d8c:	200003c4 	.word	0x200003c4
     d90:	200003b8 	.word	0x200003b8
     d94:	00001739 	.word	0x00001739

00000d98 <spi_enable_phys>:


/** \brief This function initializes and enables the SPI peripheral. */
void spi_enable_phys(void)
{
     d98:	b530      	push	{r4, r5, lr}
     d9a:	b091      	sub	sp, #68	; 0x44
	/* Configure and initialize software device instance of peripheral slave */
	//! [slave_conf_defaults]
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	//! [slave_conf_defaults]
	//! [ss_pin]
	slave_dev_config.ss_pin = spi_select[spi_current_index];
     d9c:	4b28      	ldr	r3, [pc, #160]	; (e40 <spi_enable_phys+0xa8>)
     d9e:	781b      	ldrb	r3, [r3, #0]
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     da0:	4d28      	ldr	r5, [pc, #160]	; (e44 <spi_enable_phys+0xac>)
     da2:	005c      	lsls	r4, r3, #1
     da4:	18e4      	adds	r4, r4, r3
     da6:	231b      	movs	r3, #27
     da8:	5563      	strb	r3, [r4, r5]
	slave->address_enabled = config->address_enabled;
     daa:	192a      	adds	r2, r5, r4
     dac:	2300      	movs	r3, #0
     dae:	7053      	strb	r3, [r2, #1]
	slave->address         = config->address;
     db0:	7093      	strb	r3, [r2, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     db2:	a901      	add	r1, sp, #4
     db4:	2201      	movs	r2, #1
     db6:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     db8:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     dba:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     dbc:	201b      	movs	r0, #27
     dbe:	4b22      	ldr	r3, [pc, #136]	; (e48 <spi_enable_phys+0xb0>)
     dc0:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     dc2:	5d62      	ldrb	r2, [r4, r5]
	if (port_index < PORT_INST_NUM) {
     dc4:	09d1      	lsrs	r1, r2, #7
		return NULL;
     dc6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     dc8:	2900      	cmp	r1, #0
     dca:	d104      	bne.n	dd6 <spi_enable_phys+0x3e>
		return &(ports[port_index]->Group[group_index]);
     dcc:	0953      	lsrs	r3, r2, #5
     dce:	01db      	lsls	r3, r3, #7
     dd0:	491e      	ldr	r1, [pc, #120]	; (e4c <spi_enable_phys+0xb4>)
     dd2:	468c      	mov	ip, r1
     dd4:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     dd6:	211f      	movs	r1, #31
     dd8:	4011      	ands	r1, r2
     dda:	2201      	movs	r2, #1
     ddc:	0010      	movs	r0, r2
     dde:	4088      	lsls	r0, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     de0:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
     de2:	ac02      	add	r4, sp, #8
     de4:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     de6:	2300      	movs	r3, #0
     de8:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     dea:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     dec:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     dee:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     df0:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
     df2:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
     df4:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
     df6:	3223      	adds	r2, #35	; 0x23
     df8:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     dfa:	3a18      	subs	r2, #24
     dfc:	2100      	movs	r1, #0
     dfe:	a808      	add	r0, sp, #32
     e00:	4b13      	ldr	r3, [pc, #76]	; (e50 <spi_enable_phys+0xb8>)
     e02:	4798      	blx	r3
	/* Configure, initialize and enable SERCOM SPI module */
	//! [conf_defaults]
	spi_get_config_defaults(&config_spi_master);
	//! [conf_defaults]
	//! [set_baudrate]
	config_spi_master.mode_specific.master.baudrate = 4000000;
     e04:	4b13      	ldr	r3, [pc, #76]	; (e54 <spi_enable_phys+0xbc>)
     e06:	61a3      	str	r3, [r4, #24]
	//! [set_baudrate]
	//! [mux_setting]
	config_spi_master.mux_setting = EXT3_SPI_SERCOM_MUX_SETTING;
     e08:	2380      	movs	r3, #128	; 0x80
     e0a:	025b      	lsls	r3, r3, #9
     e0c:	60e3      	str	r3, [r4, #12]
	//! [mux_setting]
	/* Configure pad 0 for data in */
	//! [di]
	config_spi_master.pinmux_pad0 = EXT3_SPI_SERCOM_PINMUX_PAD0;
     e0e:	4b12      	ldr	r3, [pc, #72]	; (e58 <spi_enable_phys+0xc0>)
     e10:	62a3      	str	r3, [r4, #40]	; 0x28
	//! [di]
	/* Configure pad 1 as unused */
	//! [ss]
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
     e12:	2301      	movs	r3, #1
     e14:	425b      	negs	r3, r3
     e16:	62e3      	str	r3, [r4, #44]	; 0x2c
	//! [ss]
	/* Configure pad 2 for data out */
	//! [do]
	config_spi_master.pinmux_pad2 = EXT3_SPI_SERCOM_PINMUX_PAD2;
     e18:	4b10      	ldr	r3, [pc, #64]	; (e5c <spi_enable_phys+0xc4>)
     e1a:	6323      	str	r3, [r4, #48]	; 0x30
	//! [do]
	/* Configure pad 3 for SCK */
	//! [sck]
	config_spi_master.pinmux_pad3 = EXT3_SPI_SERCOM_PINMUX_PAD3;
     e1c:	4b10      	ldr	r3, [pc, #64]	; (e60 <spi_enable_phys+0xc8>)
     e1e:	6363      	str	r3, [r4, #52]	; 0x34
	//! [sck]
	//! [init]
	spi_init(&spi_master_instance, EXT3_SPI_MODULE, &config_spi_master);
     e20:	4d10      	ldr	r5, [pc, #64]	; (e64 <spi_enable_phys+0xcc>)
     e22:	0022      	movs	r2, r4
     e24:	4910      	ldr	r1, [pc, #64]	; (e68 <spi_enable_phys+0xd0>)
     e26:	0028      	movs	r0, r5
     e28:	4b10      	ldr	r3, [pc, #64]	; (e6c <spi_enable_phys+0xd4>)
     e2a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     e2c:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     e2e:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     e30:	2b00      	cmp	r3, #0
     e32:	d1fc      	bne.n	e2e <spi_enable_phys+0x96>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     e34:	6813      	ldr	r3, [r2, #0]
     e36:	2102      	movs	r1, #2
     e38:	430b      	orrs	r3, r1
     e3a:	6013      	str	r3, [r2, #0]
	//! [init]

	//! [enable]
	spi_enable(&spi_master_instance);
	//! [enable]
}
     e3c:	b011      	add	sp, #68	; 0x44
     e3e:	bd30      	pop	{r4, r5, pc}
     e40:	20000210 	.word	0x20000210
     e44:	200003c4 	.word	0x200003c4
     e48:	00000181 	.word	0x00000181
     e4c:	41004400 	.word	0x41004400
     e50:	000025fd 	.word	0x000025fd
     e54:	003d0900 	.word	0x003d0900
     e58:	00300002 	.word	0x00300002
     e5c:	00360003 	.word	0x00360003
     e60:	00370003 	.word	0x00370003
     e64:	200003b8 	.word	0x200003b8
     e68:	42001c00 	.word	0x42001c00
     e6c:	000012e5 	.word	0x000012e5

00000e70 <spi_send_bytes>:
 * \param[in] count number of bytes to send
 * \param[in] data pointer to tx buffer
 * \return status of the operation
 */
uint8_t spi_send_bytes(uint8_t count, uint8_t *data)
{
     e70:	b510      	push	{r4, lr}
	uint8_t ret_code = SPI_FUNCTION_RETCODE_SUCCESS;


	ret_code = spi_write_buffer_wait(&spi_master_instance, data, count);
     e72:	b282      	uxth	r2, r0
     e74:	4805      	ldr	r0, [pc, #20]	; (e8c <spi_send_bytes+0x1c>)
     e76:	4b06      	ldr	r3, [pc, #24]	; (e90 <spi_send_bytes+0x20>)
     e78:	4798      	blx	r3
		
	if (ret_code == STATUS_ERR_TIMEOUT)
     e7a:	2812      	cmp	r0, #18
     e7c:	d003      	beq.n	e86 <spi_send_bytes+0x16>
	{
		return SPI_FUNCTION_RETCODE_TIMEOUT;
	}
	else if (ret_code != STATUS_OK)
     e7e:	2800      	cmp	r0, #0
     e80:	d002      	beq.n	e88 <spi_send_bytes+0x18>
	{
		return SPI_FUNCTION_RETCODE_COMM_FAIL;
     e82:	20f0      	movs	r0, #240	; 0xf0
     e84:	e000      	b.n	e88 <spi_send_bytes+0x18>
		return SPI_FUNCTION_RETCODE_TIMEOUT;
     e86:	20f1      	movs	r0, #241	; 0xf1
	}
	else
	{
		return SPI_FUNCTION_RETCODE_SUCCESS;	
	}
}
     e88:	bd10      	pop	{r4, pc}
     e8a:	46c0      	nop			; (mov r8, r8)
     e8c:	200003b8 	.word	0x200003b8
     e90:	00001831 	.word	0x00001831

00000e94 <spi_receive_bytes>:
 * \param[in] count number of bytes to receive
 * \param[in] data pointer to rx buffer
 * \return status of the operation
 */
uint8_t spi_receive_bytes(uint8_t count, uint8_t *data)
{
     e94:	b510      	push	{r4, lr}
	uint8_t ret_code = SPI_FUNCTION_RETCODE_SUCCESS;


	ret_code = spi_read_buffer_wait(&spi_master_instance, data, count,0xFF);
     e96:	b282      	uxth	r2, r0
     e98:	23ff      	movs	r3, #255	; 0xff
     e9a:	4805      	ldr	r0, [pc, #20]	; (eb0 <spi_receive_bytes+0x1c>)
     e9c:	4c05      	ldr	r4, [pc, #20]	; (eb4 <spi_receive_bytes+0x20>)
     e9e:	47a0      	blx	r4
	
	if (ret_code == STATUS_ERR_TIMEOUT)
     ea0:	2812      	cmp	r0, #18
     ea2:	d003      	beq.n	eac <spi_receive_bytes+0x18>
	{
		return SPI_FUNCTION_RETCODE_TIMEOUT;
	}
	else if (ret_code != STATUS_OK)
     ea4:	2800      	cmp	r0, #0
     ea6:	d002      	beq.n	eae <spi_receive_bytes+0x1a>
	{
		return SPI_FUNCTION_RETCODE_COMM_FAIL;
     ea8:	20f0      	movs	r0, #240	; 0xf0
     eaa:	e000      	b.n	eae <spi_receive_bytes+0x1a>
		return SPI_FUNCTION_RETCODE_TIMEOUT;
     eac:	20f1      	movs	r0, #241	; 0xf1
	}
	else
	{
		return SPI_FUNCTION_RETCODE_SUCCESS;
	}
     eae:	bd10      	pop	{r4, pc}
     eb0:	200003b8 	.word	0x200003b8
     eb4:	00001619 	.word	0x00001619

00000eb8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
     eba:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
     ebc:	ac01      	add	r4, sp, #4
     ebe:	2501      	movs	r5, #1
     ec0:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     ec2:	2700      	movs	r7, #0
     ec4:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     ec6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     ec8:	0021      	movs	r1, r4
     eca:	203e      	movs	r0, #62	; 0x3e
     ecc:	4e06      	ldr	r6, [pc, #24]	; (ee8 <system_board_init+0x30>)
     ece:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
     ed0:	2280      	movs	r2, #128	; 0x80
     ed2:	05d2      	lsls	r2, r2, #23
     ed4:	4b05      	ldr	r3, [pc, #20]	; (eec <system_board_init+0x34>)
     ed6:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     ed8:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     eda:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     edc:	0021      	movs	r1, r4
     ede:	200f      	movs	r0, #15
     ee0:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     ee2:	b003      	add	sp, #12
     ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ee6:	46c0      	nop			; (mov r8, r8)
     ee8:	00000181 	.word	0x00000181
     eec:	41004480 	.word	0x41004480

00000ef0 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     ef0:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     ef2:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     ef4:	2340      	movs	r3, #64	; 0x40
     ef6:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     ef8:	4281      	cmp	r1, r0
     efa:	d202      	bcs.n	f02 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     efc:	0018      	movs	r0, r3
     efe:	bd10      	pop	{r4, pc}
		baud_calculated++;
     f00:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     f02:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     f04:	1c63      	adds	r3, r4, #1
     f06:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     f08:	4288      	cmp	r0, r1
     f0a:	d9f9      	bls.n	f00 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     f0c:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     f0e:	2cff      	cmp	r4, #255	; 0xff
     f10:	d8f4      	bhi.n	efc <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     f12:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     f14:	2300      	movs	r3, #0
     f16:	e7f1      	b.n	efc <_sercom_get_sync_baud_val+0xc>

00000f18 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     f18:	b5f0      	push	{r4, r5, r6, r7, lr}
     f1a:	46de      	mov	lr, fp
     f1c:	4657      	mov	r7, sl
     f1e:	464e      	mov	r6, r9
     f20:	4645      	mov	r5, r8
     f22:	b5e0      	push	{r5, r6, r7, lr}
     f24:	b089      	sub	sp, #36	; 0x24
     f26:	000c      	movs	r4, r1
     f28:	9205      	str	r2, [sp, #20]
     f2a:	aa12      	add	r2, sp, #72	; 0x48
     f2c:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     f2e:	0005      	movs	r5, r0
     f30:	434d      	muls	r5, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     f32:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     f34:	42a5      	cmp	r5, r4
     f36:	d907      	bls.n	f48 <_sercom_get_async_baud_val+0x30>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     f38:	0010      	movs	r0, r2
     f3a:	b009      	add	sp, #36	; 0x24
     f3c:	bc3c      	pop	{r2, r3, r4, r5}
     f3e:	4690      	mov	r8, r2
     f40:	4699      	mov	r9, r3
     f42:	46a2      	mov	sl, r4
     f44:	46ab      	mov	fp, r5
     f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     f48:	2b00      	cmp	r3, #0
     f4a:	d155      	bne.n	ff8 <_sercom_get_async_baud_val+0xe0>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     f4c:	0002      	movs	r2, r0
     f4e:	0008      	movs	r0, r1
     f50:	2100      	movs	r1, #0
     f52:	4d63      	ldr	r5, [pc, #396]	; (10e0 <_sercom_get_async_baud_val+0x1c8>)
     f54:	47a8      	blx	r5
     f56:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     f58:	0026      	movs	r6, r4
     f5a:	2700      	movs	r7, #0
	uint64_t q = 0, r = 0, bit_shift;
     f5c:	2300      	movs	r3, #0
     f5e:	2400      	movs	r4, #0
     f60:	9300      	str	r3, [sp, #0]
     f62:	9401      	str	r4, [sp, #4]
     f64:	2200      	movs	r2, #0
     f66:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     f68:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     f6a:	2120      	movs	r1, #32
     f6c:	468c      	mov	ip, r1
     f6e:	391f      	subs	r1, #31
     f70:	9602      	str	r6, [sp, #8]
     f72:	9703      	str	r7, [sp, #12]
     f74:	e014      	b.n	fa0 <_sercom_get_async_baud_val+0x88>
     f76:	4664      	mov	r4, ip
     f78:	1a24      	subs	r4, r4, r0
     f7a:	000d      	movs	r5, r1
     f7c:	40e5      	lsrs	r5, r4
     f7e:	46a8      	mov	r8, r5
     f80:	e015      	b.n	fae <_sercom_get_async_baud_val+0x96>
			r = r - d;
     f82:	9c02      	ldr	r4, [sp, #8]
     f84:	9d03      	ldr	r5, [sp, #12]
     f86:	1b12      	subs	r2, r2, r4
     f88:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     f8a:	464d      	mov	r5, r9
     f8c:	9e00      	ldr	r6, [sp, #0]
     f8e:	9f01      	ldr	r7, [sp, #4]
     f90:	4335      	orrs	r5, r6
     f92:	003c      	movs	r4, r7
     f94:	4646      	mov	r6, r8
     f96:	4334      	orrs	r4, r6
     f98:	9500      	str	r5, [sp, #0]
     f9a:	9401      	str	r4, [sp, #4]
	for (i = 63; i >= 0; i--) {
     f9c:	3801      	subs	r0, #1
     f9e:	d31d      	bcc.n	fdc <_sercom_get_async_baud_val+0xc4>
		bit_shift = (uint64_t)1 << i;
     fa0:	2420      	movs	r4, #32
     fa2:	4264      	negs	r4, r4
     fa4:	1904      	adds	r4, r0, r4
     fa6:	d4e6      	bmi.n	f76 <_sercom_get_async_baud_val+0x5e>
     fa8:	000d      	movs	r5, r1
     faa:	40a5      	lsls	r5, r4
     fac:	46a8      	mov	r8, r5
     fae:	000c      	movs	r4, r1
     fb0:	4084      	lsls	r4, r0
     fb2:	46a1      	mov	r9, r4
		r = r << 1;
     fb4:	1892      	adds	r2, r2, r2
     fb6:	415b      	adcs	r3, r3
     fb8:	0014      	movs	r4, r2
     fba:	001d      	movs	r5, r3
		if (n & bit_shift) {
     fbc:	4646      	mov	r6, r8
     fbe:	465f      	mov	r7, fp
     fc0:	423e      	tst	r6, r7
     fc2:	d003      	beq.n	fcc <_sercom_get_async_baud_val+0xb4>
			r |= 0x01;
     fc4:	000e      	movs	r6, r1
     fc6:	4326      	orrs	r6, r4
     fc8:	0032      	movs	r2, r6
     fca:	002b      	movs	r3, r5
		if (r >= d) {
     fcc:	9c02      	ldr	r4, [sp, #8]
     fce:	9d03      	ldr	r5, [sp, #12]
     fd0:	429d      	cmp	r5, r3
     fd2:	d8e3      	bhi.n	f9c <_sercom_get_async_baud_val+0x84>
     fd4:	d1d5      	bne.n	f82 <_sercom_get_async_baud_val+0x6a>
     fd6:	4294      	cmp	r4, r2
     fd8:	d8e0      	bhi.n	f9c <_sercom_get_async_baud_val+0x84>
     fda:	e7d2      	b.n	f82 <_sercom_get_async_baud_val+0x6a>
		scale = ((uint64_t)1 << SHIFT) - ratio;
     fdc:	2200      	movs	r2, #0
     fde:	2301      	movs	r3, #1
     fe0:	9800      	ldr	r0, [sp, #0]
     fe2:	9901      	ldr	r1, [sp, #4]
     fe4:	1a12      	subs	r2, r2, r0
     fe6:	418b      	sbcs	r3, r1
     fe8:	0019      	movs	r1, r3
		baud_calculated = (65536 * scale) >> SHIFT;
     fea:	0c13      	lsrs	r3, r2, #16
     fec:	040a      	lsls	r2, r1, #16
     fee:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     ff0:	9b05      	ldr	r3, [sp, #20]
     ff2:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     ff4:	2200      	movs	r2, #0
     ff6:	e79f      	b.n	f38 <_sercom_get_async_baud_val+0x20>
	uint64_t baud_calculated = 0;
     ff8:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     ffa:	2b01      	cmp	r3, #1
     ffc:	d1f8      	bne.n	ff0 <_sercom_get_async_baud_val+0xd8>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     ffe:	0f63      	lsrs	r3, r4, #29
    1000:	9304      	str	r3, [sp, #16]
    1002:	00e3      	lsls	r3, r4, #3
    1004:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
    1006:	000a      	movs	r2, r1
    1008:	2300      	movs	r3, #0
    100a:	2100      	movs	r1, #0
    100c:	4c34      	ldr	r4, [pc, #208]	; (10e0 <_sercom_get_async_baud_val+0x1c8>)
    100e:	47a0      	blx	r4
    1010:	0004      	movs	r4, r0
    1012:	000d      	movs	r5, r1
    1014:	2300      	movs	r3, #0
    1016:	469c      	mov	ip, r3
    1018:	9306      	str	r3, [sp, #24]
		bit_shift = (uint64_t)1 << i;
    101a:	3320      	adds	r3, #32
    101c:	469b      	mov	fp, r3
    101e:	2601      	movs	r6, #1
			if(baud_int < BAUD_INT_MAX) {
    1020:	4663      	mov	r3, ip
    1022:	9307      	str	r3, [sp, #28]
    1024:	e048      	b.n	10b8 <_sercom_get_async_baud_val+0x1a0>
		bit_shift = (uint64_t)1 << i;
    1026:	4659      	mov	r1, fp
    1028:	1bc9      	subs	r1, r1, r7
    102a:	0030      	movs	r0, r6
    102c:	40c8      	lsrs	r0, r1
    102e:	4682      	mov	sl, r0
    1030:	e010      	b.n	1054 <_sercom_get_async_baud_val+0x13c>
			r = r - d;
    1032:	9800      	ldr	r0, [sp, #0]
    1034:	9901      	ldr	r1, [sp, #4]
    1036:	1a12      	subs	r2, r2, r0
    1038:	418b      	sbcs	r3, r1
			q |= bit_shift;
    103a:	9902      	ldr	r1, [sp, #8]
    103c:	4648      	mov	r0, r9
    103e:	4301      	orrs	r1, r0
    1040:	9102      	str	r1, [sp, #8]
	for (i = 63; i >= 0; i--) {
    1042:	3f01      	subs	r7, #1
    1044:	d325      	bcc.n	1092 <_sercom_get_async_baud_val+0x17a>
		bit_shift = (uint64_t)1 << i;
    1046:	2120      	movs	r1, #32
    1048:	4249      	negs	r1, r1
    104a:	1879      	adds	r1, r7, r1
    104c:	d4eb      	bmi.n	1026 <_sercom_get_async_baud_val+0x10e>
    104e:	0030      	movs	r0, r6
    1050:	4088      	lsls	r0, r1
    1052:	4682      	mov	sl, r0
    1054:	0031      	movs	r1, r6
    1056:	40b9      	lsls	r1, r7
    1058:	4689      	mov	r9, r1
		r = r << 1;
    105a:	1892      	adds	r2, r2, r2
    105c:	415b      	adcs	r3, r3
    105e:	0010      	movs	r0, r2
    1060:	0019      	movs	r1, r3
		if (n & bit_shift) {
    1062:	4644      	mov	r4, r8
    1064:	464d      	mov	r5, r9
    1066:	402c      	ands	r4, r5
    1068:	46a4      	mov	ip, r4
    106a:	4654      	mov	r4, sl
    106c:	9d04      	ldr	r5, [sp, #16]
    106e:	402c      	ands	r4, r5
    1070:	46a2      	mov	sl, r4
    1072:	4664      	mov	r4, ip
    1074:	4655      	mov	r5, sl
    1076:	432c      	orrs	r4, r5
    1078:	d003      	beq.n	1082 <_sercom_get_async_baud_val+0x16a>
			r |= 0x01;
    107a:	0034      	movs	r4, r6
    107c:	4304      	orrs	r4, r0
    107e:	0022      	movs	r2, r4
    1080:	000b      	movs	r3, r1
		if (r >= d) {
    1082:	9800      	ldr	r0, [sp, #0]
    1084:	9901      	ldr	r1, [sp, #4]
    1086:	4299      	cmp	r1, r3
    1088:	d8db      	bhi.n	1042 <_sercom_get_async_baud_val+0x12a>
    108a:	d1d2      	bne.n	1032 <_sercom_get_async_baud_val+0x11a>
    108c:	4290      	cmp	r0, r2
    108e:	d8d8      	bhi.n	1042 <_sercom_get_async_baud_val+0x12a>
    1090:	e7cf      	b.n	1032 <_sercom_get_async_baud_val+0x11a>
    1092:	9c00      	ldr	r4, [sp, #0]
    1094:	9d01      	ldr	r5, [sp, #4]
			baud_int -= baud_fp;
    1096:	9902      	ldr	r1, [sp, #8]
    1098:	9a07      	ldr	r2, [sp, #28]
    109a:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
    109c:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
    109e:	4911      	ldr	r1, [pc, #68]	; (10e4 <_sercom_get_async_baud_val+0x1cc>)
    10a0:	428b      	cmp	r3, r1
    10a2:	d914      	bls.n	10ce <_sercom_get_async_baud_val+0x1b6>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    10a4:	9b06      	ldr	r3, [sp, #24]
    10a6:	3301      	adds	r3, #1
    10a8:	b2db      	uxtb	r3, r3
    10aa:	0019      	movs	r1, r3
    10ac:	9306      	str	r3, [sp, #24]
    10ae:	0013      	movs	r3, r2
    10b0:	3301      	adds	r3, #1
    10b2:	9307      	str	r3, [sp, #28]
    10b4:	2908      	cmp	r1, #8
    10b6:	d008      	beq.n	10ca <_sercom_get_async_baud_val+0x1b2>
	uint64_t q = 0, r = 0, bit_shift;
    10b8:	2300      	movs	r3, #0
    10ba:	9302      	str	r3, [sp, #8]
    10bc:	2200      	movs	r2, #0
    10be:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    10c0:	213f      	movs	r1, #63	; 0x3f
    10c2:	9400      	str	r4, [sp, #0]
    10c4:	9501      	str	r5, [sp, #4]
    10c6:	000f      	movs	r7, r1
    10c8:	e7bd      	b.n	1046 <_sercom_get_async_baud_val+0x12e>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    10ca:	2240      	movs	r2, #64	; 0x40
    10cc:	e734      	b.n	f38 <_sercom_get_async_baud_val+0x20>
    10ce:	2240      	movs	r2, #64	; 0x40
		if(baud_fp == BAUD_FP_MAX) {
    10d0:	9906      	ldr	r1, [sp, #24]
    10d2:	2908      	cmp	r1, #8
    10d4:	d100      	bne.n	10d8 <_sercom_get_async_baud_val+0x1c0>
    10d6:	e72f      	b.n	f38 <_sercom_get_async_baud_val+0x20>
		baud_calculated = baud_int | (baud_fp << 13);
    10d8:	034a      	lsls	r2, r1, #13
    10da:	431a      	orrs	r2, r3
    10dc:	e788      	b.n	ff0 <_sercom_get_async_baud_val+0xd8>
    10de:	46c0      	nop			; (mov r8, r8)
    10e0:	00002531 	.word	0x00002531
    10e4:	00001fff 	.word	0x00001fff

000010e8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    10e8:	b510      	push	{r4, lr}
    10ea:	b082      	sub	sp, #8
    10ec:	0004      	movs	r4, r0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
    10ee:	4b0e      	ldr	r3, [pc, #56]	; (1128 <sercom_set_gclk_generator+0x40>)
    10f0:	781b      	ldrb	r3, [r3, #0]
    10f2:	2b00      	cmp	r3, #0
    10f4:	d007      	beq.n	1106 <sercom_set_gclk_generator+0x1e>
    10f6:	2900      	cmp	r1, #0
    10f8:	d105      	bne.n	1106 <sercom_set_gclk_generator+0x1e>
		/* Save config. */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    10fa:	4b0b      	ldr	r3, [pc, #44]	; (1128 <sercom_set_gclk_generator+0x40>)
    10fc:	785b      	ldrb	r3, [r3, #1]
    10fe:	4283      	cmp	r3, r0
    1100:	d010      	beq.n	1124 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1102:	201d      	movs	r0, #29
    1104:	e00c      	b.n	1120 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1106:	a901      	add	r1, sp, #4
    1108:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    110a:	2013      	movs	r0, #19
    110c:	4b07      	ldr	r3, [pc, #28]	; (112c <sercom_set_gclk_generator+0x44>)
    110e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1110:	2013      	movs	r0, #19
    1112:	4b07      	ldr	r3, [pc, #28]	; (1130 <sercom_set_gclk_generator+0x48>)
    1114:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1116:	4b04      	ldr	r3, [pc, #16]	; (1128 <sercom_set_gclk_generator+0x40>)
    1118:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    111a:	2201      	movs	r2, #1
    111c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    111e:	2000      	movs	r0, #0
}
    1120:	b002      	add	sp, #8
    1122:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1124:	2000      	movs	r0, #0
    1126:	e7fb      	b.n	1120 <sercom_set_gclk_generator+0x38>
    1128:	20000214 	.word	0x20000214
    112c:	00002225 	.word	0x00002225
    1130:	00002199 	.word	0x00002199

00001134 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1134:	4b40      	ldr	r3, [pc, #256]	; (1238 <_sercom_get_default_pad+0x104>)
    1136:	4298      	cmp	r0, r3
    1138:	d031      	beq.n	119e <_sercom_get_default_pad+0x6a>
    113a:	d90a      	bls.n	1152 <_sercom_get_default_pad+0x1e>
    113c:	4b3f      	ldr	r3, [pc, #252]	; (123c <_sercom_get_default_pad+0x108>)
    113e:	4298      	cmp	r0, r3
    1140:	d04d      	beq.n	11de <_sercom_get_default_pad+0xaa>
    1142:	4b3f      	ldr	r3, [pc, #252]	; (1240 <_sercom_get_default_pad+0x10c>)
    1144:	4298      	cmp	r0, r3
    1146:	d05a      	beq.n	11fe <_sercom_get_default_pad+0xca>
    1148:	4b3e      	ldr	r3, [pc, #248]	; (1244 <_sercom_get_default_pad+0x110>)
    114a:	4298      	cmp	r0, r3
    114c:	d037      	beq.n	11be <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    114e:	2000      	movs	r0, #0
}
    1150:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1152:	4b3d      	ldr	r3, [pc, #244]	; (1248 <_sercom_get_default_pad+0x114>)
    1154:	4298      	cmp	r0, r3
    1156:	d00c      	beq.n	1172 <_sercom_get_default_pad+0x3e>
    1158:	4b3c      	ldr	r3, [pc, #240]	; (124c <_sercom_get_default_pad+0x118>)
    115a:	4298      	cmp	r0, r3
    115c:	d1f7      	bne.n	114e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    115e:	2901      	cmp	r1, #1
    1160:	d017      	beq.n	1192 <_sercom_get_default_pad+0x5e>
    1162:	2900      	cmp	r1, #0
    1164:	d05d      	beq.n	1222 <_sercom_get_default_pad+0xee>
    1166:	2902      	cmp	r1, #2
    1168:	d015      	beq.n	1196 <_sercom_get_default_pad+0x62>
    116a:	2903      	cmp	r1, #3
    116c:	d015      	beq.n	119a <_sercom_get_default_pad+0x66>
	return 0;
    116e:	2000      	movs	r0, #0
    1170:	e7ee      	b.n	1150 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1172:	2901      	cmp	r1, #1
    1174:	d007      	beq.n	1186 <_sercom_get_default_pad+0x52>
    1176:	2900      	cmp	r1, #0
    1178:	d051      	beq.n	121e <_sercom_get_default_pad+0xea>
    117a:	2902      	cmp	r1, #2
    117c:	d005      	beq.n	118a <_sercom_get_default_pad+0x56>
    117e:	2903      	cmp	r1, #3
    1180:	d005      	beq.n	118e <_sercom_get_default_pad+0x5a>
	return 0;
    1182:	2000      	movs	r0, #0
    1184:	e7e4      	b.n	1150 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1186:	4832      	ldr	r0, [pc, #200]	; (1250 <_sercom_get_default_pad+0x11c>)
    1188:	e7e2      	b.n	1150 <_sercom_get_default_pad+0x1c>
    118a:	4832      	ldr	r0, [pc, #200]	; (1254 <_sercom_get_default_pad+0x120>)
    118c:	e7e0      	b.n	1150 <_sercom_get_default_pad+0x1c>
    118e:	4832      	ldr	r0, [pc, #200]	; (1258 <_sercom_get_default_pad+0x124>)
    1190:	e7de      	b.n	1150 <_sercom_get_default_pad+0x1c>
    1192:	4832      	ldr	r0, [pc, #200]	; (125c <_sercom_get_default_pad+0x128>)
    1194:	e7dc      	b.n	1150 <_sercom_get_default_pad+0x1c>
    1196:	4832      	ldr	r0, [pc, #200]	; (1260 <_sercom_get_default_pad+0x12c>)
    1198:	e7da      	b.n	1150 <_sercom_get_default_pad+0x1c>
    119a:	4832      	ldr	r0, [pc, #200]	; (1264 <_sercom_get_default_pad+0x130>)
    119c:	e7d8      	b.n	1150 <_sercom_get_default_pad+0x1c>
    119e:	2901      	cmp	r1, #1
    11a0:	d007      	beq.n	11b2 <_sercom_get_default_pad+0x7e>
    11a2:	2900      	cmp	r1, #0
    11a4:	d03f      	beq.n	1226 <_sercom_get_default_pad+0xf2>
    11a6:	2902      	cmp	r1, #2
    11a8:	d005      	beq.n	11b6 <_sercom_get_default_pad+0x82>
    11aa:	2903      	cmp	r1, #3
    11ac:	d005      	beq.n	11ba <_sercom_get_default_pad+0x86>
	return 0;
    11ae:	2000      	movs	r0, #0
    11b0:	e7ce      	b.n	1150 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    11b2:	482d      	ldr	r0, [pc, #180]	; (1268 <_sercom_get_default_pad+0x134>)
    11b4:	e7cc      	b.n	1150 <_sercom_get_default_pad+0x1c>
    11b6:	482d      	ldr	r0, [pc, #180]	; (126c <_sercom_get_default_pad+0x138>)
    11b8:	e7ca      	b.n	1150 <_sercom_get_default_pad+0x1c>
    11ba:	482d      	ldr	r0, [pc, #180]	; (1270 <_sercom_get_default_pad+0x13c>)
    11bc:	e7c8      	b.n	1150 <_sercom_get_default_pad+0x1c>
    11be:	2901      	cmp	r1, #1
    11c0:	d007      	beq.n	11d2 <_sercom_get_default_pad+0x9e>
    11c2:	2900      	cmp	r1, #0
    11c4:	d031      	beq.n	122a <_sercom_get_default_pad+0xf6>
    11c6:	2902      	cmp	r1, #2
    11c8:	d005      	beq.n	11d6 <_sercom_get_default_pad+0xa2>
    11ca:	2903      	cmp	r1, #3
    11cc:	d005      	beq.n	11da <_sercom_get_default_pad+0xa6>
	return 0;
    11ce:	2000      	movs	r0, #0
    11d0:	e7be      	b.n	1150 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    11d2:	4828      	ldr	r0, [pc, #160]	; (1274 <_sercom_get_default_pad+0x140>)
    11d4:	e7bc      	b.n	1150 <_sercom_get_default_pad+0x1c>
    11d6:	4828      	ldr	r0, [pc, #160]	; (1278 <_sercom_get_default_pad+0x144>)
    11d8:	e7ba      	b.n	1150 <_sercom_get_default_pad+0x1c>
    11da:	4828      	ldr	r0, [pc, #160]	; (127c <_sercom_get_default_pad+0x148>)
    11dc:	e7b8      	b.n	1150 <_sercom_get_default_pad+0x1c>
    11de:	2901      	cmp	r1, #1
    11e0:	d007      	beq.n	11f2 <_sercom_get_default_pad+0xbe>
    11e2:	2900      	cmp	r1, #0
    11e4:	d023      	beq.n	122e <_sercom_get_default_pad+0xfa>
    11e6:	2902      	cmp	r1, #2
    11e8:	d005      	beq.n	11f6 <_sercom_get_default_pad+0xc2>
    11ea:	2903      	cmp	r1, #3
    11ec:	d005      	beq.n	11fa <_sercom_get_default_pad+0xc6>
	return 0;
    11ee:	2000      	movs	r0, #0
    11f0:	e7ae      	b.n	1150 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    11f2:	4823      	ldr	r0, [pc, #140]	; (1280 <_sercom_get_default_pad+0x14c>)
    11f4:	e7ac      	b.n	1150 <_sercom_get_default_pad+0x1c>
    11f6:	4823      	ldr	r0, [pc, #140]	; (1284 <_sercom_get_default_pad+0x150>)
    11f8:	e7aa      	b.n	1150 <_sercom_get_default_pad+0x1c>
    11fa:	4823      	ldr	r0, [pc, #140]	; (1288 <_sercom_get_default_pad+0x154>)
    11fc:	e7a8      	b.n	1150 <_sercom_get_default_pad+0x1c>
    11fe:	2901      	cmp	r1, #1
    1200:	d007      	beq.n	1212 <_sercom_get_default_pad+0xde>
    1202:	2900      	cmp	r1, #0
    1204:	d015      	beq.n	1232 <_sercom_get_default_pad+0xfe>
    1206:	2902      	cmp	r1, #2
    1208:	d005      	beq.n	1216 <_sercom_get_default_pad+0xe2>
    120a:	2903      	cmp	r1, #3
    120c:	d005      	beq.n	121a <_sercom_get_default_pad+0xe6>
	return 0;
    120e:	2000      	movs	r0, #0
    1210:	e79e      	b.n	1150 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1212:	481e      	ldr	r0, [pc, #120]	; (128c <_sercom_get_default_pad+0x158>)
    1214:	e79c      	b.n	1150 <_sercom_get_default_pad+0x1c>
    1216:	481e      	ldr	r0, [pc, #120]	; (1290 <_sercom_get_default_pad+0x15c>)
    1218:	e79a      	b.n	1150 <_sercom_get_default_pad+0x1c>
    121a:	481e      	ldr	r0, [pc, #120]	; (1294 <_sercom_get_default_pad+0x160>)
    121c:	e798      	b.n	1150 <_sercom_get_default_pad+0x1c>
    121e:	481e      	ldr	r0, [pc, #120]	; (1298 <_sercom_get_default_pad+0x164>)
    1220:	e796      	b.n	1150 <_sercom_get_default_pad+0x1c>
    1222:	2003      	movs	r0, #3
    1224:	e794      	b.n	1150 <_sercom_get_default_pad+0x1c>
    1226:	481d      	ldr	r0, [pc, #116]	; (129c <_sercom_get_default_pad+0x168>)
    1228:	e792      	b.n	1150 <_sercom_get_default_pad+0x1c>
    122a:	481d      	ldr	r0, [pc, #116]	; (12a0 <_sercom_get_default_pad+0x16c>)
    122c:	e790      	b.n	1150 <_sercom_get_default_pad+0x1c>
    122e:	481d      	ldr	r0, [pc, #116]	; (12a4 <_sercom_get_default_pad+0x170>)
    1230:	e78e      	b.n	1150 <_sercom_get_default_pad+0x1c>
    1232:	481d      	ldr	r0, [pc, #116]	; (12a8 <_sercom_get_default_pad+0x174>)
    1234:	e78c      	b.n	1150 <_sercom_get_default_pad+0x1c>
    1236:	46c0      	nop			; (mov r8, r8)
    1238:	42001000 	.word	0x42001000
    123c:	42001800 	.word	0x42001800
    1240:	42001c00 	.word	0x42001c00
    1244:	42001400 	.word	0x42001400
    1248:	42000800 	.word	0x42000800
    124c:	42000c00 	.word	0x42000c00
    1250:	00050003 	.word	0x00050003
    1254:	00060003 	.word	0x00060003
    1258:	00070003 	.word	0x00070003
    125c:	00010003 	.word	0x00010003
    1260:	001e0003 	.word	0x001e0003
    1264:	001f0003 	.word	0x001f0003
    1268:	00090003 	.word	0x00090003
    126c:	000a0003 	.word	0x000a0003
    1270:	000b0003 	.word	0x000b0003
    1274:	00110003 	.word	0x00110003
    1278:	00120003 	.word	0x00120003
    127c:	00130003 	.word	0x00130003
    1280:	000d0003 	.word	0x000d0003
    1284:	000e0003 	.word	0x000e0003
    1288:	000f0003 	.word	0x000f0003
    128c:	00170003 	.word	0x00170003
    1290:	00180003 	.word	0x00180003
    1294:	00190003 	.word	0x00190003
    1298:	00040003 	.word	0x00040003
    129c:	00080003 	.word	0x00080003
    12a0:	00100003 	.word	0x00100003
    12a4:	000c0003 	.word	0x000c0003
    12a8:	00160003 	.word	0x00160003

000012ac <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    12ac:	b530      	push	{r4, r5, lr}
    12ae:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    12b0:	4b0b      	ldr	r3, [pc, #44]	; (12e0 <_sercom_get_sercom_inst_index+0x34>)
    12b2:	466a      	mov	r2, sp
    12b4:	cb32      	ldmia	r3!, {r1, r4, r5}
    12b6:	c232      	stmia	r2!, {r1, r4, r5}
    12b8:	cb32      	ldmia	r3!, {r1, r4, r5}
    12ba:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    12bc:	9b00      	ldr	r3, [sp, #0]
    12be:	4283      	cmp	r3, r0
    12c0:	d00b      	beq.n	12da <_sercom_get_sercom_inst_index+0x2e>
    12c2:	2301      	movs	r3, #1
    12c4:	009a      	lsls	r2, r3, #2
    12c6:	4669      	mov	r1, sp
    12c8:	5852      	ldr	r2, [r2, r1]
    12ca:	4282      	cmp	r2, r0
    12cc:	d006      	beq.n	12dc <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    12ce:	3301      	adds	r3, #1
    12d0:	2b06      	cmp	r3, #6
    12d2:	d1f7      	bne.n	12c4 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    12d4:	2000      	movs	r0, #0
}
    12d6:	b007      	add	sp, #28
    12d8:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    12da:	2300      	movs	r3, #0
			return i;
    12dc:	b2d8      	uxtb	r0, r3
    12de:	e7fa      	b.n	12d6 <_sercom_get_sercom_inst_index+0x2a>
    12e0:	0000457c 	.word	0x0000457c

000012e4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    12e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    12e6:	46d6      	mov	lr, sl
    12e8:	464f      	mov	r7, r9
    12ea:	b580      	push	{r7, lr}
    12ec:	b08b      	sub	sp, #44	; 0x2c
    12ee:	4681      	mov	r9, r0
    12f0:	000f      	movs	r7, r1
    12f2:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    12f4:	0003      	movs	r3, r0
    12f6:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    12f8:	680b      	ldr	r3, [r1, #0]
    12fa:	079b      	lsls	r3, r3, #30
    12fc:	d409      	bmi.n	1312 <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    12fe:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    1300:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1302:	07db      	lsls	r3, r3, #31
    1304:	d400      	bmi.n	1308 <spi_init+0x24>
    1306:	e0b1      	b.n	146c <spi_init+0x188>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    1308:	b00b      	add	sp, #44	; 0x2c
    130a:	bc0c      	pop	{r2, r3}
    130c:	4691      	mov	r9, r2
    130e:	469a      	mov	sl, r3
    1310:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    1312:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1314:	9305      	str	r3, [sp, #20]
    1316:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1318:	9306      	str	r3, [sp, #24]
    131a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    131c:	9307      	str	r3, [sp, #28]
    131e:	6b53      	ldr	r3, [r2, #52]	; 0x34
    1320:	9308      	str	r3, [sp, #32]
    1322:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1324:	ab05      	add	r3, sp, #20
    1326:	9301      	str	r3, [sp, #4]
    1328:	e00a      	b.n	1340 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    132a:	0038      	movs	r0, r7
    132c:	4baf      	ldr	r3, [pc, #700]	; (15ec <spi_init+0x308>)
    132e:	4798      	blx	r3
    1330:	e00c      	b.n	134c <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    1332:	230f      	movs	r3, #15
    1334:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    1336:	4281      	cmp	r1, r0
    1338:	d12d      	bne.n	1396 <spi_init+0xb2>
    133a:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    133c:	2e04      	cmp	r6, #4
    133e:	d02f      	beq.n	13a0 <spi_init+0xbc>
    1340:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1342:	00b3      	lsls	r3, r6, #2
    1344:	9a01      	ldr	r2, [sp, #4]
    1346:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    1348:	2800      	cmp	r0, #0
    134a:	d0ee      	beq.n	132a <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
    134c:	1c43      	adds	r3, r0, #1
    134e:	d0f4      	beq.n	133a <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
    1350:	0401      	lsls	r1, r0, #16
    1352:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    1354:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    1356:	b2c3      	uxtb	r3, r0
    1358:	469c      	mov	ip, r3
		return NULL;
    135a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    135c:	0602      	lsls	r2, r0, #24
    135e:	d405      	bmi.n	136c <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
    1360:	4663      	mov	r3, ip
    1362:	095b      	lsrs	r3, r3, #5
    1364:	01db      	lsls	r3, r3, #7
    1366:	4aa2      	ldr	r2, [pc, #648]	; (15f0 <spi_init+0x30c>)
    1368:	4692      	mov	sl, r2
    136a:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
    136c:	221f      	movs	r2, #31
    136e:	4660      	mov	r0, ip
    1370:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    1372:	1898      	adds	r0, r3, r2
    1374:	3040      	adds	r0, #64	; 0x40
    1376:	7800      	ldrb	r0, [r0, #0]
    1378:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    137a:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    137c:	4655      	mov	r5, sl
    137e:	07ed      	lsls	r5, r5, #31
    1380:	d5d9      	bpl.n	1336 <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    1382:	0852      	lsrs	r2, r2, #1
    1384:	189b      	adds	r3, r3, r2
    1386:	3330      	adds	r3, #48	; 0x30
    1388:	7818      	ldrb	r0, [r3, #0]
    138a:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    138c:	4663      	mov	r3, ip
    138e:	07db      	lsls	r3, r3, #31
    1390:	d5cf      	bpl.n	1332 <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    1392:	0900      	lsrs	r0, r0, #4
    1394:	e7cf      	b.n	1336 <spi_init+0x52>
			module->hw = NULL;
    1396:	2300      	movs	r3, #0
    1398:	464a      	mov	r2, r9
    139a:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
    139c:	201c      	movs	r0, #28
    139e:	e7b3      	b.n	1308 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    13a0:	2013      	movs	r0, #19
    13a2:	4b94      	ldr	r3, [pc, #592]	; (15f4 <spi_init+0x310>)
    13a4:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    13a6:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    13a8:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    13aa:	2a01      	cmp	r2, #1
    13ac:	d016      	beq.n	13dc <spi_init+0xf8>
	if (config->mode == SPI_MODE_SLAVE) {
    13ae:	7821      	ldrb	r1, [r4, #0]
    13b0:	2900      	cmp	r1, #0
    13b2:	d127      	bne.n	1404 <spi_init+0x120>
		if (spi_module->CTRLA.reg != addr) {
    13b4:	683b      	ldr	r3, [r7, #0]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    13b6:	7fe2      	ldrb	r2, [r4, #31]
    13b8:	0412      	lsls	r2, r2, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    13ba:	7fa0      	ldrb	r0, [r4, #30]
    13bc:	4302      	orrs	r2, r0
			return STATUS_ERR_DENIED;
    13be:	201c      	movs	r0, #28
		if (spi_module->CTRLA.reg != addr) {
    13c0:	429a      	cmp	r2, r3
    13c2:	d1a1      	bne.n	1308 <spi_init+0x24>
		ctrla |= config->mode_specific.slave.frame_format;
    13c4:	69a3      	ldr	r3, [r4, #24]
		ctrlb |= config->mode_specific.slave.address_mode;
    13c6:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
    13c8:	3004      	adds	r0, #4
    13ca:	5c20      	ldrb	r0, [r4, r0]
    13cc:	2800      	cmp	r0, #0
    13ce:	d001      	beq.n	13d4 <spi_init+0xf0>
    13d0:	2040      	movs	r0, #64	; 0x40
    13d2:	4302      	orrs	r2, r0
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    13d4:	2008      	movs	r0, #8
    13d6:	4303      	orrs	r3, r0
    13d8:	431d      	orrs	r5, r3
    13da:	e014      	b.n	1406 <spi_init+0x122>
		enum status_code error_code = _sercom_get_sync_baud_val(
    13dc:	aa04      	add	r2, sp, #16
    13de:	0001      	movs	r1, r0
    13e0:	69a0      	ldr	r0, [r4, #24]
    13e2:	4b85      	ldr	r3, [pc, #532]	; (15f8 <spi_init+0x314>)
    13e4:	4798      	blx	r3
    13e6:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    13e8:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    13ea:	2b00      	cmp	r3, #0
    13ec:	d000      	beq.n	13f0 <spi_init+0x10c>
    13ee:	e78b      	b.n	1308 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    13f0:	7b3b      	ldrb	r3, [r7, #12]
    13f2:	b2db      	uxtb	r3, r3
    13f4:	aa04      	add	r2, sp, #16
    13f6:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    13f8:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    13fa:	429a      	cmp	r2, r3
    13fc:	d000      	beq.n	1400 <spi_init+0x11c>
    13fe:	e783      	b.n	1308 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    1400:	350c      	adds	r5, #12
    1402:	e7d4      	b.n	13ae <spi_init+0xca>
	uint32_t ctrlb = 0;
    1404:	2200      	movs	r2, #0
	ctrla |= config->mux_setting;
    1406:	6863      	ldr	r3, [r4, #4]
    1408:	68a0      	ldr	r0, [r4, #8]
    140a:	4303      	orrs	r3, r0
    140c:	68e0      	ldr	r0, [r4, #12]
    140e:	4303      	orrs	r3, r0
    1410:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    1412:	7c20      	ldrb	r0, [r4, #16]
    1414:	4302      	orrs	r2, r0
	if (config->run_in_standby) {
    1416:	7c60      	ldrb	r0, [r4, #17]
    1418:	2800      	cmp	r0, #0
    141a:	d001      	beq.n	1420 <spi_init+0x13c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    141c:	2080      	movs	r0, #128	; 0x80
    141e:	4303      	orrs	r3, r0
	if (config->receiver_enable) {
    1420:	7ca0      	ldrb	r0, [r4, #18]
    1422:	2800      	cmp	r0, #0
    1424:	d002      	beq.n	142c <spi_init+0x148>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1426:	2080      	movs	r0, #128	; 0x80
    1428:	0280      	lsls	r0, r0, #10
    142a:	4302      	orrs	r2, r0
	if (config->select_slave_low_detect_enable) {
    142c:	7ce0      	ldrb	r0, [r4, #19]
    142e:	2800      	cmp	r0, #0
    1430:	d002      	beq.n	1438 <spi_init+0x154>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1432:	2080      	movs	r0, #128	; 0x80
    1434:	0080      	lsls	r0, r0, #2
    1436:	4302      	orrs	r2, r0
	if (config->master_slave_select_enable) {
    1438:	7d20      	ldrb	r0, [r4, #20]
    143a:	2800      	cmp	r0, #0
    143c:	d002      	beq.n	1444 <spi_init+0x160>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    143e:	2080      	movs	r0, #128	; 0x80
    1440:	0180      	lsls	r0, r0, #6
    1442:	4302      	orrs	r2, r0
	if (spi_module->CTRLA.reg == ctrla &&
    1444:	6838      	ldr	r0, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    1446:	2502      	movs	r5, #2
    1448:	432b      	orrs	r3, r5
	if (spi_module->CTRLA.reg == ctrla &&
    144a:	4283      	cmp	r3, r0
    144c:	d004      	beq.n	1458 <spi_init+0x174>
	module->hw = NULL;
    144e:	2300      	movs	r3, #0
    1450:	464a      	mov	r2, r9
    1452:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
    1454:	201c      	movs	r0, #28
    1456:	e757      	b.n	1308 <spi_init+0x24>
			spi_module->CTRLB.reg == ctrlb) {
    1458:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    145a:	4293      	cmp	r3, r2
    145c:	d1f7      	bne.n	144e <spi_init+0x16a>
		module->mode           = config->mode;
    145e:	464b      	mov	r3, r9
    1460:	7159      	strb	r1, [r3, #5]
		module->character_size = config->character_size;
    1462:	7c23      	ldrb	r3, [r4, #16]
    1464:	464a      	mov	r2, r9
    1466:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    1468:	2000      	movs	r0, #0
    146a:	e74d      	b.n	1308 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    146c:	0008      	movs	r0, r1
    146e:	4b63      	ldr	r3, [pc, #396]	; (15fc <spi_init+0x318>)
    1470:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1472:	4a63      	ldr	r2, [pc, #396]	; (1600 <spi_init+0x31c>)
    1474:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1476:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1478:	2301      	movs	r3, #1
    147a:	40ab      	lsls	r3, r5
    147c:	430b      	orrs	r3, r1
    147e:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1480:	a909      	add	r1, sp, #36	; 0x24
    1482:	2624      	movs	r6, #36	; 0x24
    1484:	5da3      	ldrb	r3, [r4, r6]
    1486:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1488:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    148a:	b2c5      	uxtb	r5, r0
    148c:	0028      	movs	r0, r5
    148e:	4b5d      	ldr	r3, [pc, #372]	; (1604 <spi_init+0x320>)
    1490:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1492:	0028      	movs	r0, r5
    1494:	4b5c      	ldr	r3, [pc, #368]	; (1608 <spi_init+0x324>)
    1496:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1498:	5da0      	ldrb	r0, [r4, r6]
    149a:	2100      	movs	r1, #0
    149c:	4b5b      	ldr	r3, [pc, #364]	; (160c <spi_init+0x328>)
    149e:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    14a0:	7823      	ldrb	r3, [r4, #0]
    14a2:	2b01      	cmp	r3, #1
    14a4:	d020      	beq.n	14e8 <spi_init+0x204>
	if (config->mode == SPI_MODE_SLAVE) {
    14a6:	7823      	ldrb	r3, [r4, #0]
    14a8:	2b00      	cmp	r3, #0
    14aa:	d103      	bne.n	14b4 <spi_init+0x1d0>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    14ac:	683b      	ldr	r3, [r7, #0]
    14ae:	2208      	movs	r2, #8
    14b0:	4313      	orrs	r3, r2
    14b2:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    14b4:	464b      	mov	r3, r9
    14b6:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    14b8:	ab04      	add	r3, sp, #16
    14ba:	2280      	movs	r2, #128	; 0x80
    14bc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    14be:	2200      	movs	r2, #0
    14c0:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    14c2:	2101      	movs	r1, #1
    14c4:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    14c6:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    14c8:	7823      	ldrb	r3, [r4, #0]
    14ca:	2b00      	cmp	r3, #0
    14cc:	d101      	bne.n	14d2 <spi_init+0x1ee>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    14ce:	ab04      	add	r3, sp, #16
    14d0:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    14d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    14d4:	9305      	str	r3, [sp, #20]
    14d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    14d8:	9306      	str	r3, [sp, #24]
    14da:	6b23      	ldr	r3, [r4, #48]	; 0x30
    14dc:	9307      	str	r3, [sp, #28]
    14de:	6b63      	ldr	r3, [r4, #52]	; 0x34
    14e0:	9308      	str	r3, [sp, #32]
    14e2:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    14e4:	ad05      	add	r5, sp, #20
    14e6:	e011      	b.n	150c <spi_init+0x228>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    14e8:	683b      	ldr	r3, [r7, #0]
    14ea:	220c      	movs	r2, #12
    14ec:	4313      	orrs	r3, r2
    14ee:	603b      	str	r3, [r7, #0]
    14f0:	e7d9      	b.n	14a6 <spi_init+0x1c2>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    14f2:	0030      	movs	r0, r6
    14f4:	4b3d      	ldr	r3, [pc, #244]	; (15ec <spi_init+0x308>)
    14f6:	4798      	blx	r3
    14f8:	e00d      	b.n	1516 <spi_init+0x232>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    14fa:	a904      	add	r1, sp, #16
    14fc:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    14fe:	0c00      	lsrs	r0, r0, #16
    1500:	b2c0      	uxtb	r0, r0
    1502:	4b43      	ldr	r3, [pc, #268]	; (1610 <spi_init+0x32c>)
    1504:	4798      	blx	r3
    1506:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1508:	2f04      	cmp	r7, #4
    150a:	d007      	beq.n	151c <spi_init+0x238>
    150c:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    150e:	00bb      	lsls	r3, r7, #2
    1510:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    1512:	2800      	cmp	r0, #0
    1514:	d0ed      	beq.n	14f2 <spi_init+0x20e>
		if (current_pinmux != PINMUX_UNUSED) {
    1516:	1c43      	adds	r3, r0, #1
    1518:	d1ef      	bne.n	14fa <spi_init+0x216>
    151a:	e7f4      	b.n	1506 <spi_init+0x222>
	module->mode             = config->mode;
    151c:	7823      	ldrb	r3, [r4, #0]
    151e:	464a      	mov	r2, r9
    1520:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    1522:	7c23      	ldrb	r3, [r4, #16]
    1524:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    1526:	7ca3      	ldrb	r3, [r4, #18]
    1528:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    152a:	7d23      	ldrb	r3, [r4, #20]
    152c:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
    152e:	2200      	movs	r2, #0
    1530:	ab02      	add	r3, sp, #8
    1532:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    1534:	7823      	ldrb	r3, [r4, #0]
    1536:	2b01      	cmp	r3, #1
    1538:	d012      	beq.n	1560 <spi_init+0x27c>
	if (config->mode == SPI_MODE_SLAVE) {
    153a:	7823      	ldrb	r3, [r4, #0]
    153c:	2b00      	cmp	r3, #0
    153e:	d127      	bne.n	1590 <spi_init+0x2ac>
		ctrla = config->mode_specific.slave.frame_format;
    1540:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    1542:	8ba2      	ldrh	r2, [r4, #28]
		spi_module->ADDR.reg |=
    1544:	6a73      	ldr	r3, [r6, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    1546:	7fe1      	ldrb	r1, [r4, #31]
    1548:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    154a:	7fa5      	ldrb	r5, [r4, #30]
    154c:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
    154e:	4319      	orrs	r1, r3
    1550:	6271      	str	r1, [r6, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    1552:	2320      	movs	r3, #32
    1554:	5ce3      	ldrb	r3, [r4, r3]
    1556:	2b00      	cmp	r3, #0
    1558:	d01c      	beq.n	1594 <spi_init+0x2b0>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    155a:	2340      	movs	r3, #64	; 0x40
    155c:	431a      	orrs	r2, r3
    155e:	e019      	b.n	1594 <spi_init+0x2b0>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1560:	464b      	mov	r3, r9
    1562:	6818      	ldr	r0, [r3, #0]
    1564:	4b25      	ldr	r3, [pc, #148]	; (15fc <spi_init+0x318>)
    1566:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1568:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    156a:	b2c0      	uxtb	r0, r0
    156c:	4b21      	ldr	r3, [pc, #132]	; (15f4 <spi_init+0x310>)
    156e:	4798      	blx	r3
    1570:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    1572:	ab02      	add	r3, sp, #8
    1574:	1d9a      	adds	r2, r3, #6
    1576:	69a0      	ldr	r0, [r4, #24]
    1578:	4b1f      	ldr	r3, [pc, #124]	; (15f8 <spi_init+0x314>)
    157a:	4798      	blx	r3
    157c:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    157e:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    1580:	2b00      	cmp	r3, #0
    1582:	d000      	beq.n	1586 <spi_init+0x2a2>
    1584:	e6c0      	b.n	1308 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    1586:	ab02      	add	r3, sp, #8
    1588:	3306      	adds	r3, #6
    158a:	781b      	ldrb	r3, [r3, #0]
    158c:	7333      	strb	r3, [r6, #12]
    158e:	e7d4      	b.n	153a <spi_init+0x256>
	uint32_t ctrlb = 0;
    1590:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    1592:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    1594:	6863      	ldr	r3, [r4, #4]
    1596:	68a1      	ldr	r1, [r4, #8]
    1598:	430b      	orrs	r3, r1
    159a:	68e1      	ldr	r1, [r4, #12]
    159c:	430b      	orrs	r3, r1
    159e:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    15a0:	7c21      	ldrb	r1, [r4, #16]
    15a2:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    15a4:	7c61      	ldrb	r1, [r4, #17]
    15a6:	2900      	cmp	r1, #0
    15a8:	d103      	bne.n	15b2 <spi_init+0x2ce>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    15aa:	491a      	ldr	r1, [pc, #104]	; (1614 <spi_init+0x330>)
    15ac:	7889      	ldrb	r1, [r1, #2]
    15ae:	0789      	lsls	r1, r1, #30
    15b0:	d501      	bpl.n	15b6 <spi_init+0x2d2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    15b2:	2180      	movs	r1, #128	; 0x80
    15b4:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    15b6:	7ca1      	ldrb	r1, [r4, #18]
    15b8:	2900      	cmp	r1, #0
    15ba:	d002      	beq.n	15c2 <spi_init+0x2de>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    15bc:	2180      	movs	r1, #128	; 0x80
    15be:	0289      	lsls	r1, r1, #10
    15c0:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    15c2:	7ce1      	ldrb	r1, [r4, #19]
    15c4:	2900      	cmp	r1, #0
    15c6:	d002      	beq.n	15ce <spi_init+0x2ea>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    15c8:	2180      	movs	r1, #128	; 0x80
    15ca:	0089      	lsls	r1, r1, #2
    15cc:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    15ce:	7d21      	ldrb	r1, [r4, #20]
    15d0:	2900      	cmp	r1, #0
    15d2:	d002      	beq.n	15da <spi_init+0x2f6>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    15d4:	2180      	movs	r1, #128	; 0x80
    15d6:	0189      	lsls	r1, r1, #6
    15d8:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    15da:	6831      	ldr	r1, [r6, #0]
    15dc:	430b      	orrs	r3, r1
    15de:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
    15e0:	6873      	ldr	r3, [r6, #4]
    15e2:	431a      	orrs	r2, r3
    15e4:	6072      	str	r2, [r6, #4]
	return STATUS_OK;
    15e6:	2000      	movs	r0, #0
    15e8:	e68e      	b.n	1308 <spi_init+0x24>
    15ea:	46c0      	nop			; (mov r8, r8)
    15ec:	00001135 	.word	0x00001135
    15f0:	41004400 	.word	0x41004400
    15f4:	00002241 	.word	0x00002241
    15f8:	00000ef1 	.word	0x00000ef1
    15fc:	000012ad 	.word	0x000012ad
    1600:	40000400 	.word	0x40000400
    1604:	00002225 	.word	0x00002225
    1608:	00002199 	.word	0x00002199
    160c:	000010e9 	.word	0x000010e9
    1610:	0000024d 	.word	0x0000024d
    1614:	41002000 	.word	0x41002000

00001618 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    1618:	b5f0      	push	{r4, r5, r6, r7, lr}
    161a:	46de      	mov	lr, fp
    161c:	4657      	mov	r7, sl
    161e:	464e      	mov	r6, r9
    1620:	4645      	mov	r5, r8
    1622:	b5e0      	push	{r5, r6, r7, lr}
    1624:	4688      	mov	r8, r1
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1626:	2117      	movs	r1, #23
	if (length == 0) {
    1628:	2a00      	cmp	r2, #0
    162a:	d078      	beq.n	171e <spi_read_buffer_wait+0x106>
	}

	if (!(module->receiver_enabled)) {
    162c:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    162e:	3105      	adds	r1, #5
	if (!(module->receiver_enabled)) {
    1630:	2c00      	cmp	r4, #0
    1632:	d074      	beq.n	171e <spi_read_buffer_wait+0x106>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    1634:	7941      	ldrb	r1, [r0, #5]
    1636:	2900      	cmp	r1, #0
    1638:	d103      	bne.n	1642 <spi_read_buffer_wait+0x2a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    163a:	6801      	ldr	r1, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    163c:	7e0c      	ldrb	r4, [r1, #24]
    163e:	07a4      	lsls	r4, r4, #30
    1640:	d40c      	bmi.n	165c <spi_read_buffer_wait+0x44>
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    1642:	3a01      	subs	r2, #1
    1644:	b294      	uxth	r4, r2
    1646:	2500      	movs	r5, #0

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    1648:	2204      	movs	r2, #4
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    164a:	2102      	movs	r1, #2
    164c:	468a      	mov	sl, r1
			while (!spi_is_ready_to_write(module)) {
    164e:	2601      	movs	r6, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1650:	05db      	lsls	r3, r3, #23
    1652:	0ddb      	lsrs	r3, r3, #23
    1654:	4699      	mov	r9, r3

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    1656:	2304      	movs	r3, #4
    1658:	469b      	mov	fp, r3
    165a:	e03b      	b.n	16d4 <spi_read_buffer_wait+0xbc>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    165c:	2402      	movs	r4, #2
    165e:	760c      	strb	r4, [r1, #24]
    1660:	e7ef      	b.n	1642 <spi_read_buffer_wait+0x2a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1662:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1664:	7e0b      	ldrb	r3, [r1, #24]
			while (!spi_is_ready_to_write(module)) {
    1666:	4233      	tst	r3, r6
    1668:	d0fc      	beq.n	1664 <spi_read_buffer_wait+0x4c>
    166a:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_write(module)) {
    166c:	4233      	tst	r3, r6
    166e:	d009      	beq.n	1684 <spi_read_buffer_wait+0x6c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1670:	464b      	mov	r3, r9
    1672:	628b      	str	r3, [r1, #40]	; 0x28
    1674:	e031      	b.n	16da <spi_read_buffer_wait+0xc2>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1676:	7e3b      	ldrb	r3, [r7, #24]
			if (spi_is_write_complete(module)) {
    1678:	4651      	mov	r1, sl
    167a:	420b      	tst	r3, r1
    167c:	d13c      	bne.n	16f8 <spi_read_buffer_wait+0xe0>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    167e:	7e3b      	ldrb	r3, [r7, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
    1680:	4213      	tst	r3, r2
    1682:	d049      	beq.n	1718 <spi_read_buffer_wait+0x100>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1684:	6807      	ldr	r7, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1686:	7e3b      	ldrb	r3, [r7, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    1688:	4213      	tst	r3, r2
    168a:	d0fc      	beq.n	1686 <spi_read_buffer_wait+0x6e>
    168c:	7e3b      	ldrb	r3, [r7, #24]
	if (!spi_is_ready_to_read(module)) {
    168e:	4213      	tst	r3, r2
    1690:	d044      	beq.n	171c <spi_read_buffer_wait+0x104>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1692:	8b7b      	ldrh	r3, [r7, #26]
	enum status_code retval = STATUS_OK;
    1694:	2100      	movs	r1, #0
    1696:	468c      	mov	ip, r1
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1698:	4213      	tst	r3, r2
    169a:	d006      	beq.n	16aa <spi_read_buffer_wait+0x92>
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    169c:	8b7b      	ldrh	r3, [r7, #26]
    169e:	4659      	mov	r1, fp
    16a0:	430b      	orrs	r3, r1
    16a2:	b29b      	uxth	r3, r3
    16a4:	837b      	strh	r3, [r7, #26]
		retval = STATUS_ERR_OVERFLOW;
    16a6:	231e      	movs	r3, #30
    16a8:	469c      	mov	ip, r3
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    16aa:	7983      	ldrb	r3, [r0, #6]
    16ac:	2b01      	cmp	r3, #1
    16ae:	d027      	beq.n	1700 <spi_read_buffer_wait+0xe8>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    16b0:	6abf      	ldr	r7, [r7, #40]	; 0x28
    16b2:	b2ff      	uxtb	r7, r7
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    16b4:	4663      	mov	r3, ip
    16b6:	2b00      	cmp	r3, #0
    16b8:	d138      	bne.n	172c <spi_read_buffer_wait+0x114>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    16ba:	1c6b      	adds	r3, r5, #1
    16bc:	b29b      	uxth	r3, r3
    16be:	4641      	mov	r1, r8
    16c0:	554f      	strb	r7, [r1, r5]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    16c2:	7981      	ldrb	r1, [r0, #6]
    16c4:	2901      	cmp	r1, #1
    16c6:	d01f      	beq.n	1708 <spi_read_buffer_wait+0xf0>
		rx_data[rx_pos++] = received_data;
    16c8:	001d      	movs	r5, r3
	while (length--) {
    16ca:	3c01      	subs	r4, #1
    16cc:	b2a4      	uxth	r4, r4
    16ce:	4b18      	ldr	r3, [pc, #96]	; (1730 <spi_read_buffer_wait+0x118>)
    16d0:	429c      	cmp	r4, r3
    16d2:	d01f      	beq.n	1714 <spi_read_buffer_wait+0xfc>
		if (module->mode == SPI_MODE_MASTER) {
    16d4:	7943      	ldrb	r3, [r0, #5]
    16d6:	2b01      	cmp	r3, #1
    16d8:	d0c3      	beq.n	1662 <spi_read_buffer_wait+0x4a>
		if (module->mode == SPI_MODE_SLAVE) {
    16da:	7943      	ldrb	r3, [r0, #5]
    16dc:	2b00      	cmp	r3, #0
    16de:	d1d1      	bne.n	1684 <spi_read_buffer_wait+0x6c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    16e0:	6807      	ldr	r7, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    16e2:	7e3b      	ldrb	r3, [r7, #24]
				if (spi_is_ready_to_read(module)) {
    16e4:	4213      	tst	r3, r2
    16e6:	d1c6      	bne.n	1676 <spi_read_buffer_wait+0x5e>
    16e8:	4b12      	ldr	r3, [pc, #72]	; (1734 <spi_read_buffer_wait+0x11c>)
    16ea:	7e39      	ldrb	r1, [r7, #24]
    16ec:	4211      	tst	r1, r2
    16ee:	d1c2      	bne.n	1676 <spi_read_buffer_wait+0x5e>
    16f0:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    16f2:	2b00      	cmp	r3, #0
    16f4:	d1f9      	bne.n	16ea <spi_read_buffer_wait+0xd2>
    16f6:	e7be      	b.n	1676 <spi_read_buffer_wait+0x5e>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    16f8:	2302      	movs	r3, #2
    16fa:	763b      	strb	r3, [r7, #24]
				return STATUS_ABORTED;
    16fc:	2104      	movs	r1, #4
    16fe:	e00e      	b.n	171e <spi_read_buffer_wait+0x106>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1700:	6abf      	ldr	r7, [r7, #40]	; 0x28
    1702:	05ff      	lsls	r7, r7, #23
    1704:	0dff      	lsrs	r7, r7, #23
    1706:	e7d5      	b.n	16b4 <spi_read_buffer_wait+0x9c>
			rx_data[rx_pos++] = (received_data >> 8);
    1708:	3502      	adds	r5, #2
    170a:	b2ad      	uxth	r5, r5
    170c:	0a3f      	lsrs	r7, r7, #8
    170e:	4641      	mov	r1, r8
    1710:	54cf      	strb	r7, [r1, r3]
    1712:	e7da      	b.n	16ca <spi_read_buffer_wait+0xb2>
    1714:	4661      	mov	r1, ip
    1716:	e002      	b.n	171e <spi_read_buffer_wait+0x106>
				return STATUS_ERR_TIMEOUT;
    1718:	2112      	movs	r1, #18
    171a:	e000      	b.n	171e <spi_read_buffer_wait+0x106>
		return STATUS_ERR_IO;
    171c:	2110      	movs	r1, #16
		}
	}

	return STATUS_OK;
}
    171e:	0008      	movs	r0, r1
    1720:	bc3c      	pop	{r2, r3, r4, r5}
    1722:	4690      	mov	r8, r2
    1724:	4699      	mov	r9, r3
    1726:	46a2      	mov	sl, r4
    1728:	46ab      	mov	fp, r5
    172a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    172c:	4661      	mov	r1, ip
    172e:	e7f6      	b.n	171e <spi_read_buffer_wait+0x106>
    1730:	0000ffff 	.word	0x0000ffff
    1734:	00002710 	.word	0x00002710

00001738 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    1738:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    173a:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    173c:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    173e:	2c01      	cmp	r4, #1
    1740:	d001      	beq.n	1746 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    1742:	0018      	movs	r0, r3
    1744:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    1746:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    1748:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    174a:	2c00      	cmp	r4, #0
    174c:	d1f9      	bne.n	1742 <spi_select_slave+0xa>
		if (select) {
    174e:	2a00      	cmp	r2, #0
    1750:	d05a      	beq.n	1808 <spi_select_slave+0xd0>
			if (slave->address_enabled) {
    1752:	784b      	ldrb	r3, [r1, #1]
    1754:	2b00      	cmp	r3, #0
    1756:	d046      	beq.n	17e6 <spi_select_slave+0xae>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1758:	6803      	ldr	r3, [r0, #0]
    175a:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    175c:	07db      	lsls	r3, r3, #31
    175e:	d410      	bmi.n	1782 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    1760:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1762:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1764:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1766:	2900      	cmp	r1, #0
    1768:	d104      	bne.n	1774 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    176a:	0953      	lsrs	r3, r2, #5
    176c:	01db      	lsls	r3, r3, #7
    176e:	492f      	ldr	r1, [pc, #188]	; (182c <spi_select_slave+0xf4>)
    1770:	468c      	mov	ip, r1
    1772:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1774:	211f      	movs	r1, #31
    1776:	4011      	ands	r1, r2
    1778:	2201      	movs	r2, #1
    177a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    177c:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    177e:	2305      	movs	r3, #5
    1780:	e7df      	b.n	1742 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    1782:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1784:	09d4      	lsrs	r4, r2, #7
		return NULL;
    1786:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1788:	2c00      	cmp	r4, #0
    178a:	d104      	bne.n	1796 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    178c:	0953      	lsrs	r3, r2, #5
    178e:	01db      	lsls	r3, r3, #7
    1790:	4c26      	ldr	r4, [pc, #152]	; (182c <spi_select_slave+0xf4>)
    1792:	46a4      	mov	ip, r4
    1794:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1796:	241f      	movs	r4, #31
    1798:	4014      	ands	r4, r2
    179a:	2201      	movs	r2, #1
    179c:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    179e:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    17a0:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    17a2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    17a4:	07d2      	lsls	r2, r2, #31
    17a6:	d501      	bpl.n	17ac <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    17a8:	788a      	ldrb	r2, [r1, #2]
    17aa:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    17ac:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    17ae:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    17b0:	2a00      	cmp	r2, #0
    17b2:	d1c6      	bne.n	1742 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    17b4:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    17b6:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    17b8:	7e13      	ldrb	r3, [r2, #24]
    17ba:	420b      	tst	r3, r1
    17bc:	d0fc      	beq.n	17b8 <spi_select_slave+0x80>
    17be:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    17c0:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    17c2:	0749      	lsls	r1, r1, #29
    17c4:	d5bd      	bpl.n	1742 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    17c6:	8b53      	ldrh	r3, [r2, #26]
    17c8:	075b      	lsls	r3, r3, #29
    17ca:	d503      	bpl.n	17d4 <spi_select_slave+0x9c>
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    17cc:	8b53      	ldrh	r3, [r2, #26]
    17ce:	2104      	movs	r1, #4
    17d0:	430b      	orrs	r3, r1
    17d2:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    17d4:	7983      	ldrb	r3, [r0, #6]
    17d6:	2b01      	cmp	r3, #1
    17d8:	d002      	beq.n	17e0 <spi_select_slave+0xa8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    17da:	6a93      	ldr	r3, [r2, #40]	; 0x28
    17dc:	2300      	movs	r3, #0
    17de:	e7b0      	b.n	1742 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    17e0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    17e2:	2300      	movs	r3, #0
    17e4:	e7ad      	b.n	1742 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    17e6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    17e8:	09d1      	lsrs	r1, r2, #7
		return NULL;
    17ea:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    17ec:	2900      	cmp	r1, #0
    17ee:	d104      	bne.n	17fa <spi_select_slave+0xc2>
		return &(ports[port_index]->Group[group_index]);
    17f0:	0953      	lsrs	r3, r2, #5
    17f2:	01db      	lsls	r3, r3, #7
    17f4:	490d      	ldr	r1, [pc, #52]	; (182c <spi_select_slave+0xf4>)
    17f6:	468c      	mov	ip, r1
    17f8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    17fa:	211f      	movs	r1, #31
    17fc:	4011      	ands	r1, r2
    17fe:	2201      	movs	r2, #1
    1800:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    1802:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    1804:	2300      	movs	r3, #0
    1806:	e79c      	b.n	1742 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    1808:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    180a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    180c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    180e:	2900      	cmp	r1, #0
    1810:	d104      	bne.n	181c <spi_select_slave+0xe4>
		return &(ports[port_index]->Group[group_index]);
    1812:	0953      	lsrs	r3, r2, #5
    1814:	01db      	lsls	r3, r3, #7
    1816:	4905      	ldr	r1, [pc, #20]	; (182c <spi_select_slave+0xf4>)
    1818:	468c      	mov	ip, r1
    181a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    181c:	211f      	movs	r1, #31
    181e:	4011      	ands	r1, r2
    1820:	2201      	movs	r2, #1
    1822:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1824:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    1826:	2300      	movs	r3, #0
    1828:	e78b      	b.n	1742 <spi_select_slave+0xa>
    182a:	46c0      	nop			; (mov r8, r8)
    182c:	41004400 	.word	0x41004400

00001830 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    1830:	b5f0      	push	{r4, r5, r6, r7, lr}
    1832:	46de      	mov	lr, fp
    1834:	4657      	mov	r7, sl
    1836:	464e      	mov	r6, r9
    1838:	4645      	mov	r5, r8
    183a:	b5e0      	push	{r5, r6, r7, lr}
    183c:	b085      	sub	sp, #20
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    183e:	2317      	movs	r3, #23
	if (length == 0) {
    1840:	2a00      	cmp	r2, #0
    1842:	d107      	bne.n	1854 <spi_write_buffer_wait+0x24>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    1844:	0018      	movs	r0, r3
    1846:	b005      	add	sp, #20
    1848:	bc3c      	pop	{r2, r3, r4, r5}
    184a:	4690      	mov	r8, r2
    184c:	4699      	mov	r9, r3
    184e:	46a2      	mov	sl, r4
    1850:	46ab      	mov	fp, r5
    1852:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    1854:	7943      	ldrb	r3, [r0, #5]
    1856:	2b00      	cmp	r3, #0
    1858:	d103      	bne.n	1862 <spi_write_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    185a:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    185c:	7e1c      	ldrb	r4, [r3, #24]
    185e:	07a4      	lsls	r4, r4, #30
    1860:	d40b      	bmi.n	187a <spi_write_buffer_wait+0x4a>
						data_to_send = tx_data[tx_pos++];
    1862:	9203      	str	r2, [sp, #12]
    1864:	2400      	movs	r4, #0
	while (length--) {
    1866:	4b74      	ldr	r3, [pc, #464]	; (1a38 <spi_write_buffer_wait+0x208>)
    1868:	469b      	mov	fp, r3
				if (spi_is_ready_to_write(module)) {
    186a:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    186c:	2502      	movs	r5, #2
    186e:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    1870:	3502      	adds	r5, #2
    1872:	46a9      	mov	r9, r5
    1874:	3a01      	subs	r2, #1
    1876:	b292      	uxth	r2, r2
    1878:	e023      	b.n	18c2 <spi_write_buffer_wait+0x92>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    187a:	2402      	movs	r4, #2
    187c:	761c      	strb	r4, [r3, #24]
    187e:	e7f0      	b.n	1862 <spi_write_buffer_wait+0x32>
    1880:	7e2e      	ldrb	r6, [r5, #24]
			if (spi_is_write_complete(module)) {
    1882:	4667      	mov	r7, ip
    1884:	423e      	tst	r6, r7
    1886:	d12d      	bne.n	18e4 <spi_write_buffer_wait+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1888:	7e2d      	ldrb	r5, [r5, #24]
			if (!spi_is_ready_to_write(module)) {
    188a:	421d      	tst	r5, r3
    188c:	d100      	bne.n	1890 <spi_write_buffer_wait+0x60>
    188e:	e0c9      	b.n	1a24 <spi_write_buffer_wait+0x1f4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1890:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1892:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    1894:	421d      	tst	r5, r3
    1896:	d0fc      	beq.n	1892 <spi_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
    1898:	1c65      	adds	r5, r4, #1
    189a:	b2ad      	uxth	r5, r5
    189c:	46a8      	mov	r8, r5
    189e:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    18a0:	7987      	ldrb	r7, [r0, #6]
    18a2:	2f01      	cmp	r7, #1
    18a4:	d022      	beq.n	18ec <spi_write_buffer_wait+0xbc>
		uint16_t data_to_send = tx_data[tx_pos++];
    18a6:	b2ad      	uxth	r5, r5
    18a8:	4644      	mov	r4, r8
    18aa:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    18ac:	421f      	tst	r7, r3
    18ae:	d002      	beq.n	18b6 <spi_write_buffer_wait+0x86>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    18b0:	05ed      	lsls	r5, r5, #23
    18b2:	0ded      	lsrs	r5, r5, #23
    18b4:	62b5      	str	r5, [r6, #40]	; 0x28
    18b6:	1e55      	subs	r5, r2, #1
    18b8:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    18ba:	79c6      	ldrb	r6, [r0, #7]
    18bc:	2e00      	cmp	r6, #0
    18be:	d11c      	bne.n	18fa <spi_write_buffer_wait+0xca>
    18c0:	002a      	movs	r2, r5
	while (length--) {
    18c2:	455a      	cmp	r2, fp
    18c4:	d072      	beq.n	19ac <spi_write_buffer_wait+0x17c>
		if (module->mode == SPI_MODE_SLAVE) {
    18c6:	7945      	ldrb	r5, [r0, #5]
    18c8:	2d00      	cmp	r5, #0
    18ca:	d1e1      	bne.n	1890 <spi_write_buffer_wait+0x60>
	SercomSpi *const spi_module = &(module->hw->SPI);
    18cc:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    18ce:	7e2e      	ldrb	r6, [r5, #24]
				if (spi_is_ready_to_write(module)) {
    18d0:	421e      	tst	r6, r3
    18d2:	d1d5      	bne.n	1880 <spi_write_buffer_wait+0x50>
    18d4:	4e59      	ldr	r6, [pc, #356]	; (1a3c <spi_write_buffer_wait+0x20c>)
    18d6:	7e2f      	ldrb	r7, [r5, #24]
    18d8:	421f      	tst	r7, r3
    18da:	d1d1      	bne.n	1880 <spi_write_buffer_wait+0x50>
    18dc:	3e01      	subs	r6, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    18de:	2e00      	cmp	r6, #0
    18e0:	d1f9      	bne.n	18d6 <spi_write_buffer_wait+0xa6>
    18e2:	e7cd      	b.n	1880 <spi_write_buffer_wait+0x50>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    18e4:	2302      	movs	r3, #2
    18e6:	762b      	strb	r3, [r5, #24]
				return STATUS_ABORTED;
    18e8:	3302      	adds	r3, #2
    18ea:	e7ab      	b.n	1844 <spi_write_buffer_wait+0x14>
			data_to_send |= (tx_data[tx_pos++] << 8);
    18ec:	3402      	adds	r4, #2
    18ee:	b2a4      	uxth	r4, r4
    18f0:	4647      	mov	r7, r8
    18f2:	5dcf      	ldrb	r7, [r1, r7]
    18f4:	023f      	lsls	r7, r7, #8
    18f6:	433d      	orrs	r5, r7
    18f8:	e7d7      	b.n	18aa <spi_write_buffer_wait+0x7a>
			if (module->mode == SPI_MODE_SLAVE) {
    18fa:	7945      	ldrb	r5, [r0, #5]
    18fc:	2d00      	cmp	r5, #0
    18fe:	d135      	bne.n	196c <spi_write_buffer_wait+0x13c>
    1900:	4f4f      	ldr	r7, [pc, #316]	; (1a40 <spi_write_buffer_wait+0x210>)
    1902:	9102      	str	r1, [sp, #8]
    1904:	e012      	b.n	192c <spi_write_buffer_wait+0xfc>
							data_to_send |= (tx_data[tx_pos++] << 8);
    1906:	3402      	adds	r4, #2
    1908:	b2a4      	uxth	r4, r4
    190a:	4641      	mov	r1, r8
    190c:	9e02      	ldr	r6, [sp, #8]
    190e:	5c71      	ldrb	r1, [r6, r1]
    1910:	0209      	lsls	r1, r1, #8
    1912:	9e01      	ldr	r6, [sp, #4]
    1914:	430e      	orrs	r6, r1
    1916:	e019      	b.n	194c <spi_write_buffer_wait+0x11c>
						length--;
    1918:	3a01      	subs	r2, #1
    191a:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    191c:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    191e:	7e35      	ldrb	r5, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    1920:	4649      	mov	r1, r9
    1922:	420d      	tst	r5, r1
    1924:	d119      	bne.n	195a <spi_write_buffer_wait+0x12a>
    1926:	3f01      	subs	r7, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1928:	2f00      	cmp	r7, #0
    192a:	d016      	beq.n	195a <spi_write_buffer_wait+0x12a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    192c:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    192e:	7e2e      	ldrb	r6, [r5, #24]
					if (spi_is_ready_to_write(module)) {
    1930:	421e      	tst	r6, r3
    1932:	d0f3      	beq.n	191c <spi_write_buffer_wait+0xec>
						data_to_send = tx_data[tx_pos++];
    1934:	1c66      	adds	r6, r4, #1
    1936:	b2b1      	uxth	r1, r6
    1938:	4688      	mov	r8, r1
    193a:	9902      	ldr	r1, [sp, #8]
    193c:	5d09      	ldrb	r1, [r1, r4]
    193e:	9101      	str	r1, [sp, #4]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1940:	7981      	ldrb	r1, [r0, #6]
    1942:	2901      	cmp	r1, #1
    1944:	d0df      	beq.n	1906 <spi_write_buffer_wait+0xd6>
						data_to_send = tx_data[tx_pos++];
    1946:	4669      	mov	r1, sp
    1948:	888e      	ldrh	r6, [r1, #4]
    194a:	4644      	mov	r4, r8
    194c:	7e29      	ldrb	r1, [r5, #24]
	if (!spi_is_ready_to_write(module)) {
    194e:	4219      	tst	r1, r3
    1950:	d0e2      	beq.n	1918 <spi_write_buffer_wait+0xe8>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1952:	05f6      	lsls	r6, r6, #23
    1954:	0df6      	lsrs	r6, r6, #23
    1956:	62ae      	str	r6, [r5, #40]	; 0x28
    1958:	e7de      	b.n	1918 <spi_write_buffer_wait+0xe8>
    195a:	9902      	ldr	r1, [sp, #8]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    195c:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    195e:	4667      	mov	r7, ip
    1960:	423d      	tst	r5, r7
    1962:	d110      	bne.n	1986 <spi_write_buffer_wait+0x156>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1964:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    1966:	464e      	mov	r6, r9
    1968:	4235      	tst	r5, r6
    196a:	d05d      	beq.n	1a28 <spi_write_buffer_wait+0x1f8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    196c:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    196e:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    1970:	464f      	mov	r7, r9
    1972:	423d      	tst	r5, r7
    1974:	d0fb      	beq.n	196e <spi_write_buffer_wait+0x13e>
    1976:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    1978:	423d      	tst	r5, r7
    197a:	d108      	bne.n	198e <spi_write_buffer_wait+0x15e>
			flush_length--;
    197c:	9d03      	ldr	r5, [sp, #12]
    197e:	3d01      	subs	r5, #1
    1980:	b2ad      	uxth	r5, r5
    1982:	9503      	str	r5, [sp, #12]
    1984:	e776      	b.n	1874 <spi_write_buffer_wait+0x44>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1986:	2302      	movs	r3, #2
    1988:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    198a:	3302      	adds	r3, #2
    198c:	e75a      	b.n	1844 <spi_write_buffer_wait+0x14>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    198e:	8b75      	ldrh	r5, [r6, #26]
    1990:	423d      	tst	r5, r7
    1992:	d004      	beq.n	199e <spi_write_buffer_wait+0x16e>
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    1994:	8b75      	ldrh	r5, [r6, #26]
    1996:	2704      	movs	r7, #4
    1998:	433d      	orrs	r5, r7
    199a:	b2ad      	uxth	r5, r5
    199c:	8375      	strh	r5, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    199e:	7985      	ldrb	r5, [r0, #6]
    19a0:	2d01      	cmp	r5, #1
    19a2:	d001      	beq.n	19a8 <spi_write_buffer_wait+0x178>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    19a4:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    19a6:	e7e9      	b.n	197c <spi_write_buffer_wait+0x14c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    19a8:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    19aa:	e7e7      	b.n	197c <spi_write_buffer_wait+0x14c>
	if (module->mode == SPI_MODE_MASTER) {
    19ac:	7943      	ldrb	r3, [r0, #5]
    19ae:	2b01      	cmp	r3, #1
    19b0:	d00d      	beq.n	19ce <spi_write_buffer_wait+0x19e>
	if (module->mode == SPI_MODE_SLAVE) {
    19b2:	2b00      	cmp	r3, #0
    19b4:	d13a      	bne.n	1a2c <spi_write_buffer_wait+0x1fc>
		if (module->receiver_enabled) {
    19b6:	79c2      	ldrb	r2, [r0, #7]
    19b8:	2a00      	cmp	r2, #0
    19ba:	d100      	bne.n	19be <spi_write_buffer_wait+0x18e>
    19bc:	e742      	b.n	1844 <spi_write_buffer_wait+0x14>
					if (spi_is_ready_to_read(module)) {
    19be:	2404      	movs	r4, #4
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    19c0:	2504      	movs	r5, #4
			while (flush_length) {
    19c2:	9b03      	ldr	r3, [sp, #12]
    19c4:	2b00      	cmp	r3, #0
    19c6:	d100      	bne.n	19ca <spi_write_buffer_wait+0x19a>
    19c8:	e73c      	b.n	1844 <spi_write_buffer_wait+0x14>
    19ca:	9e03      	ldr	r6, [sp, #12]
    19cc:	e010      	b.n	19f0 <spi_write_buffer_wait+0x1c0>
	SercomSpi *const spi_module = &(module->hw->SPI);
    19ce:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    19d0:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    19d2:	7e0b      	ldrb	r3, [r1, #24]
    19d4:	4213      	tst	r3, r2
    19d6:	d0fc      	beq.n	19d2 <spi_write_buffer_wait+0x1a2>
	return STATUS_OK;
    19d8:	2300      	movs	r3, #0
    19da:	e733      	b.n	1844 <spi_write_buffer_wait+0x14>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    19dc:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    19de:	4223      	tst	r3, r4
    19e0:	d026      	beq.n	1a30 <spi_write_buffer_wait+0x200>
    19e2:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    19e4:	4223      	tst	r3, r4
    19e6:	d10f      	bne.n	1a08 <spi_write_buffer_wait+0x1d8>
				flush_length--;
    19e8:	3e01      	subs	r6, #1
    19ea:	b2b6      	uxth	r6, r6
			while (flush_length) {
    19ec:	2e00      	cmp	r6, #0
    19ee:	d021      	beq.n	1a34 <spi_write_buffer_wait+0x204>
	SercomSpi *const spi_module = &(module->hw->SPI);
    19f0:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    19f2:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    19f4:	4223      	tst	r3, r4
    19f6:	d1f1      	bne.n	19dc <spi_write_buffer_wait+0x1ac>
    19f8:	4b10      	ldr	r3, [pc, #64]	; (1a3c <spi_write_buffer_wait+0x20c>)
    19fa:	7e0a      	ldrb	r2, [r1, #24]
    19fc:	4222      	tst	r2, r4
    19fe:	d1ed      	bne.n	19dc <spi_write_buffer_wait+0x1ac>
    1a00:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1a02:	2b00      	cmp	r3, #0
    1a04:	d1f9      	bne.n	19fa <spi_write_buffer_wait+0x1ca>
    1a06:	e7e9      	b.n	19dc <spi_write_buffer_wait+0x1ac>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1a08:	8b4b      	ldrh	r3, [r1, #26]
    1a0a:	4223      	tst	r3, r4
    1a0c:	d003      	beq.n	1a16 <spi_write_buffer_wait+0x1e6>
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    1a0e:	8b4b      	ldrh	r3, [r1, #26]
    1a10:	432b      	orrs	r3, r5
    1a12:	b29b      	uxth	r3, r3
    1a14:	834b      	strh	r3, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1a16:	7983      	ldrb	r3, [r0, #6]
    1a18:	2b01      	cmp	r3, #1
    1a1a:	d001      	beq.n	1a20 <spi_write_buffer_wait+0x1f0>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1a1c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    1a1e:	e7e3      	b.n	19e8 <spi_write_buffer_wait+0x1b8>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1a20:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    1a22:	e7e1      	b.n	19e8 <spi_write_buffer_wait+0x1b8>
				return STATUS_ERR_TIMEOUT;
    1a24:	2312      	movs	r3, #18
    1a26:	e70d      	b.n	1844 <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    1a28:	2312      	movs	r3, #18
    1a2a:	e70b      	b.n	1844 <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    1a2c:	2300      	movs	r3, #0
    1a2e:	e709      	b.n	1844 <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    1a30:	2312      	movs	r3, #18
    1a32:	e707      	b.n	1844 <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    1a34:	2300      	movs	r3, #0
    1a36:	e705      	b.n	1844 <spi_write_buffer_wait+0x14>
    1a38:	0000ffff 	.word	0x0000ffff
    1a3c:	00002710 	.word	0x00002710
    1a40:	00002711 	.word	0x00002711

00001a44 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1a44:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a46:	46de      	mov	lr, fp
    1a48:	4657      	mov	r7, sl
    1a4a:	464e      	mov	r6, r9
    1a4c:	4645      	mov	r5, r8
    1a4e:	b5e0      	push	{r5, r6, r7, lr}
    1a50:	b091      	sub	sp, #68	; 0x44
    1a52:	0005      	movs	r5, r0
    1a54:	000c      	movs	r4, r1
    1a56:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1a58:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1a5a:	0008      	movs	r0, r1
    1a5c:	4bb0      	ldr	r3, [pc, #704]	; (1d20 <usart_init+0x2dc>)
    1a5e:	4798      	blx	r3
    1a60:	0002      	movs	r2, r0
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1a62:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1a64:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1a66:	07db      	lsls	r3, r3, #31
    1a68:	d506      	bpl.n	1a78 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1a6a:	b011      	add	sp, #68	; 0x44
    1a6c:	bc3c      	pop	{r2, r3, r4, r5}
    1a6e:	4690      	mov	r8, r2
    1a70:	4699      	mov	r9, r3
    1a72:	46a2      	mov	sl, r4
    1a74:	46ab      	mov	fp, r5
    1a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1a78:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    1a7a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1a7c:	079b      	lsls	r3, r3, #30
    1a7e:	d4f4      	bmi.n	1a6a <usart_init+0x26>
    1a80:	49a8      	ldr	r1, [pc, #672]	; (1d24 <usart_init+0x2e0>)
    1a82:	6a08      	ldr	r0, [r1, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1a84:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1a86:	2301      	movs	r3, #1
    1a88:	40bb      	lsls	r3, r7
    1a8a:	4303      	orrs	r3, r0
    1a8c:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1a8e:	a90f      	add	r1, sp, #60	; 0x3c
    1a90:	272d      	movs	r7, #45	; 0x2d
    1a92:	5df3      	ldrb	r3, [r6, r7]
    1a94:	700b      	strb	r3, [r1, #0]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1a96:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1a98:	b2d3      	uxtb	r3, r2
    1a9a:	9303      	str	r3, [sp, #12]
    1a9c:	0018      	movs	r0, r3
    1a9e:	4ba2      	ldr	r3, [pc, #648]	; (1d28 <usart_init+0x2e4>)
    1aa0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1aa2:	9803      	ldr	r0, [sp, #12]
    1aa4:	4ba1      	ldr	r3, [pc, #644]	; (1d2c <usart_init+0x2e8>)
    1aa6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1aa8:	5df0      	ldrb	r0, [r6, r7]
    1aaa:	2100      	movs	r1, #0
    1aac:	4ba0      	ldr	r3, [pc, #640]	; (1d30 <usart_init+0x2ec>)
    1aae:	4798      	blx	r3
	module->character_size = config->character_size;
    1ab0:	7af3      	ldrb	r3, [r6, #11]
    1ab2:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1ab4:	2324      	movs	r3, #36	; 0x24
    1ab6:	5cf3      	ldrb	r3, [r6, r3]
    1ab8:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1aba:	2325      	movs	r3, #37	; 0x25
    1abc:	5cf3      	ldrb	r3, [r6, r3]
    1abe:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1ac0:	7ef3      	ldrb	r3, [r6, #27]
    1ac2:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1ac4:	7f33      	ldrb	r3, [r6, #28]
    1ac6:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1ac8:	682b      	ldr	r3, [r5, #0]
    1aca:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1acc:	0018      	movs	r0, r3
    1ace:	4b94      	ldr	r3, [pc, #592]	; (1d20 <usart_init+0x2dc>)
    1ad0:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1ad2:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    1ad4:	2200      	movs	r2, #0
    1ad6:	230e      	movs	r3, #14
    1ad8:	a906      	add	r1, sp, #24
    1ada:	468c      	mov	ip, r1
    1adc:	4463      	add	r3, ip
    1ade:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1ae0:	8a32      	ldrh	r2, [r6, #16]
    1ae2:	9203      	str	r2, [sp, #12]
    1ae4:	2380      	movs	r3, #128	; 0x80
    1ae6:	01db      	lsls	r3, r3, #7
    1ae8:	429a      	cmp	r2, r3
    1aea:	d100      	bne.n	1aee <usart_init+0xaa>
    1aec:	e0a2      	b.n	1c34 <usart_init+0x1f0>
    1aee:	d90f      	bls.n	1b10 <usart_init+0xcc>
    1af0:	23c0      	movs	r3, #192	; 0xc0
    1af2:	01db      	lsls	r3, r3, #7
    1af4:	9a03      	ldr	r2, [sp, #12]
    1af6:	429a      	cmp	r2, r3
    1af8:	d100      	bne.n	1afc <usart_init+0xb8>
    1afa:	e096      	b.n	1c2a <usart_init+0x1e6>
    1afc:	2380      	movs	r3, #128	; 0x80
    1afe:	021b      	lsls	r3, r3, #8
    1b00:	429a      	cmp	r2, r3
    1b02:	d000      	beq.n	1b06 <usart_init+0xc2>
    1b04:	e107      	b.n	1d16 <usart_init+0x2d2>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1b06:	2303      	movs	r3, #3
    1b08:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1b0a:	2300      	movs	r3, #0
    1b0c:	9307      	str	r3, [sp, #28]
    1b0e:	e008      	b.n	1b22 <usart_init+0xde>
	switch (config->sample_rate) {
    1b10:	2380      	movs	r3, #128	; 0x80
    1b12:	019b      	lsls	r3, r3, #6
    1b14:	429a      	cmp	r2, r3
    1b16:	d000      	beq.n	1b1a <usart_init+0xd6>
    1b18:	e0fd      	b.n	1d16 <usart_init+0x2d2>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1b1a:	2310      	movs	r3, #16
    1b1c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1b1e:	3b0f      	subs	r3, #15
    1b20:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1b22:	6833      	ldr	r3, [r6, #0]
    1b24:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
    1b26:	68f3      	ldr	r3, [r6, #12]
    1b28:	9305      	str	r3, [sp, #20]
		config->sample_adjustment |
    1b2a:	6973      	ldr	r3, [r6, #20]
    1b2c:	469a      	mov	sl, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1b2e:	7e33      	ldrb	r3, [r6, #24]
    1b30:	4699      	mov	r9, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1b32:	2326      	movs	r3, #38	; 0x26
    1b34:	5cf3      	ldrb	r3, [r6, r3]
    1b36:	9304      	str	r3, [sp, #16]
	switch (config->transfer_mode)
    1b38:	6873      	ldr	r3, [r6, #4]
    1b3a:	2b00      	cmp	r3, #0
    1b3c:	d100      	bne.n	1b40 <usart_init+0xfc>
    1b3e:	e0a4      	b.n	1c8a <usart_init+0x246>
    1b40:	2280      	movs	r2, #128	; 0x80
    1b42:	0552      	lsls	r2, r2, #21
    1b44:	4293      	cmp	r3, r2
    1b46:	d100      	bne.n	1b4a <usart_init+0x106>
    1b48:	e088      	b.n	1c5c <usart_init+0x218>
	if(config->encoding_format_enable) {
    1b4a:	7e73      	ldrb	r3, [r6, #25]
    1b4c:	2b00      	cmp	r3, #0
    1b4e:	d002      	beq.n	1b56 <usart_init+0x112>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1b50:	7eb3      	ldrb	r3, [r6, #26]
    1b52:	4642      	mov	r2, r8
    1b54:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1b56:	682a      	ldr	r2, [r5, #0]
    1b58:	9f03      	ldr	r7, [sp, #12]
	return (usart_hw->SYNCBUSY.reg);
    1b5a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1b5c:	2b00      	cmp	r3, #0
    1b5e:	d1fc      	bne.n	1b5a <usart_init+0x116>
	usart_hw->BAUD.reg = baud;
    1b60:	330e      	adds	r3, #14
    1b62:	aa06      	add	r2, sp, #24
    1b64:	4694      	mov	ip, r2
    1b66:	4463      	add	r3, ip
    1b68:	881b      	ldrh	r3, [r3, #0]
    1b6a:	4642      	mov	r2, r8
    1b6c:	8193      	strh	r3, [r2, #12]
	ctrla |= config->transfer_mode;
    1b6e:	465b      	mov	r3, fp
    1b70:	9a05      	ldr	r2, [sp, #20]
    1b72:	4313      	orrs	r3, r2
    1b74:	4652      	mov	r2, sl
    1b76:	4313      	orrs	r3, r2
    1b78:	6872      	ldr	r2, [r6, #4]
    1b7a:	4313      	orrs	r3, r2
    1b7c:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1b7e:	464b      	mov	r3, r9
    1b80:	021b      	lsls	r3, r3, #8
	ctrla |= config->transfer_mode;
    1b82:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1b84:	9b04      	ldr	r3, [sp, #16]
    1b86:	075b      	lsls	r3, r3, #29
	ctrla |= config->transfer_mode;
    1b88:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1b8a:	2327      	movs	r3, #39	; 0x27
    1b8c:	5cf3      	ldrb	r3, [r6, r3]
    1b8e:	2b00      	cmp	r3, #0
    1b90:	d101      	bne.n	1b96 <usart_init+0x152>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1b92:	3304      	adds	r3, #4
    1b94:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1b96:	7e72      	ldrb	r2, [r6, #25]
    1b98:	0292      	lsls	r2, r2, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1b9a:	7f33      	ldrb	r3, [r6, #28]
    1b9c:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1b9e:	431a      	orrs	r2, r3
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    1ba0:	7ab3      	ldrb	r3, [r6, #10]
    1ba2:	7af1      	ldrb	r1, [r6, #11]
    1ba4:	430b      	orrs	r3, r1
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1ba6:	431a      	orrs	r2, r3
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1ba8:	7f73      	ldrb	r3, [r6, #29]
    1baa:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1bac:	431a      	orrs	r2, r3
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1bae:	2324      	movs	r3, #36	; 0x24
    1bb0:	5cf3      	ldrb	r3, [r6, r3]
    1bb2:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1bb4:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1bb6:	2325      	movs	r3, #37	; 0x25
    1bb8:	5cf3      	ldrb	r3, [r6, r3]
    1bba:	041b      	lsls	r3, r3, #16
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    1bbc:	431a      	orrs	r2, r3
	if (config->parity != USART_PARITY_NONE) {
    1bbe:	8933      	ldrh	r3, [r6, #8]
    1bc0:	2bff      	cmp	r3, #255	; 0xff
    1bc2:	d100      	bne.n	1bc6 <usart_init+0x182>
    1bc4:	e089      	b.n	1cda <usart_init+0x296>
		if(config->lin_slave_enable) {
    1bc6:	7ef1      	ldrb	r1, [r6, #27]
    1bc8:	2900      	cmp	r1, #0
    1bca:	d100      	bne.n	1bce <usart_init+0x18a>
    1bcc:	e081      	b.n	1cd2 <usart_init+0x28e>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
    1bce:	21a0      	movs	r1, #160	; 0xa0
    1bd0:	04c9      	lsls	r1, r1, #19
    1bd2:	430f      	orrs	r7, r1
		ctrlb |= config->parity;
    1bd4:	431a      	orrs	r2, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1bd6:	232c      	movs	r3, #44	; 0x2c
    1bd8:	5cf3      	ldrb	r3, [r6, r3]
    1bda:	2b00      	cmp	r3, #0
    1bdc:	d103      	bne.n	1be6 <usart_init+0x1a2>
    1bde:	4b55      	ldr	r3, [pc, #340]	; (1d34 <usart_init+0x2f0>)
    1be0:	789b      	ldrb	r3, [r3, #2]
    1be2:	079b      	lsls	r3, r3, #30
    1be4:	d501      	bpl.n	1bea <usart_init+0x1a6>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1be6:	2380      	movs	r3, #128	; 0x80
    1be8:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1bea:	6829      	ldr	r1, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1bec:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
    1bee:	2b00      	cmp	r3, #0
    1bf0:	d1fc      	bne.n	1bec <usart_init+0x1a8>
	usart_hw->CTRLB.reg = ctrlb;
    1bf2:	4643      	mov	r3, r8
    1bf4:	605a      	str	r2, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1bf6:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1bf8:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1bfa:	2b00      	cmp	r3, #0
    1bfc:	d1fc      	bne.n	1bf8 <usart_init+0x1b4>
	usart_hw->CTRLA.reg = ctrla;
    1bfe:	4643      	mov	r3, r8
    1c00:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1c02:	ab0e      	add	r3, sp, #56	; 0x38
    1c04:	2280      	movs	r2, #128	; 0x80
    1c06:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1c08:	2200      	movs	r2, #0
    1c0a:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1c0c:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1c0e:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1c10:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1c12:	930a      	str	r3, [sp, #40]	; 0x28
    1c14:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1c16:	930b      	str	r3, [sp, #44]	; 0x2c
    1c18:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1c1a:	930c      	str	r3, [sp, #48]	; 0x30
    1c1c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1c1e:	9303      	str	r3, [sp, #12]
    1c20:	930d      	str	r3, [sp, #52]	; 0x34
    1c22:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1c24:	ad0a      	add	r5, sp, #40	; 0x28
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1c26:	4e44      	ldr	r6, [pc, #272]	; (1d38 <usart_init+0x2f4>)
    1c28:	e066      	b.n	1cf8 <usart_init+0x2b4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1c2a:	2308      	movs	r3, #8
    1c2c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1c2e:	3b07      	subs	r3, #7
    1c30:	9307      	str	r3, [sp, #28]
    1c32:	e776      	b.n	1b22 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    1c34:	6833      	ldr	r3, [r6, #0]
    1c36:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
    1c38:	68f3      	ldr	r3, [r6, #12]
    1c3a:	9305      	str	r3, [sp, #20]
		config->sample_adjustment |
    1c3c:	6973      	ldr	r3, [r6, #20]
    1c3e:	469a      	mov	sl, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1c40:	7e33      	ldrb	r3, [r6, #24]
    1c42:	4699      	mov	r9, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1c44:	2326      	movs	r3, #38	; 0x26
    1c46:	5cf3      	ldrb	r3, [r6, r3]
    1c48:	9304      	str	r3, [sp, #16]
	switch (config->transfer_mode)
    1c4a:	6873      	ldr	r3, [r6, #4]
    1c4c:	2b00      	cmp	r3, #0
    1c4e:	d018      	beq.n	1c82 <usart_init+0x23e>
    1c50:	2280      	movs	r2, #128	; 0x80
    1c52:	0552      	lsls	r2, r2, #21
    1c54:	4293      	cmp	r3, r2
    1c56:	d001      	beq.n	1c5c <usart_init+0x218>
	enum status_code status_code = STATUS_OK;
    1c58:	2000      	movs	r0, #0
    1c5a:	e025      	b.n	1ca8 <usart_init+0x264>
			if (!config->use_external_clock) {
    1c5c:	2327      	movs	r3, #39	; 0x27
    1c5e:	5cf3      	ldrb	r3, [r6, r3]
    1c60:	2b00      	cmp	r3, #0
    1c62:	d000      	beq.n	1c66 <usart_init+0x222>
    1c64:	e771      	b.n	1b4a <usart_init+0x106>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1c66:	6a33      	ldr	r3, [r6, #32]
    1c68:	001f      	movs	r7, r3
    1c6a:	b2c0      	uxtb	r0, r0
    1c6c:	4b33      	ldr	r3, [pc, #204]	; (1d3c <usart_init+0x2f8>)
    1c6e:	4798      	blx	r3
    1c70:	0001      	movs	r1, r0
    1c72:	220e      	movs	r2, #14
    1c74:	ab06      	add	r3, sp, #24
    1c76:	469c      	mov	ip, r3
    1c78:	4462      	add	r2, ip
    1c7a:	0038      	movs	r0, r7
    1c7c:	4b30      	ldr	r3, [pc, #192]	; (1d40 <usart_init+0x2fc>)
    1c7e:	4798      	blx	r3
    1c80:	e012      	b.n	1ca8 <usart_init+0x264>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1c82:	2308      	movs	r3, #8
    1c84:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1c86:	2300      	movs	r3, #0
    1c88:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1c8a:	2327      	movs	r3, #39	; 0x27
    1c8c:	5cf3      	ldrb	r3, [r6, r3]
    1c8e:	2b00      	cmp	r3, #0
    1c90:	d00e      	beq.n	1cb0 <usart_init+0x26c>
				status_code =
    1c92:	9b06      	ldr	r3, [sp, #24]
    1c94:	9300      	str	r3, [sp, #0]
    1c96:	9b07      	ldr	r3, [sp, #28]
    1c98:	220e      	movs	r2, #14
    1c9a:	a906      	add	r1, sp, #24
    1c9c:	468c      	mov	ip, r1
    1c9e:	4462      	add	r2, ip
    1ca0:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1ca2:	6a30      	ldr	r0, [r6, #32]
    1ca4:	4f27      	ldr	r7, [pc, #156]	; (1d44 <usart_init+0x300>)
    1ca6:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1ca8:	2800      	cmp	r0, #0
    1caa:	d000      	beq.n	1cae <usart_init+0x26a>
    1cac:	e6dd      	b.n	1a6a <usart_init+0x26>
    1cae:	e74c      	b.n	1b4a <usart_init+0x106>
						_sercom_get_async_baud_val(config->baudrate,
    1cb0:	6a33      	ldr	r3, [r6, #32]
    1cb2:	001f      	movs	r7, r3
    1cb4:	b2c0      	uxtb	r0, r0
    1cb6:	4b21      	ldr	r3, [pc, #132]	; (1d3c <usart_init+0x2f8>)
    1cb8:	4798      	blx	r3
    1cba:	0001      	movs	r1, r0
				status_code =
    1cbc:	9b06      	ldr	r3, [sp, #24]
    1cbe:	9300      	str	r3, [sp, #0]
    1cc0:	9b07      	ldr	r3, [sp, #28]
    1cc2:	220e      	movs	r2, #14
    1cc4:	a806      	add	r0, sp, #24
    1cc6:	4684      	mov	ip, r0
    1cc8:	4462      	add	r2, ip
    1cca:	0038      	movs	r0, r7
    1ccc:	4f1d      	ldr	r7, [pc, #116]	; (1d44 <usart_init+0x300>)
    1cce:	47b8      	blx	r7
    1cd0:	e7ea      	b.n	1ca8 <usart_init+0x264>
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1cd2:	2180      	movs	r1, #128	; 0x80
    1cd4:	0449      	lsls	r1, r1, #17
    1cd6:	430f      	orrs	r7, r1
    1cd8:	e77c      	b.n	1bd4 <usart_init+0x190>
		if(config->lin_slave_enable) {
    1cda:	7ef3      	ldrb	r3, [r6, #27]
    1cdc:	2b00      	cmp	r3, #0
    1cde:	d100      	bne.n	1ce2 <usart_init+0x29e>
    1ce0:	e779      	b.n	1bd6 <usart_init+0x192>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1ce2:	2380      	movs	r3, #128	; 0x80
    1ce4:	04db      	lsls	r3, r3, #19
    1ce6:	431f      	orrs	r7, r3
    1ce8:	e775      	b.n	1bd6 <usart_init+0x192>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1cea:	0020      	movs	r0, r4
    1cec:	4b16      	ldr	r3, [pc, #88]	; (1d48 <usart_init+0x304>)
    1cee:	4798      	blx	r3
    1cf0:	e007      	b.n	1d02 <usart_init+0x2be>
    1cf2:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1cf4:	2f04      	cmp	r7, #4
    1cf6:	d00c      	beq.n	1d12 <usart_init+0x2ce>
    1cf8:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1cfa:	00bb      	lsls	r3, r7, #2
    1cfc:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    1cfe:	2800      	cmp	r0, #0
    1d00:	d0f3      	beq.n	1cea <usart_init+0x2a6>
		if (current_pinmux != PINMUX_UNUSED) {
    1d02:	1c43      	adds	r3, r0, #1
    1d04:	d0f5      	beq.n	1cf2 <usart_init+0x2ae>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1d06:	a90e      	add	r1, sp, #56	; 0x38
    1d08:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1d0a:	0c00      	lsrs	r0, r0, #16
    1d0c:	b2c0      	uxtb	r0, r0
    1d0e:	47b0      	blx	r6
    1d10:	e7ef      	b.n	1cf2 <usart_init+0x2ae>
	return status_code;
    1d12:	2000      	movs	r0, #0
    1d14:	e6a9      	b.n	1a6a <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1d16:	2310      	movs	r3, #16
    1d18:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1d1a:	2300      	movs	r3, #0
    1d1c:	9307      	str	r3, [sp, #28]
    1d1e:	e700      	b.n	1b22 <usart_init+0xde>
    1d20:	000012ad 	.word	0x000012ad
    1d24:	40000400 	.word	0x40000400
    1d28:	00002225 	.word	0x00002225
    1d2c:	00002199 	.word	0x00002199
    1d30:	000010e9 	.word	0x000010e9
    1d34:	41002000 	.word	0x41002000
    1d38:	0000024d 	.word	0x0000024d
    1d3c:	00002241 	.word	0x00002241
    1d40:	00000ef1 	.word	0x00000ef1
    1d44:	00000f19 	.word	0x00000f19
    1d48:	00001135 	.word	0x00001135

00001d4c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1d4c:	79c3      	ldrb	r3, [r0, #7]
		return STATUS_ERR_DENIED;
    1d4e:	221c      	movs	r2, #28
	if (!(module->transmitter_enabled)) {
    1d50:	2b00      	cmp	r3, #0
    1d52:	d101      	bne.n	1d58 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1d54:	0010      	movs	r0, r2
    1d56:	4770      	bx	lr
	SercomUsart *const usart_hw = &(module->hw->USART);
    1d58:	6803      	ldr	r3, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE)) {
    1d5a:	7e18      	ldrb	r0, [r3, #24]
		return STATUS_BUSY;
    1d5c:	3a17      	subs	r2, #23
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE)) {
    1d5e:	07c0      	lsls	r0, r0, #31
    1d60:	d5f8      	bpl.n	1d54 <usart_write_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    1d62:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1d64:	2a00      	cmp	r2, #0
    1d66:	d1fc      	bne.n	1d62 <usart_write_wait+0x16>
	usart_hw->DATA.reg = tx_data;
    1d68:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1d6a:	2102      	movs	r1, #2
    1d6c:	7e1a      	ldrb	r2, [r3, #24]
    1d6e:	420a      	tst	r2, r1
    1d70:	d0fc      	beq.n	1d6c <usart_write_wait+0x20>
	return STATUS_OK;
    1d72:	2200      	movs	r2, #0
    1d74:	e7ee      	b.n	1d54 <usart_write_wait+0x8>

00001d76 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1d76:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1d78:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1d7a:	2a00      	cmp	r2, #0
    1d7c:	d101      	bne.n	1d82 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1d7e:	0018      	movs	r0, r3
    1d80:	4770      	bx	lr
	SercomUsart *const usart_hw = &(module->hw->USART);
    1d82:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1d84:	7e10      	ldrb	r0, [r2, #24]
		return STATUS_BUSY;
    1d86:	3b17      	subs	r3, #23
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1d88:	0740      	lsls	r0, r0, #29
    1d8a:	d5f8      	bpl.n	1d7e <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    1d8c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1d8e:	2b00      	cmp	r3, #0
    1d90:	d1fc      	bne.n	1d8c <usart_read_wait+0x16>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1d92:	8b53      	ldrh	r3, [r2, #26]
    1d94:	b2db      	uxtb	r3, r3
	if (error_code) {
    1d96:	0698      	lsls	r0, r3, #26
    1d98:	d021      	beq.n	1dde <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1d9a:	0798      	lsls	r0, r3, #30
    1d9c:	d503      	bpl.n	1da6 <usart_read_wait+0x30>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1d9e:	2302      	movs	r3, #2
    1da0:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1da2:	3318      	adds	r3, #24
    1da4:	e7eb      	b.n	1d7e <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1da6:	0758      	lsls	r0, r3, #29
    1da8:	d503      	bpl.n	1db2 <usart_read_wait+0x3c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1daa:	2304      	movs	r3, #4
    1dac:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1dae:	331a      	adds	r3, #26
    1db0:	e7e5      	b.n	1d7e <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1db2:	07d8      	lsls	r0, r3, #31
    1db4:	d503      	bpl.n	1dbe <usart_read_wait+0x48>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1db6:	2301      	movs	r3, #1
    1db8:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1dba:	3312      	adds	r3, #18
    1dbc:	e7df      	b.n	1d7e <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1dbe:	06d8      	lsls	r0, r3, #27
    1dc0:	d505      	bpl.n	1dce <usart_read_wait+0x58>
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    1dc2:	8b53      	ldrh	r3, [r2, #26]
    1dc4:	2110      	movs	r1, #16
    1dc6:	430b      	orrs	r3, r1
    1dc8:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1dca:	2342      	movs	r3, #66	; 0x42
    1dcc:	e7d7      	b.n	1d7e <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1dce:	069b      	lsls	r3, r3, #26
    1dd0:	d505      	bpl.n	1dde <usart_read_wait+0x68>
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    1dd2:	8b53      	ldrh	r3, [r2, #26]
    1dd4:	2120      	movs	r1, #32
    1dd6:	430b      	orrs	r3, r1
    1dd8:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    1dda:	2341      	movs	r3, #65	; 0x41
    1ddc:	e7cf      	b.n	1d7e <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1dde:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1de0:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1de2:	2300      	movs	r3, #0
    1de4:	e7cb      	b.n	1d7e <usart_read_wait+0x8>
	...

00001de8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1de8:	b510      	push	{r4, lr}
	switch (clock_source) {
    1dea:	2808      	cmp	r0, #8
    1dec:	d803      	bhi.n	1df6 <system_clock_source_get_hz+0xe>
    1dee:	0080      	lsls	r0, r0, #2
    1df0:	4b1b      	ldr	r3, [pc, #108]	; (1e60 <system_clock_source_get_hz+0x78>)
    1df2:	581b      	ldr	r3, [r3, r0]
    1df4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1df6:	2000      	movs	r0, #0
    1df8:	e030      	b.n	1e5c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    1dfa:	4b1a      	ldr	r3, [pc, #104]	; (1e64 <system_clock_source_get_hz+0x7c>)
    1dfc:	6918      	ldr	r0, [r3, #16]
    1dfe:	e02d      	b.n	1e5c <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1e00:	4b19      	ldr	r3, [pc, #100]	; (1e68 <system_clock_source_get_hz+0x80>)
    1e02:	6a1b      	ldr	r3, [r3, #32]
    1e04:	059b      	lsls	r3, r3, #22
    1e06:	0f9b      	lsrs	r3, r3, #30
    1e08:	4818      	ldr	r0, [pc, #96]	; (1e6c <system_clock_source_get_hz+0x84>)
    1e0a:	40d8      	lsrs	r0, r3
    1e0c:	e026      	b.n	1e5c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    1e0e:	4b15      	ldr	r3, [pc, #84]	; (1e64 <system_clock_source_get_hz+0x7c>)
    1e10:	6958      	ldr	r0, [r3, #20]
    1e12:	e023      	b.n	1e5c <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1e14:	4b13      	ldr	r3, [pc, #76]	; (1e64 <system_clock_source_get_hz+0x7c>)
    1e16:	681b      	ldr	r3, [r3, #0]
			return 0;
    1e18:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1e1a:	079b      	lsls	r3, r3, #30
    1e1c:	d51e      	bpl.n	1e5c <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1e1e:	4912      	ldr	r1, [pc, #72]	; (1e68 <system_clock_source_get_hz+0x80>)
    1e20:	2210      	movs	r2, #16
    1e22:	68cb      	ldr	r3, [r1, #12]
    1e24:	421a      	tst	r2, r3
    1e26:	d0fc      	beq.n	1e22 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1e28:	4b0e      	ldr	r3, [pc, #56]	; (1e64 <system_clock_source_get_hz+0x7c>)
    1e2a:	681b      	ldr	r3, [r3, #0]
    1e2c:	075b      	lsls	r3, r3, #29
    1e2e:	d401      	bmi.n	1e34 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    1e30:	480f      	ldr	r0, [pc, #60]	; (1e70 <system_clock_source_get_hz+0x88>)
    1e32:	e013      	b.n	1e5c <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1e34:	2000      	movs	r0, #0
    1e36:	4b0f      	ldr	r3, [pc, #60]	; (1e74 <system_clock_source_get_hz+0x8c>)
    1e38:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1e3a:	4b0a      	ldr	r3, [pc, #40]	; (1e64 <system_clock_source_get_hz+0x7c>)
    1e3c:	689b      	ldr	r3, [r3, #8]
    1e3e:	041b      	lsls	r3, r3, #16
    1e40:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1e42:	4358      	muls	r0, r3
    1e44:	e00a      	b.n	1e5c <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1e46:	2350      	movs	r3, #80	; 0x50
    1e48:	4a07      	ldr	r2, [pc, #28]	; (1e68 <system_clock_source_get_hz+0x80>)
    1e4a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1e4c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1e4e:	075b      	lsls	r3, r3, #29
    1e50:	d504      	bpl.n	1e5c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    1e52:	4b04      	ldr	r3, [pc, #16]	; (1e64 <system_clock_source_get_hz+0x7c>)
    1e54:	68d8      	ldr	r0, [r3, #12]
    1e56:	e001      	b.n	1e5c <system_clock_source_get_hz+0x74>
		return 32768UL;
    1e58:	2080      	movs	r0, #128	; 0x80
    1e5a:	0200      	lsls	r0, r0, #8
	}
}
    1e5c:	bd10      	pop	{r4, pc}
    1e5e:	46c0      	nop			; (mov r8, r8)
    1e60:	00004594 	.word	0x00004594
    1e64:	20000218 	.word	0x20000218
    1e68:	40000800 	.word	0x40000800
    1e6c:	007a1200 	.word	0x007a1200
    1e70:	02dc6c00 	.word	0x02dc6c00
    1e74:	00002241 	.word	0x00002241

00001e78 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1e78:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1e7a:	490c      	ldr	r1, [pc, #48]	; (1eac <system_clock_source_osc8m_set_config+0x34>)
    1e7c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1e7e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1e80:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1e82:	7840      	ldrb	r0, [r0, #1]
    1e84:	2201      	movs	r2, #1
    1e86:	4010      	ands	r0, r2
    1e88:	0180      	lsls	r0, r0, #6
    1e8a:	2640      	movs	r6, #64	; 0x40
    1e8c:	43b3      	bics	r3, r6
    1e8e:	4303      	orrs	r3, r0
    1e90:	402a      	ands	r2, r5
    1e92:	01d2      	lsls	r2, r2, #7
    1e94:	2080      	movs	r0, #128	; 0x80
    1e96:	4383      	bics	r3, r0
    1e98:	4313      	orrs	r3, r2
    1e9a:	2203      	movs	r2, #3
    1e9c:	4022      	ands	r2, r4
    1e9e:	0212      	lsls	r2, r2, #8
    1ea0:	4803      	ldr	r0, [pc, #12]	; (1eb0 <system_clock_source_osc8m_set_config+0x38>)
    1ea2:	4003      	ands	r3, r0
    1ea4:	4313      	orrs	r3, r2
    1ea6:	620b      	str	r3, [r1, #32]
}
    1ea8:	bd70      	pop	{r4, r5, r6, pc}
    1eaa:	46c0      	nop			; (mov r8, r8)
    1eac:	40000800 	.word	0x40000800
    1eb0:	fffffcff 	.word	0xfffffcff

00001eb4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1eb4:	2808      	cmp	r0, #8
    1eb6:	d803      	bhi.n	1ec0 <system_clock_source_enable+0xc>
    1eb8:	0080      	lsls	r0, r0, #2
    1eba:	4b22      	ldr	r3, [pc, #136]	; (1f44 <system_clock_source_enable+0x90>)
    1ebc:	581b      	ldr	r3, [r3, r0]
    1ebe:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1ec0:	2017      	movs	r0, #23
    1ec2:	e03e      	b.n	1f42 <system_clock_source_enable+0x8e>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1ec4:	4a20      	ldr	r2, [pc, #128]	; (1f48 <system_clock_source_enable+0x94>)
    1ec6:	6a13      	ldr	r3, [r2, #32]
    1ec8:	2102      	movs	r1, #2
    1eca:	430b      	orrs	r3, r1
    1ecc:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1ece:	2000      	movs	r0, #0
    1ed0:	e037      	b.n	1f42 <system_clock_source_enable+0x8e>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1ed2:	4a1d      	ldr	r2, [pc, #116]	; (1f48 <system_clock_source_enable+0x94>)
    1ed4:	6993      	ldr	r3, [r2, #24]
    1ed6:	2102      	movs	r1, #2
    1ed8:	430b      	orrs	r3, r1
    1eda:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1edc:	2000      	movs	r0, #0
		break;
    1ede:	e030      	b.n	1f42 <system_clock_source_enable+0x8e>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1ee0:	4a19      	ldr	r2, [pc, #100]	; (1f48 <system_clock_source_enable+0x94>)
    1ee2:	8a13      	ldrh	r3, [r2, #16]
    1ee4:	2102      	movs	r1, #2
    1ee6:	430b      	orrs	r3, r1
    1ee8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1eea:	2000      	movs	r0, #0
		break;
    1eec:	e029      	b.n	1f42 <system_clock_source_enable+0x8e>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1eee:	4a16      	ldr	r2, [pc, #88]	; (1f48 <system_clock_source_enable+0x94>)
    1ef0:	8a93      	ldrh	r3, [r2, #20]
    1ef2:	2102      	movs	r1, #2
    1ef4:	430b      	orrs	r3, r1
    1ef6:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1ef8:	2000      	movs	r0, #0
		break;
    1efa:	e022      	b.n	1f42 <system_clock_source_enable+0x8e>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1efc:	4b13      	ldr	r3, [pc, #76]	; (1f4c <system_clock_source_enable+0x98>)
    1efe:	681a      	ldr	r2, [r3, #0]
    1f00:	2102      	movs	r1, #2
    1f02:	430a      	orrs	r2, r1
    1f04:	601a      	str	r2, [r3, #0]
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    1f06:	681b      	ldr	r3, [r3, #0]
    1f08:	4a11      	ldr	r2, [pc, #68]	; (1f50 <system_clock_source_enable+0x9c>)
    1f0a:	4013      	ands	r3, r2
    1f0c:	4a0e      	ldr	r2, [pc, #56]	; (1f48 <system_clock_source_enable+0x94>)
    1f0e:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1f10:	0011      	movs	r1, r2
    1f12:	2210      	movs	r2, #16
    1f14:	68cb      	ldr	r3, [r1, #12]
    1f16:	421a      	tst	r2, r3
    1f18:	d0fc      	beq.n	1f14 <system_clock_source_enable+0x60>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1f1a:	4a0c      	ldr	r2, [pc, #48]	; (1f4c <system_clock_source_enable+0x98>)
    1f1c:	6891      	ldr	r1, [r2, #8]
    1f1e:	4b0a      	ldr	r3, [pc, #40]	; (1f48 <system_clock_source_enable+0x94>)
    1f20:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1f22:	6851      	ldr	r1, [r2, #4]
    1f24:	6299      	str	r1, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1f26:	6812      	ldr	r2, [r2, #0]
    1f28:	b292      	uxth	r2, r2
    1f2a:	849a      	strh	r2, [r3, #36]	; 0x24
	return STATUS_OK;
    1f2c:	2000      	movs	r0, #0
    1f2e:	e008      	b.n	1f42 <system_clock_source_enable+0x8e>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1f30:	4905      	ldr	r1, [pc, #20]	; (1f48 <system_clock_source_enable+0x94>)
    1f32:	2244      	movs	r2, #68	; 0x44
    1f34:	5c8b      	ldrb	r3, [r1, r2]
    1f36:	2002      	movs	r0, #2
    1f38:	4303      	orrs	r3, r0
    1f3a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1f3c:	2000      	movs	r0, #0
		break;
    1f3e:	e000      	b.n	1f42 <system_clock_source_enable+0x8e>
		return STATUS_OK;
    1f40:	2000      	movs	r0, #0
}
    1f42:	4770      	bx	lr
    1f44:	000045b8 	.word	0x000045b8
    1f48:	40000800 	.word	0x40000800
    1f4c:	20000218 	.word	0x20000218
    1f50:	0000ff7f 	.word	0x0000ff7f

00001f54 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1f54:	b530      	push	{r4, r5, lr}
    1f56:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1f58:	22c2      	movs	r2, #194	; 0xc2
    1f5a:	00d2      	lsls	r2, r2, #3
    1f5c:	4b1a      	ldr	r3, [pc, #104]	; (1fc8 <system_clock_init+0x74>)
    1f5e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1f60:	4a1a      	ldr	r2, [pc, #104]	; (1fcc <system_clock_init+0x78>)
    1f62:	6853      	ldr	r3, [r2, #4]
    1f64:	211e      	movs	r1, #30
    1f66:	438b      	bics	r3, r1
    1f68:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1f6a:	2301      	movs	r3, #1
    1f6c:	466a      	mov	r2, sp
    1f6e:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1f70:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1f72:	4d17      	ldr	r5, [pc, #92]	; (1fd0 <system_clock_init+0x7c>)
    1f74:	b2e0      	uxtb	r0, r4
    1f76:	4669      	mov	r1, sp
    1f78:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1f7a:	3401      	adds	r4, #1
    1f7c:	2c25      	cmp	r4, #37	; 0x25
    1f7e:	d1f9      	bne.n	1f74 <system_clock_init+0x20>
	config->run_in_standby  = false;
    1f80:	a803      	add	r0, sp, #12
    1f82:	2400      	movs	r4, #0
    1f84:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1f86:	2501      	movs	r5, #1
    1f88:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1f8a:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1f8c:	4b11      	ldr	r3, [pc, #68]	; (1fd4 <system_clock_init+0x80>)
    1f8e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1f90:	2006      	movs	r0, #6
    1f92:	4b11      	ldr	r3, [pc, #68]	; (1fd8 <system_clock_init+0x84>)
    1f94:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1f96:	4b11      	ldr	r3, [pc, #68]	; (1fdc <system_clock_init+0x88>)
    1f98:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    1f9a:	4b11      	ldr	r3, [pc, #68]	; (1fe0 <system_clock_init+0x8c>)
    1f9c:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1f9e:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1fa0:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1fa2:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1fa4:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1fa6:	466b      	mov	r3, sp
    1fa8:	705c      	strb	r4, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1faa:	2306      	movs	r3, #6
    1fac:	466a      	mov	r2, sp
    1fae:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    1fb0:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1fb2:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1fb4:	4669      	mov	r1, sp
    1fb6:	2000      	movs	r0, #0
    1fb8:	4b0a      	ldr	r3, [pc, #40]	; (1fe4 <system_clock_init+0x90>)
    1fba:	4798      	blx	r3
    1fbc:	2000      	movs	r0, #0
    1fbe:	4b0a      	ldr	r3, [pc, #40]	; (1fe8 <system_clock_init+0x94>)
    1fc0:	4798      	blx	r3
#endif
}
    1fc2:	b005      	add	sp, #20
    1fc4:	bd30      	pop	{r4, r5, pc}
    1fc6:	46c0      	nop			; (mov r8, r8)
    1fc8:	40000800 	.word	0x40000800
    1fcc:	41004000 	.word	0x41004000
    1fd0:	00002225 	.word	0x00002225
    1fd4:	00001e79 	.word	0x00001e79
    1fd8:	00001eb5 	.word	0x00001eb5
    1fdc:	00001fed 	.word	0x00001fed
    1fe0:	40000400 	.word	0x40000400
    1fe4:	00002011 	.word	0x00002011
    1fe8:	000020c9 	.word	0x000020c9

00001fec <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1fec:	4a06      	ldr	r2, [pc, #24]	; (2008 <STACK_SIZE+0x8>)
    1fee:	6993      	ldr	r3, [r2, #24]
    1ff0:	2108      	movs	r1, #8
    1ff2:	430b      	orrs	r3, r1
    1ff4:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1ff6:	2201      	movs	r2, #1
    1ff8:	4b04      	ldr	r3, [pc, #16]	; (200c <STACK_SIZE+0xc>)
    1ffa:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1ffc:	0019      	movs	r1, r3
    1ffe:	780b      	ldrb	r3, [r1, #0]
    2000:	4213      	tst	r3, r2
    2002:	d1fc      	bne.n	1ffe <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2004:	4770      	bx	lr
    2006:	46c0      	nop			; (mov r8, r8)
    2008:	40000400 	.word	0x40000400
    200c:	40000c00 	.word	0x40000c00

00002010 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2010:	b570      	push	{r4, r5, r6, lr}
    2012:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2014:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2016:	780d      	ldrb	r5, [r1, #0]
    2018:	022d      	lsls	r5, r5, #8
    201a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    201c:	784b      	ldrb	r3, [r1, #1]
    201e:	2b00      	cmp	r3, #0
    2020:	d002      	beq.n	2028 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2022:	2380      	movs	r3, #128	; 0x80
    2024:	02db      	lsls	r3, r3, #11
    2026:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2028:	7a4b      	ldrb	r3, [r1, #9]
    202a:	2b00      	cmp	r3, #0
    202c:	d002      	beq.n	2034 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    202e:	2380      	movs	r3, #128	; 0x80
    2030:	031b      	lsls	r3, r3, #12
    2032:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2034:	6848      	ldr	r0, [r1, #4]
    2036:	2801      	cmp	r0, #1
    2038:	d910      	bls.n	205c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    203a:	1e43      	subs	r3, r0, #1
    203c:	4218      	tst	r0, r3
    203e:	d134      	bne.n	20aa <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2040:	2802      	cmp	r0, #2
    2042:	d930      	bls.n	20a6 <system_gclk_gen_set_config+0x96>
    2044:	2302      	movs	r3, #2
    2046:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2048:	3201      	adds	r2, #1
						mask <<= 1) {
    204a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    204c:	4298      	cmp	r0, r3
    204e:	d8fb      	bhi.n	2048 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2050:	0212      	lsls	r2, r2, #8
    2052:	4332      	orrs	r2, r6
    2054:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2056:	2380      	movs	r3, #128	; 0x80
    2058:	035b      	lsls	r3, r3, #13
    205a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    205c:	7a0b      	ldrb	r3, [r1, #8]
    205e:	2b00      	cmp	r3, #0
    2060:	d002      	beq.n	2068 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2062:	2380      	movs	r3, #128	; 0x80
    2064:	039b      	lsls	r3, r3, #14
    2066:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2068:	4a13      	ldr	r2, [pc, #76]	; (20b8 <system_gclk_gen_set_config+0xa8>)
    206a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    206c:	b25b      	sxtb	r3, r3
    206e:	2b00      	cmp	r3, #0
    2070:	dbfb      	blt.n	206a <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2072:	4b12      	ldr	r3, [pc, #72]	; (20bc <system_gclk_gen_set_config+0xac>)
    2074:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2076:	4b12      	ldr	r3, [pc, #72]	; (20c0 <system_gclk_gen_set_config+0xb0>)
    2078:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    207a:	4a0f      	ldr	r2, [pc, #60]	; (20b8 <system_gclk_gen_set_config+0xa8>)
    207c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    207e:	b25b      	sxtb	r3, r3
    2080:	2b00      	cmp	r3, #0
    2082:	dbfb      	blt.n	207c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2084:	4b0c      	ldr	r3, [pc, #48]	; (20b8 <system_gclk_gen_set_config+0xa8>)
    2086:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2088:	001a      	movs	r2, r3
    208a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    208c:	b25b      	sxtb	r3, r3
    208e:	2b00      	cmp	r3, #0
    2090:	dbfb      	blt.n	208a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2092:	4a09      	ldr	r2, [pc, #36]	; (20b8 <system_gclk_gen_set_config+0xa8>)
    2094:	6853      	ldr	r3, [r2, #4]
    2096:	2180      	movs	r1, #128	; 0x80
    2098:	0249      	lsls	r1, r1, #9
    209a:	400b      	ands	r3, r1
    209c:	431d      	orrs	r5, r3
    209e:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    20a0:	4b08      	ldr	r3, [pc, #32]	; (20c4 <system_gclk_gen_set_config+0xb4>)
    20a2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    20a4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    20a6:	2200      	movs	r2, #0
    20a8:	e7d2      	b.n	2050 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    20aa:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    20ac:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    20ae:	2380      	movs	r3, #128	; 0x80
    20b0:	029b      	lsls	r3, r3, #10
    20b2:	431d      	orrs	r5, r3
    20b4:	e7d2      	b.n	205c <system_gclk_gen_set_config+0x4c>
    20b6:	46c0      	nop			; (mov r8, r8)
    20b8:	40000c00 	.word	0x40000c00
    20bc:	00000111 	.word	0x00000111
    20c0:	40000c08 	.word	0x40000c08
    20c4:	00000151 	.word	0x00000151

000020c8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    20c8:	b510      	push	{r4, lr}
    20ca:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    20cc:	4a0b      	ldr	r2, [pc, #44]	; (20fc <system_gclk_gen_enable+0x34>)
    20ce:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    20d0:	b25b      	sxtb	r3, r3
    20d2:	2b00      	cmp	r3, #0
    20d4:	dbfb      	blt.n	20ce <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    20d6:	4b0a      	ldr	r3, [pc, #40]	; (2100 <system_gclk_gen_enable+0x38>)
    20d8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    20da:	4b0a      	ldr	r3, [pc, #40]	; (2104 <system_gclk_gen_enable+0x3c>)
    20dc:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    20de:	4a07      	ldr	r2, [pc, #28]	; (20fc <system_gclk_gen_enable+0x34>)
    20e0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    20e2:	b25b      	sxtb	r3, r3
    20e4:	2b00      	cmp	r3, #0
    20e6:	dbfb      	blt.n	20e0 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    20e8:	4a04      	ldr	r2, [pc, #16]	; (20fc <system_gclk_gen_enable+0x34>)
    20ea:	6851      	ldr	r1, [r2, #4]
    20ec:	2380      	movs	r3, #128	; 0x80
    20ee:	025b      	lsls	r3, r3, #9
    20f0:	430b      	orrs	r3, r1
    20f2:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    20f4:	4b04      	ldr	r3, [pc, #16]	; (2108 <system_gclk_gen_enable+0x40>)
    20f6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    20f8:	bd10      	pop	{r4, pc}
    20fa:	46c0      	nop			; (mov r8, r8)
    20fc:	40000c00 	.word	0x40000c00
    2100:	00000111 	.word	0x00000111
    2104:	40000c04 	.word	0x40000c04
    2108:	00000151 	.word	0x00000151

0000210c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    210c:	b570      	push	{r4, r5, r6, lr}
    210e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2110:	4a1a      	ldr	r2, [pc, #104]	; (217c <system_gclk_gen_get_hz+0x70>)
    2112:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2114:	b25b      	sxtb	r3, r3
    2116:	2b00      	cmp	r3, #0
    2118:	dbfb      	blt.n	2112 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    211a:	4b19      	ldr	r3, [pc, #100]	; (2180 <system_gclk_gen_get_hz+0x74>)
    211c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    211e:	4b19      	ldr	r3, [pc, #100]	; (2184 <system_gclk_gen_get_hz+0x78>)
    2120:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2122:	4a16      	ldr	r2, [pc, #88]	; (217c <system_gclk_gen_get_hz+0x70>)
    2124:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2126:	b25b      	sxtb	r3, r3
    2128:	2b00      	cmp	r3, #0
    212a:	dbfb      	blt.n	2124 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    212c:	4e13      	ldr	r6, [pc, #76]	; (217c <system_gclk_gen_get_hz+0x70>)
    212e:	6870      	ldr	r0, [r6, #4]
    2130:	04c0      	lsls	r0, r0, #19
    2132:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2134:	4b14      	ldr	r3, [pc, #80]	; (2188 <system_gclk_gen_get_hz+0x7c>)
    2136:	4798      	blx	r3
    2138:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    213a:	4b12      	ldr	r3, [pc, #72]	; (2184 <system_gclk_gen_get_hz+0x78>)
    213c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    213e:	6876      	ldr	r6, [r6, #4]
    2140:	02f6      	lsls	r6, r6, #11
    2142:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2144:	4b11      	ldr	r3, [pc, #68]	; (218c <system_gclk_gen_get_hz+0x80>)
    2146:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2148:	4a0c      	ldr	r2, [pc, #48]	; (217c <system_gclk_gen_get_hz+0x70>)
    214a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    214c:	b25b      	sxtb	r3, r3
    214e:	2b00      	cmp	r3, #0
    2150:	dbfb      	blt.n	214a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2152:	4b0a      	ldr	r3, [pc, #40]	; (217c <system_gclk_gen_get_hz+0x70>)
    2154:	689c      	ldr	r4, [r3, #8]
    2156:	0224      	lsls	r4, r4, #8
    2158:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    215a:	4b0d      	ldr	r3, [pc, #52]	; (2190 <system_gclk_gen_get_hz+0x84>)
    215c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    215e:	2e00      	cmp	r6, #0
    2160:	d107      	bne.n	2172 <system_gclk_gen_get_hz+0x66>
    2162:	2c01      	cmp	r4, #1
    2164:	d907      	bls.n	2176 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    2166:	0021      	movs	r1, r4
    2168:	0028      	movs	r0, r5
    216a:	4b0a      	ldr	r3, [pc, #40]	; (2194 <system_gclk_gen_get_hz+0x88>)
    216c:	4798      	blx	r3
    216e:	0005      	movs	r5, r0
    2170:	e001      	b.n	2176 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2172:	3401      	adds	r4, #1
    2174:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    2176:	0028      	movs	r0, r5
    2178:	bd70      	pop	{r4, r5, r6, pc}
    217a:	46c0      	nop			; (mov r8, r8)
    217c:	40000c00 	.word	0x40000c00
    2180:	00000111 	.word	0x00000111
    2184:	40000c04 	.word	0x40000c04
    2188:	00001de9 	.word	0x00001de9
    218c:	40000c08 	.word	0x40000c08
    2190:	00000151 	.word	0x00000151
    2194:	00002419 	.word	0x00002419

00002198 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2198:	b510      	push	{r4, lr}
    219a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    219c:	4b06      	ldr	r3, [pc, #24]	; (21b8 <system_gclk_chan_enable+0x20>)
    219e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    21a0:	4b06      	ldr	r3, [pc, #24]	; (21bc <system_gclk_chan_enable+0x24>)
    21a2:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    21a4:	4a06      	ldr	r2, [pc, #24]	; (21c0 <system_gclk_chan_enable+0x28>)
    21a6:	8853      	ldrh	r3, [r2, #2]
    21a8:	2180      	movs	r1, #128	; 0x80
    21aa:	01c9      	lsls	r1, r1, #7
    21ac:	430b      	orrs	r3, r1
    21ae:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    21b0:	4b04      	ldr	r3, [pc, #16]	; (21c4 <system_gclk_chan_enable+0x2c>)
    21b2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    21b4:	bd10      	pop	{r4, pc}
    21b6:	46c0      	nop			; (mov r8, r8)
    21b8:	00000111 	.word	0x00000111
    21bc:	40000c02 	.word	0x40000c02
    21c0:	40000c00 	.word	0x40000c00
    21c4:	00000151 	.word	0x00000151

000021c8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    21c8:	b510      	push	{r4, lr}
    21ca:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    21cc:	4b0f      	ldr	r3, [pc, #60]	; (220c <system_gclk_chan_disable+0x44>)
    21ce:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    21d0:	4b0f      	ldr	r3, [pc, #60]	; (2210 <system_gclk_chan_disable+0x48>)
    21d2:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    21d4:	4a0f      	ldr	r2, [pc, #60]	; (2214 <system_gclk_chan_disable+0x4c>)
    21d6:	8853      	ldrh	r3, [r2, #2]
    21d8:	051b      	lsls	r3, r3, #20
    21da:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    21dc:	8853      	ldrh	r3, [r2, #2]
    21de:	490e      	ldr	r1, [pc, #56]	; (2218 <system_gclk_chan_disable+0x50>)
    21e0:	400b      	ands	r3, r1
    21e2:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    21e4:	8853      	ldrh	r3, [r2, #2]
    21e6:	490d      	ldr	r1, [pc, #52]	; (221c <system_gclk_chan_disable+0x54>)
    21e8:	400b      	ands	r3, r1
    21ea:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    21ec:	0011      	movs	r1, r2
    21ee:	2280      	movs	r2, #128	; 0x80
    21f0:	01d2      	lsls	r2, r2, #7
    21f2:	884b      	ldrh	r3, [r1, #2]
    21f4:	4213      	tst	r3, r2
    21f6:	d1fc      	bne.n	21f2 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    21f8:	4906      	ldr	r1, [pc, #24]	; (2214 <system_gclk_chan_disable+0x4c>)
    21fa:	884a      	ldrh	r2, [r1, #2]
    21fc:	0203      	lsls	r3, r0, #8
    21fe:	4806      	ldr	r0, [pc, #24]	; (2218 <system_gclk_chan_disable+0x50>)
    2200:	4002      	ands	r2, r0
    2202:	4313      	orrs	r3, r2
    2204:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    2206:	4b06      	ldr	r3, [pc, #24]	; (2220 <system_gclk_chan_disable+0x58>)
    2208:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    220a:	bd10      	pop	{r4, pc}
    220c:	00000111 	.word	0x00000111
    2210:	40000c02 	.word	0x40000c02
    2214:	40000c00 	.word	0x40000c00
    2218:	fffff0ff 	.word	0xfffff0ff
    221c:	ffffbfff 	.word	0xffffbfff
    2220:	00000151 	.word	0x00000151

00002224 <system_gclk_chan_set_config>:
{
    2224:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2226:	780c      	ldrb	r4, [r1, #0]
    2228:	0224      	lsls	r4, r4, #8
    222a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    222c:	4b02      	ldr	r3, [pc, #8]	; (2238 <system_gclk_chan_set_config+0x14>)
    222e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2230:	b2a4      	uxth	r4, r4
    2232:	4b02      	ldr	r3, [pc, #8]	; (223c <system_gclk_chan_set_config+0x18>)
    2234:	805c      	strh	r4, [r3, #2]
}
    2236:	bd10      	pop	{r4, pc}
    2238:	000021c9 	.word	0x000021c9
    223c:	40000c00 	.word	0x40000c00

00002240 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2240:	b510      	push	{r4, lr}
    2242:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2244:	4b06      	ldr	r3, [pc, #24]	; (2260 <system_gclk_chan_get_hz+0x20>)
    2246:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2248:	4b06      	ldr	r3, [pc, #24]	; (2264 <system_gclk_chan_get_hz+0x24>)
    224a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    224c:	4b06      	ldr	r3, [pc, #24]	; (2268 <system_gclk_chan_get_hz+0x28>)
    224e:	885c      	ldrh	r4, [r3, #2]
    2250:	0524      	lsls	r4, r4, #20
    2252:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2254:	4b05      	ldr	r3, [pc, #20]	; (226c <system_gclk_chan_get_hz+0x2c>)
    2256:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2258:	0020      	movs	r0, r4
    225a:	4b05      	ldr	r3, [pc, #20]	; (2270 <system_gclk_chan_get_hz+0x30>)
    225c:	4798      	blx	r3
}
    225e:	bd10      	pop	{r4, pc}
    2260:	00000111 	.word	0x00000111
    2264:	40000c02 	.word	0x40000c02
    2268:	40000c00 	.word	0x40000c00
    226c:	00000151 	.word	0x00000151
    2270:	0000210d 	.word	0x0000210d

00002274 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2274:	4770      	bx	lr
	...

00002278 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2278:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    227a:	4b04      	ldr	r3, [pc, #16]	; (228c <system_init+0x14>)
    227c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    227e:	4b04      	ldr	r3, [pc, #16]	; (2290 <system_init+0x18>)
    2280:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2282:	4b04      	ldr	r3, [pc, #16]	; (2294 <system_init+0x1c>)
    2284:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2286:	4b04      	ldr	r3, [pc, #16]	; (2298 <system_init+0x20>)
    2288:	4798      	blx	r3
}
    228a:	bd10      	pop	{r4, pc}
    228c:	00001f55 	.word	0x00001f55
    2290:	00000eb9 	.word	0x00000eb9
    2294:	00002275 	.word	0x00002275
    2298:	00002275 	.word	0x00002275

0000229c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    229c:	e7fe      	b.n	229c <Dummy_Handler>
	...

000022a0 <Reset_Handler>:
{
    22a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    22a2:	4a2a      	ldr	r2, [pc, #168]	; (234c <Reset_Handler+0xac>)
    22a4:	4b2a      	ldr	r3, [pc, #168]	; (2350 <Reset_Handler+0xb0>)
    22a6:	429a      	cmp	r2, r3
    22a8:	d011      	beq.n	22ce <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    22aa:	001a      	movs	r2, r3
    22ac:	4b29      	ldr	r3, [pc, #164]	; (2354 <Reset_Handler+0xb4>)
    22ae:	429a      	cmp	r2, r3
    22b0:	d20d      	bcs.n	22ce <Reset_Handler+0x2e>
    22b2:	4a29      	ldr	r2, [pc, #164]	; (2358 <Reset_Handler+0xb8>)
    22b4:	3303      	adds	r3, #3
    22b6:	1a9b      	subs	r3, r3, r2
    22b8:	089b      	lsrs	r3, r3, #2
    22ba:	3301      	adds	r3, #1
    22bc:	009b      	lsls	r3, r3, #2
    22be:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    22c0:	4823      	ldr	r0, [pc, #140]	; (2350 <Reset_Handler+0xb0>)
    22c2:	4922      	ldr	r1, [pc, #136]	; (234c <Reset_Handler+0xac>)
    22c4:	588c      	ldr	r4, [r1, r2]
    22c6:	5084      	str	r4, [r0, r2]
    22c8:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    22ca:	429a      	cmp	r2, r3
    22cc:	d1fa      	bne.n	22c4 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    22ce:	4a23      	ldr	r2, [pc, #140]	; (235c <Reset_Handler+0xbc>)
    22d0:	4b23      	ldr	r3, [pc, #140]	; (2360 <Reset_Handler+0xc0>)
    22d2:	429a      	cmp	r2, r3
    22d4:	d20a      	bcs.n	22ec <Reset_Handler+0x4c>
    22d6:	43d3      	mvns	r3, r2
    22d8:	4921      	ldr	r1, [pc, #132]	; (2360 <Reset_Handler+0xc0>)
    22da:	185b      	adds	r3, r3, r1
    22dc:	2103      	movs	r1, #3
    22de:	438b      	bics	r3, r1
    22e0:	3304      	adds	r3, #4
    22e2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    22e4:	2100      	movs	r1, #0
    22e6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    22e8:	4293      	cmp	r3, r2
    22ea:	d1fc      	bne.n	22e6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    22ec:	4a1d      	ldr	r2, [pc, #116]	; (2364 <Reset_Handler+0xc4>)
    22ee:	21ff      	movs	r1, #255	; 0xff
    22f0:	4b1d      	ldr	r3, [pc, #116]	; (2368 <Reset_Handler+0xc8>)
    22f2:	438b      	bics	r3, r1
    22f4:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    22f6:	39fd      	subs	r1, #253	; 0xfd
    22f8:	2390      	movs	r3, #144	; 0x90
    22fa:	005b      	lsls	r3, r3, #1
    22fc:	4a1b      	ldr	r2, [pc, #108]	; (236c <Reset_Handler+0xcc>)
    22fe:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2300:	4a1b      	ldr	r2, [pc, #108]	; (2370 <Reset_Handler+0xd0>)
    2302:	78d3      	ldrb	r3, [r2, #3]
    2304:	2503      	movs	r5, #3
    2306:	43ab      	bics	r3, r5
    2308:	2402      	movs	r4, #2
    230a:	4323      	orrs	r3, r4
    230c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    230e:	78d3      	ldrb	r3, [r2, #3]
    2310:	270c      	movs	r7, #12
    2312:	43bb      	bics	r3, r7
    2314:	2608      	movs	r6, #8
    2316:	4333      	orrs	r3, r6
    2318:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    231a:	4b16      	ldr	r3, [pc, #88]	; (2374 <Reset_Handler+0xd4>)
    231c:	7b98      	ldrb	r0, [r3, #14]
    231e:	2230      	movs	r2, #48	; 0x30
    2320:	4390      	bics	r0, r2
    2322:	2220      	movs	r2, #32
    2324:	4310      	orrs	r0, r2
    2326:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2328:	7b99      	ldrb	r1, [r3, #14]
    232a:	43b9      	bics	r1, r7
    232c:	4331      	orrs	r1, r6
    232e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2330:	7b9a      	ldrb	r2, [r3, #14]
    2332:	43aa      	bics	r2, r5
    2334:	4322      	orrs	r2, r4
    2336:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2338:	4a0f      	ldr	r2, [pc, #60]	; (2378 <Reset_Handler+0xd8>)
    233a:	6853      	ldr	r3, [r2, #4]
    233c:	2180      	movs	r1, #128	; 0x80
    233e:	430b      	orrs	r3, r1
    2340:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2342:	4b0e      	ldr	r3, [pc, #56]	; (237c <Reset_Handler+0xdc>)
    2344:	4798      	blx	r3
        main();
    2346:	4b0e      	ldr	r3, [pc, #56]	; (2380 <Reset_Handler+0xe0>)
    2348:	4798      	blx	r3
    234a:	e7fe      	b.n	234a <Reset_Handler+0xaa>
    234c:	000047c8 	.word	0x000047c8
    2350:	20000000 	.word	0x20000000
    2354:	200001d8 	.word	0x200001d8
    2358:	20000004 	.word	0x20000004
    235c:	200001d8 	.word	0x200001d8
    2360:	200003d8 	.word	0x200003d8
    2364:	e000ed00 	.word	0xe000ed00
    2368:	00000000 	.word	0x00000000
    236c:	41007000 	.word	0x41007000
    2370:	41005000 	.word	0x41005000
    2374:	41004800 	.word	0x41004800
    2378:	41004000 	.word	0x41004000
    237c:	00002585 	.word	0x00002585
    2380:	00000b59 	.word	0x00000b59

00002384 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    2384:	b5f0      	push	{r4, r5, r6, r7, lr}
    2386:	46c6      	mov	lr, r8
    2388:	b500      	push	{lr}
    238a:	000c      	movs	r4, r1
    238c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    238e:	2800      	cmp	r0, #0
    2390:	d10f      	bne.n	23b2 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    2392:	2a00      	cmp	r2, #0
    2394:	dd11      	ble.n	23ba <_read+0x36>
    2396:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    2398:	4e09      	ldr	r6, [pc, #36]	; (23c0 <_read+0x3c>)
    239a:	4d0a      	ldr	r5, [pc, #40]	; (23c4 <_read+0x40>)
    239c:	6830      	ldr	r0, [r6, #0]
    239e:	0021      	movs	r1, r4
    23a0:	682b      	ldr	r3, [r5, #0]
    23a2:	4798      	blx	r3
		ptr++;
    23a4:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    23a6:	42bc      	cmp	r4, r7
    23a8:	d1f8      	bne.n	239c <_read+0x18>
		nChars++;
	}
	return nChars;
}
    23aa:	4640      	mov	r0, r8
    23ac:	bc04      	pop	{r2}
    23ae:	4690      	mov	r8, r2
    23b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    23b2:	2301      	movs	r3, #1
    23b4:	425b      	negs	r3, r3
    23b6:	4698      	mov	r8, r3
    23b8:	e7f7      	b.n	23aa <_read+0x26>
	for (; len > 0; --len) {
    23ba:	4680      	mov	r8, r0
    23bc:	e7f5      	b.n	23aa <_read+0x26>
    23be:	46c0      	nop			; (mov r8, r8)
    23c0:	200003d0 	.word	0x200003d0
    23c4:	200003c8 	.word	0x200003c8

000023c8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    23c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    23ca:	46c6      	mov	lr, r8
    23cc:	b500      	push	{lr}
    23ce:	000e      	movs	r6, r1
    23d0:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    23d2:	3801      	subs	r0, #1
    23d4:	2802      	cmp	r0, #2
    23d6:	d810      	bhi.n	23fa <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    23d8:	2a00      	cmp	r2, #0
    23da:	d011      	beq.n	2400 <_write+0x38>
    23dc:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    23de:	4b0c      	ldr	r3, [pc, #48]	; (2410 <_write+0x48>)
    23e0:	4698      	mov	r8, r3
    23e2:	4f0c      	ldr	r7, [pc, #48]	; (2414 <_write+0x4c>)
    23e4:	4643      	mov	r3, r8
    23e6:	6818      	ldr	r0, [r3, #0]
    23e8:	5d31      	ldrb	r1, [r6, r4]
    23ea:	683b      	ldr	r3, [r7, #0]
    23ec:	4798      	blx	r3
    23ee:	2800      	cmp	r0, #0
    23f0:	db08      	blt.n	2404 <_write+0x3c>
			return -1;
		}
		++nChars;
    23f2:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    23f4:	42a5      	cmp	r5, r4
    23f6:	d1f5      	bne.n	23e4 <_write+0x1c>
    23f8:	e006      	b.n	2408 <_write+0x40>
		return -1;
    23fa:	2401      	movs	r4, #1
    23fc:	4264      	negs	r4, r4
    23fe:	e003      	b.n	2408 <_write+0x40>
	for (; len != 0; --len) {
    2400:	0014      	movs	r4, r2
    2402:	e001      	b.n	2408 <_write+0x40>
			return -1;
    2404:	2401      	movs	r4, #1
    2406:	4264      	negs	r4, r4
	}
	return nChars;
}
    2408:	0020      	movs	r0, r4
    240a:	bc04      	pop	{r2}
    240c:	4690      	mov	r8, r2
    240e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2410:	200003d0 	.word	0x200003d0
    2414:	200003cc 	.word	0x200003cc

00002418 <__udivsi3>:
    2418:	2200      	movs	r2, #0
    241a:	0843      	lsrs	r3, r0, #1
    241c:	428b      	cmp	r3, r1
    241e:	d374      	bcc.n	250a <__udivsi3+0xf2>
    2420:	0903      	lsrs	r3, r0, #4
    2422:	428b      	cmp	r3, r1
    2424:	d35f      	bcc.n	24e6 <__udivsi3+0xce>
    2426:	0a03      	lsrs	r3, r0, #8
    2428:	428b      	cmp	r3, r1
    242a:	d344      	bcc.n	24b6 <__udivsi3+0x9e>
    242c:	0b03      	lsrs	r3, r0, #12
    242e:	428b      	cmp	r3, r1
    2430:	d328      	bcc.n	2484 <__udivsi3+0x6c>
    2432:	0c03      	lsrs	r3, r0, #16
    2434:	428b      	cmp	r3, r1
    2436:	d30d      	bcc.n	2454 <__udivsi3+0x3c>
    2438:	22ff      	movs	r2, #255	; 0xff
    243a:	0209      	lsls	r1, r1, #8
    243c:	ba12      	rev	r2, r2
    243e:	0c03      	lsrs	r3, r0, #16
    2440:	428b      	cmp	r3, r1
    2442:	d302      	bcc.n	244a <__udivsi3+0x32>
    2444:	1212      	asrs	r2, r2, #8
    2446:	0209      	lsls	r1, r1, #8
    2448:	d065      	beq.n	2516 <__udivsi3+0xfe>
    244a:	0b03      	lsrs	r3, r0, #12
    244c:	428b      	cmp	r3, r1
    244e:	d319      	bcc.n	2484 <__udivsi3+0x6c>
    2450:	e000      	b.n	2454 <__udivsi3+0x3c>
    2452:	0a09      	lsrs	r1, r1, #8
    2454:	0bc3      	lsrs	r3, r0, #15
    2456:	428b      	cmp	r3, r1
    2458:	d301      	bcc.n	245e <__udivsi3+0x46>
    245a:	03cb      	lsls	r3, r1, #15
    245c:	1ac0      	subs	r0, r0, r3
    245e:	4152      	adcs	r2, r2
    2460:	0b83      	lsrs	r3, r0, #14
    2462:	428b      	cmp	r3, r1
    2464:	d301      	bcc.n	246a <__udivsi3+0x52>
    2466:	038b      	lsls	r3, r1, #14
    2468:	1ac0      	subs	r0, r0, r3
    246a:	4152      	adcs	r2, r2
    246c:	0b43      	lsrs	r3, r0, #13
    246e:	428b      	cmp	r3, r1
    2470:	d301      	bcc.n	2476 <__udivsi3+0x5e>
    2472:	034b      	lsls	r3, r1, #13
    2474:	1ac0      	subs	r0, r0, r3
    2476:	4152      	adcs	r2, r2
    2478:	0b03      	lsrs	r3, r0, #12
    247a:	428b      	cmp	r3, r1
    247c:	d301      	bcc.n	2482 <__udivsi3+0x6a>
    247e:	030b      	lsls	r3, r1, #12
    2480:	1ac0      	subs	r0, r0, r3
    2482:	4152      	adcs	r2, r2
    2484:	0ac3      	lsrs	r3, r0, #11
    2486:	428b      	cmp	r3, r1
    2488:	d301      	bcc.n	248e <__udivsi3+0x76>
    248a:	02cb      	lsls	r3, r1, #11
    248c:	1ac0      	subs	r0, r0, r3
    248e:	4152      	adcs	r2, r2
    2490:	0a83      	lsrs	r3, r0, #10
    2492:	428b      	cmp	r3, r1
    2494:	d301      	bcc.n	249a <__udivsi3+0x82>
    2496:	028b      	lsls	r3, r1, #10
    2498:	1ac0      	subs	r0, r0, r3
    249a:	4152      	adcs	r2, r2
    249c:	0a43      	lsrs	r3, r0, #9
    249e:	428b      	cmp	r3, r1
    24a0:	d301      	bcc.n	24a6 <__udivsi3+0x8e>
    24a2:	024b      	lsls	r3, r1, #9
    24a4:	1ac0      	subs	r0, r0, r3
    24a6:	4152      	adcs	r2, r2
    24a8:	0a03      	lsrs	r3, r0, #8
    24aa:	428b      	cmp	r3, r1
    24ac:	d301      	bcc.n	24b2 <__udivsi3+0x9a>
    24ae:	020b      	lsls	r3, r1, #8
    24b0:	1ac0      	subs	r0, r0, r3
    24b2:	4152      	adcs	r2, r2
    24b4:	d2cd      	bcs.n	2452 <__udivsi3+0x3a>
    24b6:	09c3      	lsrs	r3, r0, #7
    24b8:	428b      	cmp	r3, r1
    24ba:	d301      	bcc.n	24c0 <__udivsi3+0xa8>
    24bc:	01cb      	lsls	r3, r1, #7
    24be:	1ac0      	subs	r0, r0, r3
    24c0:	4152      	adcs	r2, r2
    24c2:	0983      	lsrs	r3, r0, #6
    24c4:	428b      	cmp	r3, r1
    24c6:	d301      	bcc.n	24cc <__udivsi3+0xb4>
    24c8:	018b      	lsls	r3, r1, #6
    24ca:	1ac0      	subs	r0, r0, r3
    24cc:	4152      	adcs	r2, r2
    24ce:	0943      	lsrs	r3, r0, #5
    24d0:	428b      	cmp	r3, r1
    24d2:	d301      	bcc.n	24d8 <__udivsi3+0xc0>
    24d4:	014b      	lsls	r3, r1, #5
    24d6:	1ac0      	subs	r0, r0, r3
    24d8:	4152      	adcs	r2, r2
    24da:	0903      	lsrs	r3, r0, #4
    24dc:	428b      	cmp	r3, r1
    24de:	d301      	bcc.n	24e4 <__udivsi3+0xcc>
    24e0:	010b      	lsls	r3, r1, #4
    24e2:	1ac0      	subs	r0, r0, r3
    24e4:	4152      	adcs	r2, r2
    24e6:	08c3      	lsrs	r3, r0, #3
    24e8:	428b      	cmp	r3, r1
    24ea:	d301      	bcc.n	24f0 <__udivsi3+0xd8>
    24ec:	00cb      	lsls	r3, r1, #3
    24ee:	1ac0      	subs	r0, r0, r3
    24f0:	4152      	adcs	r2, r2
    24f2:	0883      	lsrs	r3, r0, #2
    24f4:	428b      	cmp	r3, r1
    24f6:	d301      	bcc.n	24fc <__udivsi3+0xe4>
    24f8:	008b      	lsls	r3, r1, #2
    24fa:	1ac0      	subs	r0, r0, r3
    24fc:	4152      	adcs	r2, r2
    24fe:	0843      	lsrs	r3, r0, #1
    2500:	428b      	cmp	r3, r1
    2502:	d301      	bcc.n	2508 <__udivsi3+0xf0>
    2504:	004b      	lsls	r3, r1, #1
    2506:	1ac0      	subs	r0, r0, r3
    2508:	4152      	adcs	r2, r2
    250a:	1a41      	subs	r1, r0, r1
    250c:	d200      	bcs.n	2510 <__udivsi3+0xf8>
    250e:	4601      	mov	r1, r0
    2510:	4152      	adcs	r2, r2
    2512:	4610      	mov	r0, r2
    2514:	4770      	bx	lr
    2516:	e7ff      	b.n	2518 <__udivsi3+0x100>
    2518:	b501      	push	{r0, lr}
    251a:	2000      	movs	r0, #0
    251c:	f000 f806 	bl	252c <__aeabi_idiv0>
    2520:	bd02      	pop	{r1, pc}
    2522:	46c0      	nop			; (mov r8, r8)

00002524 <__aeabi_uidivmod>:
    2524:	2900      	cmp	r1, #0
    2526:	d0f7      	beq.n	2518 <__udivsi3+0x100>
    2528:	e776      	b.n	2418 <__udivsi3>
    252a:	4770      	bx	lr

0000252c <__aeabi_idiv0>:
    252c:	4770      	bx	lr
    252e:	46c0      	nop			; (mov r8, r8)

00002530 <__aeabi_lmul>:
    2530:	b5f0      	push	{r4, r5, r6, r7, lr}
    2532:	46ce      	mov	lr, r9
    2534:	4647      	mov	r7, r8
    2536:	0415      	lsls	r5, r2, #16
    2538:	0c2d      	lsrs	r5, r5, #16
    253a:	002e      	movs	r6, r5
    253c:	b580      	push	{r7, lr}
    253e:	0407      	lsls	r7, r0, #16
    2540:	0c14      	lsrs	r4, r2, #16
    2542:	0c3f      	lsrs	r7, r7, #16
    2544:	4699      	mov	r9, r3
    2546:	0c03      	lsrs	r3, r0, #16
    2548:	437e      	muls	r6, r7
    254a:	435d      	muls	r5, r3
    254c:	4367      	muls	r7, r4
    254e:	4363      	muls	r3, r4
    2550:	197f      	adds	r7, r7, r5
    2552:	0c34      	lsrs	r4, r6, #16
    2554:	19e4      	adds	r4, r4, r7
    2556:	469c      	mov	ip, r3
    2558:	42a5      	cmp	r5, r4
    255a:	d903      	bls.n	2564 <__aeabi_lmul+0x34>
    255c:	2380      	movs	r3, #128	; 0x80
    255e:	025b      	lsls	r3, r3, #9
    2560:	4698      	mov	r8, r3
    2562:	44c4      	add	ip, r8
    2564:	464b      	mov	r3, r9
    2566:	4351      	muls	r1, r2
    2568:	4343      	muls	r3, r0
    256a:	0436      	lsls	r6, r6, #16
    256c:	0c36      	lsrs	r6, r6, #16
    256e:	0c25      	lsrs	r5, r4, #16
    2570:	0424      	lsls	r4, r4, #16
    2572:	4465      	add	r5, ip
    2574:	19a4      	adds	r4, r4, r6
    2576:	1859      	adds	r1, r3, r1
    2578:	1949      	adds	r1, r1, r5
    257a:	0020      	movs	r0, r4
    257c:	bc0c      	pop	{r2, r3}
    257e:	4690      	mov	r8, r2
    2580:	4699      	mov	r9, r3
    2582:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002584 <__libc_init_array>:
    2584:	b570      	push	{r4, r5, r6, lr}
    2586:	2600      	movs	r6, #0
    2588:	4d0c      	ldr	r5, [pc, #48]	; (25bc <__libc_init_array+0x38>)
    258a:	4c0d      	ldr	r4, [pc, #52]	; (25c0 <__libc_init_array+0x3c>)
    258c:	1b64      	subs	r4, r4, r5
    258e:	10a4      	asrs	r4, r4, #2
    2590:	42a6      	cmp	r6, r4
    2592:	d109      	bne.n	25a8 <__libc_init_array+0x24>
    2594:	2600      	movs	r6, #0
    2596:	f002 f907 	bl	47a8 <_init>
    259a:	4d0a      	ldr	r5, [pc, #40]	; (25c4 <__libc_init_array+0x40>)
    259c:	4c0a      	ldr	r4, [pc, #40]	; (25c8 <__libc_init_array+0x44>)
    259e:	1b64      	subs	r4, r4, r5
    25a0:	10a4      	asrs	r4, r4, #2
    25a2:	42a6      	cmp	r6, r4
    25a4:	d105      	bne.n	25b2 <__libc_init_array+0x2e>
    25a6:	bd70      	pop	{r4, r5, r6, pc}
    25a8:	00b3      	lsls	r3, r6, #2
    25aa:	58eb      	ldr	r3, [r5, r3]
    25ac:	4798      	blx	r3
    25ae:	3601      	adds	r6, #1
    25b0:	e7ee      	b.n	2590 <__libc_init_array+0xc>
    25b2:	00b3      	lsls	r3, r6, #2
    25b4:	58eb      	ldr	r3, [r5, r3]
    25b6:	4798      	blx	r3
    25b8:	3601      	adds	r6, #1
    25ba:	e7f2      	b.n	25a2 <__libc_init_array+0x1e>
    25bc:	000047b4 	.word	0x000047b4
    25c0:	000047b4 	.word	0x000047b4
    25c4:	000047b4 	.word	0x000047b4
    25c8:	000047b8 	.word	0x000047b8

000025cc <memcmp>:
    25cc:	b530      	push	{r4, r5, lr}
    25ce:	2400      	movs	r4, #0
    25d0:	42a2      	cmp	r2, r4
    25d2:	d101      	bne.n	25d8 <memcmp+0xc>
    25d4:	2000      	movs	r0, #0
    25d6:	e005      	b.n	25e4 <memcmp+0x18>
    25d8:	5d03      	ldrb	r3, [r0, r4]
    25da:	1c65      	adds	r5, r4, #1
    25dc:	5d0c      	ldrb	r4, [r1, r4]
    25de:	42a3      	cmp	r3, r4
    25e0:	d001      	beq.n	25e6 <memcmp+0x1a>
    25e2:	1b18      	subs	r0, r3, r4
    25e4:	bd30      	pop	{r4, r5, pc}
    25e6:	002c      	movs	r4, r5
    25e8:	e7f2      	b.n	25d0 <memcmp+0x4>

000025ea <memcpy>:
    25ea:	2300      	movs	r3, #0
    25ec:	b510      	push	{r4, lr}
    25ee:	429a      	cmp	r2, r3
    25f0:	d100      	bne.n	25f4 <memcpy+0xa>
    25f2:	bd10      	pop	{r4, pc}
    25f4:	5ccc      	ldrb	r4, [r1, r3]
    25f6:	54c4      	strb	r4, [r0, r3]
    25f8:	3301      	adds	r3, #1
    25fa:	e7f8      	b.n	25ee <memcpy+0x4>

000025fc <memset>:
    25fc:	0003      	movs	r3, r0
    25fe:	1882      	adds	r2, r0, r2
    2600:	4293      	cmp	r3, r2
    2602:	d100      	bne.n	2606 <memset+0xa>
    2604:	4770      	bx	lr
    2606:	7019      	strb	r1, [r3, #0]
    2608:	3301      	adds	r3, #1
    260a:	e7f9      	b.n	2600 <memset+0x4>

0000260c <iprintf>:
    260c:	b40f      	push	{r0, r1, r2, r3}
    260e:	4b0b      	ldr	r3, [pc, #44]	; (263c <iprintf+0x30>)
    2610:	b513      	push	{r0, r1, r4, lr}
    2612:	681c      	ldr	r4, [r3, #0]
    2614:	2c00      	cmp	r4, #0
    2616:	d005      	beq.n	2624 <iprintf+0x18>
    2618:	69a3      	ldr	r3, [r4, #24]
    261a:	2b00      	cmp	r3, #0
    261c:	d102      	bne.n	2624 <iprintf+0x18>
    261e:	0020      	movs	r0, r4
    2620:	f000 fb34 	bl	2c8c <__sinit>
    2624:	ab05      	add	r3, sp, #20
    2626:	9a04      	ldr	r2, [sp, #16]
    2628:	68a1      	ldr	r1, [r4, #8]
    262a:	0020      	movs	r0, r4
    262c:	9301      	str	r3, [sp, #4]
    262e:	f000 fd25 	bl	307c <_vfiprintf_r>
    2632:	bc16      	pop	{r1, r2, r4}
    2634:	bc08      	pop	{r3}
    2636:	b004      	add	sp, #16
    2638:	4718      	bx	r3
    263a:	46c0      	nop			; (mov r8, r8)
    263c:	20000008 	.word	0x20000008

00002640 <putchar>:
    2640:	4b08      	ldr	r3, [pc, #32]	; (2664 <putchar+0x24>)
    2642:	b570      	push	{r4, r5, r6, lr}
    2644:	681c      	ldr	r4, [r3, #0]
    2646:	0005      	movs	r5, r0
    2648:	2c00      	cmp	r4, #0
    264a:	d005      	beq.n	2658 <putchar+0x18>
    264c:	69a3      	ldr	r3, [r4, #24]
    264e:	2b00      	cmp	r3, #0
    2650:	d102      	bne.n	2658 <putchar+0x18>
    2652:	0020      	movs	r0, r4
    2654:	f000 fb1a 	bl	2c8c <__sinit>
    2658:	0029      	movs	r1, r5
    265a:	68a2      	ldr	r2, [r4, #8]
    265c:	0020      	movs	r0, r4
    265e:	f001 fac3 	bl	3be8 <_putc_r>
    2662:	bd70      	pop	{r4, r5, r6, pc}
    2664:	20000008 	.word	0x20000008

00002668 <_puts_r>:
    2668:	b570      	push	{r4, r5, r6, lr}
    266a:	0005      	movs	r5, r0
    266c:	000e      	movs	r6, r1
    266e:	2800      	cmp	r0, #0
    2670:	d004      	beq.n	267c <_puts_r+0x14>
    2672:	6983      	ldr	r3, [r0, #24]
    2674:	2b00      	cmp	r3, #0
    2676:	d101      	bne.n	267c <_puts_r+0x14>
    2678:	f000 fb08 	bl	2c8c <__sinit>
    267c:	69ab      	ldr	r3, [r5, #24]
    267e:	68ac      	ldr	r4, [r5, #8]
    2680:	2b00      	cmp	r3, #0
    2682:	d102      	bne.n	268a <_puts_r+0x22>
    2684:	0028      	movs	r0, r5
    2686:	f000 fb01 	bl	2c8c <__sinit>
    268a:	4b24      	ldr	r3, [pc, #144]	; (271c <_puts_r+0xb4>)
    268c:	429c      	cmp	r4, r3
    268e:	d10f      	bne.n	26b0 <_puts_r+0x48>
    2690:	686c      	ldr	r4, [r5, #4]
    2692:	89a3      	ldrh	r3, [r4, #12]
    2694:	071b      	lsls	r3, r3, #28
    2696:	d502      	bpl.n	269e <_puts_r+0x36>
    2698:	6923      	ldr	r3, [r4, #16]
    269a:	2b00      	cmp	r3, #0
    269c:	d120      	bne.n	26e0 <_puts_r+0x78>
    269e:	0021      	movs	r1, r4
    26a0:	0028      	movs	r0, r5
    26a2:	f000 f971 	bl	2988 <__swsetup_r>
    26a6:	2800      	cmp	r0, #0
    26a8:	d01a      	beq.n	26e0 <_puts_r+0x78>
    26aa:	2001      	movs	r0, #1
    26ac:	4240      	negs	r0, r0
    26ae:	bd70      	pop	{r4, r5, r6, pc}
    26b0:	4b1b      	ldr	r3, [pc, #108]	; (2720 <_puts_r+0xb8>)
    26b2:	429c      	cmp	r4, r3
    26b4:	d101      	bne.n	26ba <_puts_r+0x52>
    26b6:	68ac      	ldr	r4, [r5, #8]
    26b8:	e7eb      	b.n	2692 <_puts_r+0x2a>
    26ba:	4b1a      	ldr	r3, [pc, #104]	; (2724 <_puts_r+0xbc>)
    26bc:	429c      	cmp	r4, r3
    26be:	d1e8      	bne.n	2692 <_puts_r+0x2a>
    26c0:	68ec      	ldr	r4, [r5, #12]
    26c2:	e7e6      	b.n	2692 <_puts_r+0x2a>
    26c4:	3b01      	subs	r3, #1
    26c6:	3601      	adds	r6, #1
    26c8:	60a3      	str	r3, [r4, #8]
    26ca:	2b00      	cmp	r3, #0
    26cc:	da04      	bge.n	26d8 <_puts_r+0x70>
    26ce:	69a2      	ldr	r2, [r4, #24]
    26d0:	4293      	cmp	r3, r2
    26d2:	db16      	blt.n	2702 <_puts_r+0x9a>
    26d4:	290a      	cmp	r1, #10
    26d6:	d014      	beq.n	2702 <_puts_r+0x9a>
    26d8:	6823      	ldr	r3, [r4, #0]
    26da:	1c5a      	adds	r2, r3, #1
    26dc:	6022      	str	r2, [r4, #0]
    26de:	7019      	strb	r1, [r3, #0]
    26e0:	7831      	ldrb	r1, [r6, #0]
    26e2:	68a3      	ldr	r3, [r4, #8]
    26e4:	2900      	cmp	r1, #0
    26e6:	d1ed      	bne.n	26c4 <_puts_r+0x5c>
    26e8:	3b01      	subs	r3, #1
    26ea:	60a3      	str	r3, [r4, #8]
    26ec:	2b00      	cmp	r3, #0
    26ee:	da0f      	bge.n	2710 <_puts_r+0xa8>
    26f0:	0022      	movs	r2, r4
    26f2:	310a      	adds	r1, #10
    26f4:	0028      	movs	r0, r5
    26f6:	f000 f8f1 	bl	28dc <__swbuf_r>
    26fa:	1c43      	adds	r3, r0, #1
    26fc:	d0d5      	beq.n	26aa <_puts_r+0x42>
    26fe:	200a      	movs	r0, #10
    2700:	e7d5      	b.n	26ae <_puts_r+0x46>
    2702:	0022      	movs	r2, r4
    2704:	0028      	movs	r0, r5
    2706:	f000 f8e9 	bl	28dc <__swbuf_r>
    270a:	1c43      	adds	r3, r0, #1
    270c:	d1e8      	bne.n	26e0 <_puts_r+0x78>
    270e:	e7cc      	b.n	26aa <_puts_r+0x42>
    2710:	200a      	movs	r0, #10
    2712:	6823      	ldr	r3, [r4, #0]
    2714:	1c5a      	adds	r2, r3, #1
    2716:	6022      	str	r2, [r4, #0]
    2718:	7018      	strb	r0, [r3, #0]
    271a:	e7c8      	b.n	26ae <_puts_r+0x46>
    271c:	00004600 	.word	0x00004600
    2720:	00004620 	.word	0x00004620
    2724:	000045e0 	.word	0x000045e0

00002728 <puts>:
    2728:	b510      	push	{r4, lr}
    272a:	4b03      	ldr	r3, [pc, #12]	; (2738 <puts+0x10>)
    272c:	0001      	movs	r1, r0
    272e:	6818      	ldr	r0, [r3, #0]
    2730:	f7ff ff9a 	bl	2668 <_puts_r>
    2734:	bd10      	pop	{r4, pc}
    2736:	46c0      	nop			; (mov r8, r8)
    2738:	20000008 	.word	0x20000008

0000273c <iscanf>:
    273c:	b40f      	push	{r0, r1, r2, r3}
    273e:	4b0b      	ldr	r3, [pc, #44]	; (276c <iscanf+0x30>)
    2740:	b513      	push	{r0, r1, r4, lr}
    2742:	681c      	ldr	r4, [r3, #0]
    2744:	2c00      	cmp	r4, #0
    2746:	d005      	beq.n	2754 <iscanf+0x18>
    2748:	69a3      	ldr	r3, [r4, #24]
    274a:	2b00      	cmp	r3, #0
    274c:	d102      	bne.n	2754 <iscanf+0x18>
    274e:	0020      	movs	r0, r4
    2750:	f000 fa9c 	bl	2c8c <__sinit>
    2754:	ab05      	add	r3, sp, #20
    2756:	9a04      	ldr	r2, [sp, #16]
    2758:	6861      	ldr	r1, [r4, #4]
    275a:	0020      	movs	r0, r4
    275c:	9301      	str	r3, [sp, #4]
    275e:	f001 f8b7 	bl	38d0 <_vfiscanf_r>
    2762:	bc16      	pop	{r1, r2, r4}
    2764:	bc08      	pop	{r3}
    2766:	b004      	add	sp, #16
    2768:	4718      	bx	r3
    276a:	46c0      	nop			; (mov r8, r8)
    276c:	20000008 	.word	0x20000008

00002770 <setbuf>:
    2770:	424a      	negs	r2, r1
    2772:	414a      	adcs	r2, r1
    2774:	2380      	movs	r3, #128	; 0x80
    2776:	b510      	push	{r4, lr}
    2778:	0052      	lsls	r2, r2, #1
    277a:	00db      	lsls	r3, r3, #3
    277c:	f000 f802 	bl	2784 <setvbuf>
    2780:	bd10      	pop	{r4, pc}
	...

00002784 <setvbuf>:
    2784:	b5f0      	push	{r4, r5, r6, r7, lr}
    2786:	001d      	movs	r5, r3
    2788:	4b4f      	ldr	r3, [pc, #316]	; (28c8 <setvbuf+0x144>)
    278a:	b085      	sub	sp, #20
    278c:	681e      	ldr	r6, [r3, #0]
    278e:	0004      	movs	r4, r0
    2790:	000f      	movs	r7, r1
    2792:	9200      	str	r2, [sp, #0]
    2794:	2e00      	cmp	r6, #0
    2796:	d005      	beq.n	27a4 <setvbuf+0x20>
    2798:	69b3      	ldr	r3, [r6, #24]
    279a:	2b00      	cmp	r3, #0
    279c:	d102      	bne.n	27a4 <setvbuf+0x20>
    279e:	0030      	movs	r0, r6
    27a0:	f000 fa74 	bl	2c8c <__sinit>
    27a4:	4b49      	ldr	r3, [pc, #292]	; (28cc <setvbuf+0x148>)
    27a6:	429c      	cmp	r4, r3
    27a8:	d150      	bne.n	284c <setvbuf+0xc8>
    27aa:	6874      	ldr	r4, [r6, #4]
    27ac:	9b00      	ldr	r3, [sp, #0]
    27ae:	2b02      	cmp	r3, #2
    27b0:	d005      	beq.n	27be <setvbuf+0x3a>
    27b2:	2b01      	cmp	r3, #1
    27b4:	d900      	bls.n	27b8 <setvbuf+0x34>
    27b6:	e084      	b.n	28c2 <setvbuf+0x13e>
    27b8:	2d00      	cmp	r5, #0
    27ba:	da00      	bge.n	27be <setvbuf+0x3a>
    27bc:	e081      	b.n	28c2 <setvbuf+0x13e>
    27be:	0021      	movs	r1, r4
    27c0:	0030      	movs	r0, r6
    27c2:	f000 f9e1 	bl	2b88 <_fflush_r>
    27c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    27c8:	2900      	cmp	r1, #0
    27ca:	d008      	beq.n	27de <setvbuf+0x5a>
    27cc:	0023      	movs	r3, r4
    27ce:	3344      	adds	r3, #68	; 0x44
    27d0:	4299      	cmp	r1, r3
    27d2:	d002      	beq.n	27da <setvbuf+0x56>
    27d4:	0030      	movs	r0, r6
    27d6:	f000 fb81 	bl	2edc <_free_r>
    27da:	2300      	movs	r3, #0
    27dc:	6363      	str	r3, [r4, #52]	; 0x34
    27de:	2300      	movs	r3, #0
    27e0:	61a3      	str	r3, [r4, #24]
    27e2:	6063      	str	r3, [r4, #4]
    27e4:	89a3      	ldrh	r3, [r4, #12]
    27e6:	061b      	lsls	r3, r3, #24
    27e8:	d503      	bpl.n	27f2 <setvbuf+0x6e>
    27ea:	6921      	ldr	r1, [r4, #16]
    27ec:	0030      	movs	r0, r6
    27ee:	f000 fb75 	bl	2edc <_free_r>
    27f2:	89a3      	ldrh	r3, [r4, #12]
    27f4:	4a36      	ldr	r2, [pc, #216]	; (28d0 <setvbuf+0x14c>)
    27f6:	4013      	ands	r3, r2
    27f8:	81a3      	strh	r3, [r4, #12]
    27fa:	9b00      	ldr	r3, [sp, #0]
    27fc:	2b02      	cmp	r3, #2
    27fe:	d05a      	beq.n	28b6 <setvbuf+0x132>
    2800:	ab03      	add	r3, sp, #12
    2802:	aa02      	add	r2, sp, #8
    2804:	0021      	movs	r1, r4
    2806:	0030      	movs	r0, r6
    2808:	f000 faf2 	bl	2df0 <__swhatbuf_r>
    280c:	89a3      	ldrh	r3, [r4, #12]
    280e:	4318      	orrs	r0, r3
    2810:	81a0      	strh	r0, [r4, #12]
    2812:	2d00      	cmp	r5, #0
    2814:	d124      	bne.n	2860 <setvbuf+0xdc>
    2816:	9d02      	ldr	r5, [sp, #8]
    2818:	0028      	movs	r0, r5
    281a:	f000 fb55 	bl	2ec8 <malloc>
    281e:	9501      	str	r5, [sp, #4]
    2820:	1e07      	subs	r7, r0, #0
    2822:	d142      	bne.n	28aa <setvbuf+0x126>
    2824:	9b02      	ldr	r3, [sp, #8]
    2826:	9301      	str	r3, [sp, #4]
    2828:	42ab      	cmp	r3, r5
    282a:	d139      	bne.n	28a0 <setvbuf+0x11c>
    282c:	2001      	movs	r0, #1
    282e:	4240      	negs	r0, r0
    2830:	2302      	movs	r3, #2
    2832:	89a2      	ldrh	r2, [r4, #12]
    2834:	4313      	orrs	r3, r2
    2836:	81a3      	strh	r3, [r4, #12]
    2838:	2300      	movs	r3, #0
    283a:	60a3      	str	r3, [r4, #8]
    283c:	0023      	movs	r3, r4
    283e:	3347      	adds	r3, #71	; 0x47
    2840:	6023      	str	r3, [r4, #0]
    2842:	6123      	str	r3, [r4, #16]
    2844:	2301      	movs	r3, #1
    2846:	6163      	str	r3, [r4, #20]
    2848:	b005      	add	sp, #20
    284a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    284c:	4b21      	ldr	r3, [pc, #132]	; (28d4 <setvbuf+0x150>)
    284e:	429c      	cmp	r4, r3
    2850:	d101      	bne.n	2856 <setvbuf+0xd2>
    2852:	68b4      	ldr	r4, [r6, #8]
    2854:	e7aa      	b.n	27ac <setvbuf+0x28>
    2856:	4b20      	ldr	r3, [pc, #128]	; (28d8 <setvbuf+0x154>)
    2858:	429c      	cmp	r4, r3
    285a:	d1a7      	bne.n	27ac <setvbuf+0x28>
    285c:	68f4      	ldr	r4, [r6, #12]
    285e:	e7a5      	b.n	27ac <setvbuf+0x28>
    2860:	2f00      	cmp	r7, #0
    2862:	d0d9      	beq.n	2818 <setvbuf+0x94>
    2864:	69b3      	ldr	r3, [r6, #24]
    2866:	2b00      	cmp	r3, #0
    2868:	d102      	bne.n	2870 <setvbuf+0xec>
    286a:	0030      	movs	r0, r6
    286c:	f000 fa0e 	bl	2c8c <__sinit>
    2870:	9b00      	ldr	r3, [sp, #0]
    2872:	2b01      	cmp	r3, #1
    2874:	d103      	bne.n	287e <setvbuf+0xfa>
    2876:	89a3      	ldrh	r3, [r4, #12]
    2878:	9a00      	ldr	r2, [sp, #0]
    287a:	431a      	orrs	r2, r3
    287c:	81a2      	strh	r2, [r4, #12]
    287e:	2008      	movs	r0, #8
    2880:	89a3      	ldrh	r3, [r4, #12]
    2882:	6027      	str	r7, [r4, #0]
    2884:	6127      	str	r7, [r4, #16]
    2886:	6165      	str	r5, [r4, #20]
    2888:	4018      	ands	r0, r3
    288a:	d018      	beq.n	28be <setvbuf+0x13a>
    288c:	2001      	movs	r0, #1
    288e:	4018      	ands	r0, r3
    2890:	2300      	movs	r3, #0
    2892:	4298      	cmp	r0, r3
    2894:	d011      	beq.n	28ba <setvbuf+0x136>
    2896:	426d      	negs	r5, r5
    2898:	60a3      	str	r3, [r4, #8]
    289a:	61a5      	str	r5, [r4, #24]
    289c:	0018      	movs	r0, r3
    289e:	e7d3      	b.n	2848 <setvbuf+0xc4>
    28a0:	9801      	ldr	r0, [sp, #4]
    28a2:	f000 fb11 	bl	2ec8 <malloc>
    28a6:	1e07      	subs	r7, r0, #0
    28a8:	d0c0      	beq.n	282c <setvbuf+0xa8>
    28aa:	2380      	movs	r3, #128	; 0x80
    28ac:	89a2      	ldrh	r2, [r4, #12]
    28ae:	9d01      	ldr	r5, [sp, #4]
    28b0:	4313      	orrs	r3, r2
    28b2:	81a3      	strh	r3, [r4, #12]
    28b4:	e7d6      	b.n	2864 <setvbuf+0xe0>
    28b6:	2000      	movs	r0, #0
    28b8:	e7ba      	b.n	2830 <setvbuf+0xac>
    28ba:	60a5      	str	r5, [r4, #8]
    28bc:	e7c4      	b.n	2848 <setvbuf+0xc4>
    28be:	60a0      	str	r0, [r4, #8]
    28c0:	e7c2      	b.n	2848 <setvbuf+0xc4>
    28c2:	2001      	movs	r0, #1
    28c4:	4240      	negs	r0, r0
    28c6:	e7bf      	b.n	2848 <setvbuf+0xc4>
    28c8:	20000008 	.word	0x20000008
    28cc:	00004600 	.word	0x00004600
    28d0:	fffff35c 	.word	0xfffff35c
    28d4:	00004620 	.word	0x00004620
    28d8:	000045e0 	.word	0x000045e0

000028dc <__swbuf_r>:
    28dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28de:	0005      	movs	r5, r0
    28e0:	000e      	movs	r6, r1
    28e2:	0014      	movs	r4, r2
    28e4:	2800      	cmp	r0, #0
    28e6:	d004      	beq.n	28f2 <__swbuf_r+0x16>
    28e8:	6983      	ldr	r3, [r0, #24]
    28ea:	2b00      	cmp	r3, #0
    28ec:	d101      	bne.n	28f2 <__swbuf_r+0x16>
    28ee:	f000 f9cd 	bl	2c8c <__sinit>
    28f2:	4b22      	ldr	r3, [pc, #136]	; (297c <__swbuf_r+0xa0>)
    28f4:	429c      	cmp	r4, r3
    28f6:	d12d      	bne.n	2954 <__swbuf_r+0x78>
    28f8:	686c      	ldr	r4, [r5, #4]
    28fa:	69a3      	ldr	r3, [r4, #24]
    28fc:	60a3      	str	r3, [r4, #8]
    28fe:	89a3      	ldrh	r3, [r4, #12]
    2900:	071b      	lsls	r3, r3, #28
    2902:	d531      	bpl.n	2968 <__swbuf_r+0x8c>
    2904:	6923      	ldr	r3, [r4, #16]
    2906:	2b00      	cmp	r3, #0
    2908:	d02e      	beq.n	2968 <__swbuf_r+0x8c>
    290a:	6823      	ldr	r3, [r4, #0]
    290c:	6922      	ldr	r2, [r4, #16]
    290e:	b2f7      	uxtb	r7, r6
    2910:	1a98      	subs	r0, r3, r2
    2912:	6963      	ldr	r3, [r4, #20]
    2914:	b2f6      	uxtb	r6, r6
    2916:	4298      	cmp	r0, r3
    2918:	db05      	blt.n	2926 <__swbuf_r+0x4a>
    291a:	0021      	movs	r1, r4
    291c:	0028      	movs	r0, r5
    291e:	f000 f933 	bl	2b88 <_fflush_r>
    2922:	2800      	cmp	r0, #0
    2924:	d126      	bne.n	2974 <__swbuf_r+0x98>
    2926:	68a3      	ldr	r3, [r4, #8]
    2928:	3001      	adds	r0, #1
    292a:	3b01      	subs	r3, #1
    292c:	60a3      	str	r3, [r4, #8]
    292e:	6823      	ldr	r3, [r4, #0]
    2930:	1c5a      	adds	r2, r3, #1
    2932:	6022      	str	r2, [r4, #0]
    2934:	701f      	strb	r7, [r3, #0]
    2936:	6963      	ldr	r3, [r4, #20]
    2938:	4298      	cmp	r0, r3
    293a:	d004      	beq.n	2946 <__swbuf_r+0x6a>
    293c:	89a3      	ldrh	r3, [r4, #12]
    293e:	07db      	lsls	r3, r3, #31
    2940:	d51a      	bpl.n	2978 <__swbuf_r+0x9c>
    2942:	2e0a      	cmp	r6, #10
    2944:	d118      	bne.n	2978 <__swbuf_r+0x9c>
    2946:	0021      	movs	r1, r4
    2948:	0028      	movs	r0, r5
    294a:	f000 f91d 	bl	2b88 <_fflush_r>
    294e:	2800      	cmp	r0, #0
    2950:	d012      	beq.n	2978 <__swbuf_r+0x9c>
    2952:	e00f      	b.n	2974 <__swbuf_r+0x98>
    2954:	4b0a      	ldr	r3, [pc, #40]	; (2980 <__swbuf_r+0xa4>)
    2956:	429c      	cmp	r4, r3
    2958:	d101      	bne.n	295e <__swbuf_r+0x82>
    295a:	68ac      	ldr	r4, [r5, #8]
    295c:	e7cd      	b.n	28fa <__swbuf_r+0x1e>
    295e:	4b09      	ldr	r3, [pc, #36]	; (2984 <__swbuf_r+0xa8>)
    2960:	429c      	cmp	r4, r3
    2962:	d1ca      	bne.n	28fa <__swbuf_r+0x1e>
    2964:	68ec      	ldr	r4, [r5, #12]
    2966:	e7c8      	b.n	28fa <__swbuf_r+0x1e>
    2968:	0021      	movs	r1, r4
    296a:	0028      	movs	r0, r5
    296c:	f000 f80c 	bl	2988 <__swsetup_r>
    2970:	2800      	cmp	r0, #0
    2972:	d0ca      	beq.n	290a <__swbuf_r+0x2e>
    2974:	2601      	movs	r6, #1
    2976:	4276      	negs	r6, r6
    2978:	0030      	movs	r0, r6
    297a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    297c:	00004600 	.word	0x00004600
    2980:	00004620 	.word	0x00004620
    2984:	000045e0 	.word	0x000045e0

00002988 <__swsetup_r>:
    2988:	4b36      	ldr	r3, [pc, #216]	; (2a64 <__swsetup_r+0xdc>)
    298a:	b570      	push	{r4, r5, r6, lr}
    298c:	681d      	ldr	r5, [r3, #0]
    298e:	0006      	movs	r6, r0
    2990:	000c      	movs	r4, r1
    2992:	2d00      	cmp	r5, #0
    2994:	d005      	beq.n	29a2 <__swsetup_r+0x1a>
    2996:	69ab      	ldr	r3, [r5, #24]
    2998:	2b00      	cmp	r3, #0
    299a:	d102      	bne.n	29a2 <__swsetup_r+0x1a>
    299c:	0028      	movs	r0, r5
    299e:	f000 f975 	bl	2c8c <__sinit>
    29a2:	4b31      	ldr	r3, [pc, #196]	; (2a68 <__swsetup_r+0xe0>)
    29a4:	429c      	cmp	r4, r3
    29a6:	d10f      	bne.n	29c8 <__swsetup_r+0x40>
    29a8:	686c      	ldr	r4, [r5, #4]
    29aa:	230c      	movs	r3, #12
    29ac:	5ee2      	ldrsh	r2, [r4, r3]
    29ae:	b293      	uxth	r3, r2
    29b0:	0719      	lsls	r1, r3, #28
    29b2:	d42d      	bmi.n	2a10 <__swsetup_r+0x88>
    29b4:	06d9      	lsls	r1, r3, #27
    29b6:	d411      	bmi.n	29dc <__swsetup_r+0x54>
    29b8:	2309      	movs	r3, #9
    29ba:	2001      	movs	r0, #1
    29bc:	6033      	str	r3, [r6, #0]
    29be:	3337      	adds	r3, #55	; 0x37
    29c0:	4313      	orrs	r3, r2
    29c2:	81a3      	strh	r3, [r4, #12]
    29c4:	4240      	negs	r0, r0
    29c6:	bd70      	pop	{r4, r5, r6, pc}
    29c8:	4b28      	ldr	r3, [pc, #160]	; (2a6c <__swsetup_r+0xe4>)
    29ca:	429c      	cmp	r4, r3
    29cc:	d101      	bne.n	29d2 <__swsetup_r+0x4a>
    29ce:	68ac      	ldr	r4, [r5, #8]
    29d0:	e7eb      	b.n	29aa <__swsetup_r+0x22>
    29d2:	4b27      	ldr	r3, [pc, #156]	; (2a70 <__swsetup_r+0xe8>)
    29d4:	429c      	cmp	r4, r3
    29d6:	d1e8      	bne.n	29aa <__swsetup_r+0x22>
    29d8:	68ec      	ldr	r4, [r5, #12]
    29da:	e7e6      	b.n	29aa <__swsetup_r+0x22>
    29dc:	075b      	lsls	r3, r3, #29
    29de:	d513      	bpl.n	2a08 <__swsetup_r+0x80>
    29e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    29e2:	2900      	cmp	r1, #0
    29e4:	d008      	beq.n	29f8 <__swsetup_r+0x70>
    29e6:	0023      	movs	r3, r4
    29e8:	3344      	adds	r3, #68	; 0x44
    29ea:	4299      	cmp	r1, r3
    29ec:	d002      	beq.n	29f4 <__swsetup_r+0x6c>
    29ee:	0030      	movs	r0, r6
    29f0:	f000 fa74 	bl	2edc <_free_r>
    29f4:	2300      	movs	r3, #0
    29f6:	6363      	str	r3, [r4, #52]	; 0x34
    29f8:	2224      	movs	r2, #36	; 0x24
    29fa:	89a3      	ldrh	r3, [r4, #12]
    29fc:	4393      	bics	r3, r2
    29fe:	81a3      	strh	r3, [r4, #12]
    2a00:	2300      	movs	r3, #0
    2a02:	6063      	str	r3, [r4, #4]
    2a04:	6923      	ldr	r3, [r4, #16]
    2a06:	6023      	str	r3, [r4, #0]
    2a08:	2308      	movs	r3, #8
    2a0a:	89a2      	ldrh	r2, [r4, #12]
    2a0c:	4313      	orrs	r3, r2
    2a0e:	81a3      	strh	r3, [r4, #12]
    2a10:	6923      	ldr	r3, [r4, #16]
    2a12:	2b00      	cmp	r3, #0
    2a14:	d10b      	bne.n	2a2e <__swsetup_r+0xa6>
    2a16:	21a0      	movs	r1, #160	; 0xa0
    2a18:	2280      	movs	r2, #128	; 0x80
    2a1a:	89a3      	ldrh	r3, [r4, #12]
    2a1c:	0089      	lsls	r1, r1, #2
    2a1e:	0092      	lsls	r2, r2, #2
    2a20:	400b      	ands	r3, r1
    2a22:	4293      	cmp	r3, r2
    2a24:	d003      	beq.n	2a2e <__swsetup_r+0xa6>
    2a26:	0021      	movs	r1, r4
    2a28:	0030      	movs	r0, r6
    2a2a:	f000 fa09 	bl	2e40 <__smakebuf_r>
    2a2e:	2301      	movs	r3, #1
    2a30:	89a2      	ldrh	r2, [r4, #12]
    2a32:	4013      	ands	r3, r2
    2a34:	d011      	beq.n	2a5a <__swsetup_r+0xd2>
    2a36:	2300      	movs	r3, #0
    2a38:	60a3      	str	r3, [r4, #8]
    2a3a:	6963      	ldr	r3, [r4, #20]
    2a3c:	425b      	negs	r3, r3
    2a3e:	61a3      	str	r3, [r4, #24]
    2a40:	2000      	movs	r0, #0
    2a42:	6923      	ldr	r3, [r4, #16]
    2a44:	4283      	cmp	r3, r0
    2a46:	d1be      	bne.n	29c6 <__swsetup_r+0x3e>
    2a48:	230c      	movs	r3, #12
    2a4a:	5ee2      	ldrsh	r2, [r4, r3]
    2a4c:	0613      	lsls	r3, r2, #24
    2a4e:	d5ba      	bpl.n	29c6 <__swsetup_r+0x3e>
    2a50:	2340      	movs	r3, #64	; 0x40
    2a52:	4313      	orrs	r3, r2
    2a54:	81a3      	strh	r3, [r4, #12]
    2a56:	3801      	subs	r0, #1
    2a58:	e7b5      	b.n	29c6 <__swsetup_r+0x3e>
    2a5a:	0792      	lsls	r2, r2, #30
    2a5c:	d400      	bmi.n	2a60 <__swsetup_r+0xd8>
    2a5e:	6963      	ldr	r3, [r4, #20]
    2a60:	60a3      	str	r3, [r4, #8]
    2a62:	e7ed      	b.n	2a40 <__swsetup_r+0xb8>
    2a64:	20000008 	.word	0x20000008
    2a68:	00004600 	.word	0x00004600
    2a6c:	00004620 	.word	0x00004620
    2a70:	000045e0 	.word	0x000045e0

00002a74 <__sflush_r>:
    2a74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2a76:	898a      	ldrh	r2, [r1, #12]
    2a78:	0005      	movs	r5, r0
    2a7a:	000c      	movs	r4, r1
    2a7c:	0713      	lsls	r3, r2, #28
    2a7e:	d460      	bmi.n	2b42 <__sflush_r+0xce>
    2a80:	684b      	ldr	r3, [r1, #4]
    2a82:	2b00      	cmp	r3, #0
    2a84:	dc04      	bgt.n	2a90 <__sflush_r+0x1c>
    2a86:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    2a88:	2b00      	cmp	r3, #0
    2a8a:	dc01      	bgt.n	2a90 <__sflush_r+0x1c>
    2a8c:	2000      	movs	r0, #0
    2a8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2a90:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2a92:	2f00      	cmp	r7, #0
    2a94:	d0fa      	beq.n	2a8c <__sflush_r+0x18>
    2a96:	2300      	movs	r3, #0
    2a98:	682e      	ldr	r6, [r5, #0]
    2a9a:	602b      	str	r3, [r5, #0]
    2a9c:	2380      	movs	r3, #128	; 0x80
    2a9e:	015b      	lsls	r3, r3, #5
    2aa0:	401a      	ands	r2, r3
    2aa2:	d034      	beq.n	2b0e <__sflush_r+0x9a>
    2aa4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    2aa6:	89a3      	ldrh	r3, [r4, #12]
    2aa8:	075b      	lsls	r3, r3, #29
    2aaa:	d506      	bpl.n	2aba <__sflush_r+0x46>
    2aac:	6863      	ldr	r3, [r4, #4]
    2aae:	1ac0      	subs	r0, r0, r3
    2ab0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2ab2:	2b00      	cmp	r3, #0
    2ab4:	d001      	beq.n	2aba <__sflush_r+0x46>
    2ab6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2ab8:	1ac0      	subs	r0, r0, r3
    2aba:	0002      	movs	r2, r0
    2abc:	6a21      	ldr	r1, [r4, #32]
    2abe:	2300      	movs	r3, #0
    2ac0:	0028      	movs	r0, r5
    2ac2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2ac4:	47b8      	blx	r7
    2ac6:	89a1      	ldrh	r1, [r4, #12]
    2ac8:	1c43      	adds	r3, r0, #1
    2aca:	d106      	bne.n	2ada <__sflush_r+0x66>
    2acc:	682b      	ldr	r3, [r5, #0]
    2ace:	2b1d      	cmp	r3, #29
    2ad0:	d831      	bhi.n	2b36 <__sflush_r+0xc2>
    2ad2:	4a2c      	ldr	r2, [pc, #176]	; (2b84 <__sflush_r+0x110>)
    2ad4:	40da      	lsrs	r2, r3
    2ad6:	07d3      	lsls	r3, r2, #31
    2ad8:	d52d      	bpl.n	2b36 <__sflush_r+0xc2>
    2ada:	2300      	movs	r3, #0
    2adc:	6063      	str	r3, [r4, #4]
    2ade:	6923      	ldr	r3, [r4, #16]
    2ae0:	6023      	str	r3, [r4, #0]
    2ae2:	04cb      	lsls	r3, r1, #19
    2ae4:	d505      	bpl.n	2af2 <__sflush_r+0x7e>
    2ae6:	1c43      	adds	r3, r0, #1
    2ae8:	d102      	bne.n	2af0 <__sflush_r+0x7c>
    2aea:	682b      	ldr	r3, [r5, #0]
    2aec:	2b00      	cmp	r3, #0
    2aee:	d100      	bne.n	2af2 <__sflush_r+0x7e>
    2af0:	6560      	str	r0, [r4, #84]	; 0x54
    2af2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2af4:	602e      	str	r6, [r5, #0]
    2af6:	2900      	cmp	r1, #0
    2af8:	d0c8      	beq.n	2a8c <__sflush_r+0x18>
    2afa:	0023      	movs	r3, r4
    2afc:	3344      	adds	r3, #68	; 0x44
    2afe:	4299      	cmp	r1, r3
    2b00:	d002      	beq.n	2b08 <__sflush_r+0x94>
    2b02:	0028      	movs	r0, r5
    2b04:	f000 f9ea 	bl	2edc <_free_r>
    2b08:	2000      	movs	r0, #0
    2b0a:	6360      	str	r0, [r4, #52]	; 0x34
    2b0c:	e7bf      	b.n	2a8e <__sflush_r+0x1a>
    2b0e:	2301      	movs	r3, #1
    2b10:	6a21      	ldr	r1, [r4, #32]
    2b12:	0028      	movs	r0, r5
    2b14:	47b8      	blx	r7
    2b16:	1c43      	adds	r3, r0, #1
    2b18:	d1c5      	bne.n	2aa6 <__sflush_r+0x32>
    2b1a:	682b      	ldr	r3, [r5, #0]
    2b1c:	2b00      	cmp	r3, #0
    2b1e:	d0c2      	beq.n	2aa6 <__sflush_r+0x32>
    2b20:	2b1d      	cmp	r3, #29
    2b22:	d001      	beq.n	2b28 <__sflush_r+0xb4>
    2b24:	2b16      	cmp	r3, #22
    2b26:	d101      	bne.n	2b2c <__sflush_r+0xb8>
    2b28:	602e      	str	r6, [r5, #0]
    2b2a:	e7af      	b.n	2a8c <__sflush_r+0x18>
    2b2c:	2340      	movs	r3, #64	; 0x40
    2b2e:	89a2      	ldrh	r2, [r4, #12]
    2b30:	4313      	orrs	r3, r2
    2b32:	81a3      	strh	r3, [r4, #12]
    2b34:	e7ab      	b.n	2a8e <__sflush_r+0x1a>
    2b36:	2340      	movs	r3, #64	; 0x40
    2b38:	430b      	orrs	r3, r1
    2b3a:	2001      	movs	r0, #1
    2b3c:	81a3      	strh	r3, [r4, #12]
    2b3e:	4240      	negs	r0, r0
    2b40:	e7a5      	b.n	2a8e <__sflush_r+0x1a>
    2b42:	690f      	ldr	r7, [r1, #16]
    2b44:	2f00      	cmp	r7, #0
    2b46:	d0a1      	beq.n	2a8c <__sflush_r+0x18>
    2b48:	680b      	ldr	r3, [r1, #0]
    2b4a:	600f      	str	r7, [r1, #0]
    2b4c:	1bdb      	subs	r3, r3, r7
    2b4e:	9301      	str	r3, [sp, #4]
    2b50:	2300      	movs	r3, #0
    2b52:	0792      	lsls	r2, r2, #30
    2b54:	d100      	bne.n	2b58 <__sflush_r+0xe4>
    2b56:	694b      	ldr	r3, [r1, #20]
    2b58:	60a3      	str	r3, [r4, #8]
    2b5a:	9b01      	ldr	r3, [sp, #4]
    2b5c:	2b00      	cmp	r3, #0
    2b5e:	dc00      	bgt.n	2b62 <__sflush_r+0xee>
    2b60:	e794      	b.n	2a8c <__sflush_r+0x18>
    2b62:	9b01      	ldr	r3, [sp, #4]
    2b64:	003a      	movs	r2, r7
    2b66:	6a21      	ldr	r1, [r4, #32]
    2b68:	0028      	movs	r0, r5
    2b6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2b6c:	47b0      	blx	r6
    2b6e:	2800      	cmp	r0, #0
    2b70:	dc03      	bgt.n	2b7a <__sflush_r+0x106>
    2b72:	2340      	movs	r3, #64	; 0x40
    2b74:	89a2      	ldrh	r2, [r4, #12]
    2b76:	4313      	orrs	r3, r2
    2b78:	e7df      	b.n	2b3a <__sflush_r+0xc6>
    2b7a:	9b01      	ldr	r3, [sp, #4]
    2b7c:	183f      	adds	r7, r7, r0
    2b7e:	1a1b      	subs	r3, r3, r0
    2b80:	9301      	str	r3, [sp, #4]
    2b82:	e7ea      	b.n	2b5a <__sflush_r+0xe6>
    2b84:	20400001 	.word	0x20400001

00002b88 <_fflush_r>:
    2b88:	690b      	ldr	r3, [r1, #16]
    2b8a:	b570      	push	{r4, r5, r6, lr}
    2b8c:	0005      	movs	r5, r0
    2b8e:	000c      	movs	r4, r1
    2b90:	2b00      	cmp	r3, #0
    2b92:	d101      	bne.n	2b98 <_fflush_r+0x10>
    2b94:	2000      	movs	r0, #0
    2b96:	bd70      	pop	{r4, r5, r6, pc}
    2b98:	2800      	cmp	r0, #0
    2b9a:	d004      	beq.n	2ba6 <_fflush_r+0x1e>
    2b9c:	6983      	ldr	r3, [r0, #24]
    2b9e:	2b00      	cmp	r3, #0
    2ba0:	d101      	bne.n	2ba6 <_fflush_r+0x1e>
    2ba2:	f000 f873 	bl	2c8c <__sinit>
    2ba6:	4b0b      	ldr	r3, [pc, #44]	; (2bd4 <_fflush_r+0x4c>)
    2ba8:	429c      	cmp	r4, r3
    2baa:	d109      	bne.n	2bc0 <_fflush_r+0x38>
    2bac:	686c      	ldr	r4, [r5, #4]
    2bae:	220c      	movs	r2, #12
    2bb0:	5ea3      	ldrsh	r3, [r4, r2]
    2bb2:	2b00      	cmp	r3, #0
    2bb4:	d0ee      	beq.n	2b94 <_fflush_r+0xc>
    2bb6:	0021      	movs	r1, r4
    2bb8:	0028      	movs	r0, r5
    2bba:	f7ff ff5b 	bl	2a74 <__sflush_r>
    2bbe:	e7ea      	b.n	2b96 <_fflush_r+0xe>
    2bc0:	4b05      	ldr	r3, [pc, #20]	; (2bd8 <_fflush_r+0x50>)
    2bc2:	429c      	cmp	r4, r3
    2bc4:	d101      	bne.n	2bca <_fflush_r+0x42>
    2bc6:	68ac      	ldr	r4, [r5, #8]
    2bc8:	e7f1      	b.n	2bae <_fflush_r+0x26>
    2bca:	4b04      	ldr	r3, [pc, #16]	; (2bdc <_fflush_r+0x54>)
    2bcc:	429c      	cmp	r4, r3
    2bce:	d1ee      	bne.n	2bae <_fflush_r+0x26>
    2bd0:	68ec      	ldr	r4, [r5, #12]
    2bd2:	e7ec      	b.n	2bae <_fflush_r+0x26>
    2bd4:	00004600 	.word	0x00004600
    2bd8:	00004620 	.word	0x00004620
    2bdc:	000045e0 	.word	0x000045e0

00002be0 <fflush>:
    2be0:	b510      	push	{r4, lr}
    2be2:	1e01      	subs	r1, r0, #0
    2be4:	d105      	bne.n	2bf2 <fflush+0x12>
    2be6:	4b05      	ldr	r3, [pc, #20]	; (2bfc <fflush+0x1c>)
    2be8:	4905      	ldr	r1, [pc, #20]	; (2c00 <fflush+0x20>)
    2bea:	6818      	ldr	r0, [r3, #0]
    2bec:	f000 f8de 	bl	2dac <_fwalk_reent>
    2bf0:	bd10      	pop	{r4, pc}
    2bf2:	4b04      	ldr	r3, [pc, #16]	; (2c04 <fflush+0x24>)
    2bf4:	6818      	ldr	r0, [r3, #0]
    2bf6:	f7ff ffc7 	bl	2b88 <_fflush_r>
    2bfa:	e7f9      	b.n	2bf0 <fflush+0x10>
    2bfc:	000045dc 	.word	0x000045dc
    2c00:	00002b89 	.word	0x00002b89
    2c04:	20000008 	.word	0x20000008

00002c08 <_cleanup_r>:
    2c08:	b510      	push	{r4, lr}
    2c0a:	4902      	ldr	r1, [pc, #8]	; (2c14 <_cleanup_r+0xc>)
    2c0c:	f000 f8ce 	bl	2dac <_fwalk_reent>
    2c10:	bd10      	pop	{r4, pc}
    2c12:	46c0      	nop			; (mov r8, r8)
    2c14:	00002b89 	.word	0x00002b89

00002c18 <std.isra.0>:
    2c18:	2300      	movs	r3, #0
    2c1a:	b510      	push	{r4, lr}
    2c1c:	0004      	movs	r4, r0
    2c1e:	6003      	str	r3, [r0, #0]
    2c20:	6043      	str	r3, [r0, #4]
    2c22:	6083      	str	r3, [r0, #8]
    2c24:	8181      	strh	r1, [r0, #12]
    2c26:	6643      	str	r3, [r0, #100]	; 0x64
    2c28:	81c2      	strh	r2, [r0, #14]
    2c2a:	6103      	str	r3, [r0, #16]
    2c2c:	6143      	str	r3, [r0, #20]
    2c2e:	6183      	str	r3, [r0, #24]
    2c30:	0019      	movs	r1, r3
    2c32:	2208      	movs	r2, #8
    2c34:	305c      	adds	r0, #92	; 0x5c
    2c36:	f7ff fce1 	bl	25fc <memset>
    2c3a:	4b05      	ldr	r3, [pc, #20]	; (2c50 <std.isra.0+0x38>)
    2c3c:	6224      	str	r4, [r4, #32]
    2c3e:	6263      	str	r3, [r4, #36]	; 0x24
    2c40:	4b04      	ldr	r3, [pc, #16]	; (2c54 <std.isra.0+0x3c>)
    2c42:	62a3      	str	r3, [r4, #40]	; 0x28
    2c44:	4b04      	ldr	r3, [pc, #16]	; (2c58 <std.isra.0+0x40>)
    2c46:	62e3      	str	r3, [r4, #44]	; 0x2c
    2c48:	4b04      	ldr	r3, [pc, #16]	; (2c5c <std.isra.0+0x44>)
    2c4a:	6323      	str	r3, [r4, #48]	; 0x30
    2c4c:	bd10      	pop	{r4, pc}
    2c4e:	46c0      	nop			; (mov r8, r8)
    2c50:	00003e15 	.word	0x00003e15
    2c54:	00003e3d 	.word	0x00003e3d
    2c58:	00003e75 	.word	0x00003e75
    2c5c:	00003ea1 	.word	0x00003ea1

00002c60 <__sfmoreglue>:
    2c60:	b570      	push	{r4, r5, r6, lr}
    2c62:	2568      	movs	r5, #104	; 0x68
    2c64:	1e4a      	subs	r2, r1, #1
    2c66:	4355      	muls	r5, r2
    2c68:	000e      	movs	r6, r1
    2c6a:	0029      	movs	r1, r5
    2c6c:	3174      	adds	r1, #116	; 0x74
    2c6e:	f000 f97f 	bl	2f70 <_malloc_r>
    2c72:	1e04      	subs	r4, r0, #0
    2c74:	d008      	beq.n	2c88 <__sfmoreglue+0x28>
    2c76:	2100      	movs	r1, #0
    2c78:	002a      	movs	r2, r5
    2c7a:	6001      	str	r1, [r0, #0]
    2c7c:	6046      	str	r6, [r0, #4]
    2c7e:	300c      	adds	r0, #12
    2c80:	60a0      	str	r0, [r4, #8]
    2c82:	3268      	adds	r2, #104	; 0x68
    2c84:	f7ff fcba 	bl	25fc <memset>
    2c88:	0020      	movs	r0, r4
    2c8a:	bd70      	pop	{r4, r5, r6, pc}

00002c8c <__sinit>:
    2c8c:	6983      	ldr	r3, [r0, #24]
    2c8e:	b513      	push	{r0, r1, r4, lr}
    2c90:	0004      	movs	r4, r0
    2c92:	2b00      	cmp	r3, #0
    2c94:	d128      	bne.n	2ce8 <__sinit+0x5c>
    2c96:	6483      	str	r3, [r0, #72]	; 0x48
    2c98:	64c3      	str	r3, [r0, #76]	; 0x4c
    2c9a:	6503      	str	r3, [r0, #80]	; 0x50
    2c9c:	4b13      	ldr	r3, [pc, #76]	; (2cec <__sinit+0x60>)
    2c9e:	4a14      	ldr	r2, [pc, #80]	; (2cf0 <__sinit+0x64>)
    2ca0:	681b      	ldr	r3, [r3, #0]
    2ca2:	6282      	str	r2, [r0, #40]	; 0x28
    2ca4:	9301      	str	r3, [sp, #4]
    2ca6:	4298      	cmp	r0, r3
    2ca8:	d101      	bne.n	2cae <__sinit+0x22>
    2caa:	2301      	movs	r3, #1
    2cac:	6183      	str	r3, [r0, #24]
    2cae:	0020      	movs	r0, r4
    2cb0:	f000 f820 	bl	2cf4 <__sfp>
    2cb4:	6060      	str	r0, [r4, #4]
    2cb6:	0020      	movs	r0, r4
    2cb8:	f000 f81c 	bl	2cf4 <__sfp>
    2cbc:	60a0      	str	r0, [r4, #8]
    2cbe:	0020      	movs	r0, r4
    2cc0:	f000 f818 	bl	2cf4 <__sfp>
    2cc4:	2200      	movs	r2, #0
    2cc6:	60e0      	str	r0, [r4, #12]
    2cc8:	2104      	movs	r1, #4
    2cca:	6860      	ldr	r0, [r4, #4]
    2ccc:	f7ff ffa4 	bl	2c18 <std.isra.0>
    2cd0:	2201      	movs	r2, #1
    2cd2:	2109      	movs	r1, #9
    2cd4:	68a0      	ldr	r0, [r4, #8]
    2cd6:	f7ff ff9f 	bl	2c18 <std.isra.0>
    2cda:	2202      	movs	r2, #2
    2cdc:	2112      	movs	r1, #18
    2cde:	68e0      	ldr	r0, [r4, #12]
    2ce0:	f7ff ff9a 	bl	2c18 <std.isra.0>
    2ce4:	2301      	movs	r3, #1
    2ce6:	61a3      	str	r3, [r4, #24]
    2ce8:	bd13      	pop	{r0, r1, r4, pc}
    2cea:	46c0      	nop			; (mov r8, r8)
    2cec:	000045dc 	.word	0x000045dc
    2cf0:	00002c09 	.word	0x00002c09

00002cf4 <__sfp>:
    2cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cf6:	4b1e      	ldr	r3, [pc, #120]	; (2d70 <__sfp+0x7c>)
    2cf8:	0007      	movs	r7, r0
    2cfa:	681e      	ldr	r6, [r3, #0]
    2cfc:	69b3      	ldr	r3, [r6, #24]
    2cfe:	2b00      	cmp	r3, #0
    2d00:	d102      	bne.n	2d08 <__sfp+0x14>
    2d02:	0030      	movs	r0, r6
    2d04:	f7ff ffc2 	bl	2c8c <__sinit>
    2d08:	3648      	adds	r6, #72	; 0x48
    2d0a:	68b4      	ldr	r4, [r6, #8]
    2d0c:	6873      	ldr	r3, [r6, #4]
    2d0e:	3b01      	subs	r3, #1
    2d10:	d504      	bpl.n	2d1c <__sfp+0x28>
    2d12:	6833      	ldr	r3, [r6, #0]
    2d14:	2b00      	cmp	r3, #0
    2d16:	d007      	beq.n	2d28 <__sfp+0x34>
    2d18:	6836      	ldr	r6, [r6, #0]
    2d1a:	e7f6      	b.n	2d0a <__sfp+0x16>
    2d1c:	220c      	movs	r2, #12
    2d1e:	5ea5      	ldrsh	r5, [r4, r2]
    2d20:	2d00      	cmp	r5, #0
    2d22:	d00d      	beq.n	2d40 <__sfp+0x4c>
    2d24:	3468      	adds	r4, #104	; 0x68
    2d26:	e7f2      	b.n	2d0e <__sfp+0x1a>
    2d28:	2104      	movs	r1, #4
    2d2a:	0038      	movs	r0, r7
    2d2c:	f7ff ff98 	bl	2c60 <__sfmoreglue>
    2d30:	6030      	str	r0, [r6, #0]
    2d32:	2800      	cmp	r0, #0
    2d34:	d1f0      	bne.n	2d18 <__sfp+0x24>
    2d36:	230c      	movs	r3, #12
    2d38:	0004      	movs	r4, r0
    2d3a:	603b      	str	r3, [r7, #0]
    2d3c:	0020      	movs	r0, r4
    2d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d40:	2301      	movs	r3, #1
    2d42:	0020      	movs	r0, r4
    2d44:	425b      	negs	r3, r3
    2d46:	81e3      	strh	r3, [r4, #14]
    2d48:	3302      	adds	r3, #2
    2d4a:	81a3      	strh	r3, [r4, #12]
    2d4c:	6665      	str	r5, [r4, #100]	; 0x64
    2d4e:	6025      	str	r5, [r4, #0]
    2d50:	60a5      	str	r5, [r4, #8]
    2d52:	6065      	str	r5, [r4, #4]
    2d54:	6125      	str	r5, [r4, #16]
    2d56:	6165      	str	r5, [r4, #20]
    2d58:	61a5      	str	r5, [r4, #24]
    2d5a:	2208      	movs	r2, #8
    2d5c:	0029      	movs	r1, r5
    2d5e:	305c      	adds	r0, #92	; 0x5c
    2d60:	f7ff fc4c 	bl	25fc <memset>
    2d64:	6365      	str	r5, [r4, #52]	; 0x34
    2d66:	63a5      	str	r5, [r4, #56]	; 0x38
    2d68:	64a5      	str	r5, [r4, #72]	; 0x48
    2d6a:	64e5      	str	r5, [r4, #76]	; 0x4c
    2d6c:	e7e6      	b.n	2d3c <__sfp+0x48>
    2d6e:	46c0      	nop			; (mov r8, r8)
    2d70:	000045dc 	.word	0x000045dc

00002d74 <_fwalk>:
    2d74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2d76:	3048      	adds	r0, #72	; 0x48
    2d78:	0004      	movs	r4, r0
    2d7a:	2600      	movs	r6, #0
    2d7c:	9101      	str	r1, [sp, #4]
    2d7e:	2c00      	cmp	r4, #0
    2d80:	d101      	bne.n	2d86 <_fwalk+0x12>
    2d82:	0030      	movs	r0, r6
    2d84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2d86:	68a5      	ldr	r5, [r4, #8]
    2d88:	6867      	ldr	r7, [r4, #4]
    2d8a:	3f01      	subs	r7, #1
    2d8c:	d501      	bpl.n	2d92 <_fwalk+0x1e>
    2d8e:	6824      	ldr	r4, [r4, #0]
    2d90:	e7f5      	b.n	2d7e <_fwalk+0xa>
    2d92:	89ab      	ldrh	r3, [r5, #12]
    2d94:	2b01      	cmp	r3, #1
    2d96:	d907      	bls.n	2da8 <_fwalk+0x34>
    2d98:	220e      	movs	r2, #14
    2d9a:	5eab      	ldrsh	r3, [r5, r2]
    2d9c:	3301      	adds	r3, #1
    2d9e:	d003      	beq.n	2da8 <_fwalk+0x34>
    2da0:	0028      	movs	r0, r5
    2da2:	9b01      	ldr	r3, [sp, #4]
    2da4:	4798      	blx	r3
    2da6:	4306      	orrs	r6, r0
    2da8:	3568      	adds	r5, #104	; 0x68
    2daa:	e7ee      	b.n	2d8a <_fwalk+0x16>

00002dac <_fwalk_reent>:
    2dac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2dae:	0004      	movs	r4, r0
    2db0:	0007      	movs	r7, r0
    2db2:	2600      	movs	r6, #0
    2db4:	9101      	str	r1, [sp, #4]
    2db6:	3448      	adds	r4, #72	; 0x48
    2db8:	2c00      	cmp	r4, #0
    2dba:	d101      	bne.n	2dc0 <_fwalk_reent+0x14>
    2dbc:	0030      	movs	r0, r6
    2dbe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2dc0:	6863      	ldr	r3, [r4, #4]
    2dc2:	68a5      	ldr	r5, [r4, #8]
    2dc4:	9300      	str	r3, [sp, #0]
    2dc6:	9b00      	ldr	r3, [sp, #0]
    2dc8:	3b01      	subs	r3, #1
    2dca:	9300      	str	r3, [sp, #0]
    2dcc:	d501      	bpl.n	2dd2 <_fwalk_reent+0x26>
    2dce:	6824      	ldr	r4, [r4, #0]
    2dd0:	e7f2      	b.n	2db8 <_fwalk_reent+0xc>
    2dd2:	89ab      	ldrh	r3, [r5, #12]
    2dd4:	2b01      	cmp	r3, #1
    2dd6:	d908      	bls.n	2dea <_fwalk_reent+0x3e>
    2dd8:	220e      	movs	r2, #14
    2dda:	5eab      	ldrsh	r3, [r5, r2]
    2ddc:	3301      	adds	r3, #1
    2dde:	d004      	beq.n	2dea <_fwalk_reent+0x3e>
    2de0:	0029      	movs	r1, r5
    2de2:	0038      	movs	r0, r7
    2de4:	9b01      	ldr	r3, [sp, #4]
    2de6:	4798      	blx	r3
    2de8:	4306      	orrs	r6, r0
    2dea:	3568      	adds	r5, #104	; 0x68
    2dec:	e7eb      	b.n	2dc6 <_fwalk_reent+0x1a>
	...

00002df0 <__swhatbuf_r>:
    2df0:	b570      	push	{r4, r5, r6, lr}
    2df2:	000e      	movs	r6, r1
    2df4:	001d      	movs	r5, r3
    2df6:	230e      	movs	r3, #14
    2df8:	5ec9      	ldrsh	r1, [r1, r3]
    2dfa:	b090      	sub	sp, #64	; 0x40
    2dfc:	0014      	movs	r4, r2
    2dfe:	2900      	cmp	r1, #0
    2e00:	da07      	bge.n	2e12 <__swhatbuf_r+0x22>
    2e02:	2300      	movs	r3, #0
    2e04:	602b      	str	r3, [r5, #0]
    2e06:	89b3      	ldrh	r3, [r6, #12]
    2e08:	061b      	lsls	r3, r3, #24
    2e0a:	d411      	bmi.n	2e30 <__swhatbuf_r+0x40>
    2e0c:	2380      	movs	r3, #128	; 0x80
    2e0e:	00db      	lsls	r3, r3, #3
    2e10:	e00f      	b.n	2e32 <__swhatbuf_r+0x42>
    2e12:	aa01      	add	r2, sp, #4
    2e14:	f001 fa4e 	bl	42b4 <_fstat_r>
    2e18:	2800      	cmp	r0, #0
    2e1a:	dbf2      	blt.n	2e02 <__swhatbuf_r+0x12>
    2e1c:	22f0      	movs	r2, #240	; 0xf0
    2e1e:	9b02      	ldr	r3, [sp, #8]
    2e20:	0212      	lsls	r2, r2, #8
    2e22:	4013      	ands	r3, r2
    2e24:	4a05      	ldr	r2, [pc, #20]	; (2e3c <__swhatbuf_r+0x4c>)
    2e26:	189b      	adds	r3, r3, r2
    2e28:	425a      	negs	r2, r3
    2e2a:	4153      	adcs	r3, r2
    2e2c:	602b      	str	r3, [r5, #0]
    2e2e:	e7ed      	b.n	2e0c <__swhatbuf_r+0x1c>
    2e30:	2340      	movs	r3, #64	; 0x40
    2e32:	2000      	movs	r0, #0
    2e34:	6023      	str	r3, [r4, #0]
    2e36:	b010      	add	sp, #64	; 0x40
    2e38:	bd70      	pop	{r4, r5, r6, pc}
    2e3a:	46c0      	nop			; (mov r8, r8)
    2e3c:	ffffe000 	.word	0xffffe000

00002e40 <__smakebuf_r>:
    2e40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2e42:	2602      	movs	r6, #2
    2e44:	898b      	ldrh	r3, [r1, #12]
    2e46:	0005      	movs	r5, r0
    2e48:	000c      	movs	r4, r1
    2e4a:	4233      	tst	r3, r6
    2e4c:	d006      	beq.n	2e5c <__smakebuf_r+0x1c>
    2e4e:	0023      	movs	r3, r4
    2e50:	3347      	adds	r3, #71	; 0x47
    2e52:	6023      	str	r3, [r4, #0]
    2e54:	6123      	str	r3, [r4, #16]
    2e56:	2301      	movs	r3, #1
    2e58:	6163      	str	r3, [r4, #20]
    2e5a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2e5c:	ab01      	add	r3, sp, #4
    2e5e:	466a      	mov	r2, sp
    2e60:	f7ff ffc6 	bl	2df0 <__swhatbuf_r>
    2e64:	9900      	ldr	r1, [sp, #0]
    2e66:	0007      	movs	r7, r0
    2e68:	0028      	movs	r0, r5
    2e6a:	f000 f881 	bl	2f70 <_malloc_r>
    2e6e:	2800      	cmp	r0, #0
    2e70:	d108      	bne.n	2e84 <__smakebuf_r+0x44>
    2e72:	220c      	movs	r2, #12
    2e74:	5ea3      	ldrsh	r3, [r4, r2]
    2e76:	059a      	lsls	r2, r3, #22
    2e78:	d4ef      	bmi.n	2e5a <__smakebuf_r+0x1a>
    2e7a:	2203      	movs	r2, #3
    2e7c:	4393      	bics	r3, r2
    2e7e:	431e      	orrs	r6, r3
    2e80:	81a6      	strh	r6, [r4, #12]
    2e82:	e7e4      	b.n	2e4e <__smakebuf_r+0xe>
    2e84:	4b0f      	ldr	r3, [pc, #60]	; (2ec4 <__smakebuf_r+0x84>)
    2e86:	62ab      	str	r3, [r5, #40]	; 0x28
    2e88:	2380      	movs	r3, #128	; 0x80
    2e8a:	89a2      	ldrh	r2, [r4, #12]
    2e8c:	6020      	str	r0, [r4, #0]
    2e8e:	4313      	orrs	r3, r2
    2e90:	81a3      	strh	r3, [r4, #12]
    2e92:	9b00      	ldr	r3, [sp, #0]
    2e94:	6120      	str	r0, [r4, #16]
    2e96:	6163      	str	r3, [r4, #20]
    2e98:	9b01      	ldr	r3, [sp, #4]
    2e9a:	2b00      	cmp	r3, #0
    2e9c:	d00d      	beq.n	2eba <__smakebuf_r+0x7a>
    2e9e:	230e      	movs	r3, #14
    2ea0:	5ee1      	ldrsh	r1, [r4, r3]
    2ea2:	0028      	movs	r0, r5
    2ea4:	f001 fa18 	bl	42d8 <_isatty_r>
    2ea8:	2800      	cmp	r0, #0
    2eaa:	d006      	beq.n	2eba <__smakebuf_r+0x7a>
    2eac:	2203      	movs	r2, #3
    2eae:	89a3      	ldrh	r3, [r4, #12]
    2eb0:	4393      	bics	r3, r2
    2eb2:	001a      	movs	r2, r3
    2eb4:	2301      	movs	r3, #1
    2eb6:	4313      	orrs	r3, r2
    2eb8:	81a3      	strh	r3, [r4, #12]
    2eba:	89a0      	ldrh	r0, [r4, #12]
    2ebc:	4338      	orrs	r0, r7
    2ebe:	81a0      	strh	r0, [r4, #12]
    2ec0:	e7cb      	b.n	2e5a <__smakebuf_r+0x1a>
    2ec2:	46c0      	nop			; (mov r8, r8)
    2ec4:	00002c09 	.word	0x00002c09

00002ec8 <malloc>:
    2ec8:	b510      	push	{r4, lr}
    2eca:	4b03      	ldr	r3, [pc, #12]	; (2ed8 <malloc+0x10>)
    2ecc:	0001      	movs	r1, r0
    2ece:	6818      	ldr	r0, [r3, #0]
    2ed0:	f000 f84e 	bl	2f70 <_malloc_r>
    2ed4:	bd10      	pop	{r4, pc}
    2ed6:	46c0      	nop			; (mov r8, r8)
    2ed8:	20000008 	.word	0x20000008

00002edc <_free_r>:
    2edc:	b570      	push	{r4, r5, r6, lr}
    2ede:	0005      	movs	r5, r0
    2ee0:	2900      	cmp	r1, #0
    2ee2:	d010      	beq.n	2f06 <_free_r+0x2a>
    2ee4:	1f0c      	subs	r4, r1, #4
    2ee6:	6823      	ldr	r3, [r4, #0]
    2ee8:	2b00      	cmp	r3, #0
    2eea:	da00      	bge.n	2eee <_free_r+0x12>
    2eec:	18e4      	adds	r4, r4, r3
    2eee:	0028      	movs	r0, r5
    2ef0:	f001 fa47 	bl	4382 <__malloc_lock>
    2ef4:	4a1d      	ldr	r2, [pc, #116]	; (2f6c <_free_r+0x90>)
    2ef6:	6813      	ldr	r3, [r2, #0]
    2ef8:	2b00      	cmp	r3, #0
    2efa:	d105      	bne.n	2f08 <_free_r+0x2c>
    2efc:	6063      	str	r3, [r4, #4]
    2efe:	6014      	str	r4, [r2, #0]
    2f00:	0028      	movs	r0, r5
    2f02:	f001 fa3f 	bl	4384 <__malloc_unlock>
    2f06:	bd70      	pop	{r4, r5, r6, pc}
    2f08:	42a3      	cmp	r3, r4
    2f0a:	d909      	bls.n	2f20 <_free_r+0x44>
    2f0c:	6821      	ldr	r1, [r4, #0]
    2f0e:	1860      	adds	r0, r4, r1
    2f10:	4283      	cmp	r3, r0
    2f12:	d1f3      	bne.n	2efc <_free_r+0x20>
    2f14:	6818      	ldr	r0, [r3, #0]
    2f16:	685b      	ldr	r3, [r3, #4]
    2f18:	1841      	adds	r1, r0, r1
    2f1a:	6021      	str	r1, [r4, #0]
    2f1c:	e7ee      	b.n	2efc <_free_r+0x20>
    2f1e:	0013      	movs	r3, r2
    2f20:	685a      	ldr	r2, [r3, #4]
    2f22:	2a00      	cmp	r2, #0
    2f24:	d001      	beq.n	2f2a <_free_r+0x4e>
    2f26:	42a2      	cmp	r2, r4
    2f28:	d9f9      	bls.n	2f1e <_free_r+0x42>
    2f2a:	6819      	ldr	r1, [r3, #0]
    2f2c:	1858      	adds	r0, r3, r1
    2f2e:	42a0      	cmp	r0, r4
    2f30:	d10b      	bne.n	2f4a <_free_r+0x6e>
    2f32:	6820      	ldr	r0, [r4, #0]
    2f34:	1809      	adds	r1, r1, r0
    2f36:	1858      	adds	r0, r3, r1
    2f38:	6019      	str	r1, [r3, #0]
    2f3a:	4282      	cmp	r2, r0
    2f3c:	d1e0      	bne.n	2f00 <_free_r+0x24>
    2f3e:	6810      	ldr	r0, [r2, #0]
    2f40:	6852      	ldr	r2, [r2, #4]
    2f42:	1841      	adds	r1, r0, r1
    2f44:	6019      	str	r1, [r3, #0]
    2f46:	605a      	str	r2, [r3, #4]
    2f48:	e7da      	b.n	2f00 <_free_r+0x24>
    2f4a:	42a0      	cmp	r0, r4
    2f4c:	d902      	bls.n	2f54 <_free_r+0x78>
    2f4e:	230c      	movs	r3, #12
    2f50:	602b      	str	r3, [r5, #0]
    2f52:	e7d5      	b.n	2f00 <_free_r+0x24>
    2f54:	6821      	ldr	r1, [r4, #0]
    2f56:	1860      	adds	r0, r4, r1
    2f58:	4282      	cmp	r2, r0
    2f5a:	d103      	bne.n	2f64 <_free_r+0x88>
    2f5c:	6810      	ldr	r0, [r2, #0]
    2f5e:	6852      	ldr	r2, [r2, #4]
    2f60:	1841      	adds	r1, r0, r1
    2f62:	6021      	str	r1, [r4, #0]
    2f64:	6062      	str	r2, [r4, #4]
    2f66:	605c      	str	r4, [r3, #4]
    2f68:	e7ca      	b.n	2f00 <_free_r+0x24>
    2f6a:	46c0      	nop			; (mov r8, r8)
    2f6c:	20000230 	.word	0x20000230

00002f70 <_malloc_r>:
    2f70:	2303      	movs	r3, #3
    2f72:	b570      	push	{r4, r5, r6, lr}
    2f74:	1ccd      	adds	r5, r1, #3
    2f76:	439d      	bics	r5, r3
    2f78:	3508      	adds	r5, #8
    2f7a:	0006      	movs	r6, r0
    2f7c:	2d0c      	cmp	r5, #12
    2f7e:	d21e      	bcs.n	2fbe <_malloc_r+0x4e>
    2f80:	250c      	movs	r5, #12
    2f82:	42a9      	cmp	r1, r5
    2f84:	d81d      	bhi.n	2fc2 <_malloc_r+0x52>
    2f86:	0030      	movs	r0, r6
    2f88:	f001 f9fb 	bl	4382 <__malloc_lock>
    2f8c:	4a25      	ldr	r2, [pc, #148]	; (3024 <_malloc_r+0xb4>)
    2f8e:	6814      	ldr	r4, [r2, #0]
    2f90:	0021      	movs	r1, r4
    2f92:	2900      	cmp	r1, #0
    2f94:	d119      	bne.n	2fca <_malloc_r+0x5a>
    2f96:	4c24      	ldr	r4, [pc, #144]	; (3028 <_malloc_r+0xb8>)
    2f98:	6823      	ldr	r3, [r4, #0]
    2f9a:	2b00      	cmp	r3, #0
    2f9c:	d103      	bne.n	2fa6 <_malloc_r+0x36>
    2f9e:	0030      	movs	r0, r6
    2fa0:	f000 fef4 	bl	3d8c <_sbrk_r>
    2fa4:	6020      	str	r0, [r4, #0]
    2fa6:	0029      	movs	r1, r5
    2fa8:	0030      	movs	r0, r6
    2faa:	f000 feef 	bl	3d8c <_sbrk_r>
    2fae:	1c43      	adds	r3, r0, #1
    2fb0:	d12c      	bne.n	300c <_malloc_r+0x9c>
    2fb2:	230c      	movs	r3, #12
    2fb4:	0030      	movs	r0, r6
    2fb6:	6033      	str	r3, [r6, #0]
    2fb8:	f001 f9e4 	bl	4384 <__malloc_unlock>
    2fbc:	e003      	b.n	2fc6 <_malloc_r+0x56>
    2fbe:	2d00      	cmp	r5, #0
    2fc0:	dadf      	bge.n	2f82 <_malloc_r+0x12>
    2fc2:	230c      	movs	r3, #12
    2fc4:	6033      	str	r3, [r6, #0]
    2fc6:	2000      	movs	r0, #0
    2fc8:	bd70      	pop	{r4, r5, r6, pc}
    2fca:	680b      	ldr	r3, [r1, #0]
    2fcc:	1b5b      	subs	r3, r3, r5
    2fce:	d41a      	bmi.n	3006 <_malloc_r+0x96>
    2fd0:	2b0b      	cmp	r3, #11
    2fd2:	d903      	bls.n	2fdc <_malloc_r+0x6c>
    2fd4:	600b      	str	r3, [r1, #0]
    2fd6:	18cc      	adds	r4, r1, r3
    2fd8:	6025      	str	r5, [r4, #0]
    2fda:	e003      	b.n	2fe4 <_malloc_r+0x74>
    2fdc:	428c      	cmp	r4, r1
    2fde:	d10e      	bne.n	2ffe <_malloc_r+0x8e>
    2fe0:	6863      	ldr	r3, [r4, #4]
    2fe2:	6013      	str	r3, [r2, #0]
    2fe4:	0030      	movs	r0, r6
    2fe6:	f001 f9cd 	bl	4384 <__malloc_unlock>
    2fea:	0020      	movs	r0, r4
    2fec:	2207      	movs	r2, #7
    2fee:	300b      	adds	r0, #11
    2ff0:	1d23      	adds	r3, r4, #4
    2ff2:	4390      	bics	r0, r2
    2ff4:	1ac3      	subs	r3, r0, r3
    2ff6:	d0e7      	beq.n	2fc8 <_malloc_r+0x58>
    2ff8:	425a      	negs	r2, r3
    2ffa:	50e2      	str	r2, [r4, r3]
    2ffc:	e7e4      	b.n	2fc8 <_malloc_r+0x58>
    2ffe:	684b      	ldr	r3, [r1, #4]
    3000:	6063      	str	r3, [r4, #4]
    3002:	000c      	movs	r4, r1
    3004:	e7ee      	b.n	2fe4 <_malloc_r+0x74>
    3006:	000c      	movs	r4, r1
    3008:	6849      	ldr	r1, [r1, #4]
    300a:	e7c2      	b.n	2f92 <_malloc_r+0x22>
    300c:	2303      	movs	r3, #3
    300e:	1cc4      	adds	r4, r0, #3
    3010:	439c      	bics	r4, r3
    3012:	42a0      	cmp	r0, r4
    3014:	d0e0      	beq.n	2fd8 <_malloc_r+0x68>
    3016:	1a21      	subs	r1, r4, r0
    3018:	0030      	movs	r0, r6
    301a:	f000 feb7 	bl	3d8c <_sbrk_r>
    301e:	1c43      	adds	r3, r0, #1
    3020:	d1da      	bne.n	2fd8 <_malloc_r+0x68>
    3022:	e7c6      	b.n	2fb2 <_malloc_r+0x42>
    3024:	20000230 	.word	0x20000230
    3028:	20000234 	.word	0x20000234

0000302c <__sfputc_r>:
    302c:	6893      	ldr	r3, [r2, #8]
    302e:	b510      	push	{r4, lr}
    3030:	3b01      	subs	r3, #1
    3032:	6093      	str	r3, [r2, #8]
    3034:	2b00      	cmp	r3, #0
    3036:	da05      	bge.n	3044 <__sfputc_r+0x18>
    3038:	6994      	ldr	r4, [r2, #24]
    303a:	42a3      	cmp	r3, r4
    303c:	db08      	blt.n	3050 <__sfputc_r+0x24>
    303e:	b2cb      	uxtb	r3, r1
    3040:	2b0a      	cmp	r3, #10
    3042:	d005      	beq.n	3050 <__sfputc_r+0x24>
    3044:	6813      	ldr	r3, [r2, #0]
    3046:	1c58      	adds	r0, r3, #1
    3048:	6010      	str	r0, [r2, #0]
    304a:	7019      	strb	r1, [r3, #0]
    304c:	b2c8      	uxtb	r0, r1
    304e:	bd10      	pop	{r4, pc}
    3050:	f7ff fc44 	bl	28dc <__swbuf_r>
    3054:	e7fb      	b.n	304e <__sfputc_r+0x22>

00003056 <__sfputs_r>:
    3056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3058:	0006      	movs	r6, r0
    305a:	000f      	movs	r7, r1
    305c:	0014      	movs	r4, r2
    305e:	18d5      	adds	r5, r2, r3
    3060:	42ac      	cmp	r4, r5
    3062:	d101      	bne.n	3068 <__sfputs_r+0x12>
    3064:	2000      	movs	r0, #0
    3066:	e007      	b.n	3078 <__sfputs_r+0x22>
    3068:	7821      	ldrb	r1, [r4, #0]
    306a:	003a      	movs	r2, r7
    306c:	0030      	movs	r0, r6
    306e:	f7ff ffdd 	bl	302c <__sfputc_r>
    3072:	3401      	adds	r4, #1
    3074:	1c43      	adds	r3, r0, #1
    3076:	d1f3      	bne.n	3060 <__sfputs_r+0xa>
    3078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000307c <_vfiprintf_r>:
    307c:	b5f0      	push	{r4, r5, r6, r7, lr}
    307e:	b09f      	sub	sp, #124	; 0x7c
    3080:	0006      	movs	r6, r0
    3082:	000f      	movs	r7, r1
    3084:	0014      	movs	r4, r2
    3086:	9305      	str	r3, [sp, #20]
    3088:	2800      	cmp	r0, #0
    308a:	d004      	beq.n	3096 <_vfiprintf_r+0x1a>
    308c:	6983      	ldr	r3, [r0, #24]
    308e:	2b00      	cmp	r3, #0
    3090:	d101      	bne.n	3096 <_vfiprintf_r+0x1a>
    3092:	f7ff fdfb 	bl	2c8c <__sinit>
    3096:	4b7f      	ldr	r3, [pc, #508]	; (3294 <_vfiprintf_r+0x218>)
    3098:	429f      	cmp	r7, r3
    309a:	d15c      	bne.n	3156 <_vfiprintf_r+0xda>
    309c:	6877      	ldr	r7, [r6, #4]
    309e:	89bb      	ldrh	r3, [r7, #12]
    30a0:	071b      	lsls	r3, r3, #28
    30a2:	d562      	bpl.n	316a <_vfiprintf_r+0xee>
    30a4:	693b      	ldr	r3, [r7, #16]
    30a6:	2b00      	cmp	r3, #0
    30a8:	d05f      	beq.n	316a <_vfiprintf_r+0xee>
    30aa:	2300      	movs	r3, #0
    30ac:	ad06      	add	r5, sp, #24
    30ae:	616b      	str	r3, [r5, #20]
    30b0:	3320      	adds	r3, #32
    30b2:	766b      	strb	r3, [r5, #25]
    30b4:	3310      	adds	r3, #16
    30b6:	76ab      	strb	r3, [r5, #26]
    30b8:	9402      	str	r4, [sp, #8]
    30ba:	9c02      	ldr	r4, [sp, #8]
    30bc:	7823      	ldrb	r3, [r4, #0]
    30be:	2b00      	cmp	r3, #0
    30c0:	d15d      	bne.n	317e <_vfiprintf_r+0x102>
    30c2:	9b02      	ldr	r3, [sp, #8]
    30c4:	1ae3      	subs	r3, r4, r3
    30c6:	9304      	str	r3, [sp, #16]
    30c8:	d00d      	beq.n	30e6 <_vfiprintf_r+0x6a>
    30ca:	9b04      	ldr	r3, [sp, #16]
    30cc:	9a02      	ldr	r2, [sp, #8]
    30ce:	0039      	movs	r1, r7
    30d0:	0030      	movs	r0, r6
    30d2:	f7ff ffc0 	bl	3056 <__sfputs_r>
    30d6:	1c43      	adds	r3, r0, #1
    30d8:	d100      	bne.n	30dc <_vfiprintf_r+0x60>
    30da:	e0cc      	b.n	3276 <_vfiprintf_r+0x1fa>
    30dc:	696a      	ldr	r2, [r5, #20]
    30de:	9b04      	ldr	r3, [sp, #16]
    30e0:	4694      	mov	ip, r2
    30e2:	4463      	add	r3, ip
    30e4:	616b      	str	r3, [r5, #20]
    30e6:	7823      	ldrb	r3, [r4, #0]
    30e8:	2b00      	cmp	r3, #0
    30ea:	d100      	bne.n	30ee <_vfiprintf_r+0x72>
    30ec:	e0c3      	b.n	3276 <_vfiprintf_r+0x1fa>
    30ee:	2201      	movs	r2, #1
    30f0:	2300      	movs	r3, #0
    30f2:	4252      	negs	r2, r2
    30f4:	606a      	str	r2, [r5, #4]
    30f6:	a902      	add	r1, sp, #8
    30f8:	3254      	adds	r2, #84	; 0x54
    30fa:	1852      	adds	r2, r2, r1
    30fc:	3401      	adds	r4, #1
    30fe:	602b      	str	r3, [r5, #0]
    3100:	60eb      	str	r3, [r5, #12]
    3102:	60ab      	str	r3, [r5, #8]
    3104:	7013      	strb	r3, [r2, #0]
    3106:	65ab      	str	r3, [r5, #88]	; 0x58
    3108:	7821      	ldrb	r1, [r4, #0]
    310a:	2205      	movs	r2, #5
    310c:	4862      	ldr	r0, [pc, #392]	; (3298 <_vfiprintf_r+0x21c>)
    310e:	f001 f92d 	bl	436c <memchr>
    3112:	1c63      	adds	r3, r4, #1
    3114:	469c      	mov	ip, r3
    3116:	2800      	cmp	r0, #0
    3118:	d135      	bne.n	3186 <_vfiprintf_r+0x10a>
    311a:	6829      	ldr	r1, [r5, #0]
    311c:	06cb      	lsls	r3, r1, #27
    311e:	d504      	bpl.n	312a <_vfiprintf_r+0xae>
    3120:	2353      	movs	r3, #83	; 0x53
    3122:	aa02      	add	r2, sp, #8
    3124:	3020      	adds	r0, #32
    3126:	189b      	adds	r3, r3, r2
    3128:	7018      	strb	r0, [r3, #0]
    312a:	070b      	lsls	r3, r1, #28
    312c:	d504      	bpl.n	3138 <_vfiprintf_r+0xbc>
    312e:	2353      	movs	r3, #83	; 0x53
    3130:	202b      	movs	r0, #43	; 0x2b
    3132:	aa02      	add	r2, sp, #8
    3134:	189b      	adds	r3, r3, r2
    3136:	7018      	strb	r0, [r3, #0]
    3138:	7823      	ldrb	r3, [r4, #0]
    313a:	2b2a      	cmp	r3, #42	; 0x2a
    313c:	d02c      	beq.n	3198 <_vfiprintf_r+0x11c>
    313e:	2000      	movs	r0, #0
    3140:	210a      	movs	r1, #10
    3142:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3144:	7822      	ldrb	r2, [r4, #0]
    3146:	3a30      	subs	r2, #48	; 0x30
    3148:	2a09      	cmp	r2, #9
    314a:	d800      	bhi.n	314e <_vfiprintf_r+0xd2>
    314c:	e06b      	b.n	3226 <_vfiprintf_r+0x1aa>
    314e:	2800      	cmp	r0, #0
    3150:	d02a      	beq.n	31a8 <_vfiprintf_r+0x12c>
    3152:	9309      	str	r3, [sp, #36]	; 0x24
    3154:	e028      	b.n	31a8 <_vfiprintf_r+0x12c>
    3156:	4b51      	ldr	r3, [pc, #324]	; (329c <_vfiprintf_r+0x220>)
    3158:	429f      	cmp	r7, r3
    315a:	d101      	bne.n	3160 <_vfiprintf_r+0xe4>
    315c:	68b7      	ldr	r7, [r6, #8]
    315e:	e79e      	b.n	309e <_vfiprintf_r+0x22>
    3160:	4b4f      	ldr	r3, [pc, #316]	; (32a0 <_vfiprintf_r+0x224>)
    3162:	429f      	cmp	r7, r3
    3164:	d19b      	bne.n	309e <_vfiprintf_r+0x22>
    3166:	68f7      	ldr	r7, [r6, #12]
    3168:	e799      	b.n	309e <_vfiprintf_r+0x22>
    316a:	0039      	movs	r1, r7
    316c:	0030      	movs	r0, r6
    316e:	f7ff fc0b 	bl	2988 <__swsetup_r>
    3172:	2800      	cmp	r0, #0
    3174:	d099      	beq.n	30aa <_vfiprintf_r+0x2e>
    3176:	2001      	movs	r0, #1
    3178:	4240      	negs	r0, r0
    317a:	b01f      	add	sp, #124	; 0x7c
    317c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    317e:	2b25      	cmp	r3, #37	; 0x25
    3180:	d09f      	beq.n	30c2 <_vfiprintf_r+0x46>
    3182:	3401      	adds	r4, #1
    3184:	e79a      	b.n	30bc <_vfiprintf_r+0x40>
    3186:	4b44      	ldr	r3, [pc, #272]	; (3298 <_vfiprintf_r+0x21c>)
    3188:	6829      	ldr	r1, [r5, #0]
    318a:	1ac0      	subs	r0, r0, r3
    318c:	2301      	movs	r3, #1
    318e:	4083      	lsls	r3, r0
    3190:	430b      	orrs	r3, r1
    3192:	602b      	str	r3, [r5, #0]
    3194:	4664      	mov	r4, ip
    3196:	e7b7      	b.n	3108 <_vfiprintf_r+0x8c>
    3198:	9b05      	ldr	r3, [sp, #20]
    319a:	1d18      	adds	r0, r3, #4
    319c:	681b      	ldr	r3, [r3, #0]
    319e:	9005      	str	r0, [sp, #20]
    31a0:	2b00      	cmp	r3, #0
    31a2:	db3a      	blt.n	321a <_vfiprintf_r+0x19e>
    31a4:	9309      	str	r3, [sp, #36]	; 0x24
    31a6:	4664      	mov	r4, ip
    31a8:	7823      	ldrb	r3, [r4, #0]
    31aa:	2b2e      	cmp	r3, #46	; 0x2e
    31ac:	d10b      	bne.n	31c6 <_vfiprintf_r+0x14a>
    31ae:	7863      	ldrb	r3, [r4, #1]
    31b0:	1c62      	adds	r2, r4, #1
    31b2:	2b2a      	cmp	r3, #42	; 0x2a
    31b4:	d13f      	bne.n	3236 <_vfiprintf_r+0x1ba>
    31b6:	9b05      	ldr	r3, [sp, #20]
    31b8:	3402      	adds	r4, #2
    31ba:	1d1a      	adds	r2, r3, #4
    31bc:	681b      	ldr	r3, [r3, #0]
    31be:	9205      	str	r2, [sp, #20]
    31c0:	2b00      	cmp	r3, #0
    31c2:	db35      	blt.n	3230 <_vfiprintf_r+0x1b4>
    31c4:	9307      	str	r3, [sp, #28]
    31c6:	7821      	ldrb	r1, [r4, #0]
    31c8:	2203      	movs	r2, #3
    31ca:	4836      	ldr	r0, [pc, #216]	; (32a4 <_vfiprintf_r+0x228>)
    31cc:	f001 f8ce 	bl	436c <memchr>
    31d0:	2800      	cmp	r0, #0
    31d2:	d007      	beq.n	31e4 <_vfiprintf_r+0x168>
    31d4:	4b33      	ldr	r3, [pc, #204]	; (32a4 <_vfiprintf_r+0x228>)
    31d6:	682a      	ldr	r2, [r5, #0]
    31d8:	1ac0      	subs	r0, r0, r3
    31da:	2340      	movs	r3, #64	; 0x40
    31dc:	4083      	lsls	r3, r0
    31de:	4313      	orrs	r3, r2
    31e0:	602b      	str	r3, [r5, #0]
    31e2:	3401      	adds	r4, #1
    31e4:	7821      	ldrb	r1, [r4, #0]
    31e6:	1c63      	adds	r3, r4, #1
    31e8:	2206      	movs	r2, #6
    31ea:	482f      	ldr	r0, [pc, #188]	; (32a8 <_vfiprintf_r+0x22c>)
    31ec:	9302      	str	r3, [sp, #8]
    31ee:	7629      	strb	r1, [r5, #24]
    31f0:	f001 f8bc 	bl	436c <memchr>
    31f4:	2800      	cmp	r0, #0
    31f6:	d044      	beq.n	3282 <_vfiprintf_r+0x206>
    31f8:	4b2c      	ldr	r3, [pc, #176]	; (32ac <_vfiprintf_r+0x230>)
    31fa:	2b00      	cmp	r3, #0
    31fc:	d12f      	bne.n	325e <_vfiprintf_r+0x1e2>
    31fe:	6829      	ldr	r1, [r5, #0]
    3200:	9b05      	ldr	r3, [sp, #20]
    3202:	2207      	movs	r2, #7
    3204:	05c9      	lsls	r1, r1, #23
    3206:	d528      	bpl.n	325a <_vfiprintf_r+0x1de>
    3208:	189b      	adds	r3, r3, r2
    320a:	4393      	bics	r3, r2
    320c:	3308      	adds	r3, #8
    320e:	9305      	str	r3, [sp, #20]
    3210:	696b      	ldr	r3, [r5, #20]
    3212:	9a03      	ldr	r2, [sp, #12]
    3214:	189b      	adds	r3, r3, r2
    3216:	616b      	str	r3, [r5, #20]
    3218:	e74f      	b.n	30ba <_vfiprintf_r+0x3e>
    321a:	425b      	negs	r3, r3
    321c:	60eb      	str	r3, [r5, #12]
    321e:	2302      	movs	r3, #2
    3220:	430b      	orrs	r3, r1
    3222:	602b      	str	r3, [r5, #0]
    3224:	e7bf      	b.n	31a6 <_vfiprintf_r+0x12a>
    3226:	434b      	muls	r3, r1
    3228:	3401      	adds	r4, #1
    322a:	189b      	adds	r3, r3, r2
    322c:	2001      	movs	r0, #1
    322e:	e789      	b.n	3144 <_vfiprintf_r+0xc8>
    3230:	2301      	movs	r3, #1
    3232:	425b      	negs	r3, r3
    3234:	e7c6      	b.n	31c4 <_vfiprintf_r+0x148>
    3236:	2300      	movs	r3, #0
    3238:	0014      	movs	r4, r2
    323a:	200a      	movs	r0, #10
    323c:	001a      	movs	r2, r3
    323e:	606b      	str	r3, [r5, #4]
    3240:	7821      	ldrb	r1, [r4, #0]
    3242:	3930      	subs	r1, #48	; 0x30
    3244:	2909      	cmp	r1, #9
    3246:	d903      	bls.n	3250 <_vfiprintf_r+0x1d4>
    3248:	2b00      	cmp	r3, #0
    324a:	d0bc      	beq.n	31c6 <_vfiprintf_r+0x14a>
    324c:	9207      	str	r2, [sp, #28]
    324e:	e7ba      	b.n	31c6 <_vfiprintf_r+0x14a>
    3250:	4342      	muls	r2, r0
    3252:	3401      	adds	r4, #1
    3254:	1852      	adds	r2, r2, r1
    3256:	2301      	movs	r3, #1
    3258:	e7f2      	b.n	3240 <_vfiprintf_r+0x1c4>
    325a:	3307      	adds	r3, #7
    325c:	e7d5      	b.n	320a <_vfiprintf_r+0x18e>
    325e:	ab05      	add	r3, sp, #20
    3260:	9300      	str	r3, [sp, #0]
    3262:	003a      	movs	r2, r7
    3264:	4b12      	ldr	r3, [pc, #72]	; (32b0 <_vfiprintf_r+0x234>)
    3266:	0029      	movs	r1, r5
    3268:	0030      	movs	r0, r6
    326a:	e000      	b.n	326e <_vfiprintf_r+0x1f2>
    326c:	bf00      	nop
    326e:	9003      	str	r0, [sp, #12]
    3270:	9b03      	ldr	r3, [sp, #12]
    3272:	3301      	adds	r3, #1
    3274:	d1cc      	bne.n	3210 <_vfiprintf_r+0x194>
    3276:	89bb      	ldrh	r3, [r7, #12]
    3278:	065b      	lsls	r3, r3, #25
    327a:	d500      	bpl.n	327e <_vfiprintf_r+0x202>
    327c:	e77b      	b.n	3176 <_vfiprintf_r+0xfa>
    327e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3280:	e77b      	b.n	317a <_vfiprintf_r+0xfe>
    3282:	ab05      	add	r3, sp, #20
    3284:	9300      	str	r3, [sp, #0]
    3286:	003a      	movs	r2, r7
    3288:	4b09      	ldr	r3, [pc, #36]	; (32b0 <_vfiprintf_r+0x234>)
    328a:	0029      	movs	r1, r5
    328c:	0030      	movs	r0, r6
    328e:	f000 f87f 	bl	3390 <_printf_i>
    3292:	e7ec      	b.n	326e <_vfiprintf_r+0x1f2>
    3294:	00004600 	.word	0x00004600
    3298:	00004640 	.word	0x00004640
    329c:	00004620 	.word	0x00004620
    32a0:	000045e0 	.word	0x000045e0
    32a4:	00004646 	.word	0x00004646
    32a8:	0000464a 	.word	0x0000464a
    32ac:	00000000 	.word	0x00000000
    32b0:	00003057 	.word	0x00003057

000032b4 <_printf_common>:
    32b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    32b6:	0015      	movs	r5, r2
    32b8:	9301      	str	r3, [sp, #4]
    32ba:	688a      	ldr	r2, [r1, #8]
    32bc:	690b      	ldr	r3, [r1, #16]
    32be:	9000      	str	r0, [sp, #0]
    32c0:	000c      	movs	r4, r1
    32c2:	4293      	cmp	r3, r2
    32c4:	da00      	bge.n	32c8 <_printf_common+0x14>
    32c6:	0013      	movs	r3, r2
    32c8:	0022      	movs	r2, r4
    32ca:	602b      	str	r3, [r5, #0]
    32cc:	3243      	adds	r2, #67	; 0x43
    32ce:	7812      	ldrb	r2, [r2, #0]
    32d0:	2a00      	cmp	r2, #0
    32d2:	d001      	beq.n	32d8 <_printf_common+0x24>
    32d4:	3301      	adds	r3, #1
    32d6:	602b      	str	r3, [r5, #0]
    32d8:	6823      	ldr	r3, [r4, #0]
    32da:	069b      	lsls	r3, r3, #26
    32dc:	d502      	bpl.n	32e4 <_printf_common+0x30>
    32de:	682b      	ldr	r3, [r5, #0]
    32e0:	3302      	adds	r3, #2
    32e2:	602b      	str	r3, [r5, #0]
    32e4:	2706      	movs	r7, #6
    32e6:	6823      	ldr	r3, [r4, #0]
    32e8:	401f      	ands	r7, r3
    32ea:	d027      	beq.n	333c <_printf_common+0x88>
    32ec:	0023      	movs	r3, r4
    32ee:	3343      	adds	r3, #67	; 0x43
    32f0:	781b      	ldrb	r3, [r3, #0]
    32f2:	1e5a      	subs	r2, r3, #1
    32f4:	4193      	sbcs	r3, r2
    32f6:	6822      	ldr	r2, [r4, #0]
    32f8:	0692      	lsls	r2, r2, #26
    32fa:	d430      	bmi.n	335e <_printf_common+0xaa>
    32fc:	0022      	movs	r2, r4
    32fe:	9901      	ldr	r1, [sp, #4]
    3300:	3243      	adds	r2, #67	; 0x43
    3302:	9800      	ldr	r0, [sp, #0]
    3304:	9e08      	ldr	r6, [sp, #32]
    3306:	47b0      	blx	r6
    3308:	1c43      	adds	r3, r0, #1
    330a:	d025      	beq.n	3358 <_printf_common+0xa4>
    330c:	2306      	movs	r3, #6
    330e:	6820      	ldr	r0, [r4, #0]
    3310:	682a      	ldr	r2, [r5, #0]
    3312:	68e1      	ldr	r1, [r4, #12]
    3314:	4003      	ands	r3, r0
    3316:	2500      	movs	r5, #0
    3318:	2b04      	cmp	r3, #4
    331a:	d103      	bne.n	3324 <_printf_common+0x70>
    331c:	1a8d      	subs	r5, r1, r2
    331e:	43eb      	mvns	r3, r5
    3320:	17db      	asrs	r3, r3, #31
    3322:	401d      	ands	r5, r3
    3324:	68a3      	ldr	r3, [r4, #8]
    3326:	6922      	ldr	r2, [r4, #16]
    3328:	4293      	cmp	r3, r2
    332a:	dd01      	ble.n	3330 <_printf_common+0x7c>
    332c:	1a9b      	subs	r3, r3, r2
    332e:	18ed      	adds	r5, r5, r3
    3330:	2700      	movs	r7, #0
    3332:	42bd      	cmp	r5, r7
    3334:	d120      	bne.n	3378 <_printf_common+0xc4>
    3336:	2000      	movs	r0, #0
    3338:	e010      	b.n	335c <_printf_common+0xa8>
    333a:	3701      	adds	r7, #1
    333c:	68e3      	ldr	r3, [r4, #12]
    333e:	682a      	ldr	r2, [r5, #0]
    3340:	1a9b      	subs	r3, r3, r2
    3342:	429f      	cmp	r7, r3
    3344:	dad2      	bge.n	32ec <_printf_common+0x38>
    3346:	0022      	movs	r2, r4
    3348:	2301      	movs	r3, #1
    334a:	3219      	adds	r2, #25
    334c:	9901      	ldr	r1, [sp, #4]
    334e:	9800      	ldr	r0, [sp, #0]
    3350:	9e08      	ldr	r6, [sp, #32]
    3352:	47b0      	blx	r6
    3354:	1c43      	adds	r3, r0, #1
    3356:	d1f0      	bne.n	333a <_printf_common+0x86>
    3358:	2001      	movs	r0, #1
    335a:	4240      	negs	r0, r0
    335c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    335e:	2030      	movs	r0, #48	; 0x30
    3360:	18e1      	adds	r1, r4, r3
    3362:	3143      	adds	r1, #67	; 0x43
    3364:	7008      	strb	r0, [r1, #0]
    3366:	0021      	movs	r1, r4
    3368:	1c5a      	adds	r2, r3, #1
    336a:	3145      	adds	r1, #69	; 0x45
    336c:	7809      	ldrb	r1, [r1, #0]
    336e:	18a2      	adds	r2, r4, r2
    3370:	3243      	adds	r2, #67	; 0x43
    3372:	3302      	adds	r3, #2
    3374:	7011      	strb	r1, [r2, #0]
    3376:	e7c1      	b.n	32fc <_printf_common+0x48>
    3378:	0022      	movs	r2, r4
    337a:	2301      	movs	r3, #1
    337c:	321a      	adds	r2, #26
    337e:	9901      	ldr	r1, [sp, #4]
    3380:	9800      	ldr	r0, [sp, #0]
    3382:	9e08      	ldr	r6, [sp, #32]
    3384:	47b0      	blx	r6
    3386:	1c43      	adds	r3, r0, #1
    3388:	d0e6      	beq.n	3358 <_printf_common+0xa4>
    338a:	3701      	adds	r7, #1
    338c:	e7d1      	b.n	3332 <_printf_common+0x7e>
	...

00003390 <_printf_i>:
    3390:	b5f0      	push	{r4, r5, r6, r7, lr}
    3392:	b08b      	sub	sp, #44	; 0x2c
    3394:	9206      	str	r2, [sp, #24]
    3396:	000a      	movs	r2, r1
    3398:	3243      	adds	r2, #67	; 0x43
    339a:	9307      	str	r3, [sp, #28]
    339c:	9005      	str	r0, [sp, #20]
    339e:	9204      	str	r2, [sp, #16]
    33a0:	7e0a      	ldrb	r2, [r1, #24]
    33a2:	000c      	movs	r4, r1
    33a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    33a6:	2a6e      	cmp	r2, #110	; 0x6e
    33a8:	d100      	bne.n	33ac <_printf_i+0x1c>
    33aa:	e08f      	b.n	34cc <_printf_i+0x13c>
    33ac:	d817      	bhi.n	33de <_printf_i+0x4e>
    33ae:	2a63      	cmp	r2, #99	; 0x63
    33b0:	d02c      	beq.n	340c <_printf_i+0x7c>
    33b2:	d808      	bhi.n	33c6 <_printf_i+0x36>
    33b4:	2a00      	cmp	r2, #0
    33b6:	d100      	bne.n	33ba <_printf_i+0x2a>
    33b8:	e099      	b.n	34ee <_printf_i+0x15e>
    33ba:	2a58      	cmp	r2, #88	; 0x58
    33bc:	d054      	beq.n	3468 <_printf_i+0xd8>
    33be:	0026      	movs	r6, r4
    33c0:	3642      	adds	r6, #66	; 0x42
    33c2:	7032      	strb	r2, [r6, #0]
    33c4:	e029      	b.n	341a <_printf_i+0x8a>
    33c6:	2a64      	cmp	r2, #100	; 0x64
    33c8:	d001      	beq.n	33ce <_printf_i+0x3e>
    33ca:	2a69      	cmp	r2, #105	; 0x69
    33cc:	d1f7      	bne.n	33be <_printf_i+0x2e>
    33ce:	6821      	ldr	r1, [r4, #0]
    33d0:	681a      	ldr	r2, [r3, #0]
    33d2:	0608      	lsls	r0, r1, #24
    33d4:	d523      	bpl.n	341e <_printf_i+0x8e>
    33d6:	1d11      	adds	r1, r2, #4
    33d8:	6019      	str	r1, [r3, #0]
    33da:	6815      	ldr	r5, [r2, #0]
    33dc:	e025      	b.n	342a <_printf_i+0x9a>
    33de:	2a73      	cmp	r2, #115	; 0x73
    33e0:	d100      	bne.n	33e4 <_printf_i+0x54>
    33e2:	e088      	b.n	34f6 <_printf_i+0x166>
    33e4:	d808      	bhi.n	33f8 <_printf_i+0x68>
    33e6:	2a6f      	cmp	r2, #111	; 0x6f
    33e8:	d029      	beq.n	343e <_printf_i+0xae>
    33ea:	2a70      	cmp	r2, #112	; 0x70
    33ec:	d1e7      	bne.n	33be <_printf_i+0x2e>
    33ee:	2220      	movs	r2, #32
    33f0:	6809      	ldr	r1, [r1, #0]
    33f2:	430a      	orrs	r2, r1
    33f4:	6022      	str	r2, [r4, #0]
    33f6:	e003      	b.n	3400 <_printf_i+0x70>
    33f8:	2a75      	cmp	r2, #117	; 0x75
    33fa:	d020      	beq.n	343e <_printf_i+0xae>
    33fc:	2a78      	cmp	r2, #120	; 0x78
    33fe:	d1de      	bne.n	33be <_printf_i+0x2e>
    3400:	0022      	movs	r2, r4
    3402:	2178      	movs	r1, #120	; 0x78
    3404:	3245      	adds	r2, #69	; 0x45
    3406:	7011      	strb	r1, [r2, #0]
    3408:	4a6c      	ldr	r2, [pc, #432]	; (35bc <_printf_i+0x22c>)
    340a:	e030      	b.n	346e <_printf_i+0xde>
    340c:	000e      	movs	r6, r1
    340e:	681a      	ldr	r2, [r3, #0]
    3410:	3642      	adds	r6, #66	; 0x42
    3412:	1d11      	adds	r1, r2, #4
    3414:	6019      	str	r1, [r3, #0]
    3416:	6813      	ldr	r3, [r2, #0]
    3418:	7033      	strb	r3, [r6, #0]
    341a:	2301      	movs	r3, #1
    341c:	e079      	b.n	3512 <_printf_i+0x182>
    341e:	0649      	lsls	r1, r1, #25
    3420:	d5d9      	bpl.n	33d6 <_printf_i+0x46>
    3422:	1d11      	adds	r1, r2, #4
    3424:	6019      	str	r1, [r3, #0]
    3426:	2300      	movs	r3, #0
    3428:	5ed5      	ldrsh	r5, [r2, r3]
    342a:	2d00      	cmp	r5, #0
    342c:	da03      	bge.n	3436 <_printf_i+0xa6>
    342e:	232d      	movs	r3, #45	; 0x2d
    3430:	9a04      	ldr	r2, [sp, #16]
    3432:	426d      	negs	r5, r5
    3434:	7013      	strb	r3, [r2, #0]
    3436:	4b62      	ldr	r3, [pc, #392]	; (35c0 <_printf_i+0x230>)
    3438:	270a      	movs	r7, #10
    343a:	9303      	str	r3, [sp, #12]
    343c:	e02f      	b.n	349e <_printf_i+0x10e>
    343e:	6820      	ldr	r0, [r4, #0]
    3440:	6819      	ldr	r1, [r3, #0]
    3442:	0605      	lsls	r5, r0, #24
    3444:	d503      	bpl.n	344e <_printf_i+0xbe>
    3446:	1d08      	adds	r0, r1, #4
    3448:	6018      	str	r0, [r3, #0]
    344a:	680d      	ldr	r5, [r1, #0]
    344c:	e005      	b.n	345a <_printf_i+0xca>
    344e:	0640      	lsls	r0, r0, #25
    3450:	d5f9      	bpl.n	3446 <_printf_i+0xb6>
    3452:	680d      	ldr	r5, [r1, #0]
    3454:	1d08      	adds	r0, r1, #4
    3456:	6018      	str	r0, [r3, #0]
    3458:	b2ad      	uxth	r5, r5
    345a:	4b59      	ldr	r3, [pc, #356]	; (35c0 <_printf_i+0x230>)
    345c:	2708      	movs	r7, #8
    345e:	9303      	str	r3, [sp, #12]
    3460:	2a6f      	cmp	r2, #111	; 0x6f
    3462:	d018      	beq.n	3496 <_printf_i+0x106>
    3464:	270a      	movs	r7, #10
    3466:	e016      	b.n	3496 <_printf_i+0x106>
    3468:	3145      	adds	r1, #69	; 0x45
    346a:	700a      	strb	r2, [r1, #0]
    346c:	4a54      	ldr	r2, [pc, #336]	; (35c0 <_printf_i+0x230>)
    346e:	9203      	str	r2, [sp, #12]
    3470:	681a      	ldr	r2, [r3, #0]
    3472:	6821      	ldr	r1, [r4, #0]
    3474:	1d10      	adds	r0, r2, #4
    3476:	6018      	str	r0, [r3, #0]
    3478:	6815      	ldr	r5, [r2, #0]
    347a:	0608      	lsls	r0, r1, #24
    347c:	d522      	bpl.n	34c4 <_printf_i+0x134>
    347e:	07cb      	lsls	r3, r1, #31
    3480:	d502      	bpl.n	3488 <_printf_i+0xf8>
    3482:	2320      	movs	r3, #32
    3484:	4319      	orrs	r1, r3
    3486:	6021      	str	r1, [r4, #0]
    3488:	2710      	movs	r7, #16
    348a:	2d00      	cmp	r5, #0
    348c:	d103      	bne.n	3496 <_printf_i+0x106>
    348e:	2320      	movs	r3, #32
    3490:	6822      	ldr	r2, [r4, #0]
    3492:	439a      	bics	r2, r3
    3494:	6022      	str	r2, [r4, #0]
    3496:	0023      	movs	r3, r4
    3498:	2200      	movs	r2, #0
    349a:	3343      	adds	r3, #67	; 0x43
    349c:	701a      	strb	r2, [r3, #0]
    349e:	6863      	ldr	r3, [r4, #4]
    34a0:	60a3      	str	r3, [r4, #8]
    34a2:	2b00      	cmp	r3, #0
    34a4:	db5c      	blt.n	3560 <_printf_i+0x1d0>
    34a6:	2204      	movs	r2, #4
    34a8:	6821      	ldr	r1, [r4, #0]
    34aa:	4391      	bics	r1, r2
    34ac:	6021      	str	r1, [r4, #0]
    34ae:	2d00      	cmp	r5, #0
    34b0:	d158      	bne.n	3564 <_printf_i+0x1d4>
    34b2:	9e04      	ldr	r6, [sp, #16]
    34b4:	2b00      	cmp	r3, #0
    34b6:	d064      	beq.n	3582 <_printf_i+0x1f2>
    34b8:	0026      	movs	r6, r4
    34ba:	9b03      	ldr	r3, [sp, #12]
    34bc:	3642      	adds	r6, #66	; 0x42
    34be:	781b      	ldrb	r3, [r3, #0]
    34c0:	7033      	strb	r3, [r6, #0]
    34c2:	e05e      	b.n	3582 <_printf_i+0x1f2>
    34c4:	0648      	lsls	r0, r1, #25
    34c6:	d5da      	bpl.n	347e <_printf_i+0xee>
    34c8:	b2ad      	uxth	r5, r5
    34ca:	e7d8      	b.n	347e <_printf_i+0xee>
    34cc:	6809      	ldr	r1, [r1, #0]
    34ce:	681a      	ldr	r2, [r3, #0]
    34d0:	0608      	lsls	r0, r1, #24
    34d2:	d505      	bpl.n	34e0 <_printf_i+0x150>
    34d4:	1d11      	adds	r1, r2, #4
    34d6:	6019      	str	r1, [r3, #0]
    34d8:	6813      	ldr	r3, [r2, #0]
    34da:	6962      	ldr	r2, [r4, #20]
    34dc:	601a      	str	r2, [r3, #0]
    34de:	e006      	b.n	34ee <_printf_i+0x15e>
    34e0:	0649      	lsls	r1, r1, #25
    34e2:	d5f7      	bpl.n	34d4 <_printf_i+0x144>
    34e4:	1d11      	adds	r1, r2, #4
    34e6:	6019      	str	r1, [r3, #0]
    34e8:	6813      	ldr	r3, [r2, #0]
    34ea:	8aa2      	ldrh	r2, [r4, #20]
    34ec:	801a      	strh	r2, [r3, #0]
    34ee:	2300      	movs	r3, #0
    34f0:	9e04      	ldr	r6, [sp, #16]
    34f2:	6123      	str	r3, [r4, #16]
    34f4:	e054      	b.n	35a0 <_printf_i+0x210>
    34f6:	681a      	ldr	r2, [r3, #0]
    34f8:	1d11      	adds	r1, r2, #4
    34fa:	6019      	str	r1, [r3, #0]
    34fc:	6816      	ldr	r6, [r2, #0]
    34fe:	2100      	movs	r1, #0
    3500:	6862      	ldr	r2, [r4, #4]
    3502:	0030      	movs	r0, r6
    3504:	f000 ff32 	bl	436c <memchr>
    3508:	2800      	cmp	r0, #0
    350a:	d001      	beq.n	3510 <_printf_i+0x180>
    350c:	1b80      	subs	r0, r0, r6
    350e:	6060      	str	r0, [r4, #4]
    3510:	6863      	ldr	r3, [r4, #4]
    3512:	6123      	str	r3, [r4, #16]
    3514:	2300      	movs	r3, #0
    3516:	9a04      	ldr	r2, [sp, #16]
    3518:	7013      	strb	r3, [r2, #0]
    351a:	e041      	b.n	35a0 <_printf_i+0x210>
    351c:	6923      	ldr	r3, [r4, #16]
    351e:	0032      	movs	r2, r6
    3520:	9906      	ldr	r1, [sp, #24]
    3522:	9805      	ldr	r0, [sp, #20]
    3524:	9d07      	ldr	r5, [sp, #28]
    3526:	47a8      	blx	r5
    3528:	1c43      	adds	r3, r0, #1
    352a:	d043      	beq.n	35b4 <_printf_i+0x224>
    352c:	6823      	ldr	r3, [r4, #0]
    352e:	2500      	movs	r5, #0
    3530:	079b      	lsls	r3, r3, #30
    3532:	d40f      	bmi.n	3554 <_printf_i+0x1c4>
    3534:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3536:	68e0      	ldr	r0, [r4, #12]
    3538:	4298      	cmp	r0, r3
    353a:	da3d      	bge.n	35b8 <_printf_i+0x228>
    353c:	0018      	movs	r0, r3
    353e:	e03b      	b.n	35b8 <_printf_i+0x228>
    3540:	0022      	movs	r2, r4
    3542:	2301      	movs	r3, #1
    3544:	3219      	adds	r2, #25
    3546:	9906      	ldr	r1, [sp, #24]
    3548:	9805      	ldr	r0, [sp, #20]
    354a:	9e07      	ldr	r6, [sp, #28]
    354c:	47b0      	blx	r6
    354e:	1c43      	adds	r3, r0, #1
    3550:	d030      	beq.n	35b4 <_printf_i+0x224>
    3552:	3501      	adds	r5, #1
    3554:	68e3      	ldr	r3, [r4, #12]
    3556:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3558:	1a9b      	subs	r3, r3, r2
    355a:	429d      	cmp	r5, r3
    355c:	dbf0      	blt.n	3540 <_printf_i+0x1b0>
    355e:	e7e9      	b.n	3534 <_printf_i+0x1a4>
    3560:	2d00      	cmp	r5, #0
    3562:	d0a9      	beq.n	34b8 <_printf_i+0x128>
    3564:	9e04      	ldr	r6, [sp, #16]
    3566:	0028      	movs	r0, r5
    3568:	0039      	movs	r1, r7
    356a:	f7fe ffdb 	bl	2524 <__aeabi_uidivmod>
    356e:	9b03      	ldr	r3, [sp, #12]
    3570:	3e01      	subs	r6, #1
    3572:	5c5b      	ldrb	r3, [r3, r1]
    3574:	0028      	movs	r0, r5
    3576:	7033      	strb	r3, [r6, #0]
    3578:	0039      	movs	r1, r7
    357a:	f7fe ff4d 	bl	2418 <__udivsi3>
    357e:	1e05      	subs	r5, r0, #0
    3580:	d1f1      	bne.n	3566 <_printf_i+0x1d6>
    3582:	2f08      	cmp	r7, #8
    3584:	d109      	bne.n	359a <_printf_i+0x20a>
    3586:	6823      	ldr	r3, [r4, #0]
    3588:	07db      	lsls	r3, r3, #31
    358a:	d506      	bpl.n	359a <_printf_i+0x20a>
    358c:	6863      	ldr	r3, [r4, #4]
    358e:	6922      	ldr	r2, [r4, #16]
    3590:	4293      	cmp	r3, r2
    3592:	dc02      	bgt.n	359a <_printf_i+0x20a>
    3594:	2330      	movs	r3, #48	; 0x30
    3596:	3e01      	subs	r6, #1
    3598:	7033      	strb	r3, [r6, #0]
    359a:	9b04      	ldr	r3, [sp, #16]
    359c:	1b9b      	subs	r3, r3, r6
    359e:	6123      	str	r3, [r4, #16]
    35a0:	9b07      	ldr	r3, [sp, #28]
    35a2:	aa09      	add	r2, sp, #36	; 0x24
    35a4:	9300      	str	r3, [sp, #0]
    35a6:	0021      	movs	r1, r4
    35a8:	9b06      	ldr	r3, [sp, #24]
    35aa:	9805      	ldr	r0, [sp, #20]
    35ac:	f7ff fe82 	bl	32b4 <_printf_common>
    35b0:	1c43      	adds	r3, r0, #1
    35b2:	d1b3      	bne.n	351c <_printf_i+0x18c>
    35b4:	2001      	movs	r0, #1
    35b6:	4240      	negs	r0, r0
    35b8:	b00b      	add	sp, #44	; 0x2c
    35ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35bc:	00004662 	.word	0x00004662
    35c0:	00004651 	.word	0x00004651

000035c4 <__svfiscanf_r>:
    35c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    35c6:	4cbd      	ldr	r4, [pc, #756]	; (38bc <__svfiscanf_r+0x2f8>)
    35c8:	2586      	movs	r5, #134	; 0x86
    35ca:	44a5      	add	sp, r4
    35cc:	9303      	str	r3, [sp, #12]
    35ce:	2300      	movs	r3, #0
    35d0:	9348      	str	r3, [sp, #288]	; 0x120
    35d2:	9349      	str	r3, [sp, #292]	; 0x124
    35d4:	ab05      	add	r3, sp, #20
    35d6:	934a      	str	r3, [sp, #296]	; 0x128
    35d8:	23be      	movs	r3, #190	; 0xbe
    35da:	006d      	lsls	r5, r5, #1
    35dc:	9000      	str	r0, [sp, #0]
    35de:	000c      	movs	r4, r1
    35e0:	a802      	add	r0, sp, #8
    35e2:	49b7      	ldr	r1, [pc, #732]	; (38c0 <__svfiscanf_r+0x2fc>)
    35e4:	005b      	lsls	r3, r3, #1
    35e6:	1940      	adds	r0, r0, r5
    35e8:	27c0      	movs	r7, #192	; 0xc0
    35ea:	50c1      	str	r1, [r0, r3]
    35ec:	ab02      	add	r3, sp, #8
    35ee:	195b      	adds	r3, r3, r5
    35f0:	0015      	movs	r5, r2
    35f2:	49b4      	ldr	r1, [pc, #720]	; (38c4 <__svfiscanf_r+0x300>)
    35f4:	007f      	lsls	r7, r7, #1
    35f6:	51d9      	str	r1, [r3, r7]
    35f8:	782b      	ldrb	r3, [r5, #0]
    35fa:	2b00      	cmp	r3, #0
    35fc:	d100      	bne.n	3600 <__svfiscanf_r+0x3c>
    35fe:	e15b      	b.n	38b8 <__svfiscanf_r+0x2f4>
    3600:	f000 fe80 	bl	4304 <__locale_ctype_ptr>
    3604:	2208      	movs	r2, #8
    3606:	782b      	ldrb	r3, [r5, #0]
    3608:	18c0      	adds	r0, r0, r3
    360a:	9301      	str	r3, [sp, #4]
    360c:	7843      	ldrb	r3, [r0, #1]
    360e:	4013      	ands	r3, r2
    3610:	d141      	bne.n	3696 <__svfiscanf_r+0xd2>
    3612:	9a01      	ldr	r2, [sp, #4]
    3614:	1c6e      	adds	r6, r5, #1
    3616:	2a25      	cmp	r2, #37	; 0x25
    3618:	d000      	beq.n	361c <__svfiscanf_r+0x58>
    361a:	e0a8      	b.n	376e <__svfiscanf_r+0x1aa>
    361c:	9347      	str	r3, [sp, #284]	; 0x11c
    361e:	9345      	str	r3, [sp, #276]	; 0x114
    3620:	786b      	ldrb	r3, [r5, #1]
    3622:	2b2a      	cmp	r3, #42	; 0x2a
    3624:	d102      	bne.n	362c <__svfiscanf_r+0x68>
    3626:	3b1a      	subs	r3, #26
    3628:	9345      	str	r3, [sp, #276]	; 0x114
    362a:	1cae      	adds	r6, r5, #2
    362c:	0035      	movs	r5, r6
    362e:	220a      	movs	r2, #10
    3630:	7829      	ldrb	r1, [r5, #0]
    3632:	000b      	movs	r3, r1
    3634:	3b30      	subs	r3, #48	; 0x30
    3636:	2b09      	cmp	r3, #9
    3638:	d948      	bls.n	36cc <__svfiscanf_r+0x108>
    363a:	4ea3      	ldr	r6, [pc, #652]	; (38c8 <__svfiscanf_r+0x304>)
    363c:	2203      	movs	r2, #3
    363e:	0030      	movs	r0, r6
    3640:	f000 fe94 	bl	436c <memchr>
    3644:	2800      	cmp	r0, #0
    3646:	d007      	beq.n	3658 <__svfiscanf_r+0x94>
    3648:	2301      	movs	r3, #1
    364a:	1b80      	subs	r0, r0, r6
    364c:	4083      	lsls	r3, r0
    364e:	9a45      	ldr	r2, [sp, #276]	; 0x114
    3650:	3501      	adds	r5, #1
    3652:	4313      	orrs	r3, r2
    3654:	9202      	str	r2, [sp, #8]
    3656:	9345      	str	r3, [sp, #276]	; 0x114
    3658:	782b      	ldrb	r3, [r5, #0]
    365a:	1c6e      	adds	r6, r5, #1
    365c:	2b67      	cmp	r3, #103	; 0x67
    365e:	d858      	bhi.n	3712 <__svfiscanf_r+0x14e>
    3660:	2b65      	cmp	r3, #101	; 0x65
    3662:	d300      	bcc.n	3666 <__svfiscanf_r+0xa2>
    3664:	e0dd      	b.n	3822 <__svfiscanf_r+0x25e>
    3666:	2b47      	cmp	r3, #71	; 0x47
    3668:	d838      	bhi.n	36dc <__svfiscanf_r+0x118>
    366a:	2b45      	cmp	r3, #69	; 0x45
    366c:	d300      	bcc.n	3670 <__svfiscanf_r+0xac>
    366e:	e0d8      	b.n	3822 <__svfiscanf_r+0x25e>
    3670:	2b00      	cmp	r3, #0
    3672:	d100      	bne.n	3676 <__svfiscanf_r+0xb2>
    3674:	e11d      	b.n	38b2 <__svfiscanf_r+0x2ee>
    3676:	2b25      	cmp	r3, #37	; 0x25
    3678:	d079      	beq.n	376e <__svfiscanf_r+0x1aa>
    367a:	2303      	movs	r3, #3
    367c:	934b      	str	r3, [sp, #300]	; 0x12c
    367e:	3307      	adds	r3, #7
    3680:	9346      	str	r3, [sp, #280]	; 0x118
    3682:	e053      	b.n	372c <__svfiscanf_r+0x168>
    3684:	9a49      	ldr	r2, [sp, #292]	; 0x124
    3686:	3301      	adds	r3, #1
    3688:	9201      	str	r2, [sp, #4]
    368a:	3201      	adds	r2, #1
    368c:	9249      	str	r2, [sp, #292]	; 0x124
    368e:	6862      	ldr	r2, [r4, #4]
    3690:	6023      	str	r3, [r4, #0]
    3692:	3a01      	subs	r2, #1
    3694:	6062      	str	r2, [r4, #4]
    3696:	6863      	ldr	r3, [r4, #4]
    3698:	2b00      	cmp	r3, #0
    369a:	dd0b      	ble.n	36b4 <__svfiscanf_r+0xf0>
    369c:	f000 fe32 	bl	4304 <__locale_ctype_ptr>
    36a0:	2108      	movs	r1, #8
    36a2:	6823      	ldr	r3, [r4, #0]
    36a4:	781a      	ldrb	r2, [r3, #0]
    36a6:	1880      	adds	r0, r0, r2
    36a8:	7842      	ldrb	r2, [r0, #1]
    36aa:	420a      	tst	r2, r1
    36ac:	d1ea      	bne.n	3684 <__svfiscanf_r+0xc0>
    36ae:	1c6e      	adds	r6, r5, #1
    36b0:	0035      	movs	r5, r6
    36b2:	e7a1      	b.n	35f8 <__svfiscanf_r+0x34>
    36b4:	2286      	movs	r2, #134	; 0x86
    36b6:	ab02      	add	r3, sp, #8
    36b8:	0052      	lsls	r2, r2, #1
    36ba:	189b      	adds	r3, r3, r2
    36bc:	59db      	ldr	r3, [r3, r7]
    36be:	0021      	movs	r1, r4
    36c0:	9800      	ldr	r0, [sp, #0]
    36c2:	9301      	str	r3, [sp, #4]
    36c4:	4798      	blx	r3
    36c6:	2800      	cmp	r0, #0
    36c8:	d0e8      	beq.n	369c <__svfiscanf_r+0xd8>
    36ca:	e7f0      	b.n	36ae <__svfiscanf_r+0xea>
    36cc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    36ce:	3501      	adds	r5, #1
    36d0:	9302      	str	r3, [sp, #8]
    36d2:	4353      	muls	r3, r2
    36d4:	3b30      	subs	r3, #48	; 0x30
    36d6:	1859      	adds	r1, r3, r1
    36d8:	9147      	str	r1, [sp, #284]	; 0x11c
    36da:	e7a9      	b.n	3630 <__svfiscanf_r+0x6c>
    36dc:	2b5b      	cmp	r3, #91	; 0x5b
    36de:	d100      	bne.n	36e2 <__svfiscanf_r+0x11e>
    36e0:	e077      	b.n	37d2 <__svfiscanf_r+0x20e>
    36e2:	d80f      	bhi.n	3704 <__svfiscanf_r+0x140>
    36e4:	2b58      	cmp	r3, #88	; 0x58
    36e6:	d1c8      	bne.n	367a <__svfiscanf_r+0xb6>
    36e8:	9a45      	ldr	r2, [sp, #276]	; 0x114
    36ea:	9201      	str	r2, [sp, #4]
    36ec:	2280      	movs	r2, #128	; 0x80
    36ee:	9901      	ldr	r1, [sp, #4]
    36f0:	0092      	lsls	r2, r2, #2
    36f2:	430a      	orrs	r2, r1
    36f4:	9245      	str	r2, [sp, #276]	; 0x114
    36f6:	2210      	movs	r2, #16
    36f8:	9246      	str	r2, [sp, #280]	; 0x118
    36fa:	2203      	movs	r2, #3
    36fc:	2b6e      	cmp	r3, #110	; 0x6e
    36fe:	dd14      	ble.n	372a <__svfiscanf_r+0x166>
    3700:	3201      	adds	r2, #1
    3702:	e012      	b.n	372a <__svfiscanf_r+0x166>
    3704:	2b63      	cmp	r3, #99	; 0x63
    3706:	d100      	bne.n	370a <__svfiscanf_r+0x146>
    3708:	e071      	b.n	37ee <__svfiscanf_r+0x22a>
    370a:	2b64      	cmp	r3, #100	; 0x64
    370c:	d1b5      	bne.n	367a <__svfiscanf_r+0xb6>
    370e:	220a      	movs	r2, #10
    3710:	e7f2      	b.n	36f8 <__svfiscanf_r+0x134>
    3712:	2b70      	cmp	r3, #112	; 0x70
    3714:	d052      	beq.n	37bc <__svfiscanf_r+0x1f8>
    3716:	d822      	bhi.n	375e <__svfiscanf_r+0x19a>
    3718:	2b6e      	cmp	r3, #110	; 0x6e
    371a:	d100      	bne.n	371e <__svfiscanf_r+0x15a>
    371c:	e06f      	b.n	37fe <__svfiscanf_r+0x23a>
    371e:	d854      	bhi.n	37ca <__svfiscanf_r+0x206>
    3720:	2b69      	cmp	r3, #105	; 0x69
    3722:	d1aa      	bne.n	367a <__svfiscanf_r+0xb6>
    3724:	2300      	movs	r3, #0
    3726:	2203      	movs	r2, #3
    3728:	9346      	str	r3, [sp, #280]	; 0x118
    372a:	924b      	str	r2, [sp, #300]	; 0x12c
    372c:	6863      	ldr	r3, [r4, #4]
    372e:	2b00      	cmp	r3, #0
    3730:	dc00      	bgt.n	3734 <__svfiscanf_r+0x170>
    3732:	e078      	b.n	3826 <__svfiscanf_r+0x262>
    3734:	9b45      	ldr	r3, [sp, #276]	; 0x114
    3736:	9301      	str	r3, [sp, #4]
    3738:	065b      	lsls	r3, r3, #25
    373a:	d400      	bmi.n	373e <__svfiscanf_r+0x17a>
    373c:	e08b      	b.n	3856 <__svfiscanf_r+0x292>
    373e:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    3740:	2b02      	cmp	r3, #2
    3742:	dd00      	ble.n	3746 <__svfiscanf_r+0x182>
    3744:	e09d      	b.n	3882 <__svfiscanf_r+0x2be>
    3746:	ab03      	add	r3, sp, #12
    3748:	0022      	movs	r2, r4
    374a:	a945      	add	r1, sp, #276	; 0x114
    374c:	9800      	ldr	r0, [sp, #0]
    374e:	f000 f8e7 	bl	3920 <_scanf_chars>
    3752:	2801      	cmp	r0, #1
    3754:	d100      	bne.n	3758 <__svfiscanf_r+0x194>
    3756:	e0af      	b.n	38b8 <__svfiscanf_r+0x2f4>
    3758:	2802      	cmp	r0, #2
    375a:	d1a9      	bne.n	36b0 <__svfiscanf_r+0xec>
    375c:	e025      	b.n	37aa <__svfiscanf_r+0x1e6>
    375e:	2b75      	cmp	r3, #117	; 0x75
    3760:	d0d5      	beq.n	370e <__svfiscanf_r+0x14a>
    3762:	2b78      	cmp	r3, #120	; 0x78
    3764:	d0c0      	beq.n	36e8 <__svfiscanf_r+0x124>
    3766:	2b73      	cmp	r3, #115	; 0x73
    3768:	d187      	bne.n	367a <__svfiscanf_r+0xb6>
    376a:	2302      	movs	r3, #2
    376c:	e03d      	b.n	37ea <__svfiscanf_r+0x226>
    376e:	6863      	ldr	r3, [r4, #4]
    3770:	2b00      	cmp	r3, #0
    3772:	dd0f      	ble.n	3794 <__svfiscanf_r+0x1d0>
    3774:	6823      	ldr	r3, [r4, #0]
    3776:	9901      	ldr	r1, [sp, #4]
    3778:	781a      	ldrb	r2, [r3, #0]
    377a:	4291      	cmp	r1, r2
    377c:	d000      	beq.n	3780 <__svfiscanf_r+0x1bc>
    377e:	e09b      	b.n	38b8 <__svfiscanf_r+0x2f4>
    3780:	3301      	adds	r3, #1
    3782:	6862      	ldr	r2, [r4, #4]
    3784:	6023      	str	r3, [r4, #0]
    3786:	9b49      	ldr	r3, [sp, #292]	; 0x124
    3788:	3a01      	subs	r2, #1
    378a:	9301      	str	r3, [sp, #4]
    378c:	3301      	adds	r3, #1
    378e:	6062      	str	r2, [r4, #4]
    3790:	9349      	str	r3, [sp, #292]	; 0x124
    3792:	e78d      	b.n	36b0 <__svfiscanf_r+0xec>
    3794:	2286      	movs	r2, #134	; 0x86
    3796:	ab02      	add	r3, sp, #8
    3798:	0052      	lsls	r2, r2, #1
    379a:	189b      	adds	r3, r3, r2
    379c:	59db      	ldr	r3, [r3, r7]
    379e:	0021      	movs	r1, r4
    37a0:	9800      	ldr	r0, [sp, #0]
    37a2:	9302      	str	r3, [sp, #8]
    37a4:	4798      	blx	r3
    37a6:	2800      	cmp	r0, #0
    37a8:	d0e4      	beq.n	3774 <__svfiscanf_r+0x1b0>
    37aa:	9848      	ldr	r0, [sp, #288]	; 0x120
    37ac:	2800      	cmp	r0, #0
    37ae:	d000      	beq.n	37b2 <__svfiscanf_r+0x1ee>
    37b0:	e07b      	b.n	38aa <__svfiscanf_r+0x2e6>
    37b2:	3801      	subs	r0, #1
    37b4:	23a7      	movs	r3, #167	; 0xa7
    37b6:	009b      	lsls	r3, r3, #2
    37b8:	449d      	add	sp, r3
    37ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
    37be:	9201      	str	r2, [sp, #4]
    37c0:	2220      	movs	r2, #32
    37c2:	9901      	ldr	r1, [sp, #4]
    37c4:	430a      	orrs	r2, r1
    37c6:	9245      	str	r2, [sp, #276]	; 0x114
    37c8:	e78e      	b.n	36e8 <__svfiscanf_r+0x124>
    37ca:	2308      	movs	r3, #8
    37cc:	2204      	movs	r2, #4
    37ce:	9346      	str	r3, [sp, #280]	; 0x118
    37d0:	e7ab      	b.n	372a <__svfiscanf_r+0x166>
    37d2:	0031      	movs	r1, r6
    37d4:	a805      	add	r0, sp, #20
    37d6:	f000 faeb 	bl	3db0 <__sccl>
    37da:	9b45      	ldr	r3, [sp, #276]	; 0x114
    37dc:	0006      	movs	r6, r0
    37de:	9301      	str	r3, [sp, #4]
    37e0:	2340      	movs	r3, #64	; 0x40
    37e2:	9a01      	ldr	r2, [sp, #4]
    37e4:	4313      	orrs	r3, r2
    37e6:	9345      	str	r3, [sp, #276]	; 0x114
    37e8:	2301      	movs	r3, #1
    37ea:	934b      	str	r3, [sp, #300]	; 0x12c
    37ec:	e79e      	b.n	372c <__svfiscanf_r+0x168>
    37ee:	9b45      	ldr	r3, [sp, #276]	; 0x114
    37f0:	9301      	str	r3, [sp, #4]
    37f2:	2340      	movs	r3, #64	; 0x40
    37f4:	9a01      	ldr	r2, [sp, #4]
    37f6:	4313      	orrs	r3, r2
    37f8:	9345      	str	r3, [sp, #276]	; 0x114
    37fa:	2300      	movs	r3, #0
    37fc:	e7f5      	b.n	37ea <__svfiscanf_r+0x226>
    37fe:	9945      	ldr	r1, [sp, #276]	; 0x114
    3800:	06cb      	lsls	r3, r1, #27
    3802:	d500      	bpl.n	3806 <__svfiscanf_r+0x242>
    3804:	e754      	b.n	36b0 <__svfiscanf_r+0xec>
    3806:	9b03      	ldr	r3, [sp, #12]
    3808:	9a49      	ldr	r2, [sp, #292]	; 0x124
    380a:	07c8      	lsls	r0, r1, #31
    380c:	d504      	bpl.n	3818 <__svfiscanf_r+0x254>
    380e:	1d19      	adds	r1, r3, #4
    3810:	9103      	str	r1, [sp, #12]
    3812:	681b      	ldr	r3, [r3, #0]
    3814:	801a      	strh	r2, [r3, #0]
    3816:	e74b      	b.n	36b0 <__svfiscanf_r+0xec>
    3818:	1d19      	adds	r1, r3, #4
    381a:	9103      	str	r1, [sp, #12]
    381c:	681b      	ldr	r3, [r3, #0]
    381e:	601a      	str	r2, [r3, #0]
    3820:	e746      	b.n	36b0 <__svfiscanf_r+0xec>
    3822:	2305      	movs	r3, #5
    3824:	e7e1      	b.n	37ea <__svfiscanf_r+0x226>
    3826:	2286      	movs	r2, #134	; 0x86
    3828:	ab02      	add	r3, sp, #8
    382a:	0052      	lsls	r2, r2, #1
    382c:	189b      	adds	r3, r3, r2
    382e:	59db      	ldr	r3, [r3, r7]
    3830:	0021      	movs	r1, r4
    3832:	9800      	ldr	r0, [sp, #0]
    3834:	9301      	str	r3, [sp, #4]
    3836:	4798      	blx	r3
    3838:	2800      	cmp	r0, #0
    383a:	d100      	bne.n	383e <__svfiscanf_r+0x27a>
    383c:	e77a      	b.n	3734 <__svfiscanf_r+0x170>
    383e:	e7b4      	b.n	37aa <__svfiscanf_r+0x1e6>
    3840:	9a49      	ldr	r2, [sp, #292]	; 0x124
    3842:	9201      	str	r2, [sp, #4]
    3844:	3201      	adds	r2, #1
    3846:	9249      	str	r2, [sp, #292]	; 0x124
    3848:	6862      	ldr	r2, [r4, #4]
    384a:	3a01      	subs	r2, #1
    384c:	6062      	str	r2, [r4, #4]
    384e:	2a00      	cmp	r2, #0
    3850:	dd0b      	ble.n	386a <__svfiscanf_r+0x2a6>
    3852:	3301      	adds	r3, #1
    3854:	6023      	str	r3, [r4, #0]
    3856:	f000 fd55 	bl	4304 <__locale_ctype_ptr>
    385a:	2108      	movs	r1, #8
    385c:	6823      	ldr	r3, [r4, #0]
    385e:	781a      	ldrb	r2, [r3, #0]
    3860:	1880      	adds	r0, r0, r2
    3862:	7842      	ldrb	r2, [r0, #1]
    3864:	420a      	tst	r2, r1
    3866:	d1eb      	bne.n	3840 <__svfiscanf_r+0x27c>
    3868:	e769      	b.n	373e <__svfiscanf_r+0x17a>
    386a:	2286      	movs	r2, #134	; 0x86
    386c:	ab02      	add	r3, sp, #8
    386e:	0052      	lsls	r2, r2, #1
    3870:	189b      	adds	r3, r3, r2
    3872:	59db      	ldr	r3, [r3, r7]
    3874:	0021      	movs	r1, r4
    3876:	9800      	ldr	r0, [sp, #0]
    3878:	9301      	str	r3, [sp, #4]
    387a:	4798      	blx	r3
    387c:	2800      	cmp	r0, #0
    387e:	d0ea      	beq.n	3856 <__svfiscanf_r+0x292>
    3880:	e793      	b.n	37aa <__svfiscanf_r+0x1e6>
    3882:	2b04      	cmp	r3, #4
    3884:	dc06      	bgt.n	3894 <__svfiscanf_r+0x2d0>
    3886:	ab03      	add	r3, sp, #12
    3888:	0022      	movs	r2, r4
    388a:	a945      	add	r1, sp, #276	; 0x114
    388c:	9800      	ldr	r0, [sp, #0]
    388e:	f000 f8ab 	bl	39e8 <_scanf_i>
    3892:	e75e      	b.n	3752 <__svfiscanf_r+0x18e>
    3894:	4b0d      	ldr	r3, [pc, #52]	; (38cc <__svfiscanf_r+0x308>)
    3896:	2b00      	cmp	r3, #0
    3898:	d100      	bne.n	389c <__svfiscanf_r+0x2d8>
    389a:	e709      	b.n	36b0 <__svfiscanf_r+0xec>
    389c:	ab03      	add	r3, sp, #12
    389e:	0022      	movs	r2, r4
    38a0:	a945      	add	r1, sp, #276	; 0x114
    38a2:	9800      	ldr	r0, [sp, #0]
    38a4:	e000      	b.n	38a8 <__svfiscanf_r+0x2e4>
    38a6:	bf00      	nop
    38a8:	e753      	b.n	3752 <__svfiscanf_r+0x18e>
    38aa:	89a3      	ldrh	r3, [r4, #12]
    38ac:	065b      	lsls	r3, r3, #25
    38ae:	d400      	bmi.n	38b2 <__svfiscanf_r+0x2ee>
    38b0:	e780      	b.n	37b4 <__svfiscanf_r+0x1f0>
    38b2:	2001      	movs	r0, #1
    38b4:	4240      	negs	r0, r0
    38b6:	e77d      	b.n	37b4 <__svfiscanf_r+0x1f0>
    38b8:	9848      	ldr	r0, [sp, #288]	; 0x120
    38ba:	e77b      	b.n	37b4 <__svfiscanf_r+0x1f0>
    38bc:	fffffd64 	.word	0xfffffd64
    38c0:	00004185 	.word	0x00004185
    38c4:	00003c6d 	.word	0x00003c6d
    38c8:	00004646 	.word	0x00004646
    38cc:	00000000 	.word	0x00000000

000038d0 <_vfiscanf_r>:
    38d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38d2:	0004      	movs	r4, r0
    38d4:	000d      	movs	r5, r1
    38d6:	0016      	movs	r6, r2
    38d8:	001f      	movs	r7, r3
    38da:	2800      	cmp	r0, #0
    38dc:	d004      	beq.n	38e8 <_vfiscanf_r+0x18>
    38de:	6983      	ldr	r3, [r0, #24]
    38e0:	2b00      	cmp	r3, #0
    38e2:	d101      	bne.n	38e8 <_vfiscanf_r+0x18>
    38e4:	f7ff f9d2 	bl	2c8c <__sinit>
    38e8:	4b0a      	ldr	r3, [pc, #40]	; (3914 <_vfiscanf_r+0x44>)
    38ea:	429d      	cmp	r5, r3
    38ec:	d107      	bne.n	38fe <_vfiscanf_r+0x2e>
    38ee:	6865      	ldr	r5, [r4, #4]
    38f0:	003b      	movs	r3, r7
    38f2:	0032      	movs	r2, r6
    38f4:	0029      	movs	r1, r5
    38f6:	0020      	movs	r0, r4
    38f8:	f7ff fe64 	bl	35c4 <__svfiscanf_r>
    38fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    38fe:	4b06      	ldr	r3, [pc, #24]	; (3918 <_vfiscanf_r+0x48>)
    3900:	429d      	cmp	r5, r3
    3902:	d101      	bne.n	3908 <_vfiscanf_r+0x38>
    3904:	68a5      	ldr	r5, [r4, #8]
    3906:	e7f3      	b.n	38f0 <_vfiscanf_r+0x20>
    3908:	4b04      	ldr	r3, [pc, #16]	; (391c <_vfiscanf_r+0x4c>)
    390a:	429d      	cmp	r5, r3
    390c:	d1f0      	bne.n	38f0 <_vfiscanf_r+0x20>
    390e:	68e5      	ldr	r5, [r4, #12]
    3910:	e7ee      	b.n	38f0 <_vfiscanf_r+0x20>
    3912:	46c0      	nop			; (mov r8, r8)
    3914:	00004600 	.word	0x00004600
    3918:	00004620 	.word	0x00004620
    391c:	000045e0 	.word	0x000045e0

00003920 <_scanf_chars>:
    3920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3922:	0015      	movs	r5, r2
    3924:	688a      	ldr	r2, [r1, #8]
    3926:	9001      	str	r0, [sp, #4]
    3928:	000c      	movs	r4, r1
    392a:	2a00      	cmp	r2, #0
    392c:	d106      	bne.n	393c <_scanf_chars+0x1c>
    392e:	698a      	ldr	r2, [r1, #24]
    3930:	1e51      	subs	r1, r2, #1
    3932:	418a      	sbcs	r2, r1
    3934:	2101      	movs	r1, #1
    3936:	4252      	negs	r2, r2
    3938:	430a      	orrs	r2, r1
    393a:	60a2      	str	r2, [r4, #8]
    393c:	6822      	ldr	r2, [r4, #0]
    393e:	06d2      	lsls	r2, r2, #27
    3940:	d403      	bmi.n	394a <_scanf_chars+0x2a>
    3942:	681a      	ldr	r2, [r3, #0]
    3944:	1d11      	adds	r1, r2, #4
    3946:	6019      	str	r1, [r3, #0]
    3948:	6817      	ldr	r7, [r2, #0]
    394a:	2600      	movs	r6, #0
    394c:	69a3      	ldr	r3, [r4, #24]
    394e:	2b00      	cmp	r3, #0
    3950:	d01c      	beq.n	398c <_scanf_chars+0x6c>
    3952:	2b01      	cmp	r3, #1
    3954:	d108      	bne.n	3968 <_scanf_chars+0x48>
    3956:	682b      	ldr	r3, [r5, #0]
    3958:	6962      	ldr	r2, [r4, #20]
    395a:	781b      	ldrb	r3, [r3, #0]
    395c:	5cd3      	ldrb	r3, [r2, r3]
    395e:	2b00      	cmp	r3, #0
    3960:	d114      	bne.n	398c <_scanf_chars+0x6c>
    3962:	2e00      	cmp	r6, #0
    3964:	d130      	bne.n	39c8 <_scanf_chars+0xa8>
    3966:	e006      	b.n	3976 <_scanf_chars+0x56>
    3968:	2b02      	cmp	r3, #2
    396a:	d006      	beq.n	397a <_scanf_chars+0x5a>
    396c:	2e00      	cmp	r6, #0
    396e:	d12b      	bne.n	39c8 <_scanf_chars+0xa8>
    3970:	69a3      	ldr	r3, [r4, #24]
    3972:	2b01      	cmp	r3, #1
    3974:	d128      	bne.n	39c8 <_scanf_chars+0xa8>
    3976:	2001      	movs	r0, #1
    3978:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    397a:	f000 fcc3 	bl	4304 <__locale_ctype_ptr>
    397e:	2208      	movs	r2, #8
    3980:	682b      	ldr	r3, [r5, #0]
    3982:	781b      	ldrb	r3, [r3, #0]
    3984:	18c0      	adds	r0, r0, r3
    3986:	7843      	ldrb	r3, [r0, #1]
    3988:	4213      	tst	r3, r2
    398a:	d1ef      	bne.n	396c <_scanf_chars+0x4c>
    398c:	2210      	movs	r2, #16
    398e:	6823      	ldr	r3, [r4, #0]
    3990:	3601      	adds	r6, #1
    3992:	4213      	tst	r3, r2
    3994:	d103      	bne.n	399e <_scanf_chars+0x7e>
    3996:	682b      	ldr	r3, [r5, #0]
    3998:	781b      	ldrb	r3, [r3, #0]
    399a:	703b      	strb	r3, [r7, #0]
    399c:	3701      	adds	r7, #1
    399e:	682a      	ldr	r2, [r5, #0]
    39a0:	686b      	ldr	r3, [r5, #4]
    39a2:	3201      	adds	r2, #1
    39a4:	602a      	str	r2, [r5, #0]
    39a6:	68a2      	ldr	r2, [r4, #8]
    39a8:	3b01      	subs	r3, #1
    39aa:	3a01      	subs	r2, #1
    39ac:	606b      	str	r3, [r5, #4]
    39ae:	60a2      	str	r2, [r4, #8]
    39b0:	2a00      	cmp	r2, #0
    39b2:	d009      	beq.n	39c8 <_scanf_chars+0xa8>
    39b4:	2b00      	cmp	r3, #0
    39b6:	dcc9      	bgt.n	394c <_scanf_chars+0x2c>
    39b8:	23c0      	movs	r3, #192	; 0xc0
    39ba:	005b      	lsls	r3, r3, #1
    39bc:	58e3      	ldr	r3, [r4, r3]
    39be:	0029      	movs	r1, r5
    39c0:	9801      	ldr	r0, [sp, #4]
    39c2:	4798      	blx	r3
    39c4:	2800      	cmp	r0, #0
    39c6:	d0c1      	beq.n	394c <_scanf_chars+0x2c>
    39c8:	2310      	movs	r3, #16
    39ca:	6822      	ldr	r2, [r4, #0]
    39cc:	4013      	ands	r3, r2
    39ce:	d106      	bne.n	39de <_scanf_chars+0xbe>
    39d0:	68e2      	ldr	r2, [r4, #12]
    39d2:	3201      	adds	r2, #1
    39d4:	60e2      	str	r2, [r4, #12]
    39d6:	69a2      	ldr	r2, [r4, #24]
    39d8:	2a00      	cmp	r2, #0
    39da:	d000      	beq.n	39de <_scanf_chars+0xbe>
    39dc:	703b      	strb	r3, [r7, #0]
    39de:	6923      	ldr	r3, [r4, #16]
    39e0:	2000      	movs	r0, #0
    39e2:	199e      	adds	r6, r3, r6
    39e4:	6126      	str	r6, [r4, #16]
    39e6:	e7c7      	b.n	3978 <_scanf_chars+0x58>

000039e8 <_scanf_i>:
    39e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    39ea:	000c      	movs	r4, r1
    39ec:	b08d      	sub	sp, #52	; 0x34
    39ee:	9302      	str	r3, [sp, #8]
    39f0:	4b77      	ldr	r3, [pc, #476]	; (3bd0 <_scanf_i+0x1e8>)
    39f2:	9005      	str	r0, [sp, #20]
    39f4:	0016      	movs	r6, r2
    39f6:	aa09      	add	r2, sp, #36	; 0x24
    39f8:	cb23      	ldmia	r3!, {r0, r1, r5}
    39fa:	c223      	stmia	r2!, {r0, r1, r5}
    39fc:	4b75      	ldr	r3, [pc, #468]	; (3bd4 <_scanf_i+0x1ec>)
    39fe:	9306      	str	r3, [sp, #24]
    3a00:	69a3      	ldr	r3, [r4, #24]
    3a02:	2b03      	cmp	r3, #3
    3a04:	d001      	beq.n	3a0a <_scanf_i+0x22>
    3a06:	4b74      	ldr	r3, [pc, #464]	; (3bd8 <_scanf_i+0x1f0>)
    3a08:	9306      	str	r3, [sp, #24]
    3a0a:	22ae      	movs	r2, #174	; 0xae
    3a0c:	2000      	movs	r0, #0
    3a0e:	68a3      	ldr	r3, [r4, #8]
    3a10:	0052      	lsls	r2, r2, #1
    3a12:	1e59      	subs	r1, r3, #1
    3a14:	9004      	str	r0, [sp, #16]
    3a16:	4291      	cmp	r1, r2
    3a18:	d905      	bls.n	3a26 <_scanf_i+0x3e>
    3a1a:	3b5e      	subs	r3, #94	; 0x5e
    3a1c:	3bff      	subs	r3, #255	; 0xff
    3a1e:	9304      	str	r3, [sp, #16]
    3a20:	235e      	movs	r3, #94	; 0x5e
    3a22:	33ff      	adds	r3, #255	; 0xff
    3a24:	60a3      	str	r3, [r4, #8]
    3a26:	0023      	movs	r3, r4
    3a28:	331c      	adds	r3, #28
    3a2a:	9301      	str	r3, [sp, #4]
    3a2c:	23d0      	movs	r3, #208	; 0xd0
    3a2e:	2700      	movs	r7, #0
    3a30:	6822      	ldr	r2, [r4, #0]
    3a32:	011b      	lsls	r3, r3, #4
    3a34:	4313      	orrs	r3, r2
    3a36:	6023      	str	r3, [r4, #0]
    3a38:	9b01      	ldr	r3, [sp, #4]
    3a3a:	9303      	str	r3, [sp, #12]
    3a3c:	6833      	ldr	r3, [r6, #0]
    3a3e:	a809      	add	r0, sp, #36	; 0x24
    3a40:	7819      	ldrb	r1, [r3, #0]
    3a42:	00bb      	lsls	r3, r7, #2
    3a44:	2202      	movs	r2, #2
    3a46:	5818      	ldr	r0, [r3, r0]
    3a48:	f000 fc90 	bl	436c <memchr>
    3a4c:	2800      	cmp	r0, #0
    3a4e:	d02b      	beq.n	3aa8 <_scanf_i+0xc0>
    3a50:	2f01      	cmp	r7, #1
    3a52:	d15f      	bne.n	3b14 <_scanf_i+0x12c>
    3a54:	6863      	ldr	r3, [r4, #4]
    3a56:	2b00      	cmp	r3, #0
    3a58:	d106      	bne.n	3a68 <_scanf_i+0x80>
    3a5a:	3308      	adds	r3, #8
    3a5c:	6822      	ldr	r2, [r4, #0]
    3a5e:	6063      	str	r3, [r4, #4]
    3a60:	33f9      	adds	r3, #249	; 0xf9
    3a62:	33ff      	adds	r3, #255	; 0xff
    3a64:	4313      	orrs	r3, r2
    3a66:	6023      	str	r3, [r4, #0]
    3a68:	4b5c      	ldr	r3, [pc, #368]	; (3bdc <_scanf_i+0x1f4>)
    3a6a:	6822      	ldr	r2, [r4, #0]
    3a6c:	4013      	ands	r3, r2
    3a6e:	6023      	str	r3, [r4, #0]
    3a70:	68a3      	ldr	r3, [r4, #8]
    3a72:	1e5a      	subs	r2, r3, #1
    3a74:	60a2      	str	r2, [r4, #8]
    3a76:	2b00      	cmp	r3, #0
    3a78:	d016      	beq.n	3aa8 <_scanf_i+0xc0>
    3a7a:	9b03      	ldr	r3, [sp, #12]
    3a7c:	1c5d      	adds	r5, r3, #1
    3a7e:	6833      	ldr	r3, [r6, #0]
    3a80:	1c5a      	adds	r2, r3, #1
    3a82:	6032      	str	r2, [r6, #0]
    3a84:	781b      	ldrb	r3, [r3, #0]
    3a86:	9a03      	ldr	r2, [sp, #12]
    3a88:	9503      	str	r5, [sp, #12]
    3a8a:	7013      	strb	r3, [r2, #0]
    3a8c:	6873      	ldr	r3, [r6, #4]
    3a8e:	3b01      	subs	r3, #1
    3a90:	6073      	str	r3, [r6, #4]
    3a92:	2b00      	cmp	r3, #0
    3a94:	dc08      	bgt.n	3aa8 <_scanf_i+0xc0>
    3a96:	23c0      	movs	r3, #192	; 0xc0
    3a98:	005b      	lsls	r3, r3, #1
    3a9a:	58e3      	ldr	r3, [r4, r3]
    3a9c:	0031      	movs	r1, r6
    3a9e:	9805      	ldr	r0, [sp, #20]
    3aa0:	9307      	str	r3, [sp, #28]
    3aa2:	4798      	blx	r3
    3aa4:	2800      	cmp	r0, #0
    3aa6:	d17d      	bne.n	3ba4 <_scanf_i+0x1bc>
    3aa8:	3701      	adds	r7, #1
    3aaa:	2f03      	cmp	r7, #3
    3aac:	d1c6      	bne.n	3a3c <_scanf_i+0x54>
    3aae:	6863      	ldr	r3, [r4, #4]
    3ab0:	2b00      	cmp	r3, #0
    3ab2:	d101      	bne.n	3ab8 <_scanf_i+0xd0>
    3ab4:	330a      	adds	r3, #10
    3ab6:	6063      	str	r3, [r4, #4]
    3ab8:	2110      	movs	r1, #16
    3aba:	2700      	movs	r7, #0
    3abc:	6863      	ldr	r3, [r4, #4]
    3abe:	6960      	ldr	r0, [r4, #20]
    3ac0:	1ac9      	subs	r1, r1, r3
    3ac2:	4b47      	ldr	r3, [pc, #284]	; (3be0 <_scanf_i+0x1f8>)
    3ac4:	18c9      	adds	r1, r1, r3
    3ac6:	f000 f973 	bl	3db0 <__sccl>
    3aca:	9d03      	ldr	r5, [sp, #12]
    3acc:	68a3      	ldr	r3, [r4, #8]
    3ace:	2b00      	cmp	r3, #0
    3ad0:	d041      	beq.n	3b56 <_scanf_i+0x16e>
    3ad2:	6832      	ldr	r2, [r6, #0]
    3ad4:	6960      	ldr	r0, [r4, #20]
    3ad6:	7811      	ldrb	r1, [r2, #0]
    3ad8:	5c40      	ldrb	r0, [r0, r1]
    3ada:	2800      	cmp	r0, #0
    3adc:	d03b      	beq.n	3b56 <_scanf_i+0x16e>
    3ade:	2930      	cmp	r1, #48	; 0x30
    3ae0:	d128      	bne.n	3b34 <_scanf_i+0x14c>
    3ae2:	2080      	movs	r0, #128	; 0x80
    3ae4:	6821      	ldr	r1, [r4, #0]
    3ae6:	0100      	lsls	r0, r0, #4
    3ae8:	4201      	tst	r1, r0
    3aea:	d023      	beq.n	3b34 <_scanf_i+0x14c>
    3aec:	9a04      	ldr	r2, [sp, #16]
    3aee:	3701      	adds	r7, #1
    3af0:	2a00      	cmp	r2, #0
    3af2:	d003      	beq.n	3afc <_scanf_i+0x114>
    3af4:	3a01      	subs	r2, #1
    3af6:	3301      	adds	r3, #1
    3af8:	9204      	str	r2, [sp, #16]
    3afa:	60a3      	str	r3, [r4, #8]
    3afc:	6873      	ldr	r3, [r6, #4]
    3afe:	3b01      	subs	r3, #1
    3b00:	6073      	str	r3, [r6, #4]
    3b02:	2b00      	cmp	r3, #0
    3b04:	dd1e      	ble.n	3b44 <_scanf_i+0x15c>
    3b06:	6833      	ldr	r3, [r6, #0]
    3b08:	3301      	adds	r3, #1
    3b0a:	6033      	str	r3, [r6, #0]
    3b0c:	68a3      	ldr	r3, [r4, #8]
    3b0e:	3b01      	subs	r3, #1
    3b10:	60a3      	str	r3, [r4, #8]
    3b12:	e7db      	b.n	3acc <_scanf_i+0xe4>
    3b14:	2f02      	cmp	r7, #2
    3b16:	d1ab      	bne.n	3a70 <_scanf_i+0x88>
    3b18:	21c0      	movs	r1, #192	; 0xc0
    3b1a:	2380      	movs	r3, #128	; 0x80
    3b1c:	6822      	ldr	r2, [r4, #0]
    3b1e:	00c9      	lsls	r1, r1, #3
    3b20:	4011      	ands	r1, r2
    3b22:	009b      	lsls	r3, r3, #2
    3b24:	4299      	cmp	r1, r3
    3b26:	d1c2      	bne.n	3aae <_scanf_i+0xc6>
    3b28:	3bf1      	subs	r3, #241	; 0xf1
    3b2a:	3bff      	subs	r3, #255	; 0xff
    3b2c:	6063      	str	r3, [r4, #4]
    3b2e:	33f0      	adds	r3, #240	; 0xf0
    3b30:	4313      	orrs	r3, r2
    3b32:	e79c      	b.n	3a6e <_scanf_i+0x86>
    3b34:	6821      	ldr	r1, [r4, #0]
    3b36:	4b2b      	ldr	r3, [pc, #172]	; (3be4 <_scanf_i+0x1fc>)
    3b38:	400b      	ands	r3, r1
    3b3a:	6023      	str	r3, [r4, #0]
    3b3c:	7813      	ldrb	r3, [r2, #0]
    3b3e:	702b      	strb	r3, [r5, #0]
    3b40:	3501      	adds	r5, #1
    3b42:	e7db      	b.n	3afc <_scanf_i+0x114>
    3b44:	23c0      	movs	r3, #192	; 0xc0
    3b46:	005b      	lsls	r3, r3, #1
    3b48:	58e3      	ldr	r3, [r4, r3]
    3b4a:	0031      	movs	r1, r6
    3b4c:	9805      	ldr	r0, [sp, #20]
    3b4e:	9303      	str	r3, [sp, #12]
    3b50:	4798      	blx	r3
    3b52:	2800      	cmp	r0, #0
    3b54:	d0da      	beq.n	3b0c <_scanf_i+0x124>
    3b56:	6823      	ldr	r3, [r4, #0]
    3b58:	05db      	lsls	r3, r3, #23
    3b5a:	d50e      	bpl.n	3b7a <_scanf_i+0x192>
    3b5c:	9b01      	ldr	r3, [sp, #4]
    3b5e:	429d      	cmp	r5, r3
    3b60:	d907      	bls.n	3b72 <_scanf_i+0x18a>
    3b62:	23be      	movs	r3, #190	; 0xbe
    3b64:	3d01      	subs	r5, #1
    3b66:	005b      	lsls	r3, r3, #1
    3b68:	7829      	ldrb	r1, [r5, #0]
    3b6a:	58e3      	ldr	r3, [r4, r3]
    3b6c:	0032      	movs	r2, r6
    3b6e:	9805      	ldr	r0, [sp, #20]
    3b70:	4798      	blx	r3
    3b72:	9b01      	ldr	r3, [sp, #4]
    3b74:	2001      	movs	r0, #1
    3b76:	429d      	cmp	r5, r3
    3b78:	d027      	beq.n	3bca <_scanf_i+0x1e2>
    3b7a:	2210      	movs	r2, #16
    3b7c:	6823      	ldr	r3, [r4, #0]
    3b7e:	401a      	ands	r2, r3
    3b80:	d11c      	bne.n	3bbc <_scanf_i+0x1d4>
    3b82:	702a      	strb	r2, [r5, #0]
    3b84:	6863      	ldr	r3, [r4, #4]
    3b86:	9901      	ldr	r1, [sp, #4]
    3b88:	9805      	ldr	r0, [sp, #20]
    3b8a:	9e06      	ldr	r6, [sp, #24]
    3b8c:	47b0      	blx	r6
    3b8e:	9b02      	ldr	r3, [sp, #8]
    3b90:	6822      	ldr	r2, [r4, #0]
    3b92:	681b      	ldr	r3, [r3, #0]
    3b94:	0691      	lsls	r1, r2, #26
    3b96:	d507      	bpl.n	3ba8 <_scanf_i+0x1c0>
    3b98:	9902      	ldr	r1, [sp, #8]
    3b9a:	1d1a      	adds	r2, r3, #4
    3b9c:	600a      	str	r2, [r1, #0]
    3b9e:	681b      	ldr	r3, [r3, #0]
    3ba0:	6018      	str	r0, [r3, #0]
    3ba2:	e008      	b.n	3bb6 <_scanf_i+0x1ce>
    3ba4:	2700      	movs	r7, #0
    3ba6:	e7d6      	b.n	3b56 <_scanf_i+0x16e>
    3ba8:	07d1      	lsls	r1, r2, #31
    3baa:	d5f5      	bpl.n	3b98 <_scanf_i+0x1b0>
    3bac:	9902      	ldr	r1, [sp, #8]
    3bae:	1d1a      	adds	r2, r3, #4
    3bb0:	600a      	str	r2, [r1, #0]
    3bb2:	681b      	ldr	r3, [r3, #0]
    3bb4:	8018      	strh	r0, [r3, #0]
    3bb6:	68e3      	ldr	r3, [r4, #12]
    3bb8:	3301      	adds	r3, #1
    3bba:	60e3      	str	r3, [r4, #12]
    3bbc:	2000      	movs	r0, #0
    3bbe:	9b01      	ldr	r3, [sp, #4]
    3bc0:	1aed      	subs	r5, r5, r3
    3bc2:	6923      	ldr	r3, [r4, #16]
    3bc4:	19ef      	adds	r7, r5, r7
    3bc6:	19df      	adds	r7, r3, r7
    3bc8:	6127      	str	r7, [r4, #16]
    3bca:	b00d      	add	sp, #52	; 0x34
    3bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bce:	46c0      	nop			; (mov r8, r8)
    3bd0:	00004674 	.word	0x00004674
    3bd4:	00003fb9 	.word	0x00003fb9
    3bd8:	000040e9 	.word	0x000040e9
    3bdc:	fffffaff 	.word	0xfffffaff
    3be0:	00004680 	.word	0x00004680
    3be4:	fffff6ff 	.word	0xfffff6ff

00003be8 <_putc_r>:
    3be8:	b570      	push	{r4, r5, r6, lr}
    3bea:	0006      	movs	r6, r0
    3bec:	000d      	movs	r5, r1
    3bee:	0014      	movs	r4, r2
    3bf0:	2800      	cmp	r0, #0
    3bf2:	d004      	beq.n	3bfe <_putc_r+0x16>
    3bf4:	6983      	ldr	r3, [r0, #24]
    3bf6:	2b00      	cmp	r3, #0
    3bf8:	d101      	bne.n	3bfe <_putc_r+0x16>
    3bfa:	f7ff f847 	bl	2c8c <__sinit>
    3bfe:	4b12      	ldr	r3, [pc, #72]	; (3c48 <_putc_r+0x60>)
    3c00:	429c      	cmp	r4, r3
    3c02:	d111      	bne.n	3c28 <_putc_r+0x40>
    3c04:	6874      	ldr	r4, [r6, #4]
    3c06:	68a3      	ldr	r3, [r4, #8]
    3c08:	3b01      	subs	r3, #1
    3c0a:	60a3      	str	r3, [r4, #8]
    3c0c:	2b00      	cmp	r3, #0
    3c0e:	da05      	bge.n	3c1c <_putc_r+0x34>
    3c10:	69a2      	ldr	r2, [r4, #24]
    3c12:	4293      	cmp	r3, r2
    3c14:	db12      	blt.n	3c3c <_putc_r+0x54>
    3c16:	b2eb      	uxtb	r3, r5
    3c18:	2b0a      	cmp	r3, #10
    3c1a:	d00f      	beq.n	3c3c <_putc_r+0x54>
    3c1c:	6823      	ldr	r3, [r4, #0]
    3c1e:	b2e8      	uxtb	r0, r5
    3c20:	1c5a      	adds	r2, r3, #1
    3c22:	6022      	str	r2, [r4, #0]
    3c24:	701d      	strb	r5, [r3, #0]
    3c26:	bd70      	pop	{r4, r5, r6, pc}
    3c28:	4b08      	ldr	r3, [pc, #32]	; (3c4c <_putc_r+0x64>)
    3c2a:	429c      	cmp	r4, r3
    3c2c:	d101      	bne.n	3c32 <_putc_r+0x4a>
    3c2e:	68b4      	ldr	r4, [r6, #8]
    3c30:	e7e9      	b.n	3c06 <_putc_r+0x1e>
    3c32:	4b07      	ldr	r3, [pc, #28]	; (3c50 <_putc_r+0x68>)
    3c34:	429c      	cmp	r4, r3
    3c36:	d1e6      	bne.n	3c06 <_putc_r+0x1e>
    3c38:	68f4      	ldr	r4, [r6, #12]
    3c3a:	e7e4      	b.n	3c06 <_putc_r+0x1e>
    3c3c:	0022      	movs	r2, r4
    3c3e:	0029      	movs	r1, r5
    3c40:	0030      	movs	r0, r6
    3c42:	f7fe fe4b 	bl	28dc <__swbuf_r>
    3c46:	e7ee      	b.n	3c26 <_putc_r+0x3e>
    3c48:	00004600 	.word	0x00004600
    3c4c:	00004620 	.word	0x00004620
    3c50:	000045e0 	.word	0x000045e0

00003c54 <lflush>:
    3c54:	2209      	movs	r2, #9
    3c56:	b510      	push	{r4, lr}
    3c58:	8983      	ldrh	r3, [r0, #12]
    3c5a:	4013      	ands	r3, r2
    3c5c:	2200      	movs	r2, #0
    3c5e:	2b09      	cmp	r3, #9
    3c60:	d102      	bne.n	3c68 <lflush+0x14>
    3c62:	f7fe ffbd 	bl	2be0 <fflush>
    3c66:	0002      	movs	r2, r0
    3c68:	0010      	movs	r0, r2
    3c6a:	bd10      	pop	{r4, pc}

00003c6c <__srefill_r>:
    3c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c6e:	0005      	movs	r5, r0
    3c70:	000c      	movs	r4, r1
    3c72:	2800      	cmp	r0, #0
    3c74:	d004      	beq.n	3c80 <__srefill_r+0x14>
    3c76:	6983      	ldr	r3, [r0, #24]
    3c78:	2b00      	cmp	r3, #0
    3c7a:	d101      	bne.n	3c80 <__srefill_r+0x14>
    3c7c:	f7ff f806 	bl	2c8c <__sinit>
    3c80:	4b3d      	ldr	r3, [pc, #244]	; (3d78 <__srefill_r+0x10c>)
    3c82:	429c      	cmp	r4, r3
    3c84:	d10a      	bne.n	3c9c <__srefill_r+0x30>
    3c86:	686c      	ldr	r4, [r5, #4]
    3c88:	2300      	movs	r3, #0
    3c8a:	6063      	str	r3, [r4, #4]
    3c8c:	230c      	movs	r3, #12
    3c8e:	5ee2      	ldrsh	r2, [r4, r3]
    3c90:	b293      	uxth	r3, r2
    3c92:	0699      	lsls	r1, r3, #26
    3c94:	d50c      	bpl.n	3cb0 <__srefill_r+0x44>
    3c96:	2001      	movs	r0, #1
    3c98:	4240      	negs	r0, r0
    3c9a:	e068      	b.n	3d6e <__srefill_r+0x102>
    3c9c:	4b37      	ldr	r3, [pc, #220]	; (3d7c <__srefill_r+0x110>)
    3c9e:	429c      	cmp	r4, r3
    3ca0:	d101      	bne.n	3ca6 <__srefill_r+0x3a>
    3ca2:	68ac      	ldr	r4, [r5, #8]
    3ca4:	e7f0      	b.n	3c88 <__srefill_r+0x1c>
    3ca6:	4b36      	ldr	r3, [pc, #216]	; (3d80 <__srefill_r+0x114>)
    3ca8:	429c      	cmp	r4, r3
    3caa:	d1ed      	bne.n	3c88 <__srefill_r+0x1c>
    3cac:	68ec      	ldr	r4, [r5, #12]
    3cae:	e7eb      	b.n	3c88 <__srefill_r+0x1c>
    3cb0:	0759      	lsls	r1, r3, #29
    3cb2:	d44a      	bmi.n	3d4a <__srefill_r+0xde>
    3cb4:	06d9      	lsls	r1, r3, #27
    3cb6:	d405      	bmi.n	3cc4 <__srefill_r+0x58>
    3cb8:	2309      	movs	r3, #9
    3cba:	602b      	str	r3, [r5, #0]
    3cbc:	3337      	adds	r3, #55	; 0x37
    3cbe:	4313      	orrs	r3, r2
    3cc0:	81a3      	strh	r3, [r4, #12]
    3cc2:	e7e8      	b.n	3c96 <__srefill_r+0x2a>
    3cc4:	2608      	movs	r6, #8
    3cc6:	4233      	tst	r3, r6
    3cc8:	d00a      	beq.n	3ce0 <__srefill_r+0x74>
    3cca:	0021      	movs	r1, r4
    3ccc:	0028      	movs	r0, r5
    3cce:	f7fe ff5b 	bl	2b88 <_fflush_r>
    3cd2:	2800      	cmp	r0, #0
    3cd4:	d1df      	bne.n	3c96 <__srefill_r+0x2a>
    3cd6:	89a3      	ldrh	r3, [r4, #12]
    3cd8:	60a0      	str	r0, [r4, #8]
    3cda:	43b3      	bics	r3, r6
    3cdc:	81a3      	strh	r3, [r4, #12]
    3cde:	61a0      	str	r0, [r4, #24]
    3ce0:	2304      	movs	r3, #4
    3ce2:	89a2      	ldrh	r2, [r4, #12]
    3ce4:	4313      	orrs	r3, r2
    3ce6:	81a3      	strh	r3, [r4, #12]
    3ce8:	6923      	ldr	r3, [r4, #16]
    3cea:	2b00      	cmp	r3, #0
    3cec:	d103      	bne.n	3cf6 <__srefill_r+0x8a>
    3cee:	0021      	movs	r1, r4
    3cf0:	0028      	movs	r0, r5
    3cf2:	f7ff f8a5 	bl	2e40 <__smakebuf_r>
    3cf6:	230c      	movs	r3, #12
    3cf8:	5ee7      	ldrsh	r7, [r4, r3]
    3cfa:	b2be      	uxth	r6, r7
    3cfc:	07b3      	lsls	r3, r6, #30
    3cfe:	d00f      	beq.n	3d20 <__srefill_r+0xb4>
    3d00:	2301      	movs	r3, #1
    3d02:	81a3      	strh	r3, [r4, #12]
    3d04:	4b1f      	ldr	r3, [pc, #124]	; (3d84 <__srefill_r+0x118>)
    3d06:	4920      	ldr	r1, [pc, #128]	; (3d88 <__srefill_r+0x11c>)
    3d08:	6818      	ldr	r0, [r3, #0]
    3d0a:	f7ff f833 	bl	2d74 <_fwalk>
    3d0e:	2309      	movs	r3, #9
    3d10:	81a7      	strh	r7, [r4, #12]
    3d12:	401e      	ands	r6, r3
    3d14:	429e      	cmp	r6, r3
    3d16:	d103      	bne.n	3d20 <__srefill_r+0xb4>
    3d18:	0021      	movs	r1, r4
    3d1a:	0028      	movs	r0, r5
    3d1c:	f7fe feaa 	bl	2a74 <__sflush_r>
    3d20:	6923      	ldr	r3, [r4, #16]
    3d22:	6922      	ldr	r2, [r4, #16]
    3d24:	6023      	str	r3, [r4, #0]
    3d26:	0028      	movs	r0, r5
    3d28:	6963      	ldr	r3, [r4, #20]
    3d2a:	6a21      	ldr	r1, [r4, #32]
    3d2c:	6a65      	ldr	r5, [r4, #36]	; 0x24
    3d2e:	47a8      	blx	r5
    3d30:	0002      	movs	r2, r0
    3d32:	6060      	str	r0, [r4, #4]
    3d34:	2000      	movs	r0, #0
    3d36:	4282      	cmp	r2, r0
    3d38:	dc19      	bgt.n	3d6e <__srefill_r+0x102>
    3d3a:	89a1      	ldrh	r1, [r4, #12]
    3d3c:	4282      	cmp	r2, r0
    3d3e:	d117      	bne.n	3d70 <__srefill_r+0x104>
    3d40:	2320      	movs	r3, #32
    3d42:	430b      	orrs	r3, r1
    3d44:	81a3      	strh	r3, [r4, #12]
    3d46:	3801      	subs	r0, #1
    3d48:	e011      	b.n	3d6e <__srefill_r+0x102>
    3d4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3d4c:	2900      	cmp	r1, #0
    3d4e:	d0cb      	beq.n	3ce8 <__srefill_r+0x7c>
    3d50:	0023      	movs	r3, r4
    3d52:	3344      	adds	r3, #68	; 0x44
    3d54:	4299      	cmp	r1, r3
    3d56:	d002      	beq.n	3d5e <__srefill_r+0xf2>
    3d58:	0028      	movs	r0, r5
    3d5a:	f7ff f8bf 	bl	2edc <_free_r>
    3d5e:	2000      	movs	r0, #0
    3d60:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3d62:	6360      	str	r0, [r4, #52]	; 0x34
    3d64:	6063      	str	r3, [r4, #4]
    3d66:	4283      	cmp	r3, r0
    3d68:	d0be      	beq.n	3ce8 <__srefill_r+0x7c>
    3d6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3d6c:	6023      	str	r3, [r4, #0]
    3d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d70:	2340      	movs	r3, #64	; 0x40
    3d72:	6060      	str	r0, [r4, #4]
    3d74:	430b      	orrs	r3, r1
    3d76:	e7a3      	b.n	3cc0 <__srefill_r+0x54>
    3d78:	00004600 	.word	0x00004600
    3d7c:	00004620 	.word	0x00004620
    3d80:	000045e0 	.word	0x000045e0
    3d84:	000045dc 	.word	0x000045dc
    3d88:	00003c55 	.word	0x00003c55

00003d8c <_sbrk_r>:
    3d8c:	2300      	movs	r3, #0
    3d8e:	b570      	push	{r4, r5, r6, lr}
    3d90:	4c06      	ldr	r4, [pc, #24]	; (3dac <_sbrk_r+0x20>)
    3d92:	0005      	movs	r5, r0
    3d94:	0008      	movs	r0, r1
    3d96:	6023      	str	r3, [r4, #0]
    3d98:	f7fc fa70 	bl	27c <_sbrk>
    3d9c:	1c43      	adds	r3, r0, #1
    3d9e:	d103      	bne.n	3da8 <_sbrk_r+0x1c>
    3da0:	6823      	ldr	r3, [r4, #0]
    3da2:	2b00      	cmp	r3, #0
    3da4:	d000      	beq.n	3da8 <_sbrk_r+0x1c>
    3da6:	602b      	str	r3, [r5, #0]
    3da8:	bd70      	pop	{r4, r5, r6, pc}
    3daa:	46c0      	nop			; (mov r8, r8)
    3dac:	200003d4 	.word	0x200003d4

00003db0 <__sccl>:
    3db0:	b570      	push	{r4, r5, r6, lr}
    3db2:	780b      	ldrb	r3, [r1, #0]
    3db4:	2b5e      	cmp	r3, #94	; 0x5e
    3db6:	d00d      	beq.n	3dd4 <__sccl+0x24>
    3db8:	1c4a      	adds	r2, r1, #1
    3dba:	2100      	movs	r1, #0
    3dbc:	0004      	movs	r4, r0
    3dbe:	1c45      	adds	r5, r0, #1
    3dc0:	35ff      	adds	r5, #255	; 0xff
    3dc2:	7021      	strb	r1, [r4, #0]
    3dc4:	3401      	adds	r4, #1
    3dc6:	42a5      	cmp	r5, r4
    3dc8:	d1fb      	bne.n	3dc2 <__sccl+0x12>
    3dca:	2b00      	cmp	r3, #0
    3dcc:	d106      	bne.n	3ddc <__sccl+0x2c>
    3dce:	3a01      	subs	r2, #1
    3dd0:	0010      	movs	r0, r2
    3dd2:	bd70      	pop	{r4, r5, r6, pc}
    3dd4:	1c8a      	adds	r2, r1, #2
    3dd6:	784b      	ldrb	r3, [r1, #1]
    3dd8:	2101      	movs	r1, #1
    3dda:	e7ef      	b.n	3dbc <__sccl+0xc>
    3ddc:	2401      	movs	r4, #1
    3dde:	404c      	eors	r4, r1
    3de0:	0011      	movs	r1, r2
    3de2:	54c4      	strb	r4, [r0, r3]
    3de4:	780d      	ldrb	r5, [r1, #0]
    3de6:	1c4a      	adds	r2, r1, #1
    3de8:	2d2d      	cmp	r5, #45	; 0x2d
    3dea:	d007      	beq.n	3dfc <__sccl+0x4c>
    3dec:	2d5d      	cmp	r5, #93	; 0x5d
    3dee:	d0ef      	beq.n	3dd0 <__sccl+0x20>
    3df0:	2d00      	cmp	r5, #0
    3df2:	d101      	bne.n	3df8 <__sccl+0x48>
    3df4:	000a      	movs	r2, r1
    3df6:	e7eb      	b.n	3dd0 <__sccl+0x20>
    3df8:	002b      	movs	r3, r5
    3dfa:	e7f1      	b.n	3de0 <__sccl+0x30>
    3dfc:	784e      	ldrb	r6, [r1, #1]
    3dfe:	2e5d      	cmp	r6, #93	; 0x5d
    3e00:	d0fa      	beq.n	3df8 <__sccl+0x48>
    3e02:	42b3      	cmp	r3, r6
    3e04:	dcf8      	bgt.n	3df8 <__sccl+0x48>
    3e06:	3102      	adds	r1, #2
    3e08:	3301      	adds	r3, #1
    3e0a:	54c4      	strb	r4, [r0, r3]
    3e0c:	429e      	cmp	r6, r3
    3e0e:	dcfb      	bgt.n	3e08 <__sccl+0x58>
    3e10:	e7e8      	b.n	3de4 <__sccl+0x34>
	...

00003e14 <__sread>:
    3e14:	b570      	push	{r4, r5, r6, lr}
    3e16:	000c      	movs	r4, r1
    3e18:	250e      	movs	r5, #14
    3e1a:	5f49      	ldrsh	r1, [r1, r5]
    3e1c:	f000 fada 	bl	43d4 <_read_r>
    3e20:	2800      	cmp	r0, #0
    3e22:	db03      	blt.n	3e2c <__sread+0x18>
    3e24:	6d63      	ldr	r3, [r4, #84]	; 0x54
    3e26:	181b      	adds	r3, r3, r0
    3e28:	6563      	str	r3, [r4, #84]	; 0x54
    3e2a:	bd70      	pop	{r4, r5, r6, pc}
    3e2c:	89a3      	ldrh	r3, [r4, #12]
    3e2e:	4a02      	ldr	r2, [pc, #8]	; (3e38 <__sread+0x24>)
    3e30:	4013      	ands	r3, r2
    3e32:	81a3      	strh	r3, [r4, #12]
    3e34:	e7f9      	b.n	3e2a <__sread+0x16>
    3e36:	46c0      	nop			; (mov r8, r8)
    3e38:	ffffefff 	.word	0xffffefff

00003e3c <__swrite>:
    3e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e3e:	001f      	movs	r7, r3
    3e40:	898b      	ldrh	r3, [r1, #12]
    3e42:	0005      	movs	r5, r0
    3e44:	000c      	movs	r4, r1
    3e46:	0016      	movs	r6, r2
    3e48:	05db      	lsls	r3, r3, #23
    3e4a:	d505      	bpl.n	3e58 <__swrite+0x1c>
    3e4c:	230e      	movs	r3, #14
    3e4e:	5ec9      	ldrsh	r1, [r1, r3]
    3e50:	2200      	movs	r2, #0
    3e52:	2302      	movs	r3, #2
    3e54:	f000 fa64 	bl	4320 <_lseek_r>
    3e58:	89a3      	ldrh	r3, [r4, #12]
    3e5a:	4a05      	ldr	r2, [pc, #20]	; (3e70 <__swrite+0x34>)
    3e5c:	0028      	movs	r0, r5
    3e5e:	4013      	ands	r3, r2
    3e60:	81a3      	strh	r3, [r4, #12]
    3e62:	0032      	movs	r2, r6
    3e64:	230e      	movs	r3, #14
    3e66:	5ee1      	ldrsh	r1, [r4, r3]
    3e68:	003b      	movs	r3, r7
    3e6a:	f000 f9fd 	bl	4268 <_write_r>
    3e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e70:	ffffefff 	.word	0xffffefff

00003e74 <__sseek>:
    3e74:	b570      	push	{r4, r5, r6, lr}
    3e76:	000c      	movs	r4, r1
    3e78:	250e      	movs	r5, #14
    3e7a:	5f49      	ldrsh	r1, [r1, r5]
    3e7c:	f000 fa50 	bl	4320 <_lseek_r>
    3e80:	89a3      	ldrh	r3, [r4, #12]
    3e82:	1c42      	adds	r2, r0, #1
    3e84:	d103      	bne.n	3e8e <__sseek+0x1a>
    3e86:	4a05      	ldr	r2, [pc, #20]	; (3e9c <__sseek+0x28>)
    3e88:	4013      	ands	r3, r2
    3e8a:	81a3      	strh	r3, [r4, #12]
    3e8c:	bd70      	pop	{r4, r5, r6, pc}
    3e8e:	2280      	movs	r2, #128	; 0x80
    3e90:	0152      	lsls	r2, r2, #5
    3e92:	4313      	orrs	r3, r2
    3e94:	81a3      	strh	r3, [r4, #12]
    3e96:	6560      	str	r0, [r4, #84]	; 0x54
    3e98:	e7f8      	b.n	3e8c <__sseek+0x18>
    3e9a:	46c0      	nop			; (mov r8, r8)
    3e9c:	ffffefff 	.word	0xffffefff

00003ea0 <__sclose>:
    3ea0:	b510      	push	{r4, lr}
    3ea2:	230e      	movs	r3, #14
    3ea4:	5ec9      	ldrsh	r1, [r1, r3]
    3ea6:	f000 f9f3 	bl	4290 <_close_r>
    3eaa:	bd10      	pop	{r4, pc}

00003eac <_strtol_l.isra.0>:
    3eac:	b5f0      	push	{r4, r5, r6, r7, lr}
    3eae:	001f      	movs	r7, r3
    3eb0:	000e      	movs	r6, r1
    3eb2:	b087      	sub	sp, #28
    3eb4:	9005      	str	r0, [sp, #20]
    3eb6:	9103      	str	r1, [sp, #12]
    3eb8:	9202      	str	r2, [sp, #8]
    3eba:	980c      	ldr	r0, [sp, #48]	; 0x30
    3ebc:	7834      	ldrb	r4, [r6, #0]
    3ebe:	f000 fa1d 	bl	42fc <__locale_ctype_ptr_l>
    3ec2:	2208      	movs	r2, #8
    3ec4:	1900      	adds	r0, r0, r4
    3ec6:	7843      	ldrb	r3, [r0, #1]
    3ec8:	1c75      	adds	r5, r6, #1
    3eca:	4013      	ands	r3, r2
    3ecc:	d10c      	bne.n	3ee8 <_strtol_l.isra.0+0x3c>
    3ece:	2c2d      	cmp	r4, #45	; 0x2d
    3ed0:	d10c      	bne.n	3eec <_strtol_l.isra.0+0x40>
    3ed2:	3301      	adds	r3, #1
    3ed4:	782c      	ldrb	r4, [r5, #0]
    3ed6:	9301      	str	r3, [sp, #4]
    3ed8:	1cb5      	adds	r5, r6, #2
    3eda:	2f00      	cmp	r7, #0
    3edc:	d00c      	beq.n	3ef8 <_strtol_l.isra.0+0x4c>
    3ede:	2f10      	cmp	r7, #16
    3ee0:	d114      	bne.n	3f0c <_strtol_l.isra.0+0x60>
    3ee2:	2c30      	cmp	r4, #48	; 0x30
    3ee4:	d00a      	beq.n	3efc <_strtol_l.isra.0+0x50>
    3ee6:	e011      	b.n	3f0c <_strtol_l.isra.0+0x60>
    3ee8:	002e      	movs	r6, r5
    3eea:	e7e6      	b.n	3eba <_strtol_l.isra.0+0xe>
    3eec:	9301      	str	r3, [sp, #4]
    3eee:	2c2b      	cmp	r4, #43	; 0x2b
    3ef0:	d1f3      	bne.n	3eda <_strtol_l.isra.0+0x2e>
    3ef2:	782c      	ldrb	r4, [r5, #0]
    3ef4:	1cb5      	adds	r5, r6, #2
    3ef6:	e7f0      	b.n	3eda <_strtol_l.isra.0+0x2e>
    3ef8:	2c30      	cmp	r4, #48	; 0x30
    3efa:	d12f      	bne.n	3f5c <_strtol_l.isra.0+0xb0>
    3efc:	2220      	movs	r2, #32
    3efe:	782b      	ldrb	r3, [r5, #0]
    3f00:	4393      	bics	r3, r2
    3f02:	2b58      	cmp	r3, #88	; 0x58
    3f04:	d151      	bne.n	3faa <_strtol_l.isra.0+0xfe>
    3f06:	2710      	movs	r7, #16
    3f08:	786c      	ldrb	r4, [r5, #1]
    3f0a:	3502      	adds	r5, #2
    3f0c:	9b01      	ldr	r3, [sp, #4]
    3f0e:	4a29      	ldr	r2, [pc, #164]	; (3fb4 <_strtol_l.isra.0+0x108>)
    3f10:	0039      	movs	r1, r7
    3f12:	189e      	adds	r6, r3, r2
    3f14:	0030      	movs	r0, r6
    3f16:	f7fe fb05 	bl	2524 <__aeabi_uidivmod>
    3f1a:	0030      	movs	r0, r6
    3f1c:	9104      	str	r1, [sp, #16]
    3f1e:	0039      	movs	r1, r7
    3f20:	f7fe fa7a 	bl	2418 <__udivsi3>
    3f24:	2101      	movs	r1, #1
    3f26:	2300      	movs	r3, #0
    3f28:	4249      	negs	r1, r1
    3f2a:	0002      	movs	r2, r0
    3f2c:	468c      	mov	ip, r1
    3f2e:	0018      	movs	r0, r3
    3f30:	0021      	movs	r1, r4
    3f32:	3930      	subs	r1, #48	; 0x30
    3f34:	2909      	cmp	r1, #9
    3f36:	d813      	bhi.n	3f60 <_strtol_l.isra.0+0xb4>
    3f38:	000c      	movs	r4, r1
    3f3a:	42a7      	cmp	r7, r4
    3f3c:	dd1c      	ble.n	3f78 <_strtol_l.isra.0+0xcc>
    3f3e:	1c59      	adds	r1, r3, #1
    3f40:	d009      	beq.n	3f56 <_strtol_l.isra.0+0xaa>
    3f42:	4663      	mov	r3, ip
    3f44:	4282      	cmp	r2, r0
    3f46:	d306      	bcc.n	3f56 <_strtol_l.isra.0+0xaa>
    3f48:	d102      	bne.n	3f50 <_strtol_l.isra.0+0xa4>
    3f4a:	9904      	ldr	r1, [sp, #16]
    3f4c:	42a1      	cmp	r1, r4
    3f4e:	db02      	blt.n	3f56 <_strtol_l.isra.0+0xaa>
    3f50:	2301      	movs	r3, #1
    3f52:	4378      	muls	r0, r7
    3f54:	1820      	adds	r0, r4, r0
    3f56:	782c      	ldrb	r4, [r5, #0]
    3f58:	3501      	adds	r5, #1
    3f5a:	e7e9      	b.n	3f30 <_strtol_l.isra.0+0x84>
    3f5c:	270a      	movs	r7, #10
    3f5e:	e7d5      	b.n	3f0c <_strtol_l.isra.0+0x60>
    3f60:	0021      	movs	r1, r4
    3f62:	3941      	subs	r1, #65	; 0x41
    3f64:	2919      	cmp	r1, #25
    3f66:	d801      	bhi.n	3f6c <_strtol_l.isra.0+0xc0>
    3f68:	3c37      	subs	r4, #55	; 0x37
    3f6a:	e7e6      	b.n	3f3a <_strtol_l.isra.0+0x8e>
    3f6c:	0021      	movs	r1, r4
    3f6e:	3961      	subs	r1, #97	; 0x61
    3f70:	2919      	cmp	r1, #25
    3f72:	d801      	bhi.n	3f78 <_strtol_l.isra.0+0xcc>
    3f74:	3c57      	subs	r4, #87	; 0x57
    3f76:	e7e0      	b.n	3f3a <_strtol_l.isra.0+0x8e>
    3f78:	1c5a      	adds	r2, r3, #1
    3f7a:	d108      	bne.n	3f8e <_strtol_l.isra.0+0xe2>
    3f7c:	9a05      	ldr	r2, [sp, #20]
    3f7e:	3323      	adds	r3, #35	; 0x23
    3f80:	6013      	str	r3, [r2, #0]
    3f82:	9b02      	ldr	r3, [sp, #8]
    3f84:	0030      	movs	r0, r6
    3f86:	2b00      	cmp	r3, #0
    3f88:	d10b      	bne.n	3fa2 <_strtol_l.isra.0+0xf6>
    3f8a:	b007      	add	sp, #28
    3f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f8e:	9a01      	ldr	r2, [sp, #4]
    3f90:	2a00      	cmp	r2, #0
    3f92:	d000      	beq.n	3f96 <_strtol_l.isra.0+0xea>
    3f94:	4240      	negs	r0, r0
    3f96:	9a02      	ldr	r2, [sp, #8]
    3f98:	2a00      	cmp	r2, #0
    3f9a:	d0f6      	beq.n	3f8a <_strtol_l.isra.0+0xde>
    3f9c:	9a03      	ldr	r2, [sp, #12]
    3f9e:	2b00      	cmp	r3, #0
    3fa0:	d000      	beq.n	3fa4 <_strtol_l.isra.0+0xf8>
    3fa2:	1e6a      	subs	r2, r5, #1
    3fa4:	9b02      	ldr	r3, [sp, #8]
    3fa6:	601a      	str	r2, [r3, #0]
    3fa8:	e7ef      	b.n	3f8a <_strtol_l.isra.0+0xde>
    3faa:	2430      	movs	r4, #48	; 0x30
    3fac:	2f00      	cmp	r7, #0
    3fae:	d1ad      	bne.n	3f0c <_strtol_l.isra.0+0x60>
    3fb0:	3708      	adds	r7, #8
    3fb2:	e7ab      	b.n	3f0c <_strtol_l.isra.0+0x60>
    3fb4:	7fffffff 	.word	0x7fffffff

00003fb8 <_strtol_r>:
    3fb8:	b513      	push	{r0, r1, r4, lr}
    3fba:	4c05      	ldr	r4, [pc, #20]	; (3fd0 <_strtol_r+0x18>)
    3fbc:	6824      	ldr	r4, [r4, #0]
    3fbe:	6a24      	ldr	r4, [r4, #32]
    3fc0:	2c00      	cmp	r4, #0
    3fc2:	d100      	bne.n	3fc6 <_strtol_r+0xe>
    3fc4:	4c03      	ldr	r4, [pc, #12]	; (3fd4 <_strtol_r+0x1c>)
    3fc6:	9400      	str	r4, [sp, #0]
    3fc8:	f7ff ff70 	bl	3eac <_strtol_l.isra.0>
    3fcc:	bd16      	pop	{r1, r2, r4, pc}
    3fce:	46c0      	nop			; (mov r8, r8)
    3fd0:	20000008 	.word	0x20000008
    3fd4:	2000006c 	.word	0x2000006c

00003fd8 <_strtoul_l.isra.0>:
    3fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fda:	001f      	movs	r7, r3
    3fdc:	000e      	movs	r6, r1
    3fde:	b087      	sub	sp, #28
    3fe0:	9005      	str	r0, [sp, #20]
    3fe2:	9103      	str	r1, [sp, #12]
    3fe4:	9201      	str	r2, [sp, #4]
    3fe6:	980c      	ldr	r0, [sp, #48]	; 0x30
    3fe8:	7834      	ldrb	r4, [r6, #0]
    3fea:	f000 f987 	bl	42fc <__locale_ctype_ptr_l>
    3fee:	2208      	movs	r2, #8
    3ff0:	1900      	adds	r0, r0, r4
    3ff2:	7843      	ldrb	r3, [r0, #1]
    3ff4:	1c75      	adds	r5, r6, #1
    3ff6:	4013      	ands	r3, r2
    3ff8:	d10c      	bne.n	4014 <_strtoul_l.isra.0+0x3c>
    3ffa:	2c2d      	cmp	r4, #45	; 0x2d
    3ffc:	d10c      	bne.n	4018 <_strtoul_l.isra.0+0x40>
    3ffe:	3301      	adds	r3, #1
    4000:	782c      	ldrb	r4, [r5, #0]
    4002:	9302      	str	r3, [sp, #8]
    4004:	1cb5      	adds	r5, r6, #2
    4006:	2f00      	cmp	r7, #0
    4008:	d00c      	beq.n	4024 <_strtoul_l.isra.0+0x4c>
    400a:	2f10      	cmp	r7, #16
    400c:	d114      	bne.n	4038 <_strtoul_l.isra.0+0x60>
    400e:	2c30      	cmp	r4, #48	; 0x30
    4010:	d00a      	beq.n	4028 <_strtoul_l.isra.0+0x50>
    4012:	e011      	b.n	4038 <_strtoul_l.isra.0+0x60>
    4014:	002e      	movs	r6, r5
    4016:	e7e6      	b.n	3fe6 <_strtoul_l.isra.0+0xe>
    4018:	9302      	str	r3, [sp, #8]
    401a:	2c2b      	cmp	r4, #43	; 0x2b
    401c:	d1f3      	bne.n	4006 <_strtoul_l.isra.0+0x2e>
    401e:	782c      	ldrb	r4, [r5, #0]
    4020:	1cb5      	adds	r5, r6, #2
    4022:	e7f0      	b.n	4006 <_strtoul_l.isra.0+0x2e>
    4024:	2c30      	cmp	r4, #48	; 0x30
    4026:	d12f      	bne.n	4088 <_strtoul_l.isra.0+0xb0>
    4028:	2220      	movs	r2, #32
    402a:	782b      	ldrb	r3, [r5, #0]
    402c:	4393      	bics	r3, r2
    402e:	2b58      	cmp	r3, #88	; 0x58
    4030:	d154      	bne.n	40dc <_strtoul_l.isra.0+0x104>
    4032:	2710      	movs	r7, #16
    4034:	786c      	ldrb	r4, [r5, #1]
    4036:	3502      	adds	r5, #2
    4038:	2001      	movs	r0, #1
    403a:	0039      	movs	r1, r7
    403c:	4240      	negs	r0, r0
    403e:	f7fe f9eb 	bl	2418 <__udivsi3>
    4042:	0006      	movs	r6, r0
    4044:	2001      	movs	r0, #1
    4046:	0039      	movs	r1, r7
    4048:	4240      	negs	r0, r0
    404a:	f7fe fa6b 	bl	2524 <__aeabi_uidivmod>
    404e:	2300      	movs	r3, #0
    4050:	9104      	str	r1, [sp, #16]
    4052:	2101      	movs	r1, #1
    4054:	2201      	movs	r2, #1
    4056:	0018      	movs	r0, r3
    4058:	468c      	mov	ip, r1
    405a:	4252      	negs	r2, r2
    405c:	0021      	movs	r1, r4
    405e:	3930      	subs	r1, #48	; 0x30
    4060:	2909      	cmp	r1, #9
    4062:	d813      	bhi.n	408c <_strtoul_l.isra.0+0xb4>
    4064:	000c      	movs	r4, r1
    4066:	42a7      	cmp	r7, r4
    4068:	dd1e      	ble.n	40a8 <_strtoul_l.isra.0+0xd0>
    406a:	2b00      	cmp	r3, #0
    406c:	db1a      	blt.n	40a4 <_strtoul_l.isra.0+0xcc>
    406e:	0013      	movs	r3, r2
    4070:	4286      	cmp	r6, r0
    4072:	d306      	bcc.n	4082 <_strtoul_l.isra.0+0xaa>
    4074:	d102      	bne.n	407c <_strtoul_l.isra.0+0xa4>
    4076:	9904      	ldr	r1, [sp, #16]
    4078:	42a1      	cmp	r1, r4
    407a:	db02      	blt.n	4082 <_strtoul_l.isra.0+0xaa>
    407c:	4663      	mov	r3, ip
    407e:	4378      	muls	r0, r7
    4080:	1820      	adds	r0, r4, r0
    4082:	782c      	ldrb	r4, [r5, #0]
    4084:	3501      	adds	r5, #1
    4086:	e7e9      	b.n	405c <_strtoul_l.isra.0+0x84>
    4088:	270a      	movs	r7, #10
    408a:	e7d5      	b.n	4038 <_strtoul_l.isra.0+0x60>
    408c:	0021      	movs	r1, r4
    408e:	3941      	subs	r1, #65	; 0x41
    4090:	2919      	cmp	r1, #25
    4092:	d801      	bhi.n	4098 <_strtoul_l.isra.0+0xc0>
    4094:	3c37      	subs	r4, #55	; 0x37
    4096:	e7e6      	b.n	4066 <_strtoul_l.isra.0+0x8e>
    4098:	0021      	movs	r1, r4
    409a:	3961      	subs	r1, #97	; 0x61
    409c:	2919      	cmp	r1, #25
    409e:	d803      	bhi.n	40a8 <_strtoul_l.isra.0+0xd0>
    40a0:	3c57      	subs	r4, #87	; 0x57
    40a2:	e7e0      	b.n	4066 <_strtoul_l.isra.0+0x8e>
    40a4:	0013      	movs	r3, r2
    40a6:	e7ec      	b.n	4082 <_strtoul_l.isra.0+0xaa>
    40a8:	2b00      	cmp	r3, #0
    40aa:	da09      	bge.n	40c0 <_strtoul_l.isra.0+0xe8>
    40ac:	2322      	movs	r3, #34	; 0x22
    40ae:	2001      	movs	r0, #1
    40b0:	9a05      	ldr	r2, [sp, #20]
    40b2:	4240      	negs	r0, r0
    40b4:	6013      	str	r3, [r2, #0]
    40b6:	9b01      	ldr	r3, [sp, #4]
    40b8:	2b00      	cmp	r3, #0
    40ba:	d10b      	bne.n	40d4 <_strtoul_l.isra.0+0xfc>
    40bc:	b007      	add	sp, #28
    40be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40c0:	9a02      	ldr	r2, [sp, #8]
    40c2:	2a00      	cmp	r2, #0
    40c4:	d000      	beq.n	40c8 <_strtoul_l.isra.0+0xf0>
    40c6:	4240      	negs	r0, r0
    40c8:	9a01      	ldr	r2, [sp, #4]
    40ca:	2a00      	cmp	r2, #0
    40cc:	d0f6      	beq.n	40bc <_strtoul_l.isra.0+0xe4>
    40ce:	9a03      	ldr	r2, [sp, #12]
    40d0:	2b00      	cmp	r3, #0
    40d2:	d000      	beq.n	40d6 <_strtoul_l.isra.0+0xfe>
    40d4:	1e6a      	subs	r2, r5, #1
    40d6:	9b01      	ldr	r3, [sp, #4]
    40d8:	601a      	str	r2, [r3, #0]
    40da:	e7ef      	b.n	40bc <_strtoul_l.isra.0+0xe4>
    40dc:	2430      	movs	r4, #48	; 0x30
    40de:	2f00      	cmp	r7, #0
    40e0:	d1aa      	bne.n	4038 <_strtoul_l.isra.0+0x60>
    40e2:	3708      	adds	r7, #8
    40e4:	e7a8      	b.n	4038 <_strtoul_l.isra.0+0x60>
	...

000040e8 <_strtoul_r>:
    40e8:	b513      	push	{r0, r1, r4, lr}
    40ea:	4c05      	ldr	r4, [pc, #20]	; (4100 <_strtoul_r+0x18>)
    40ec:	6824      	ldr	r4, [r4, #0]
    40ee:	6a24      	ldr	r4, [r4, #32]
    40f0:	2c00      	cmp	r4, #0
    40f2:	d100      	bne.n	40f6 <_strtoul_r+0xe>
    40f4:	4c03      	ldr	r4, [pc, #12]	; (4104 <_strtoul_r+0x1c>)
    40f6:	9400      	str	r4, [sp, #0]
    40f8:	f7ff ff6e 	bl	3fd8 <_strtoul_l.isra.0>
    40fc:	bd16      	pop	{r1, r2, r4, pc}
    40fe:	46c0      	nop			; (mov r8, r8)
    4100:	20000008 	.word	0x20000008
    4104:	2000006c 	.word	0x2000006c

00004108 <__submore>:
    4108:	000b      	movs	r3, r1
    410a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    410c:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    410e:	3344      	adds	r3, #68	; 0x44
    4110:	000c      	movs	r4, r1
    4112:	429d      	cmp	r5, r3
    4114:	d11c      	bne.n	4150 <__submore+0x48>
    4116:	2680      	movs	r6, #128	; 0x80
    4118:	00f6      	lsls	r6, r6, #3
    411a:	0031      	movs	r1, r6
    411c:	f7fe ff28 	bl	2f70 <_malloc_r>
    4120:	2800      	cmp	r0, #0
    4122:	d102      	bne.n	412a <__submore+0x22>
    4124:	2001      	movs	r0, #1
    4126:	4240      	negs	r0, r0
    4128:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    412a:	0023      	movs	r3, r4
    412c:	6360      	str	r0, [r4, #52]	; 0x34
    412e:	63a6      	str	r6, [r4, #56]	; 0x38
    4130:	3346      	adds	r3, #70	; 0x46
    4132:	781a      	ldrb	r2, [r3, #0]
    4134:	4b10      	ldr	r3, [pc, #64]	; (4178 <__submore+0x70>)
    4136:	54c2      	strb	r2, [r0, r3]
    4138:	0023      	movs	r3, r4
    413a:	3345      	adds	r3, #69	; 0x45
    413c:	781a      	ldrb	r2, [r3, #0]
    413e:	4b0f      	ldr	r3, [pc, #60]	; (417c <__submore+0x74>)
    4140:	54c2      	strb	r2, [r0, r3]
    4142:	782a      	ldrb	r2, [r5, #0]
    4144:	4b0e      	ldr	r3, [pc, #56]	; (4180 <__submore+0x78>)
    4146:	54c2      	strb	r2, [r0, r3]
    4148:	18c0      	adds	r0, r0, r3
    414a:	6020      	str	r0, [r4, #0]
    414c:	2000      	movs	r0, #0
    414e:	e7eb      	b.n	4128 <__submore+0x20>
    4150:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    4152:	0029      	movs	r1, r5
    4154:	0073      	lsls	r3, r6, #1
    4156:	001a      	movs	r2, r3
    4158:	9301      	str	r3, [sp, #4]
    415a:	f000 f914 	bl	4386 <_realloc_r>
    415e:	1e05      	subs	r5, r0, #0
    4160:	d0e0      	beq.n	4124 <__submore+0x1c>
    4162:	1987      	adds	r7, r0, r6
    4164:	0001      	movs	r1, r0
    4166:	0032      	movs	r2, r6
    4168:	0038      	movs	r0, r7
    416a:	f7fe fa3e 	bl	25ea <memcpy>
    416e:	9b01      	ldr	r3, [sp, #4]
    4170:	6027      	str	r7, [r4, #0]
    4172:	6365      	str	r5, [r4, #52]	; 0x34
    4174:	63a3      	str	r3, [r4, #56]	; 0x38
    4176:	e7e9      	b.n	414c <__submore+0x44>
    4178:	000003ff 	.word	0x000003ff
    417c:	000003fe 	.word	0x000003fe
    4180:	000003fd 	.word	0x000003fd

00004184 <_ungetc_r>:
    4184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4186:	0005      	movs	r5, r0
    4188:	000e      	movs	r6, r1
    418a:	0014      	movs	r4, r2
    418c:	1c4b      	adds	r3, r1, #1
    418e:	d103      	bne.n	4198 <_ungetc_r+0x14>
    4190:	2601      	movs	r6, #1
    4192:	4276      	negs	r6, r6
    4194:	0030      	movs	r0, r6
    4196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4198:	2800      	cmp	r0, #0
    419a:	d004      	beq.n	41a6 <_ungetc_r+0x22>
    419c:	6983      	ldr	r3, [r0, #24]
    419e:	2b00      	cmp	r3, #0
    41a0:	d101      	bne.n	41a6 <_ungetc_r+0x22>
    41a2:	f7fe fd73 	bl	2c8c <__sinit>
    41a6:	4b2d      	ldr	r3, [pc, #180]	; (425c <_ungetc_r+0xd8>)
    41a8:	429c      	cmp	r4, r3
    41aa:	d12d      	bne.n	4208 <_ungetc_r+0x84>
    41ac:	686c      	ldr	r4, [r5, #4]
    41ae:	2220      	movs	r2, #32
    41b0:	89a3      	ldrh	r3, [r4, #12]
    41b2:	4393      	bics	r3, r2
    41b4:	b21b      	sxth	r3, r3
    41b6:	81a3      	strh	r3, [r4, #12]
    41b8:	b29b      	uxth	r3, r3
    41ba:	075a      	lsls	r2, r3, #29
    41bc:	d413      	bmi.n	41e6 <_ungetc_r+0x62>
    41be:	06da      	lsls	r2, r3, #27
    41c0:	d5e6      	bpl.n	4190 <_ungetc_r+0xc>
    41c2:	2708      	movs	r7, #8
    41c4:	423b      	tst	r3, r7
    41c6:	d00a      	beq.n	41de <_ungetc_r+0x5a>
    41c8:	0021      	movs	r1, r4
    41ca:	0028      	movs	r0, r5
    41cc:	f7fe fcdc 	bl	2b88 <_fflush_r>
    41d0:	2800      	cmp	r0, #0
    41d2:	d1dd      	bne.n	4190 <_ungetc_r+0xc>
    41d4:	89a3      	ldrh	r3, [r4, #12]
    41d6:	60a0      	str	r0, [r4, #8]
    41d8:	43bb      	bics	r3, r7
    41da:	81a3      	strh	r3, [r4, #12]
    41dc:	61a0      	str	r0, [r4, #24]
    41de:	2304      	movs	r3, #4
    41e0:	89a2      	ldrh	r2, [r4, #12]
    41e2:	4313      	orrs	r3, r2
    41e4:	81a3      	strh	r3, [r4, #12]
    41e6:	6b62      	ldr	r2, [r4, #52]	; 0x34
    41e8:	b2f7      	uxtb	r7, r6
    41ea:	6863      	ldr	r3, [r4, #4]
    41ec:	b2f6      	uxtb	r6, r6
    41ee:	2a00      	cmp	r2, #0
    41f0:	d01b      	beq.n	422a <_ungetc_r+0xa6>
    41f2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    41f4:	4293      	cmp	r3, r2
    41f6:	da11      	bge.n	421c <_ungetc_r+0x98>
    41f8:	6823      	ldr	r3, [r4, #0]
    41fa:	3b01      	subs	r3, #1
    41fc:	6023      	str	r3, [r4, #0]
    41fe:	701f      	strb	r7, [r3, #0]
    4200:	6863      	ldr	r3, [r4, #4]
    4202:	3301      	adds	r3, #1
    4204:	6063      	str	r3, [r4, #4]
    4206:	e7c5      	b.n	4194 <_ungetc_r+0x10>
    4208:	4b15      	ldr	r3, [pc, #84]	; (4260 <_ungetc_r+0xdc>)
    420a:	429c      	cmp	r4, r3
    420c:	d101      	bne.n	4212 <_ungetc_r+0x8e>
    420e:	68ac      	ldr	r4, [r5, #8]
    4210:	e7cd      	b.n	41ae <_ungetc_r+0x2a>
    4212:	4b14      	ldr	r3, [pc, #80]	; (4264 <_ungetc_r+0xe0>)
    4214:	429c      	cmp	r4, r3
    4216:	d1ca      	bne.n	41ae <_ungetc_r+0x2a>
    4218:	68ec      	ldr	r4, [r5, #12]
    421a:	e7c8      	b.n	41ae <_ungetc_r+0x2a>
    421c:	0021      	movs	r1, r4
    421e:	0028      	movs	r0, r5
    4220:	f7ff ff72 	bl	4108 <__submore>
    4224:	2800      	cmp	r0, #0
    4226:	d0e7      	beq.n	41f8 <_ungetc_r+0x74>
    4228:	e7b2      	b.n	4190 <_ungetc_r+0xc>
    422a:	6921      	ldr	r1, [r4, #16]
    422c:	6822      	ldr	r2, [r4, #0]
    422e:	2900      	cmp	r1, #0
    4230:	d007      	beq.n	4242 <_ungetc_r+0xbe>
    4232:	4291      	cmp	r1, r2
    4234:	d205      	bcs.n	4242 <_ungetc_r+0xbe>
    4236:	1e51      	subs	r1, r2, #1
    4238:	7808      	ldrb	r0, [r1, #0]
    423a:	4286      	cmp	r6, r0
    423c:	d101      	bne.n	4242 <_ungetc_r+0xbe>
    423e:	6021      	str	r1, [r4, #0]
    4240:	e7df      	b.n	4202 <_ungetc_r+0x7e>
    4242:	6423      	str	r3, [r4, #64]	; 0x40
    4244:	0023      	movs	r3, r4
    4246:	3344      	adds	r3, #68	; 0x44
    4248:	6363      	str	r3, [r4, #52]	; 0x34
    424a:	2303      	movs	r3, #3
    424c:	63a3      	str	r3, [r4, #56]	; 0x38
    424e:	0023      	movs	r3, r4
    4250:	3346      	adds	r3, #70	; 0x46
    4252:	63e2      	str	r2, [r4, #60]	; 0x3c
    4254:	701f      	strb	r7, [r3, #0]
    4256:	6023      	str	r3, [r4, #0]
    4258:	2301      	movs	r3, #1
    425a:	e7d3      	b.n	4204 <_ungetc_r+0x80>
    425c:	00004600 	.word	0x00004600
    4260:	00004620 	.word	0x00004620
    4264:	000045e0 	.word	0x000045e0

00004268 <_write_r>:
    4268:	b570      	push	{r4, r5, r6, lr}
    426a:	0005      	movs	r5, r0
    426c:	0008      	movs	r0, r1
    426e:	0011      	movs	r1, r2
    4270:	2200      	movs	r2, #0
    4272:	4c06      	ldr	r4, [pc, #24]	; (428c <_write_r+0x24>)
    4274:	6022      	str	r2, [r4, #0]
    4276:	001a      	movs	r2, r3
    4278:	f7fe f8a6 	bl	23c8 <_write>
    427c:	1c43      	adds	r3, r0, #1
    427e:	d103      	bne.n	4288 <_write_r+0x20>
    4280:	6823      	ldr	r3, [r4, #0]
    4282:	2b00      	cmp	r3, #0
    4284:	d000      	beq.n	4288 <_write_r+0x20>
    4286:	602b      	str	r3, [r5, #0]
    4288:	bd70      	pop	{r4, r5, r6, pc}
    428a:	46c0      	nop			; (mov r8, r8)
    428c:	200003d4 	.word	0x200003d4

00004290 <_close_r>:
    4290:	2300      	movs	r3, #0
    4292:	b570      	push	{r4, r5, r6, lr}
    4294:	4c06      	ldr	r4, [pc, #24]	; (42b0 <_close_r+0x20>)
    4296:	0005      	movs	r5, r0
    4298:	0008      	movs	r0, r1
    429a:	6023      	str	r3, [r4, #0]
    429c:	f7fc f800 	bl	2a0 <_close>
    42a0:	1c43      	adds	r3, r0, #1
    42a2:	d103      	bne.n	42ac <_close_r+0x1c>
    42a4:	6823      	ldr	r3, [r4, #0]
    42a6:	2b00      	cmp	r3, #0
    42a8:	d000      	beq.n	42ac <_close_r+0x1c>
    42aa:	602b      	str	r3, [r5, #0]
    42ac:	bd70      	pop	{r4, r5, r6, pc}
    42ae:	46c0      	nop			; (mov r8, r8)
    42b0:	200003d4 	.word	0x200003d4

000042b4 <_fstat_r>:
    42b4:	2300      	movs	r3, #0
    42b6:	b570      	push	{r4, r5, r6, lr}
    42b8:	4c06      	ldr	r4, [pc, #24]	; (42d4 <_fstat_r+0x20>)
    42ba:	0005      	movs	r5, r0
    42bc:	0008      	movs	r0, r1
    42be:	0011      	movs	r1, r2
    42c0:	6023      	str	r3, [r4, #0]
    42c2:	f7fb fff0 	bl	2a6 <_fstat>
    42c6:	1c43      	adds	r3, r0, #1
    42c8:	d103      	bne.n	42d2 <_fstat_r+0x1e>
    42ca:	6823      	ldr	r3, [r4, #0]
    42cc:	2b00      	cmp	r3, #0
    42ce:	d000      	beq.n	42d2 <_fstat_r+0x1e>
    42d0:	602b      	str	r3, [r5, #0]
    42d2:	bd70      	pop	{r4, r5, r6, pc}
    42d4:	200003d4 	.word	0x200003d4

000042d8 <_isatty_r>:
    42d8:	2300      	movs	r3, #0
    42da:	b570      	push	{r4, r5, r6, lr}
    42dc:	4c06      	ldr	r4, [pc, #24]	; (42f8 <_isatty_r+0x20>)
    42de:	0005      	movs	r5, r0
    42e0:	0008      	movs	r0, r1
    42e2:	6023      	str	r3, [r4, #0]
    42e4:	f7fb ffe4 	bl	2b0 <_isatty>
    42e8:	1c43      	adds	r3, r0, #1
    42ea:	d103      	bne.n	42f4 <_isatty_r+0x1c>
    42ec:	6823      	ldr	r3, [r4, #0]
    42ee:	2b00      	cmp	r3, #0
    42f0:	d000      	beq.n	42f4 <_isatty_r+0x1c>
    42f2:	602b      	str	r3, [r5, #0]
    42f4:	bd70      	pop	{r4, r5, r6, pc}
    42f6:	46c0      	nop			; (mov r8, r8)
    42f8:	200003d4 	.word	0x200003d4

000042fc <__locale_ctype_ptr_l>:
    42fc:	30ec      	adds	r0, #236	; 0xec
    42fe:	6800      	ldr	r0, [r0, #0]
    4300:	4770      	bx	lr
	...

00004304 <__locale_ctype_ptr>:
    4304:	4b04      	ldr	r3, [pc, #16]	; (4318 <__locale_ctype_ptr+0x14>)
    4306:	681b      	ldr	r3, [r3, #0]
    4308:	6a1b      	ldr	r3, [r3, #32]
    430a:	2b00      	cmp	r3, #0
    430c:	d100      	bne.n	4310 <__locale_ctype_ptr+0xc>
    430e:	4b03      	ldr	r3, [pc, #12]	; (431c <__locale_ctype_ptr+0x18>)
    4310:	33ec      	adds	r3, #236	; 0xec
    4312:	6818      	ldr	r0, [r3, #0]
    4314:	4770      	bx	lr
    4316:	46c0      	nop			; (mov r8, r8)
    4318:	20000008 	.word	0x20000008
    431c:	2000006c 	.word	0x2000006c

00004320 <_lseek_r>:
    4320:	b570      	push	{r4, r5, r6, lr}
    4322:	0005      	movs	r5, r0
    4324:	0008      	movs	r0, r1
    4326:	0011      	movs	r1, r2
    4328:	2200      	movs	r2, #0
    432a:	4c06      	ldr	r4, [pc, #24]	; (4344 <_lseek_r+0x24>)
    432c:	6022      	str	r2, [r4, #0]
    432e:	001a      	movs	r2, r3
    4330:	f7fb ffc0 	bl	2b4 <_lseek>
    4334:	1c43      	adds	r3, r0, #1
    4336:	d103      	bne.n	4340 <_lseek_r+0x20>
    4338:	6823      	ldr	r3, [r4, #0]
    433a:	2b00      	cmp	r3, #0
    433c:	d000      	beq.n	4340 <_lseek_r+0x20>
    433e:	602b      	str	r3, [r5, #0]
    4340:	bd70      	pop	{r4, r5, r6, pc}
    4342:	46c0      	nop			; (mov r8, r8)
    4344:	200003d4 	.word	0x200003d4

00004348 <__ascii_mbtowc>:
    4348:	b082      	sub	sp, #8
    434a:	2900      	cmp	r1, #0
    434c:	d100      	bne.n	4350 <__ascii_mbtowc+0x8>
    434e:	a901      	add	r1, sp, #4
    4350:	1e10      	subs	r0, r2, #0
    4352:	d006      	beq.n	4362 <__ascii_mbtowc+0x1a>
    4354:	2b00      	cmp	r3, #0
    4356:	d006      	beq.n	4366 <__ascii_mbtowc+0x1e>
    4358:	7813      	ldrb	r3, [r2, #0]
    435a:	600b      	str	r3, [r1, #0]
    435c:	7810      	ldrb	r0, [r2, #0]
    435e:	1e43      	subs	r3, r0, #1
    4360:	4198      	sbcs	r0, r3
    4362:	b002      	add	sp, #8
    4364:	4770      	bx	lr
    4366:	2002      	movs	r0, #2
    4368:	4240      	negs	r0, r0
    436a:	e7fa      	b.n	4362 <__ascii_mbtowc+0x1a>

0000436c <memchr>:
    436c:	b2c9      	uxtb	r1, r1
    436e:	1882      	adds	r2, r0, r2
    4370:	4290      	cmp	r0, r2
    4372:	d101      	bne.n	4378 <memchr+0xc>
    4374:	2000      	movs	r0, #0
    4376:	4770      	bx	lr
    4378:	7803      	ldrb	r3, [r0, #0]
    437a:	428b      	cmp	r3, r1
    437c:	d0fb      	beq.n	4376 <memchr+0xa>
    437e:	3001      	adds	r0, #1
    4380:	e7f6      	b.n	4370 <memchr+0x4>

00004382 <__malloc_lock>:
    4382:	4770      	bx	lr

00004384 <__malloc_unlock>:
    4384:	4770      	bx	lr

00004386 <_realloc_r>:
    4386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4388:	0007      	movs	r7, r0
    438a:	000d      	movs	r5, r1
    438c:	0016      	movs	r6, r2
    438e:	2900      	cmp	r1, #0
    4390:	d105      	bne.n	439e <_realloc_r+0x18>
    4392:	0011      	movs	r1, r2
    4394:	f7fe fdec 	bl	2f70 <_malloc_r>
    4398:	0004      	movs	r4, r0
    439a:	0020      	movs	r0, r4
    439c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    439e:	2a00      	cmp	r2, #0
    43a0:	d103      	bne.n	43aa <_realloc_r+0x24>
    43a2:	f7fe fd9b 	bl	2edc <_free_r>
    43a6:	0034      	movs	r4, r6
    43a8:	e7f7      	b.n	439a <_realloc_r+0x14>
    43aa:	f000 f833 	bl	4414 <_malloc_usable_size_r>
    43ae:	002c      	movs	r4, r5
    43b0:	4286      	cmp	r6, r0
    43b2:	d9f2      	bls.n	439a <_realloc_r+0x14>
    43b4:	0031      	movs	r1, r6
    43b6:	0038      	movs	r0, r7
    43b8:	f7fe fdda 	bl	2f70 <_malloc_r>
    43bc:	1e04      	subs	r4, r0, #0
    43be:	d0ec      	beq.n	439a <_realloc_r+0x14>
    43c0:	0029      	movs	r1, r5
    43c2:	0032      	movs	r2, r6
    43c4:	f7fe f911 	bl	25ea <memcpy>
    43c8:	0029      	movs	r1, r5
    43ca:	0038      	movs	r0, r7
    43cc:	f7fe fd86 	bl	2edc <_free_r>
    43d0:	e7e3      	b.n	439a <_realloc_r+0x14>
	...

000043d4 <_read_r>:
    43d4:	b570      	push	{r4, r5, r6, lr}
    43d6:	0005      	movs	r5, r0
    43d8:	0008      	movs	r0, r1
    43da:	0011      	movs	r1, r2
    43dc:	2200      	movs	r2, #0
    43de:	4c06      	ldr	r4, [pc, #24]	; (43f8 <_read_r+0x24>)
    43e0:	6022      	str	r2, [r4, #0]
    43e2:	001a      	movs	r2, r3
    43e4:	f7fd ffce 	bl	2384 <_read>
    43e8:	1c43      	adds	r3, r0, #1
    43ea:	d103      	bne.n	43f4 <_read_r+0x20>
    43ec:	6823      	ldr	r3, [r4, #0]
    43ee:	2b00      	cmp	r3, #0
    43f0:	d000      	beq.n	43f4 <_read_r+0x20>
    43f2:	602b      	str	r3, [r5, #0]
    43f4:	bd70      	pop	{r4, r5, r6, pc}
    43f6:	46c0      	nop			; (mov r8, r8)
    43f8:	200003d4 	.word	0x200003d4

000043fc <__ascii_wctomb>:
    43fc:	1e0b      	subs	r3, r1, #0
    43fe:	d004      	beq.n	440a <__ascii_wctomb+0xe>
    4400:	2aff      	cmp	r2, #255	; 0xff
    4402:	d904      	bls.n	440e <__ascii_wctomb+0x12>
    4404:	238a      	movs	r3, #138	; 0x8a
    4406:	6003      	str	r3, [r0, #0]
    4408:	3b8b      	subs	r3, #139	; 0x8b
    440a:	0018      	movs	r0, r3
    440c:	4770      	bx	lr
    440e:	700a      	strb	r2, [r1, #0]
    4410:	2301      	movs	r3, #1
    4412:	e7fa      	b.n	440a <__ascii_wctomb+0xe>

00004414 <_malloc_usable_size_r>:
    4414:	1f0b      	subs	r3, r1, #4
    4416:	681b      	ldr	r3, [r3, #0]
    4418:	1f18      	subs	r0, r3, #4
    441a:	2b00      	cmp	r3, #0
    441c:	da01      	bge.n	4422 <_malloc_usable_size_r+0xe>
    441e:	580b      	ldr	r3, [r1, r0]
    4420:	18c0      	adds	r0, r0, r3
    4422:	4770      	bx	lr
    4424:	62205854 	.word	0x62205854
    4428:	65666675 	.word	0x65666675
    442c:	203d2072 	.word	0x203d2072
    4430:	00007830 	.word	0x00007830
    4434:	62205852 	.word	0x62205852
    4438:	65666675 	.word	0x65666675
    443c:	203d2072 	.word	0x203d2072
    4440:	00007830 	.word	0x00007830
    4444:	6c696146 	.word	0x6c696146
    4448:	20216465 	.word	0x20216465
    444c:	5f746572 	.word	0x5f746572
    4450:	65646f63 	.word	0x65646f63
    4454:	30203d20 	.word	0x30203d20
    4458:	322e2578 	.word	0x322e2578
    445c:	00000a58 	.word	0x00000a58
    4460:	636f6c42 	.word	0x636f6c42
    4464:	6552206b 	.word	0x6552206b
    4468:	6d206461 	.word	0x6d206461
    446c:	726f6d65 	.word	0x726f6d65
    4470:	61662079 	.word	0x61662079
    4474:	64656c69 	.word	0x64656c69
    4478:	00000d21 	.word	0x00000d21
    447c:	636f6c42 	.word	0x636f6c42
    4480:	6552206b 	.word	0x6552206b
    4484:	6d206461 	.word	0x6d206461
    4488:	726f6d65 	.word	0x726f6d65
    448c:	75732079 	.word	0x75732079
    4490:	73656363 	.word	0x73656363
    4494:	000d2173 	.word	0x000d2173
    4498:	2a2a2a2a 	.word	0x2a2a2a2a
    449c:	5345412a 	.word	0x5345412a
    44a0:	20323331 	.word	0x20323331
    44a4:	54534554 	.word	0x54534554
    44a8:	2a2a2a2a 	.word	0x2a2a2a2a
    44ac:	00000d2a 	.word	0x00000d2a
    44b0:	00006325 	.word	0x00006325
    44b4:	75706e49 	.word	0x75706e49
    44b8:	253a2074 	.word	0x253a2074
    44bc:	00000063 	.word	0x00000063
    44c0:	6f727245 	.word	0x6f727245
    44c4:	75622072 	.word	0x75622072
    44c8:	72656666 	.word	0x72656666
    44cc:	65766f20 	.word	0x65766f20
    44d0:	6f6c6672 	.word	0x6f6c6672
    44d4:	00000077 	.word	0x00000077
    44d8:	58322e25 	.word	0x58322e25
    44dc:	00000000 	.word	0x00000000
    44e0:	64616552 	.word	0x64616552
    44e4:	6d656d20 	.word	0x6d656d20
    44e8:	2079726f 	.word	0x2079726f
    44ec:	6c696166 	.word	0x6c696166
    44f0:	0d216465 	.word	0x0d216465
    44f4:	00000000 	.word	0x00000000
    44f8:	64616552 	.word	0x64616552
    44fc:	6d656d20 	.word	0x6d656d20
    4500:	2079726f 	.word	0x2079726f
    4504:	63637573 	.word	0x63637573
    4508:	21737365 	.word	0x21737365
    450c:	0000000d 	.word	0x0000000d
    4510:	706d6f43 	.word	0x706d6f43
    4514:	20657261 	.word	0x20657261
    4518:	6f6d654d 	.word	0x6f6d654d
    451c:	6d207972 	.word	0x6d207972
    4520:	616d7369 	.word	0x616d7369
    4524:	21686374 	.word	0x21686374
    4528:	0000000d 	.word	0x0000000d
    452c:	706d6f43 	.word	0x706d6f43
    4530:	20657261 	.word	0x20657261
    4534:	6f6d654d 	.word	0x6f6d654d
    4538:	6d207972 	.word	0x6d207972
    453c:	68637461 	.word	0x68637461
    4540:	00000d21 	.word	0x00000d21
    4544:	74697257 	.word	0x74697257
    4548:	656d2065 	.word	0x656d2065
    454c:	79726f6d 	.word	0x79726f6d
    4550:	69616620 	.word	0x69616620
    4554:	2164656c 	.word	0x2164656c
    4558:	0000000d 	.word	0x0000000d
    455c:	74697257 	.word	0x74697257
    4560:	656d2065 	.word	0x656d2065
    4564:	79726f6d 	.word	0x79726f6d
    4568:	63757320 	.word	0x63757320
    456c:	73736563 	.word	0x73736563
    4570:	00000d21 	.word	0x00000d21
    4574:	61746144 	.word	0x61746144
    4578:	0000203a 	.word	0x0000203a
    457c:	42000800 	.word	0x42000800
    4580:	42000c00 	.word	0x42000c00
    4584:	42001000 	.word	0x42001000
    4588:	42001400 	.word	0x42001400
    458c:	42001800 	.word	0x42001800
    4590:	42001c00 	.word	0x42001c00
    4594:	00001dfa 	.word	0x00001dfa
    4598:	00001df6 	.word	0x00001df6
    459c:	00001df6 	.word	0x00001df6
    45a0:	00001e58 	.word	0x00001e58
    45a4:	00001e58 	.word	0x00001e58
    45a8:	00001e0e 	.word	0x00001e0e
    45ac:	00001e00 	.word	0x00001e00
    45b0:	00001e14 	.word	0x00001e14
    45b4:	00001e46 	.word	0x00001e46
    45b8:	00001ee0 	.word	0x00001ee0
    45bc:	00001ec0 	.word	0x00001ec0
    45c0:	00001ec0 	.word	0x00001ec0
    45c4:	00001f40 	.word	0x00001f40
    45c8:	00001ed2 	.word	0x00001ed2
    45cc:	00001eee 	.word	0x00001eee
    45d0:	00001ec4 	.word	0x00001ec4
    45d4:	00001efc 	.word	0x00001efc
    45d8:	00001f30 	.word	0x00001f30

000045dc <_global_impure_ptr>:
    45dc:	2000000c                                ... 

000045e0 <__sf_fake_stderr>:
	...

00004600 <__sf_fake_stdin>:
	...

00004620 <__sf_fake_stdout>:
	...
    4640:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    4650:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    4660:	31300046 35343332 39383736 64636261     F.0123456789abcd
    4670:	00006665 00004692 00004695 00004698     ef...F...F...F..
    4680:	61462d41 3938662d 33323130 37363534     A-Fa-f8901234567
    4690:	2d2b005d 00303000 43005878 534f5000     ].+-.00.xX.C.POS
    46a0:	2e005849 20200000                                IX...

000046a5 <_ctype_>:
    46a5:	20202000 20202020 28282020 20282828     .         ((((( 
    46b5:	20202020 20202020 20202020 20202020                     
    46c5:	10108820 10101010 10101010 10101010      ...............
    46d5:	04040410 04040404 10040404 10101010     ................
    46e5:	41411010 41414141 01010101 01010101     ..AAAAAA........
    46f5:	01010101 01010101 01010101 10101010     ................
    4705:	42421010 42424242 02020202 02020202     ..BBBBBB........
    4715:	02020202 02020202 02020202 10101010     ................
    4725:	00000020 00000000 00000000 00000000      ...............
	...

000047a8 <_init>:
    47a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    47aa:	46c0      	nop			; (mov r8, r8)
    47ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
    47ae:	bc08      	pop	{r3}
    47b0:	469e      	mov	lr, r3
    47b2:	4770      	bx	lr

000047b4 <__init_array_start>:
    47b4:	000000d9 	.word	0x000000d9

000047b8 <_fini>:
    47b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    47ba:	46c0      	nop			; (mov r8, r8)
    47bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    47be:	bc08      	pop	{r3}
    47c0:	469e      	mov	lr, r3
    47c2:	4770      	bx	lr

000047c4 <__fini_array_start>:
    47c4:	000000b1 	.word	0x000000b1

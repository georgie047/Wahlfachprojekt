
aes132_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000490c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001dc  20000000  0000490c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001f8  200001dc  00004ae8  000201dc  2**2
                  ALLOC
  3 .stack        00002004  200003d4  00004ce0  000201dc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
  6 .debug_info   000278b5  00000000  00000000  0002025d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000039d5  00000000  00000000  00047b12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005d95  00000000  00000000  0004b4e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000005c8  00000000  00000000  0005127c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000618  00000000  00000000  00051844  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b791  00000000  00000000  00051e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b994  00000000  00000000  0006d5ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008d2f2  00000000  00000000  00078f81  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001c34  00000000  00000000  00106274  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d8 23 00 20 a9 23 00 00 a5 23 00 00 a5 23 00 00     .#. .#...#...#..
	...
      2c:	a5 23 00 00 00 00 00 00 00 00 00 00 a5 23 00 00     .#...........#..
      3c:	a5 23 00 00 a5 23 00 00 a5 23 00 00 a5 23 00 00     .#...#...#...#..
      4c:	a5 23 00 00 a5 23 00 00 a5 23 00 00 a5 23 00 00     .#...#...#...#..
      5c:	a5 23 00 00 a5 23 00 00 a5 23 00 00 a5 23 00 00     .#...#...#...#..
      6c:	a5 23 00 00 a5 23 00 00 a5 23 00 00 a5 23 00 00     .#...#...#...#..
      7c:	a5 23 00 00 a5 23 00 00 a5 23 00 00 a5 23 00 00     .#...#...#...#..
      8c:	a5 23 00 00 a5 23 00 00 a5 23 00 00 a5 23 00 00     .#...#...#...#..
      9c:	a5 23 00 00 a5 23 00 00 a5 23 00 00 a5 23 00 00     .#...#...#...#..
      ac:	a5 23 00 00                                         .#..

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	200001dc 	.word	0x200001dc
      d0:	00000000 	.word	0x00000000
      d4:	0000490c 	.word	0x0000490c

000000d8 <frame_dummy>:
      d8:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      da:	b510      	push	{r4, lr}
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4907      	ldr	r1, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4808      	ldr	r0, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d100      	bne.n	f2 <frame_dummy+0x1a>
      f0:	bd10      	pop	{r4, pc}
      f2:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f4:	2b00      	cmp	r3, #0
      f6:	d0fb      	beq.n	f0 <frame_dummy+0x18>
      f8:	4798      	blx	r3
      fa:	e7f9      	b.n	f0 <frame_dummy+0x18>
      fc:	00000000 	.word	0x00000000
     100:	200001e0 	.word	0x200001e0
     104:	0000490c 	.word	0x0000490c
     108:	0000490c 	.word	0x0000490c
     10c:	00000000 	.word	0x00000000

00000110 <aes132c_calculate_crc>:
 * \param[in] length number of bytes in data buffer
 * \param[in] data pointer to data
 * \param[out] crc pointer to calculated CRC (high byte at crc[0])
 */
void aes132c_calculate_crc(uint8_t length, uint8_t *data, uint8_t *crc)
{
     110:	b5f0      	push	{r4, r5, r6, r7, lr}
     112:	46de      	mov	lr, fp
     114:	4657      	mov	r7, sl
     116:	464e      	mov	r6, r9
     118:	4645      	mov	r5, r8
     11a:	b5e0      	push	{r5, r6, r7, lr}
     11c:	4693      	mov	fp, r2
	uint8_t crc_low = 0, crc_high = 0, crc_carry;
	uint8_t poly_low = 0x05, poly_high = 0x80;
	uint8_t shift_register;
	uint8_t data_bit, crc_bit;

	for (counter = 0; counter < length; counter++) {
     11e:	2800      	cmp	r0, #0
     120:	d036      	beq.n	190 <aes132c_calculate_crc+0x80>
     122:	3801      	subs	r0, #1
     124:	b2c0      	uxtb	r0, r0
     126:	3001      	adds	r0, #1
     128:	468a      	mov	sl, r1
     12a:	4482      	add	sl, r0
     12c:	2300      	movs	r3, #0
     12e:	2000      	movs	r0, #0
			crc_low <<= 1;
			crc_high <<= 1;
			crc_high |= crc_carry;

			if ((data_bit ^ crc_bit) != 0) {
				crc_low ^= poly_low;
     130:	2205      	movs	r2, #5
     132:	4690      	mov	r8, r2
				crc_high ^= poly_high;
     134:	2280      	movs	r2, #128	; 0x80
     136:	4252      	negs	r2, r2
     138:	4694      	mov	ip, r2
     13a:	4652      	mov	r2, sl
     13c:	468a      	mov	sl, r1
     13e:	465e      	mov	r6, fp
     140:	4691      	mov	r9, r2
     142:	e01f      	b.n	184 <aes132c_calculate_crc+0x74>
		for (shift_register = 0x80; shift_register > 0x00; shift_register >>= 1) {
     144:	0849      	lsrs	r1, r1, #1
     146:	3c01      	subs	r4, #1
     148:	2c00      	cmp	r4, #0
     14a:	d015      	beq.n	178 <aes132c_calculate_crc+0x68>
			crc_bit = crc_high >> 7;
     14c:	09da      	lsrs	r2, r3, #7
			crc_carry = crc_low >> 7;
     14e:	09c6      	lsrs	r6, r0, #7
			crc_low <<= 1;
     150:	0040      	lsls	r0, r0, #1
     152:	b2c0      	uxtb	r0, r0
			crc_high <<= 1;
     154:	005b      	lsls	r3, r3, #1
     156:	b2db      	uxtb	r3, r3
			crc_high |= crc_carry;
     158:	4333      	orrs	r3, r6
     15a:	b2db      	uxtb	r3, r3
			data_bit = (data[counter] & shift_register) ? 1 : 0;
     15c:	000e      	movs	r6, r1
     15e:	402e      	ands	r6, r5
     160:	1e77      	subs	r7, r6, #1
     162:	41be      	sbcs	r6, r7
			if ((data_bit ^ crc_bit) != 0) {
     164:	b2d2      	uxtb	r2, r2
     166:	42b2      	cmp	r2, r6
     168:	d0ec      	beq.n	144 <aes132c_calculate_crc+0x34>
				crc_low ^= poly_low;
     16a:	4642      	mov	r2, r8
     16c:	4050      	eors	r0, r2
     16e:	b2c0      	uxtb	r0, r0
				crc_high ^= poly_high;
     170:	4662      	mov	r2, ip
     172:	4053      	eors	r3, r2
     174:	b2db      	uxtb	r3, r3
     176:	e7e5      	b.n	144 <aes132c_calculate_crc+0x34>
     178:	465e      	mov	r6, fp
     17a:	2201      	movs	r2, #1
     17c:	4693      	mov	fp, r2
     17e:	44da      	add	sl, fp
	for (counter = 0; counter < length; counter++) {
     180:	45ca      	cmp	sl, r9
     182:	d007      	beq.n	194 <aes132c_calculate_crc+0x84>
			data_bit = (data[counter] & shift_register) ? 1 : 0;
     184:	4652      	mov	r2, sl
     186:	7815      	ldrb	r5, [r2, #0]
     188:	2408      	movs	r4, #8
     18a:	2180      	movs	r1, #128	; 0x80
     18c:	46b3      	mov	fp, r6
     18e:	e7dd      	b.n	14c <aes132c_calculate_crc+0x3c>
	uint8_t crc_low = 0, crc_high = 0, crc_carry;
     190:	0003      	movs	r3, r0
     192:	e000      	b.n	196 <aes132c_calculate_crc+0x86>
     194:	46b3      	mov	fp, r6
			}
		}
	}
	crc[0] = crc_high;
     196:	465a      	mov	r2, fp
     198:	7013      	strb	r3, [r2, #0]
	crc[1] = crc_low;
     19a:	7050      	strb	r0, [r2, #1]
}
     19c:	bc3c      	pop	{r2, r3, r4, r5}
     19e:	4690      	mov	r8, r2
     1a0:	4699      	mov	r9, r3
     1a2:	46a2      	mov	sl, r4
     1a4:	46ab      	mov	fp, r5
     1a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000001a8 <aes132c_reset_io_address>:

/** \brief This function resets the command and response buffer address.
 * \return status of the operation
 */
uint8_t aes132c_reset_io_address(void)
{
     1a8:	b510      	push	{r4, lr}
	return aes132p_write_memory_physical(0, AES132_RESET_ADDR, (void *) 0);
     1aa:	2200      	movs	r2, #0
     1ac:	4902      	ldr	r1, [pc, #8]	; (1b8 <aes132c_reset_io_address+0x10>)
     1ae:	2000      	movs	r0, #0
     1b0:	4b02      	ldr	r3, [pc, #8]	; (1bc <aes132c_reset_io_address+0x14>)
     1b2:	4798      	blx	r3
}
     1b4:	bd10      	pop	{r4, pc}
     1b6:	46c0      	nop			; (mov r8, r8)
     1b8:	0000ffe0 	.word	0x0000ffe0
     1bc:	00000af1 	.word	0x00000af1

000001c0 <aes132c_resync>:

/** \brief This function resynchronizes communication with the device.
 * \return status of the operation
 */
uint8_t aes132c_resync()
{
     1c0:	b510      	push	{r4, lr}
	uint8_t aes132_lib_return = aes132p_resync_physical();
     1c2:	4b04      	ldr	r3, [pc, #16]	; (1d4 <aes132c_resync+0x14>)
     1c4:	4798      	blx	r3
	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS)
     1c6:	2800      	cmp	r0, #0
     1c8:	d000      	beq.n	1cc <aes132c_resync+0xc>
		return aes132_lib_return;

	return aes132c_reset_io_address();
}
     1ca:	bd10      	pop	{r4, pc}
	return aes132c_reset_io_address();
     1cc:	4b02      	ldr	r3, [pc, #8]	; (1d8 <aes132c_resync+0x18>)
     1ce:	4798      	blx	r3
     1d0:	e7fb      	b.n	1ca <aes132c_resync+0xa>
     1d2:	46c0      	nop			; (mov r8, r8)
     1d4:	00000d0d 	.word	0x00000d0d
     1d8:	000001a9 	.word	0x000001a9

000001dc <aes132c_read_device_status_register>:
/** \brief This function reads the device status register.
 * \param[out] device_status_register pointer to byte where the register value is stored
 * \return status of the operation
 */
uint8_t aes132c_read_device_status_register(uint8_t *device_status_register)
{
     1dc:	b510      	push	{r4, lr}
     1de:	0004      	movs	r4, r0
	uint8_t aes132_lib_return;
	uint8_t n_retries = AES132_RETRY_COUNT_ERROR;

	do {
		aes132_lib_return = aes132p_read_memory_physical(1, AES132_STATUS_ADDR, device_status_register);
     1e0:	0002      	movs	r2, r0
     1e2:	4908      	ldr	r1, [pc, #32]	; (204 <aes132c_read_device_status_register+0x28>)
     1e4:	2001      	movs	r0, #1
     1e6:	4b08      	ldr	r3, [pc, #32]	; (208 <aes132c_read_device_status_register+0x2c>)
     1e8:	4798      	blx	r3
	} while ((aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) && (--n_retries > 0));
     1ea:	2800      	cmp	r0, #0
     1ec:	d007      	beq.n	1fe <aes132c_read_device_status_register+0x22>
		aes132_lib_return = aes132p_read_memory_physical(1, AES132_STATUS_ADDR, device_status_register);
     1ee:	0022      	movs	r2, r4
     1f0:	4904      	ldr	r1, [pc, #16]	; (204 <aes132c_read_device_status_register+0x28>)
     1f2:	2001      	movs	r0, #1
     1f4:	4b04      	ldr	r3, [pc, #16]	; (208 <aes132c_read_device_status_register+0x2c>)
     1f6:	4798      	blx	r3
	} while ((aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) && (--n_retries > 0));
     1f8:	2800      	cmp	r0, #0
     1fa:	d000      	beq.n	1fe <aes132c_read_device_status_register+0x22>

	return aes132_lib_return;
}
     1fc:	bd10      	pop	{r4, pc}
		aes132_lib_return = aes132p_read_memory_physical(1, AES132_STATUS_ADDR, device_status_register);
     1fe:	2000      	movs	r0, #0
     200:	e7fc      	b.n	1fc <aes132c_read_device_status_register+0x20>
     202:	46c0      	nop			; (mov r8, r8)
     204:	0000fff0 	.word	0x0000fff0
     208:	00000c49 	.word	0x00000c49

0000020c <aes132c_wait_for_status_register_bit>:
 * \param[in] is_set specifies whether to wait until bit is set (#AES132_BIT_SET) or reset (#AES132_BIT_SET)
 * \param[in] n_retries 16-bit number that indicates the number of retries before stopping to poll.
 * \return status of the operation
 */
uint8_t aes132c_wait_for_status_register_bit(uint8_t mask, uint8_t is_set, uint16_t n_retries)
{
     20c:	b5f0      	push	{r4, r5, r6, r7, lr}
     20e:	46c6      	mov	lr, r8
     210:	b500      	push	{lr}
     212:	b082      	sub	sp, #8
     214:	4680      	mov	r8, r0
     216:	000d      	movs	r5, r1
     218:	0016      	movs	r6, r2
	uint8_t aes132_lib_return;
	uint8_t device_status_register;

	do {
		aes132_lib_return = aes132p_read_memory_physical(1, AES132_STATUS_ADDR, &device_status_register);
     21a:	466b      	mov	r3, sp
     21c:	1ddc      	adds	r4, r3, #7
     21e:	4f0f      	ldr	r7, [pc, #60]	; (25c <aes132c_wait_for_status_register_bit+0x50>)
     220:	e009      	b.n	236 <aes132c_wait_for_status_register_bit+0x2a>
			// The device is busy. Continue polling until "n_retries" is depleted.
			continue;

		if (is_set == AES132_BIT_SET) {
			// Wait for the mask bit(s) being set.
			if ((device_status_register & mask) == mask)
     222:	7823      	ldrb	r3, [r4, #0]
     224:	4642      	mov	r2, r8
     226:	4013      	ands	r3, r2
     228:	4598      	cmp	r8, r3
     22a:	d012      	beq.n	252 <aes132c_wait_for_status_register_bit+0x46>
				return aes132_lib_return;
		}

		// Device is busy, or "mask" pattern does not yet match the device status register value.
		// Continue polling.
	} while (n_retries-- > 0);
     22c:	1e73      	subs	r3, r6, #1
     22e:	b29b      	uxth	r3, r3
     230:	2e00      	cmp	r6, #0
     232:	d00d      	beq.n	250 <aes132c_wait_for_status_register_bit+0x44>
     234:	001e      	movs	r6, r3
		aes132_lib_return = aes132p_read_memory_physical(1, AES132_STATUS_ADDR, &device_status_register);
     236:	0022      	movs	r2, r4
     238:	4909      	ldr	r1, [pc, #36]	; (260 <aes132c_wait_for_status_register_bit+0x54>)
     23a:	2001      	movs	r0, #1
     23c:	47b8      	blx	r7
		if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS)
     23e:	2800      	cmp	r0, #0
     240:	d1f4      	bne.n	22c <aes132c_wait_for_status_register_bit+0x20>
		if (is_set == AES132_BIT_SET) {
     242:	2d01      	cmp	r5, #1
     244:	d0ed      	beq.n	222 <aes132c_wait_for_status_register_bit+0x16>
			if ((device_status_register & mask) == 0)
     246:	7823      	ldrb	r3, [r4, #0]
     248:	4642      	mov	r2, r8
     24a:	4213      	tst	r3, r2
     24c:	d1ee      	bne.n	22c <aes132c_wait_for_status_register_bit+0x20>
     24e:	e000      	b.n	252 <aes132c_wait_for_status_register_bit+0x46>

	// The mask pattern was not found in the device status register after "n_retries" polling
	// iterations. Return timeout error.
	return AES132_FUNCTION_RETCODE_TIMEOUT;
     250:	20e7      	movs	r0, #231	; 0xe7
}
     252:	b002      	add	sp, #8
     254:	bc04      	pop	{r2}
     256:	4690      	mov	r8, r2
     258:	bdf0      	pop	{r4, r5, r6, r7, pc}
     25a:	46c0      	nop			; (mov r8, r8)
     25c:	00000c49 	.word	0x00000c49
     260:	0000fff0 	.word	0x0000fff0

00000264 <aes132c_wait_for_device_ready>:

/** \brief This function waits for the Write-In-Progress (WIP) bit in the device status register to be cleared.
 * \return status of the operation
 */
uint8_t aes132c_wait_for_device_ready(void)
{
     264:	b510      	push	{r4, lr}
	return aes132c_wait_for_status_register_bit(AES132_WIP_BIT, AES132_BIT_CLEARED, AES132_RETRY_COUNT_DEVICE_READY);
     266:	4a03      	ldr	r2, [pc, #12]	; (274 <aes132c_wait_for_device_ready+0x10>)
     268:	2100      	movs	r1, #0
     26a:	2001      	movs	r0, #1
     26c:	4b02      	ldr	r3, [pc, #8]	; (278 <aes132c_wait_for_device_ready+0x14>)
     26e:	4798      	blx	r3
}
     270:	bd10      	pop	{r4, pc}
     272:	46c0      	nop			; (mov r8, r8)
     274:	000010cc 	.word	0x000010cc
     278:	0000020d 	.word	0x0000020d

0000027c <aes132c_wait_for_response_ready>:

/** \brief This function waits for the Response-Ready (RRDY) bit in the device status register to be set.
 * \ return status of the operation
 */
uint8_t aes132c_wait_for_response_ready(void)
{
     27c:	b510      	push	{r4, lr}
	return aes132c_wait_for_status_register_bit(AES132_RESPONSE_READY_BIT, AES132_BIT_SET, AES132_RETRY_COUNT_RESPONSE_READY);
     27e:	4a03      	ldr	r2, [pc, #12]	; (28c <aes132c_wait_for_response_ready+0x10>)
     280:	2101      	movs	r1, #1
     282:	2040      	movs	r0, #64	; 0x40
     284:	4b02      	ldr	r3, [pc, #8]	; (290 <aes132c_wait_for_response_ready+0x14>)
     286:	4798      	blx	r3
}
     288:	bd10      	pop	{r4, pc}
     28a:	46c0      	nop			; (mov r8, r8)
     28c:	000030b6 	.word	0x000030b6
     290:	0000020d 	.word	0x0000020d

00000294 <aes132c_receive_response>:
 * \param[in] size number of bytes to retrieve (<= response buffer size allocated by caller)
 * \param[out] response pointer to retrieved response
 * \return status of the operation
 */
uint8_t aes132c_receive_response(uint8_t size, uint8_t *response)
{
     294:	b5f0      	push	{r4, r5, r6, r7, lr}
     296:	46ce      	mov	lr, r9
     298:	b500      	push	{lr}
     29a:	b084      	sub	sp, #16
     29c:	9001      	str	r0, [sp, #4]
     29e:	000d      	movs	r5, r1
     2a0:	2702      	movs	r7, #2
	uint8_t crc[AES132_CRC_SIZE];
	uint8_t crc_index;
	uint8_t count_byte;

	do {
		aes132_lib_return = aes132c_wait_for_response_ready();
     2a2:	4e29      	ldr	r6, [pc, #164]	; (348 <aes132c_receive_response+0xb4>)
     2a4:	47b0      	blx	r6
     2a6:	1e04      	subs	r4, r0, #0
		if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
     2a8:	d00a      	beq.n	2c0 <aes132c_receive_response+0x2c>
			// Waiting for the Response-Ready bit timed out. We might have lost communication.
			// Re-synchronize and retry.
			// Do not override the return value from the call to aes132c_wait_for_response_ready.
			(void) aes132c_resync();
     2aa:	4b28      	ldr	r3, [pc, #160]	; (34c <aes132c_receive_response+0xb8>)
     2ac:	4798      	blx	r3
     2ae:	3f01      	subs	r7, #1
     2b0:	b2ff      	uxtb	r7, r7

		// Do not override aes132_lib_return.
		(void) aes132c_resync();

		// Retry if communication failed, or CRC did not match.
	} while ((aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) && (--n_retries > 0));
     2b2:	2f00      	cmp	r7, #0
     2b4:	d1f6      	bne.n	2a4 <aes132c_receive_response+0x10>

	// Even after re-synchronizing and retrying, we could not receive a consistent response packet.
	return aes132_lib_return;
}
     2b6:	0020      	movs	r0, r4
     2b8:	b004      	add	sp, #16
     2ba:	bc04      	pop	{r2}
     2bc:	4691      	mov	r9, r2
     2be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		aes132_lib_return = aes132p_read_memory_physical(1, AES132_IO_ADDR, &response[AES132_COMMAND_INDEX_COUNT]);
     2c0:	002a      	movs	r2, r5
     2c2:	21fe      	movs	r1, #254	; 0xfe
     2c4:	0209      	lsls	r1, r1, #8
     2c6:	2001      	movs	r0, #1
     2c8:	4b21      	ldr	r3, [pc, #132]	; (350 <aes132c_receive_response+0xbc>)
     2ca:	4798      	blx	r3
     2cc:	1e04      	subs	r4, r0, #0
		if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
     2ce:	d10c      	bne.n	2ea <aes132c_receive_response+0x56>
		count_byte = response[AES132_RESPONSE_INDEX_COUNT];
     2d0:	782b      	ldrb	r3, [r5, #0]
     2d2:	4699      	mov	r9, r3
		if (count_byte > size) {
     2d4:	9b01      	ldr	r3, [sp, #4]
     2d6:	4599      	cmp	r9, r3
     2d8:	d80a      	bhi.n	2f0 <aes132c_receive_response+0x5c>
		if ((count_byte < AES132_RESPONSE_SIZE_MIN) || (count_byte > AES132_RESPONSE_SIZE_MAX)) {
     2da:	464b      	mov	r3, r9
     2dc:	3b04      	subs	r3, #4
     2de:	2b30      	cmp	r3, #48	; 0x30
     2e0:	d90a      	bls.n	2f8 <aes132c_receive_response+0x64>
			(void) aes132c_resync();
     2e2:	4b1a      	ldr	r3, [pc, #104]	; (34c <aes132c_receive_response+0xb8>)
     2e4:	4798      	blx	r3
			aes132_lib_return = AES132_FUNCTION_RETCODE_COUNT_INVALID;
     2e6:	24e4      	movs	r4, #228	; 0xe4
			continue;
     2e8:	e7e1      	b.n	2ae <aes132c_receive_response+0x1a>
			(void) aes132c_resync();
     2ea:	4b18      	ldr	r3, [pc, #96]	; (34c <aes132c_receive_response+0xb8>)
     2ec:	4798      	blx	r3
			continue;
     2ee:	e7de      	b.n	2ae <aes132c_receive_response+0x1a>
			(void) aes132c_resync();
     2f0:	4b16      	ldr	r3, [pc, #88]	; (34c <aes132c_receive_response+0xb8>)
     2f2:	4798      	blx	r3
			aes132_lib_return = AES132_FUNCTION_RETCODE_SIZE_TOO_SMALL;
     2f4:	24a2      	movs	r4, #162	; 0xa2
			continue;
     2f6:	e7da      	b.n	2ae <aes132c_receive_response+0x1a>
		aes132_lib_return = aes132p_read_memory_physical(count_byte - 1, AES132_IO_ADDR, &response[AES132_RESPONSE_INDEX_RETURN_CODE]);
     2f8:	1c6a      	adds	r2, r5, #1
     2fa:	464b      	mov	r3, r9
     2fc:	1e58      	subs	r0, r3, #1
     2fe:	b2c0      	uxtb	r0, r0
     300:	21fe      	movs	r1, #254	; 0xfe
     302:	0209      	lsls	r1, r1, #8
     304:	4b12      	ldr	r3, [pc, #72]	; (350 <aes132c_receive_response+0xbc>)
     306:	4798      	blx	r3
     308:	1e04      	subs	r4, r0, #0
		if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
     30a:	d002      	beq.n	312 <aes132c_receive_response+0x7e>
			(void) aes132c_resync();
     30c:	4b0f      	ldr	r3, [pc, #60]	; (34c <aes132c_receive_response+0xb8>)
     30e:	4798      	blx	r3
			continue;
     310:	e7cd      	b.n	2ae <aes132c_receive_response+0x1a>
		crc_index = count_byte - AES132_CRC_SIZE;
     312:	464c      	mov	r4, r9
     314:	3c02      	subs	r4, #2
     316:	b2e4      	uxtb	r4, r4
		aes132c_calculate_crc(crc_index, response, crc);
     318:	ab03      	add	r3, sp, #12
     31a:	4699      	mov	r9, r3
     31c:	001a      	movs	r2, r3
     31e:	0029      	movs	r1, r5
     320:	0020      	movs	r0, r4
     322:	4b0c      	ldr	r3, [pc, #48]	; (354 <aes132c_receive_response+0xc0>)
     324:	4798      	blx	r3
		if ((crc[0] == response[crc_index]) && (crc[1] == response[crc_index + 1]))
     326:	464b      	mov	r3, r9
     328:	781a      	ldrb	r2, [r3, #0]
     32a:	5d2b      	ldrb	r3, [r5, r4]
     32c:	429a      	cmp	r2, r3
     32e:	d003      	beq.n	338 <aes132c_receive_response+0xa4>
		(void) aes132c_resync();
     330:	4b06      	ldr	r3, [pc, #24]	; (34c <aes132c_receive_response+0xb8>)
     332:	4798      	blx	r3
		aes132_lib_return = AES132_FUNCTION_RETCODE_BAD_CRC_RX;
     334:	24e5      	movs	r4, #229	; 0xe5
     336:	e7ba      	b.n	2ae <aes132c_receive_response+0x1a>
		if ((crc[0] == response[crc_index]) && (crc[1] == response[crc_index + 1]))
     338:	192c      	adds	r4, r5, r4
     33a:	ab03      	add	r3, sp, #12
     33c:	785a      	ldrb	r2, [r3, #1]
     33e:	7863      	ldrb	r3, [r4, #1]
     340:	429a      	cmp	r2, r3
     342:	d1f5      	bne.n	330 <aes132c_receive_response+0x9c>
			return response[AES132_RESPONSE_INDEX_RETURN_CODE];
     344:	786c      	ldrb	r4, [r5, #1]
     346:	e7b6      	b.n	2b6 <aes132c_receive_response+0x22>
     348:	0000027d 	.word	0x0000027d
     34c:	000001c1 	.word	0x000001c1
     350:	00000c49 	.word	0x00000c49
     354:	00000111 	.word	0x00000111

00000358 <aes132c_access_memory>:
{
     358:	b5f0      	push	{r4, r5, r6, r7, lr}
     35a:	46c6      	mov	lr, r8
     35c:	b500      	push	{lr}
     35e:	b086      	sub	sp, #24
     360:	9002      	str	r0, [sp, #8]
     362:	9101      	str	r1, [sp, #4]
     364:	9203      	str	r2, [sp, #12]
     366:	4698      	mov	r8, r3
     368:	2701      	movs	r7, #1
			aes132_lib_return = aes132c_wait_for_device_ready();
     36a:	4e1e      	ldr	r6, [pc, #120]	; (3e4 <aes132c_access_memory+0x8c>)
{
     36c:	2502      	movs	r5, #2
			aes132_lib_return = aes132c_wait_for_device_ready();
     36e:	47b0      	blx	r6
     370:	1e04      	subs	r4, r0, #0
			if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS)
     372:	d131      	bne.n	3d8 <aes132c_access_memory+0x80>
			if (read == 0) {
     374:	4643      	mov	r3, r8
     376:	2b00      	cmp	r3, #0
     378:	d11a      	bne.n	3b0 <aes132c_access_memory+0x58>
				aes132_lib_return = aes132p_write_memory_physical(count, word_address, data);
     37a:	9a03      	ldr	r2, [sp, #12]
     37c:	9901      	ldr	r1, [sp, #4]
     37e:	9802      	ldr	r0, [sp, #8]
     380:	4b19      	ldr	r3, [pc, #100]	; (3e8 <aes132c_access_memory+0x90>)
     382:	4798      	blx	r3
     384:	1e04      	subs	r4, r0, #0
				if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS)
     386:	d11a      	bne.n	3be <aes132c_access_memory+0x66>
				if	(word_address >= AES132_IO_ADDR)
     388:	4b18      	ldr	r3, [pc, #96]	; (3ec <aes132c_access_memory+0x94>)
     38a:	9a01      	ldr	r2, [sp, #4]
     38c:	429a      	cmp	r2, r3
     38e:	d904      	bls.n	39a <aes132c_access_memory+0x42>
}
     390:	0020      	movs	r0, r4
     392:	b006      	add	sp, #24
     394:	bc04      	pop	{r2}
     396:	4690      	mov	r8, r2
     398:	bdf0      	pop	{r4, r5, r6, r7, pc}
				aes132c_wait_for_response_ready();
     39a:	4b15      	ldr	r3, [pc, #84]	; (3f0 <aes132c_access_memory+0x98>)
     39c:	4798      	blx	r3
				aes132_lib_return = aes132c_receive_response(sizeof(response_buffer), response_buffer);
     39e:	a905      	add	r1, sp, #20
     3a0:	2004      	movs	r0, #4
     3a2:	4b14      	ldr	r3, [pc, #80]	; (3f4 <aes132c_access_memory+0x9c>)
     3a4:	4798      	blx	r3
     3a6:	1e04      	subs	r4, r0, #0
				if (aes132_lib_return == AES132_FUNCTION_RETCODE_SUCCESS)
     3a8:	d1f2      	bne.n	390 <aes132c_access_memory+0x38>
					return response_buffer[AES132_RESPONSE_INDEX_RETURN_CODE];
     3aa:	ab05      	add	r3, sp, #20
     3ac:	785c      	ldrb	r4, [r3, #1]
     3ae:	e7ef      	b.n	390 <aes132c_access_memory+0x38>
				aes132_lib_return = aes132p_read_memory_physical(count, word_address, data);
     3b0:	9a03      	ldr	r2, [sp, #12]
     3b2:	9901      	ldr	r1, [sp, #4]
     3b4:	9802      	ldr	r0, [sp, #8]
     3b6:	4b10      	ldr	r3, [pc, #64]	; (3f8 <aes132c_access_memory+0xa0>)
     3b8:	4798      	blx	r3
     3ba:	1e04      	subs	r4, r0, #0
				if (aes132_lib_return == AES132_FUNCTION_RETCODE_SUCCESS)
     3bc:	d0e8      	beq.n	390 <aes132c_access_memory+0x38>
     3be:	3d01      	subs	r5, #1
     3c0:	b2ed      	uxtb	r5, r5
		} while (--n_retries_memory_access > 0);
     3c2:	2d00      	cmp	r5, #0
     3c4:	d1d3      	bne.n	36e <aes132c_access_memory+0x16>
		if (--n_retries_resync == 0)
     3c6:	2f00      	cmp	r7, #0
     3c8:	d0e2      	beq.n	390 <aes132c_access_memory+0x38>
		(void) aes132c_resync();
     3ca:	4b0c      	ldr	r3, [pc, #48]	; (3fc <aes132c_access_memory+0xa4>)
     3cc:	4798      	blx	r3
	} while (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS);
     3ce:	2c00      	cmp	r4, #0
     3d0:	d0de      	beq.n	390 <aes132c_access_memory+0x38>
     3d2:	3f01      	subs	r7, #1
     3d4:	b2ff      	uxtb	r7, r7
     3d6:	e7c9      	b.n	36c <aes132c_access_memory+0x14>
		if (--n_retries_resync == 0)
     3d8:	2f00      	cmp	r7, #0
     3da:	d0d9      	beq.n	390 <aes132c_access_memory+0x38>
		(void) aes132c_resync();
     3dc:	4b07      	ldr	r3, [pc, #28]	; (3fc <aes132c_access_memory+0xa4>)
     3de:	4798      	blx	r3
     3e0:	e7f7      	b.n	3d2 <aes132c_access_memory+0x7a>
     3e2:	46c0      	nop			; (mov r8, r8)
     3e4:	00000265 	.word	0x00000265
     3e8:	00000af1 	.word	0x00000af1
     3ec:	0000fdff 	.word	0x0000fdff
     3f0:	0000027d 	.word	0x0000027d
     3f4:	00000295 	.word	0x00000295
     3f8:	00000c49 	.word	0x00000c49
     3fc:	000001c1 	.word	0x000001c1

00000400 <aes132c_send_command>:
{
     400:	b5f0      	push	{r4, r5, r6, r7, lr}
     402:	46ce      	mov	lr, r9
     404:	b500      	push	{lr}
     406:	b082      	sub	sp, #8
     408:	0005      	movs	r5, r0
     40a:	000c      	movs	r4, r1
	uint8_t count = command[AES132_COMMAND_INDEX_COUNT];
     40c:	7807      	ldrb	r7, [r0, #0]
	if ((options & AES132_OPTION_NO_APPEND_CRC) == 0)
     40e:	07cb      	lsls	r3, r1, #31
     410:	d51c      	bpl.n	44c <aes132c_send_command+0x4c>
{
     412:	2602      	movs	r6, #2
		if ((options & AES132_OPTION_NO_STATUS_READ) != 0)
     414:	2302      	movs	r3, #2
     416:	4023      	ands	r3, r4
     418:	4699      	mov	r9, r3
		aes132_lib_return = aes132c_access_memory(count, AES132_IO_ADDR, command,  AES132_WRITE);
     41a:	2300      	movs	r3, #0
     41c:	002a      	movs	r2, r5
     41e:	21fe      	movs	r1, #254	; 0xfe
     420:	0209      	lsls	r1, r1, #8
     422:	0038      	movs	r0, r7
     424:	4c15      	ldr	r4, [pc, #84]	; (47c <aes132c_send_command+0x7c>)
     426:	47a0      	blx	r4
     428:	1e04      	subs	r4, r0, #0
		if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS)
     42a:	d11e      	bne.n	46a <aes132c_send_command+0x6a>
		if ((options & AES132_OPTION_NO_STATUS_READ) != 0)
     42c:	464b      	mov	r3, r9
     42e:	2b00      	cmp	r3, #0
     430:	d11f      	bne.n	472 <aes132c_send_command+0x72>
		aes132_lib_return = aes132c_read_device_status_register(&device_status_register);
     432:	466b      	mov	r3, sp
     434:	1dd8      	adds	r0, r3, #7
     436:	4b12      	ldr	r3, [pc, #72]	; (480 <aes132c_send_command+0x80>)
     438:	4798      	blx	r3
		if (aes132_lib_return == AES132_FUNCTION_RETCODE_SUCCESS) {
     43a:	2800      	cmp	r0, #0
     43c:	d10d      	bne.n	45a <aes132c_send_command+0x5a>
			if ((device_status_register & AES132_CRC_ERROR_BIT) != 0)
     43e:	466b      	mov	r3, sp
     440:	3307      	adds	r3, #7
     442:	781b      	ldrb	r3, [r3, #0]
     444:	06db      	lsls	r3, r3, #27
     446:	d40f      	bmi.n	468 <aes132c_send_command+0x68>
	return aes132_lib_return;
     448:	0004      	movs	r4, r0
     44a:	e012      	b.n	472 <aes132c_send_command+0x72>
		aes132c_calculate_crc(count - AES132_CRC_SIZE, command, &command[count - AES132_CRC_SIZE]);
     44c:	1eb8      	subs	r0, r7, #2
     44e:	182a      	adds	r2, r5, r0
     450:	b2c0      	uxtb	r0, r0
     452:	0029      	movs	r1, r5
     454:	4b0b      	ldr	r3, [pc, #44]	; (484 <aes132c_send_command+0x84>)
     456:	4798      	blx	r3
     458:	e7db      	b.n	412 <aes132c_send_command+0x12>
		else if (aes132_lib_return == AES132_FUNCTION_RETCODE_COMM_FAIL){
     45a:	0005      	movs	r5, r0
     45c:	28f0      	cmp	r0, #240	; 0xf0
     45e:	d008      	beq.n	472 <aes132c_send_command+0x72>
			(void) aes132c_resync();
     460:	4b09      	ldr	r3, [pc, #36]	; (488 <aes132c_send_command+0x88>)
     462:	4798      	blx	r3
		aes132_lib_return = aes132c_read_device_status_register(&device_status_register);
     464:	002c      	movs	r4, r5
			return aes132_lib_return;
     466:	e004      	b.n	472 <aes132c_send_command+0x72>
				aes132_lib_return = AES132_FUNCTION_RETCODE_BAD_CRC_TX;
     468:	24d4      	movs	r4, #212	; 0xd4
     46a:	3e01      	subs	r6, #1
     46c:	b2f6      	uxtb	r6, r6
	} while ((aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) && (--n_retries > 0));
     46e:	2e00      	cmp	r6, #0
     470:	d1d3      	bne.n	41a <aes132c_send_command+0x1a>
}
     472:	0020      	movs	r0, r4
     474:	b002      	add	sp, #8
     476:	bc04      	pop	{r2}
     478:	4691      	mov	r9, r2
     47a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     47c:	00000359 	.word	0x00000359
     480:	000001dd 	.word	0x000001dd
     484:	00000111 	.word	0x00000111
     488:	000001c1 	.word	0x000001c1

0000048c <aes132c_send_and_receive>:
 * \param[out] response pointer to response buffer
 * \param[in] options flags for communication behavior
 * \return status of the operation
 */
uint8_t aes132c_send_and_receive(uint8_t *command, uint8_t size, uint8_t *response, uint8_t options)
{
     48c:	b570      	push	{r4, r5, r6, lr}
     48e:	000c      	movs	r4, r1
     490:	0015      	movs	r5, r2
	uint8_t aes132_lib_return = aes132c_send_command(command, options);
     492:	0019      	movs	r1, r3
     494:	4b04      	ldr	r3, [pc, #16]	; (4a8 <aes132c_send_and_receive+0x1c>)
     496:	4798      	blx	r3
	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS)
     498:	2800      	cmp	r0, #0
     49a:	d000      	beq.n	49e <aes132c_send_and_receive+0x12>
		return aes132_lib_return;

	return aes132c_receive_response(size, response);
}
     49c:	bd70      	pop	{r4, r5, r6, pc}
	return aes132c_receive_response(size, response);
     49e:	0029      	movs	r1, r5
     4a0:	0020      	movs	r0, r4
     4a2:	4b02      	ldr	r3, [pc, #8]	; (4ac <aes132c_send_and_receive+0x20>)
     4a4:	4798      	blx	r3
     4a6:	e7f9      	b.n	49c <aes132c_send_and_receive+0x10>
     4a8:	00000401 	.word	0x00000401
     4ac:	00000295 	.word	0x00000295

000004b0 <aes132m_write_memory>:
 * \param[in] word_address word address
 * \param[in] data pointer to tx data
 * \return status of the operation
 */
uint8_t aes132m_write_memory(uint8_t count, uint16_t word_address, uint8_t *data)
{
     4b0:	b510      	push	{r4, lr}
	return aes132c_access_memory(count, word_address, data,  AES132_WRITE);
     4b2:	2300      	movs	r3, #0
     4b4:	4c01      	ldr	r4, [pc, #4]	; (4bc <aes132m_write_memory+0xc>)
     4b6:	47a0      	blx	r4
}
     4b8:	bd10      	pop	{r4, pc}
     4ba:	46c0      	nop			; (mov r8, r8)
     4bc:	00000359 	.word	0x00000359

000004c0 <aes132m_read_memory>:
 * \param[in] word_address pointer to word address
 * \param[out] data pointer to rx data
 * \return status of the operation
*/
uint8_t aes132m_read_memory(uint8_t size, uint16_t word_address, uint8_t *data)
{
     4c0:	b510      	push	{r4, lr}
	return aes132c_access_memory(size, word_address, data, AES132_READ);
     4c2:	2301      	movs	r3, #1
     4c4:	4c01      	ldr	r4, [pc, #4]	; (4cc <aes132m_read_memory+0xc>)
     4c6:	47a0      	blx	r4
}
     4c8:	bd10      	pop	{r4, pc}
     4ca:	46c0      	nop			; (mov r8, r8)
     4cc:	00000359 	.word	0x00000359

000004d0 <aes132m_execute>:
 */
uint8_t aes132m_execute(uint8_t op_code, uint8_t mode, uint16_t param1, uint16_t param2,
			uint8_t datalen1, uint8_t *data1, uint8_t datalen2, uint8_t *data2,
			uint8_t datalen3, uint8_t *data3, uint8_t datalen4, uint8_t *data4,
			uint8_t *tx_buffer, uint8_t *rx_buffer)
{
     4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     4d2:	46ce      	mov	lr, r9
     4d4:	4647      	mov	r7, r8
     4d6:	b580      	push	{r7, lr}
     4d8:	ac08      	add	r4, sp, #32
     4da:	7824      	ldrb	r4, [r4, #0]
     4dc:	46a0      	mov	r8, r4
     4de:	ac0a      	add	r4, sp, #40	; 0x28
     4e0:	7827      	ldrb	r7, [r4, #0]
     4e2:	ac0c      	add	r4, sp, #48	; 0x30
     4e4:	7826      	ldrb	r6, [r4, #0]
     4e6:	ac0e      	add	r4, sp, #56	; 0x38
     4e8:	7824      	ldrb	r4, [r4, #0]
     4ea:	46a1      	mov	r9, r4
     4ec:	9c10      	ldr	r4, [sp, #64]	; 0x40
	uint8_t *p_buffer;
	uint8_t len;

	// Assemble command.
	len = datalen1 + datalen2 + datalen3 + datalen4 + AES132_COMMAND_SIZE_MIN;
     4ee:	464d      	mov	r5, r9
     4f0:	3509      	adds	r5, #9
     4f2:	1975      	adds	r5, r6, r5
     4f4:	197d      	adds	r5, r7, r5
     4f6:	4445      	add	r5, r8
	p_buffer = tx_buffer;
	*p_buffer++ = len;
     4f8:	7025      	strb	r5, [r4, #0]
	*p_buffer++ = op_code;
     4fa:	7060      	strb	r0, [r4, #1]
	*p_buffer++ = mode;
     4fc:	70a1      	strb	r1, [r4, #2]
	*p_buffer++ = param1 >> 8;
     4fe:	0a11      	lsrs	r1, r2, #8
     500:	70e1      	strb	r1, [r4, #3]
	*p_buffer++ = param1 & 0xFF;
     502:	7122      	strb	r2, [r4, #4]
	*p_buffer++ = param2 >> 8;
     504:	0a1a      	lsrs	r2, r3, #8
     506:	7162      	strb	r2, [r4, #5]
	*p_buffer++ = param2 & 0xFF;
     508:	1de5      	adds	r5, r4, #7
     50a:	71a3      	strb	r3, [r4, #6]

	if (datalen1 > 0) {
     50c:	4643      	mov	r3, r8
     50e:	2b00      	cmp	r3, #0
     510:	d110      	bne.n	534 <aes132m_execute+0x64>
		memcpy(p_buffer, data1, datalen1);
		p_buffer += datalen1;
	}
	if (datalen2 > 0) {
     512:	2f00      	cmp	r7, #0
     514:	d115      	bne.n	542 <aes132m_execute+0x72>
		memcpy(p_buffer, data2, datalen2);
		p_buffer += datalen2;
	}
	if (datalen3 > 0) {
     516:	2e00      	cmp	r6, #0
     518:	d11a      	bne.n	550 <aes132m_execute+0x80>
		memcpy(p_buffer, data3, datalen3);
		p_buffer += datalen3;
	}
	if (datalen4 > 0) {
     51a:	464b      	mov	r3, r9
     51c:	2b00      	cmp	r3, #0
     51e:	d11e      	bne.n	55e <aes132m_execute+0x8e>
		memcpy(p_buffer, data4, datalen4);
		p_buffer += datalen4;
	}

	// Send command and receive response.
	return aes132c_send_and_receive(&tx_buffer[0], AES132_RESPONSE_SIZE_MAX,
     520:	2300      	movs	r3, #0
     522:	9a11      	ldr	r2, [sp, #68]	; 0x44
     524:	2134      	movs	r1, #52	; 0x34
     526:	0020      	movs	r0, r4
     528:	4c10      	ldr	r4, [pc, #64]	; (56c <aes132m_execute+0x9c>)
     52a:	47a0      	blx	r4
				&rx_buffer[0], AES132_OPTION_DEFAULT);
     52c:	bc0c      	pop	{r2, r3}
     52e:	4690      	mov	r8, r2
     530:	4699      	mov	r9, r3
     532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(p_buffer, data1, datalen1);
     534:	4642      	mov	r2, r8
     536:	9909      	ldr	r1, [sp, #36]	; 0x24
     538:	0028      	movs	r0, r5
     53a:	4b0d      	ldr	r3, [pc, #52]	; (570 <aes132m_execute+0xa0>)
     53c:	4798      	blx	r3
		p_buffer += datalen1;
     53e:	4445      	add	r5, r8
     540:	e7e7      	b.n	512 <aes132m_execute+0x42>
		memcpy(p_buffer, data2, datalen2);
     542:	003a      	movs	r2, r7
     544:	990b      	ldr	r1, [sp, #44]	; 0x2c
     546:	0028      	movs	r0, r5
     548:	4b09      	ldr	r3, [pc, #36]	; (570 <aes132m_execute+0xa0>)
     54a:	4798      	blx	r3
		p_buffer += datalen2;
     54c:	19ed      	adds	r5, r5, r7
     54e:	e7e2      	b.n	516 <aes132m_execute+0x46>
		memcpy(p_buffer, data3, datalen3);
     550:	0032      	movs	r2, r6
     552:	990d      	ldr	r1, [sp, #52]	; 0x34
     554:	0028      	movs	r0, r5
     556:	4b06      	ldr	r3, [pc, #24]	; (570 <aes132m_execute+0xa0>)
     558:	4798      	blx	r3
		p_buffer += datalen3;
     55a:	19ad      	adds	r5, r5, r6
     55c:	e7dd      	b.n	51a <aes132m_execute+0x4a>
		memcpy(p_buffer, data4, datalen4);
     55e:	464a      	mov	r2, r9
     560:	990f      	ldr	r1, [sp, #60]	; 0x3c
     562:	0028      	movs	r0, r5
     564:	4b02      	ldr	r3, [pc, #8]	; (570 <aes132m_execute+0xa0>)
     566:	4798      	blx	r3
     568:	e7da      	b.n	520 <aes132m_execute+0x50>
     56a:	46c0      	nop			; (mov r8, r8)
     56c:	0000048d 	.word	0x0000048d
     570:	0000272f 	.word	0x0000272f

00000574 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     574:	b570      	push	{r4, r5, r6, lr}
     576:	b082      	sub	sp, #8
     578:	0005      	movs	r5, r0
     57a:	000e      	movs	r6, r1
	uint16_t temp = 0;
     57c:	2200      	movs	r2, #0
     57e:	466b      	mov	r3, sp
     580:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     582:	4c06      	ldr	r4, [pc, #24]	; (59c <usart_serial_getchar+0x28>)
     584:	466b      	mov	r3, sp
     586:	1d99      	adds	r1, r3, #6
     588:	0028      	movs	r0, r5
     58a:	47a0      	blx	r4
     58c:	2800      	cmp	r0, #0
     58e:	d1f9      	bne.n	584 <usart_serial_getchar+0x10>

	*c = temp;
     590:	466b      	mov	r3, sp
     592:	3306      	adds	r3, #6
     594:	881b      	ldrh	r3, [r3, #0]
     596:	7033      	strb	r3, [r6, #0]
}
     598:	b002      	add	sp, #8
     59a:	bd70      	pop	{r4, r5, r6, pc}
     59c:	00001da7 	.word	0x00001da7

000005a0 <usart_serial_putchar>:
{
     5a0:	b570      	push	{r4, r5, r6, lr}
     5a2:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     5a4:	b28c      	uxth	r4, r1
     5a6:	4e03      	ldr	r6, [pc, #12]	; (5b4 <usart_serial_putchar+0x14>)
     5a8:	0021      	movs	r1, r4
     5aa:	0028      	movs	r0, r5
     5ac:	47b0      	blx	r6
     5ae:	2800      	cmp	r0, #0
     5b0:	d1fa      	bne.n	5a8 <usart_serial_putchar+0x8>
}
     5b2:	bd70      	pop	{r4, r5, r6, pc}
     5b4:	00001d7d 	.word	0x00001d7d

000005b8 <hex_to_nibble>:
 * \param data is the ASCII hex value to be converted
 *
 * \return data is the nibble value
**/
uint8_t hex_to_nibble(uint8_t data)
{
     5b8:	0002      	movs	r2, r0
	if ((data >= '0') && (data <= '9' )) {
     5ba:	3830      	subs	r0, #48	; 0x30
     5bc:	b2c0      	uxtb	r0, r0
     5be:	2809      	cmp	r0, #9
     5c0:	d90d      	bls.n	5de <hex_to_nibble+0x26>
		// Numbers (0-9)
		data -= '0';
	} else if ((data >= 'A') && (data <= 'F' )) {
     5c2:	0013      	movs	r3, r2
     5c4:	3b41      	subs	r3, #65	; 0x41
     5c6:	2b05      	cmp	r3, #5
     5c8:	d907      	bls.n	5da <hex_to_nibble+0x22>
	} else if ((data >= 'a') && (data <= 'f' )) {
		// Lowercase (a-f)
		data = data -'a' + 10;
	} else {
		// Illegal
		data = 0;
     5ca:	2000      	movs	r0, #0
	} else if ((data >= 'a') && (data <= 'f' )) {
     5cc:	0013      	movs	r3, r2
     5ce:	3b61      	subs	r3, #97	; 0x61
     5d0:	2b05      	cmp	r3, #5
     5d2:	d804      	bhi.n	5de <hex_to_nibble+0x26>
		data = data -'a' + 10;
     5d4:	3a57      	subs	r2, #87	; 0x57
     5d6:	b2d0      	uxtb	r0, r2
     5d8:	e001      	b.n	5de <hex_to_nibble+0x26>
		data = data -'A' + 10;
     5da:	3a37      	subs	r2, #55	; 0x37
     5dc:	b2d0      	uxtb	r0, r2
	}
	
	return data;
}
     5de:	4770      	bx	lr

000005e0 <printf_puthex_array>:
 * \param buffer is array which will be printed to UART
 *
 * \param ucLength is array size
**/
void printf_puthex_array(uint8_t* data_buffer, uint8_t length)
{
     5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t i_data;
	
	for (i_data = 0; i_data < length; i_data++) {
     5e2:	2900      	cmp	r1, #0
     5e4:	d00e      	beq.n	604 <printf_puthex_array+0x24>
     5e6:	0004      	movs	r4, r0
     5e8:	3901      	subs	r1, #1
     5ea:	b2cd      	uxtb	r5, r1
     5ec:	3501      	adds	r5, #1
     5ee:	1945      	adds	r5, r0, r5
		printf("%.2X",*data_buffer++);
     5f0:	4e05      	ldr	r6, [pc, #20]	; (608 <printf_puthex_array+0x28>)
		printf(" ");
     5f2:	4f06      	ldr	r7, [pc, #24]	; (60c <printf_puthex_array+0x2c>)
		printf("%.2X",*data_buffer++);
     5f4:	7821      	ldrb	r1, [r4, #0]
     5f6:	4806      	ldr	r0, [pc, #24]	; (610 <printf_puthex_array+0x30>)
     5f8:	47b0      	blx	r6
		printf(" ");
     5fa:	2020      	movs	r0, #32
     5fc:	47b8      	blx	r7
     5fe:	3401      	adds	r4, #1
	for (i_data = 0; i_data < length; i_data++) {
     600:	42ac      	cmp	r4, r5
     602:	d1f7      	bne.n	5f4 <printf_puthex_array+0x14>
	}
}
     604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     606:	46c0      	nop			; (mov r8, r8)
     608:	00002751 	.word	0x00002751
     60c:	00002785 	.word	0x00002785
     610:	0000461c 	.word	0x0000461c

00000614 <parse_command>:
 *
 *  \param serial_data Data input
 *  \return 1 on complete parsing, 0 otherwise
 */
uint8_t parse_command(uint8_t serial_data)
{
     614:	b510      	push	{r4, lr}
	static unsigned char parser_state, nibble_value;
	
	switch (parser_state) {
     616:	4b2b      	ldr	r3, [pc, #172]	; (6c4 <parse_command+0xb0>)
     618:	781b      	ldrb	r3, [r3, #0]
     61a:	2b01      	cmp	r3, #1
     61c:	d01a      	beq.n	654 <parse_command+0x40>
     61e:	2b00      	cmp	r3, #0
     620:	d008      	beq.n	634 <parse_command+0x20>
     622:	2b02      	cmp	r3, #2
     624:	d01f      	beq.n	666 <parse_command+0x52>
     626:	2b03      	cmp	r3, #3
     628:	d035      	beq.n	696 <parse_command+0x82>
			} else {
				parser_state = 0;
			}
			break;
		default:
			parser_state = 0;
     62a:	2200      	movs	r2, #0
     62c:	4b25      	ldr	r3, [pc, #148]	; (6c4 <parse_command+0xb0>)
     62e:	701a      	strb	r2, [r3, #0]
	} // switch (parser_state)
	
	return 0;
     630:	2000      	movs	r0, #0
     632:	e017      	b.n	664 <parse_command+0x50>
			g_packet_block_index = 0;
     634:	2200      	movs	r2, #0
     636:	4b24      	ldr	r3, [pc, #144]	; (6c8 <parse_command+0xb4>)
     638:	801a      	strh	r2, [r3, #0]
			if (serial_data == '(') {
     63a:	2828      	cmp	r0, #40	; 0x28
     63c:	d005      	beq.n	64a <parse_command+0x36>
				printf("Input :%c",serial_data);
     63e:	0001      	movs	r1, r0
     640:	4822      	ldr	r0, [pc, #136]	; (6cc <parse_command+0xb8>)
     642:	4b23      	ldr	r3, [pc, #140]	; (6d0 <parse_command+0xbc>)
     644:	4798      	blx	r3
	return 0;
     646:	2000      	movs	r0, #0
     648:	e00c      	b.n	664 <parse_command+0x50>
				parser_state = 1;
     64a:	3201      	adds	r2, #1
     64c:	4b1d      	ldr	r3, [pc, #116]	; (6c4 <parse_command+0xb0>)
     64e:	701a      	strb	r2, [r3, #0]
	return 0;
     650:	2000      	movs	r0, #0
     652:	e007      	b.n	664 <parse_command+0x50>
			nibble_value = hex_to_nibble(serial_data);
     654:	4b1f      	ldr	r3, [pc, #124]	; (6d4 <parse_command+0xc0>)
     656:	4798      	blx	r3
     658:	4b1f      	ldr	r3, [pc, #124]	; (6d8 <parse_command+0xc4>)
     65a:	7018      	strb	r0, [r3, #0]
			parser_state = 2;
     65c:	2202      	movs	r2, #2
     65e:	4b19      	ldr	r3, [pc, #100]	; (6c4 <parse_command+0xb0>)
     660:	701a      	strb	r2, [r3, #0]
	return 0;
     662:	2000      	movs	r0, #0
}
     664:	bd10      	pop	{r4, pc}
			g_packet_block[g_packet_block_index] = (nibble_value << 4) + hex_to_nibble(serial_data);
     666:	4b18      	ldr	r3, [pc, #96]	; (6c8 <parse_command+0xb4>)
     668:	881c      	ldrh	r4, [r3, #0]
     66a:	4b1a      	ldr	r3, [pc, #104]	; (6d4 <parse_command+0xc0>)
     66c:	4798      	blx	r3
     66e:	4b1a      	ldr	r3, [pc, #104]	; (6d8 <parse_command+0xc4>)
     670:	781b      	ldrb	r3, [r3, #0]
     672:	011b      	lsls	r3, r3, #4
     674:	18c0      	adds	r0, r0, r3
     676:	4b19      	ldr	r3, [pc, #100]	; (6dc <parse_command+0xc8>)
     678:	5518      	strb	r0, [r3, r4]
			if (g_packet_block_index < PACKET_BLOCK_SIZE_MAX - 1) {
     67a:	2cfe      	cmp	r4, #254	; 0xfe
     67c:	d807      	bhi.n	68e <parse_command+0x7a>
				g_packet_block_index++;
     67e:	3401      	adds	r4, #1
     680:	4b11      	ldr	r3, [pc, #68]	; (6c8 <parse_command+0xb4>)
     682:	801c      	strh	r4, [r3, #0]
			parser_state = 3;
     684:	2203      	movs	r2, #3
     686:	4b0f      	ldr	r3, [pc, #60]	; (6c4 <parse_command+0xb0>)
     688:	701a      	strb	r2, [r3, #0]
	return 0;
     68a:	2000      	movs	r0, #0
			break;
     68c:	e7ea      	b.n	664 <parse_command+0x50>
				printf("Error buffer overflow");
     68e:	4814      	ldr	r0, [pc, #80]	; (6e0 <parse_command+0xcc>)
     690:	4b0f      	ldr	r3, [pc, #60]	; (6d0 <parse_command+0xbc>)
     692:	4798      	blx	r3
     694:	e7f6      	b.n	684 <parse_command+0x70>
			if (serial_data == ' ') {
     696:	2820      	cmp	r0, #32
     698:	d006      	beq.n	6a8 <parse_command+0x94>
			} else if (serial_data == ')') {
     69a:	2829      	cmp	r0, #41	; 0x29
     69c:	d009      	beq.n	6b2 <parse_command+0x9e>
				parser_state = 0;
     69e:	2200      	movs	r2, #0
     6a0:	4b08      	ldr	r3, [pc, #32]	; (6c4 <parse_command+0xb0>)
     6a2:	701a      	strb	r2, [r3, #0]
	return 0;
     6a4:	2000      	movs	r0, #0
     6a6:	e7dd      	b.n	664 <parse_command+0x50>
				parser_state = 1;
     6a8:	2201      	movs	r2, #1
     6aa:	4b06      	ldr	r3, [pc, #24]	; (6c4 <parse_command+0xb0>)
     6ac:	701a      	strb	r2, [r3, #0]
	return 0;
     6ae:	2000      	movs	r0, #0
     6b0:	e7d8      	b.n	664 <parse_command+0x50>
				parser_state = 0;
     6b2:	2200      	movs	r2, #0
     6b4:	4b03      	ldr	r3, [pc, #12]	; (6c4 <parse_command+0xb0>)
     6b6:	701a      	strb	r2, [r3, #0]
				printf("\n");
     6b8:	381f      	subs	r0, #31
     6ba:	4b0a      	ldr	r3, [pc, #40]	; (6e4 <parse_command+0xd0>)
     6bc:	4798      	blx	r3
				return 1;
     6be:	2001      	movs	r0, #1
     6c0:	e7d0      	b.n	664 <parse_command+0x50>
     6c2:	46c0      	nop			; (mov r8, r8)
     6c4:	20000205 	.word	0x20000205
     6c8:	20000338 	.word	0x20000338
     6cc:	000045f8 	.word	0x000045f8
     6d0:	00002751 	.word	0x00002751
     6d4:	000005b9 	.word	0x000005b9
     6d8:	20000204 	.word	0x20000204
     6dc:	20000238 	.word	0x20000238
     6e0:	00004604 	.word	0x00004604
     6e4:	00002785 	.word	0x00002785

000006e8 <write_memory_test>:



// Write memory test
uint8_t write_memory_test(void)
{
     6e8:	b510      	push	{r4, lr}
	// -------------------- Write memory. -----------------------------------
	// Don't put this in an infinite loop. Otherwise the non-volatile memory will wear out.
	aes132_lib_return = aes132m_write_memory(sizeof(tx_buffer_write), word_address, tx_buffer_write);
     6ea:	4b0e      	ldr	r3, [pc, #56]	; (724 <write_memory_test+0x3c>)
     6ec:	8819      	ldrh	r1, [r3, #0]
     6ee:	4a0e      	ldr	r2, [pc, #56]	; (728 <write_memory_test+0x40>)
     6f0:	2004      	movs	r0, #4
     6f2:	4b0e      	ldr	r3, [pc, #56]	; (72c <write_memory_test+0x44>)
     6f4:	4798      	blx	r3
     6f6:	4b0e      	ldr	r3, [pc, #56]	; (730 <write_memory_test+0x48>)
     6f8:	7018      	strb	r0, [r3, #0]
	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
     6fa:	2800      	cmp	r0, #0
     6fc:	d005      	beq.n	70a <write_memory_test+0x22>
		printf("Write memory failed!\r\n");
     6fe:	480d      	ldr	r0, [pc, #52]	; (734 <write_memory_test+0x4c>)
     700:	4b0d      	ldr	r3, [pc, #52]	; (738 <write_memory_test+0x50>)
     702:	4798      	blx	r3
		return aes132_lib_return;
     704:	4b0a      	ldr	r3, [pc, #40]	; (730 <write_memory_test+0x48>)
     706:	7818      	ldrb	r0, [r3, #0]
	}
	printf("Write memory success!\r\n");
	printf("Data: ");
	printf_puthex_array(tx_buffer_write,sizeof(tx_buffer_write));
	printf("\r\n");
}
     708:	bd10      	pop	{r4, pc}
	printf("Write memory success!\r\n");
     70a:	480c      	ldr	r0, [pc, #48]	; (73c <write_memory_test+0x54>)
     70c:	4c0a      	ldr	r4, [pc, #40]	; (738 <write_memory_test+0x50>)
     70e:	47a0      	blx	r4
	printf("Data: ");
     710:	480b      	ldr	r0, [pc, #44]	; (740 <write_memory_test+0x58>)
     712:	4b0c      	ldr	r3, [pc, #48]	; (744 <write_memory_test+0x5c>)
     714:	4798      	blx	r3
	printf_puthex_array(tx_buffer_write,sizeof(tx_buffer_write));
     716:	2104      	movs	r1, #4
     718:	4803      	ldr	r0, [pc, #12]	; (728 <write_memory_test+0x40>)
     71a:	4b0b      	ldr	r3, [pc, #44]	; (748 <write_memory_test+0x60>)
     71c:	4798      	blx	r3
	printf("\r\n");
     71e:	480b      	ldr	r0, [pc, #44]	; (74c <write_memory_test+0x64>)
     720:	47a0      	blx	r4
}
     722:	e7f1      	b.n	708 <write_memory_test+0x20>
     724:	20000206 	.word	0x20000206
     728:	20000004 	.word	0x20000004
     72c:	000004b1 	.word	0x000004b1
     730:	200003b5 	.word	0x200003b5
     734:	00004688 	.word	0x00004688
     738:	0000286d 	.word	0x0000286d
     73c:	000046a0 	.word	0x000046a0
     740:	000046b8 	.word	0x000046b8
     744:	00002751 	.word	0x00002751
     748:	000005e1 	.word	0x000005e1
     74c:	0000469c 	.word	0x0000469c

00000750 <read_memory_test>:

// Read memory test
uint8_t read_memory_test(void)
{
     750:	b570      	push	{r4, r5, r6, lr}
	// -------------------- Read memory. -----------------------------------
	aes132_lib_return = aes132m_read_memory(rx_byte_count, word_address, rx_buffer);
     752:	4b19      	ldr	r3, [pc, #100]	; (7b8 <read_memory_test+0x68>)
     754:	8819      	ldrh	r1, [r3, #0]
     756:	4b19      	ldr	r3, [pc, #100]	; (7bc <read_memory_test+0x6c>)
     758:	7818      	ldrb	r0, [r3, #0]
     75a:	4a19      	ldr	r2, [pc, #100]	; (7c0 <read_memory_test+0x70>)
     75c:	4b19      	ldr	r3, [pc, #100]	; (7c4 <read_memory_test+0x74>)
     75e:	4798      	blx	r3
     760:	4b19      	ldr	r3, [pc, #100]	; (7c8 <read_memory_test+0x78>)
     762:	7018      	strb	r0, [r3, #0]
	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
     764:	2800      	cmp	r0, #0
     766:	d11c      	bne.n	7a2 <read_memory_test+0x52>
		printf("Read memory failed!\r\n");
		return aes132_lib_return;
	}
	printf("Read memory success!\r\n");
     768:	4818      	ldr	r0, [pc, #96]	; (7cc <read_memory_test+0x7c>)
     76a:	4d19      	ldr	r5, [pc, #100]	; (7d0 <read_memory_test+0x80>)
     76c:	47a8      	blx	r5
	printf("Data: ");
     76e:	4819      	ldr	r0, [pc, #100]	; (7d4 <read_memory_test+0x84>)
     770:	4b19      	ldr	r3, [pc, #100]	; (7d8 <read_memory_test+0x88>)
     772:	4798      	blx	r3
	printf_puthex_array(rx_buffer,sizeof(tx_buffer_write));
     774:	4c12      	ldr	r4, [pc, #72]	; (7c0 <read_memory_test+0x70>)
     776:	2104      	movs	r1, #4
     778:	0020      	movs	r0, r4
     77a:	4b18      	ldr	r3, [pc, #96]	; (7dc <read_memory_test+0x8c>)
     77c:	4798      	blx	r3
	printf("\r\n");
     77e:	4818      	ldr	r0, [pc, #96]	; (7e0 <read_memory_test+0x90>)
     780:	47a8      	blx	r5
	// -------------------- Compare written with read data. -----------------------------------
	aes132_lib_return =  memcmp(tx_buffer_write, rx_buffer, sizeof(tx_buffer_write));
     782:	2204      	movs	r2, #4
     784:	0021      	movs	r1, r4
     786:	4817      	ldr	r0, [pc, #92]	; (7e4 <read_memory_test+0x94>)
     788:	4b17      	ldr	r3, [pc, #92]	; (7e8 <read_memory_test+0x98>)
     78a:	4798      	blx	r3
     78c:	b2c0      	uxtb	r0, r0
     78e:	4b0e      	ldr	r3, [pc, #56]	; (7c8 <read_memory_test+0x78>)
     790:	7018      	strb	r0, [r3, #0]
	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
     792:	2800      	cmp	r0, #0
     794:	d00b      	beq.n	7ae <read_memory_test+0x5e>
		printf("Compare Memory mismatch!\r\n");
     796:	4815      	ldr	r0, [pc, #84]	; (7ec <read_memory_test+0x9c>)
     798:	4b0d      	ldr	r3, [pc, #52]	; (7d0 <read_memory_test+0x80>)
     79a:	4798      	blx	r3
		return aes132_lib_return;
     79c:	4b0a      	ldr	r3, [pc, #40]	; (7c8 <read_memory_test+0x78>)
     79e:	7818      	ldrb	r0, [r3, #0]
     7a0:	e004      	b.n	7ac <read_memory_test+0x5c>
		printf("Read memory failed!\r\n");
     7a2:	4813      	ldr	r0, [pc, #76]	; (7f0 <read_memory_test+0xa0>)
     7a4:	4b0a      	ldr	r3, [pc, #40]	; (7d0 <read_memory_test+0x80>)
     7a6:	4798      	blx	r3
		return aes132_lib_return;
     7a8:	4b07      	ldr	r3, [pc, #28]	; (7c8 <read_memory_test+0x78>)
     7aa:	7818      	ldrb	r0, [r3, #0]
	}
	printf("Compare Memory match!\r\n");
}
     7ac:	bd70      	pop	{r4, r5, r6, pc}
	printf("Compare Memory match!\r\n");
     7ae:	4811      	ldr	r0, [pc, #68]	; (7f4 <read_memory_test+0xa4>)
     7b0:	4b07      	ldr	r3, [pc, #28]	; (7d0 <read_memory_test+0x80>)
     7b2:	4798      	blx	r3
}
     7b4:	e7fa      	b.n	7ac <read_memory_test+0x5c>
     7b6:	46c0      	nop			; (mov r8, r8)
     7b8:	20000206 	.word	0x20000206
     7bc:	20000000 	.word	0x20000000
     7c0:	2000033c 	.word	0x2000033c
     7c4:	000004c1 	.word	0x000004c1
     7c8:	200003b5 	.word	0x200003b5
     7cc:	0000463c 	.word	0x0000463c
     7d0:	0000286d 	.word	0x0000286d
     7d4:	000046b8 	.word	0x000046b8
     7d8:	00002751 	.word	0x00002751
     7dc:	000005e1 	.word	0x000005e1
     7e0:	0000469c 	.word	0x0000469c
     7e4:	20000004 	.word	0x20000004
     7e8:	00002711 	.word	0x00002711
     7ec:	00004654 	.word	0x00004654
     7f0:	00004624 	.word	0x00004624
     7f4:	00004670 	.word	0x00004670

000007f8 <block_read_test>:

// Send a BlockRead command
uint8_t block_read_test(void)
{
     7f8:	b510      	push	{r4, lr}
     7fa:	b08a      	sub	sp, #40	; 0x28
	// ------- Send a BlockRead command and receive its response. -----------------------------
	aes132_lib_return = aes132m_execute(AES132_BLOCK_READ, 0, word_address, rx_byte_count,
     7fc:	4b1f      	ldr	r3, [pc, #124]	; (87c <block_read_test+0x84>)
     7fe:	881b      	ldrh	r3, [r3, #0]
     800:	4a1f      	ldr	r2, [pc, #124]	; (880 <block_read_test+0x88>)
     802:	8812      	ldrh	r2, [r2, #0]
     804:	491f      	ldr	r1, [pc, #124]	; (884 <block_read_test+0x8c>)
     806:	9109      	str	r1, [sp, #36]	; 0x24
     808:	491f      	ldr	r1, [pc, #124]	; (888 <block_read_test+0x90>)
     80a:	9108      	str	r1, [sp, #32]
     80c:	2100      	movs	r1, #0
     80e:	9107      	str	r1, [sp, #28]
     810:	9106      	str	r1, [sp, #24]
     812:	9105      	str	r1, [sp, #20]
     814:	9104      	str	r1, [sp, #16]
     816:	9103      	str	r1, [sp, #12]
     818:	9102      	str	r1, [sp, #8]
     81a:	9101      	str	r1, [sp, #4]
     81c:	9100      	str	r1, [sp, #0]
     81e:	2010      	movs	r0, #16
     820:	4c1a      	ldr	r4, [pc, #104]	; (88c <block_read_test+0x94>)
     822:	47a0      	blx	r4
     824:	4b1a      	ldr	r3, [pc, #104]	; (890 <block_read_test+0x98>)
     826:	7018      	strb	r0, [r3, #0]
	0, NULL, 0, NULL, 0, NULL, 0, NULL, tx_buffer, rx_buffer);
	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
     828:	2800      	cmp	r0, #0
     82a:	d11b      	bne.n	864 <block_read_test+0x6c>
		printf("Block Read memory failed!\r\n");
		return aes132_lib_return;
	}
	printf("Block Read memory success!\r\n");
     82c:	4819      	ldr	r0, [pc, #100]	; (894 <block_read_test+0x9c>)
     82e:	4b1a      	ldr	r3, [pc, #104]	; (898 <block_read_test+0xa0>)
     830:	4798      	blx	r3
	printf("Data: ");
     832:	481a      	ldr	r0, [pc, #104]	; (89c <block_read_test+0xa4>)
     834:	4b1a      	ldr	r3, [pc, #104]	; (8a0 <block_read_test+0xa8>)
     836:	4798      	blx	r3
	printf_puthex_array(&rx_buffer[AES132_RESPONSE_INDEX_DATA],rx_byte_count);
     838:	4b10      	ldr	r3, [pc, #64]	; (87c <block_read_test+0x84>)
     83a:	7819      	ldrb	r1, [r3, #0]
     83c:	4c19      	ldr	r4, [pc, #100]	; (8a4 <block_read_test+0xac>)
     83e:	0020      	movs	r0, r4
     840:	4b19      	ldr	r3, [pc, #100]	; (8a8 <block_read_test+0xb0>)
     842:	4798      	blx	r3
	
	// -------------------- Compare written with read data. -----------------------------------
	aes132_lib_return =  memcmp(tx_buffer_write, &rx_buffer[AES132_RESPONSE_INDEX_DATA], sizeof(tx_buffer_write));
     844:	2204      	movs	r2, #4
     846:	0021      	movs	r1, r4
     848:	4818      	ldr	r0, [pc, #96]	; (8ac <block_read_test+0xb4>)
     84a:	4b19      	ldr	r3, [pc, #100]	; (8b0 <block_read_test+0xb8>)
     84c:	4798      	blx	r3
     84e:	b2c0      	uxtb	r0, r0
     850:	4b0f      	ldr	r3, [pc, #60]	; (890 <block_read_test+0x98>)
     852:	7018      	strb	r0, [r3, #0]
	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
     854:	2800      	cmp	r0, #0
     856:	d00c      	beq.n	872 <block_read_test+0x7a>
		printf("Compare Memory mismatch!\r\n");
     858:	4816      	ldr	r0, [pc, #88]	; (8b4 <block_read_test+0xbc>)
     85a:	4b0f      	ldr	r3, [pc, #60]	; (898 <block_read_test+0xa0>)
     85c:	4798      	blx	r3
		return aes132_lib_return;
     85e:	4b0c      	ldr	r3, [pc, #48]	; (890 <block_read_test+0x98>)
     860:	7818      	ldrb	r0, [r3, #0]
     862:	e004      	b.n	86e <block_read_test+0x76>
		printf("Block Read memory failed!\r\n");
     864:	4814      	ldr	r0, [pc, #80]	; (8b8 <block_read_test+0xc0>)
     866:	4b0c      	ldr	r3, [pc, #48]	; (898 <block_read_test+0xa0>)
     868:	4798      	blx	r3
		return aes132_lib_return;
     86a:	4b09      	ldr	r3, [pc, #36]	; (890 <block_read_test+0x98>)
     86c:	7818      	ldrb	r0, [r3, #0]
	}
	printf("Compare Memory match!\r\n");
}
     86e:	b00a      	add	sp, #40	; 0x28
     870:	bd10      	pop	{r4, pc}
	printf("Compare Memory match!\r\n");
     872:	4812      	ldr	r0, [pc, #72]	; (8bc <block_read_test+0xc4>)
     874:	4b08      	ldr	r3, [pc, #32]	; (898 <block_read_test+0xa0>)
     876:	4798      	blx	r3
}
     878:	e7f9      	b.n	86e <block_read_test+0x76>
     87a:	46c0      	nop			; (mov r8, r8)
     87c:	20000000 	.word	0x20000000
     880:	20000206 	.word	0x20000206
     884:	2000033c 	.word	0x2000033c
     888:	20000360 	.word	0x20000360
     88c:	000004d1 	.word	0x000004d1
     890:	200003b5 	.word	0x200003b5
     894:	000045c0 	.word	0x000045c0
     898:	0000286d 	.word	0x0000286d
     89c:	000046b8 	.word	0x000046b8
     8a0:	00002751 	.word	0x00002751
     8a4:	2000033e 	.word	0x2000033e
     8a8:	000005e1 	.word	0x000005e1
     8ac:	20000004 	.word	0x20000004
     8b0:	00002711 	.word	0x00002711
     8b4:	00004654 	.word	0x00004654
     8b8:	000045a4 	.word	0x000045a4
     8bc:	00004670 	.word	0x00004670

000008c0 <aes132app_single_execute>:


void aes132app_single_execute(void)
{
     8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
     8c2:	b08b      	sub	sp, #44	; 0x2c
	uint8_t  ret_code = 0xFF;

	// 4 bytes Opcode, Param1, Param2
	op_code  =  *p_packet_block++;
	mode	 =	*p_packet_block++;
	param1   = (*p_packet_block++ << 8);
     8c4:	4c1f      	ldr	r4, [pc, #124]	; (944 <aes132app_single_execute+0x84>)
     8c6:	78a2      	ldrb	r2, [r4, #2]
     8c8:	0212      	lsls	r2, r2, #8
	param1  |= (*p_packet_block++);
	param2   = (*p_packet_block++ << 8);
     8ca:	7923      	ldrb	r3, [r4, #4]
     8cc:	021b      	lsls	r3, r3, #8
	param2  |= (*p_packet_block++);
     8ce:	7961      	ldrb	r1, [r4, #5]
	// The rest is included as Data1
	datalen1 = g_packet_block_index - 6;
	data1    = p_packet_block;
	
	// Execute
	ret_code = aes132m_execute(op_code,mode, param1, param2,
     8d0:	430b      	orrs	r3, r1
	param1  |= (*p_packet_block++);
     8d2:	78e1      	ldrb	r1, [r4, #3]
	ret_code = aes132m_execute(op_code,mode, param1, param2,
     8d4:	430a      	orrs	r2, r1
     8d6:	7861      	ldrb	r1, [r4, #1]
     8d8:	7820      	ldrb	r0, [r4, #0]
     8da:	4d1b      	ldr	r5, [pc, #108]	; (948 <aes132app_single_execute+0x88>)
     8dc:	9509      	str	r5, [sp, #36]	; 0x24
     8de:	4e1b      	ldr	r6, [pc, #108]	; (94c <aes132app_single_execute+0x8c>)
     8e0:	9608      	str	r6, [sp, #32]
     8e2:	2500      	movs	r5, #0
     8e4:	9507      	str	r5, [sp, #28]
     8e6:	9506      	str	r5, [sp, #24]
     8e8:	9505      	str	r5, [sp, #20]
     8ea:	9504      	str	r5, [sp, #16]
     8ec:	9503      	str	r5, [sp, #12]
     8ee:	9502      	str	r5, [sp, #8]
     8f0:	3406      	adds	r4, #6
     8f2:	9401      	str	r4, [sp, #4]
	datalen1 = g_packet_block_index - 6;
     8f4:	4c16      	ldr	r4, [pc, #88]	; (950 <aes132app_single_execute+0x90>)
     8f6:	8824      	ldrh	r4, [r4, #0]
     8f8:	3c06      	subs	r4, #6
	ret_code = aes132m_execute(op_code,mode, param1, param2,
     8fa:	b2e4      	uxtb	r4, r4
     8fc:	9400      	str	r4, [sp, #0]
     8fe:	4c15      	ldr	r4, [pc, #84]	; (954 <aes132app_single_execute+0x94>)
     900:	47a0      	blx	r4
     902:	0005      	movs	r5, r0
	datalen1, data1, datalen2, data2, datalen3, data3,
	datalen4, data4, tx_buffer, rx_buffer);
	printf("\n");
     904:	200a      	movs	r0, #10
     906:	4c14      	ldr	r4, [pc, #80]	; (958 <aes132app_single_execute+0x98>)
     908:	47a0      	blx	r4
	printf("TX buffer = 0x");
     90a:	4814      	ldr	r0, [pc, #80]	; (95c <aes132app_single_execute+0x9c>)
     90c:	4b14      	ldr	r3, [pc, #80]	; (960 <aes132app_single_execute+0xa0>)
     90e:	4798      	blx	r3
	printf_puthex_array(tx_buffer, tx_buffer[0]);
     910:	7831      	ldrb	r1, [r6, #0]
     912:	0030      	movs	r0, r6
     914:	4b13      	ldr	r3, [pc, #76]	; (964 <aes132app_single_execute+0xa4>)
     916:	4798      	blx	r3
	printf("\n");
     918:	200a      	movs	r0, #10
     91a:	47a0      	blx	r4
	if(ret_code == AES132_FUNCTION_RETCODE_SUCCESS){
     91c:	2d00      	cmp	r5, #0
     91e:	d005      	beq.n	92c <aes132app_single_execute+0x6c>
		printf("RX buffer = 0x");
		printf_puthex_array(rx_buffer, rx_buffer[0]);
		printf("\n");
	}else
		printf("Failed! ret_code = 0x%.2X\n", ret_code);
     920:	0029      	movs	r1, r5
     922:	4811      	ldr	r0, [pc, #68]	; (968 <aes132app_single_execute+0xa8>)
     924:	4b0e      	ldr	r3, [pc, #56]	; (960 <aes132app_single_execute+0xa0>)
     926:	4798      	blx	r3
	
}
     928:	b00b      	add	sp, #44	; 0x2c
     92a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("RX buffer = 0x");
     92c:	480f      	ldr	r0, [pc, #60]	; (96c <aes132app_single_execute+0xac>)
     92e:	4b0c      	ldr	r3, [pc, #48]	; (960 <aes132app_single_execute+0xa0>)
     930:	4798      	blx	r3
		printf_puthex_array(rx_buffer, rx_buffer[0]);
     932:	4805      	ldr	r0, [pc, #20]	; (948 <aes132app_single_execute+0x88>)
     934:	7801      	ldrb	r1, [r0, #0]
     936:	4b0b      	ldr	r3, [pc, #44]	; (964 <aes132app_single_execute+0xa4>)
     938:	4798      	blx	r3
		printf("\n");
     93a:	200a      	movs	r0, #10
     93c:	4b06      	ldr	r3, [pc, #24]	; (958 <aes132app_single_execute+0x98>)
     93e:	4798      	blx	r3
     940:	e7f2      	b.n	928 <aes132app_single_execute+0x68>
     942:	46c0      	nop			; (mov r8, r8)
     944:	20000238 	.word	0x20000238
     948:	2000033c 	.word	0x2000033c
     94c:	20000360 	.word	0x20000360
     950:	20000338 	.word	0x20000338
     954:	000004d1 	.word	0x000004d1
     958:	00002785 	.word	0x00002785
     95c:	00004568 	.word	0x00004568
     960:	00002751 	.word	0x00002751
     964:	000005e1 	.word	0x000005e1
     968:	00004588 	.word	0x00004588
     96c:	00004578 	.word	0x00004578

00000970 <aes132app_command_dispatch>:


void aes132app_command_dispatch(void)
{
     970:	b510      	push	{r4, lr}
	// Dispatch appropriate function, deduce from the opcode (packet block byte #0)
	// Use dummy opcodes for specific cases
	switch (g_packet_block[0]) {
     972:	4b0a      	ldr	r3, [pc, #40]	; (99c <aes132app_command_dispatch+0x2c>)
     974:	781b      	ldrb	r3, [r3, #0]
     976:	b2da      	uxtb	r2, r3
     978:	2a81      	cmp	r2, #129	; 0x81
     97a:	d009      	beq.n	990 <aes132app_command_dispatch+0x20>
     97c:	2a82      	cmp	r2, #130	; 0x82
     97e:	d00a      	beq.n	996 <aes132app_command_dispatch+0x26>
     980:	2a80      	cmp	r2, #128	; 0x80
     982:	d002      	beq.n	98a <aes132app_command_dispatch+0x1a>
		break;
		case 0x82:
			block_read_test();
		break;
		default:
			aes132app_single_execute();
     984:	4b06      	ldr	r3, [pc, #24]	; (9a0 <aes132app_command_dispatch+0x30>)
     986:	4798      	blx	r3
		break;
	}
}
     988:	e001      	b.n	98e <aes132app_command_dispatch+0x1e>
			write_memory_test();
     98a:	4b06      	ldr	r3, [pc, #24]	; (9a4 <aes132app_command_dispatch+0x34>)
     98c:	4798      	blx	r3
}
     98e:	bd10      	pop	{r4, pc}
			read_memory_test();
     990:	4b05      	ldr	r3, [pc, #20]	; (9a8 <aes132app_command_dispatch+0x38>)
     992:	4798      	blx	r3
		break;
     994:	e7fb      	b.n	98e <aes132app_command_dispatch+0x1e>
			block_read_test();
     996:	4b05      	ldr	r3, [pc, #20]	; (9ac <aes132app_command_dispatch+0x3c>)
     998:	4798      	blx	r3
		break;
     99a:	e7f8      	b.n	98e <aes132app_command_dispatch+0x1e>
     99c:	20000238 	.word	0x20000238
     9a0:	000008c1 	.word	0x000008c1
     9a4:	000006e9 	.word	0x000006e9
     9a8:	00000751 	.word	0x00000751
     9ac:	000007f9 	.word	0x000007f9

000009b0 <main>:
/** \brief This function is the entry function for an example application that
           uses the AES132 library.
 * \return result (0: success, otherwise failure)
 */
int main(void)
{
     9b0:	b570      	push	{r4, r5, r6, lr}
     9b2:	b090      	sub	sp, #64	; 0x40
	//! [system_init]
	system_init();
     9b4:	4b34      	ldr	r3, [pc, #208]	; (a88 <main+0xd8>)
     9b6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     9b8:	2380      	movs	r3, #128	; 0x80
     9ba:	05db      	lsls	r3, r3, #23
     9bc:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     9be:	2300      	movs	r3, #0
     9c0:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     9c2:	22ff      	movs	r2, #255	; 0xff
     9c4:	4669      	mov	r1, sp
     9c6:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     9c8:	2200      	movs	r2, #0
     9ca:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     9cc:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     9ce:	2101      	movs	r1, #1
     9d0:	2024      	movs	r0, #36	; 0x24
     9d2:	466c      	mov	r4, sp
     9d4:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
     9d6:	3001      	adds	r0, #1
     9d8:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
     9da:	3125      	adds	r1, #37	; 0x25
     9dc:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
     9de:	3101      	adds	r1, #1
     9e0:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
     9e2:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     9e4:	3105      	adds	r1, #5
     9e6:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
     9e8:	3101      	adds	r1, #1
     9ea:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     9ec:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     9ee:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     9f0:	76e3      	strb	r3, [r4, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
     9f2:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
     9f4:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
     9f6:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                        = 19;
     9f8:	2313      	movs	r3, #19
     9fa:	76a3      	strb	r3, [r4, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
     9fc:	7762      	strb	r2, [r4, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
     9fe:	2380      	movs	r3, #128	; 0x80
     a00:	035b      	lsls	r3, r3, #13
     a02:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
     a04:	4b21      	ldr	r3, [pc, #132]	; (a8c <main+0xdc>)
     a06:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
     a08:	4b21      	ldr	r3, [pc, #132]	; (a90 <main+0xe0>)
     a0a:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
     a0c:	2301      	movs	r3, #1
     a0e:	425b      	negs	r3, r3
     a10:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
     a12:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
     a14:	23e1      	movs	r3, #225	; 0xe1
     a16:	025b      	lsls	r3, r3, #9
     a18:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     a1a:	4c1e      	ldr	r4, [pc, #120]	; (a94 <main+0xe4>)
     a1c:	4b1e      	ldr	r3, [pc, #120]	; (a98 <main+0xe8>)
     a1e:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     a20:	4a1e      	ldr	r2, [pc, #120]	; (a9c <main+0xec>)
     a22:	4b1f      	ldr	r3, [pc, #124]	; (aa0 <main+0xf0>)
     a24:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     a26:	4a1f      	ldr	r2, [pc, #124]	; (aa4 <main+0xf4>)
     a28:	4b1f      	ldr	r3, [pc, #124]	; (aa8 <main+0xf8>)
     a2a:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
     a2c:	466a      	mov	r2, sp
     a2e:	491f      	ldr	r1, [pc, #124]	; (aac <main+0xfc>)
     a30:	0020      	movs	r0, r4
     a32:	4b1f      	ldr	r3, [pc, #124]	; (ab0 <main+0x100>)
     a34:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     a36:	4e1f      	ldr	r6, [pc, #124]	; (ab4 <main+0x104>)
     a38:	6833      	ldr	r3, [r6, #0]
     a3a:	6898      	ldr	r0, [r3, #8]
     a3c:	2100      	movs	r1, #0
     a3e:	4d1e      	ldr	r5, [pc, #120]	; (ab8 <main+0x108>)
     a40:	47a8      	blx	r5
	setbuf(stdin, NULL);
     a42:	6833      	ldr	r3, [r6, #0]
     a44:	6858      	ldr	r0, [r3, #4]
     a46:	2100      	movs	r1, #0
     a48:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     a4a:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     a4c:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     a4e:	2a00      	cmp	r2, #0
     a50:	d1fc      	bne.n	a4c <main+0x9c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     a52:	681a      	ldr	r2, [r3, #0]
     a54:	2102      	movs	r1, #2
     a56:	430a      	orrs	r2, r1
     a58:	601a      	str	r2, [r3, #0]
	//! [configure_console]
	configure_console();
	//! [configure_console]
	
	//! [aes132p_enable_interface]
	aes132p_enable_interface();
     a5a:	4b18      	ldr	r3, [pc, #96]	; (abc <main+0x10c>)
     a5c:	4798      	blx	r3
	//! [aes132p_enable_interface]
	printf("*****AES132 TEST*****\r\n");
     a5e:	4818      	ldr	r0, [pc, #96]	; (ac0 <main+0x110>)
     a60:	4b18      	ldr	r3, [pc, #96]	; (ac4 <main+0x114>)
     a62:	4798      	blx	r3
	while(1){
		if (scanf("%c",&serial_data)>0){
     a64:	4e18      	ldr	r6, [pc, #96]	; (ac8 <main+0x118>)
     a66:	4d19      	ldr	r5, [pc, #100]	; (acc <main+0x11c>)
     a68:	4c19      	ldr	r4, [pc, #100]	; (ad0 <main+0x120>)
     a6a:	0031      	movs	r1, r6
     a6c:	0028      	movs	r0, r5
     a6e:	47a0      	blx	r4
     a70:	2800      	cmp	r0, #0
     a72:	ddfa      	ble.n	a6a <main+0xba>
			if (parse_command(serial_data))
     a74:	4b14      	ldr	r3, [pc, #80]	; (ac8 <main+0x118>)
     a76:	7818      	ldrb	r0, [r3, #0]
     a78:	4b16      	ldr	r3, [pc, #88]	; (ad4 <main+0x124>)
     a7a:	4798      	blx	r3
     a7c:	2800      	cmp	r0, #0
     a7e:	d0f4      	beq.n	a6a <main+0xba>
				aes132app_command_dispatch();
     a80:	4b15      	ldr	r3, [pc, #84]	; (ad8 <main+0x128>)
     a82:	4798      	blx	r3
     a84:	e7f1      	b.n	a6a <main+0xba>
     a86:	46c0      	nop			; (mov r8, r8)
     a88:	00002381 	.word	0x00002381
     a8c:	00160002 	.word	0x00160002
     a90:	00170002 	.word	0x00170002
     a94:	200001f8 	.word	0x200001f8
     a98:	200003cc 	.word	0x200003cc
     a9c:	000005a1 	.word	0x000005a1
     aa0:	200003c8 	.word	0x200003c8
     aa4:	00000575 	.word	0x00000575
     aa8:	200003c4 	.word	0x200003c4
     aac:	42001400 	.word	0x42001400
     ab0:	00001a75 	.word	0x00001a75
     ab4:	2000000c 	.word	0x2000000c
     ab8:	000028b5 	.word	0x000028b5
     abc:	00000add 	.word	0x00000add
     ac0:	000045dc 	.word	0x000045dc
     ac4:	0000286d 	.word	0x0000286d
     ac8:	200003b4 	.word	0x200003b4
     acc:	000045f4 	.word	0x000045f4
     ad0:	00002881 	.word	0x00002881
     ad4:	00000615 	.word	0x00000615
     ad8:	00000971 	.word	0x00000971

00000adc <aes132p_enable_interface>:
	I2C_READ  = (uint8_t) 0x01   //! read command id
};

/** \brief This function initializes and enables the I2C hardware peripheral. */
void aes132p_enable_interface(void)
{
     adc:	b580      	push	{r7, lr}
     ade:	af00      	add	r7, sp, #0
	i2c_enable_phys();
     ae0:	4b02      	ldr	r3, [pc, #8]	; (aec <aes132p_enable_interface+0x10>)
     ae2:	4798      	blx	r3
}
     ae4:	46c0      	nop			; (mov r8, r8)
     ae6:	46bd      	mov	sp, r7
     ae8:	bd80      	pop	{r7, pc}
     aea:	46c0      	nop			; (mov r8, r8)
     aec:	00000ed5 	.word	0x00000ed5

00000af0 <aes132p_write_memory_physical>:
 * \param[in] word_address word address to write to
 * \param[in] data pointer to tx buffer
 * \return status of the operation
 */
uint8_t aes132p_write_memory_physical(uint8_t count, uint16_t word_address, uint8_t *data)
{
     af0:	b5f0      	push	{r4, r5, r6, r7, lr}
     af2:	b08d      	sub	sp, #52	; 0x34
     af4:	af00      	add	r7, sp, #0
     af6:	6078      	str	r0, [r7, #4]
     af8:	0008      	movs	r0, r1
     afa:	61ba      	str	r2, [r7, #24]
     afc:	221f      	movs	r2, #31
     afe:	18ba      	adds	r2, r7, r2
     b00:	7939      	ldrb	r1, [r7, #4]
     b02:	7011      	strb	r1, [r2, #0]
     b04:	221c      	movs	r2, #28
     b06:	18ba      	adds	r2, r7, r2
     b08:	1c01      	adds	r1, r0, #0
     b0a:	8011      	strh	r1, [r2, #0]
     b0c:	466a      	mov	r2, sp
     b0e:	607a      	str	r2, [r7, #4]
	// In both, big-endian and little-endian systems, we send MSB first.
	uint8_t word_address_buffer[2] = {(uint8_t) (word_address >> 8), (uint8_t) (word_address & 0xFF)};
     b10:	221c      	movs	r2, #28
     b12:	18ba      	adds	r2, r7, r2
     b14:	8812      	ldrh	r2, [r2, #0]
     b16:	0a12      	lsrs	r2, r2, #8
     b18:	b292      	uxth	r2, r2
     b1a:	b2d1      	uxtb	r1, r2
     b1c:	220c      	movs	r2, #12
     b1e:	2018      	movs	r0, #24
     b20:	4684      	mov	ip, r0
     b22:	44bc      	add	ip, r7
     b24:	4462      	add	r2, ip
     b26:	7011      	strb	r1, [r2, #0]
     b28:	221c      	movs	r2, #28
     b2a:	18ba      	adds	r2, r7, r2
     b2c:	8812      	ldrh	r2, [r2, #0]
     b2e:	b2d1      	uxtb	r1, r2
     b30:	220c      	movs	r2, #12
     b32:	2018      	movs	r0, #24
     b34:	4684      	mov	ip, r0
     b36:	44bc      	add	ip, r7
     b38:	4462      	add	r2, ip
     b3a:	7051      	strb	r1, [r2, #1]
	uint8_t data_buffer[2+count];
     b3c:	221f      	movs	r2, #31
     b3e:	18ba      	adds	r2, r7, r2
     b40:	7812      	ldrb	r2, [r2, #0]
     b42:	3202      	adds	r2, #2
     b44:	0011      	movs	r1, r2
     b46:	6039      	str	r1, [r7, #0]
     b48:	000a      	movs	r2, r1
     b4a:	3a01      	subs	r2, #1
     b4c:	62fa      	str	r2, [r7, #44]	; 0x2c
     b4e:	000a      	movs	r2, r1
     b50:	613a      	str	r2, [r7, #16]
     b52:	2200      	movs	r2, #0
     b54:	617a      	str	r2, [r7, #20]
     b56:	693a      	ldr	r2, [r7, #16]
     b58:	0f52      	lsrs	r2, r2, #29
     b5a:	6978      	ldr	r0, [r7, #20]
     b5c:	00c6      	lsls	r6, r0, #3
     b5e:	4316      	orrs	r6, r2
     b60:	693a      	ldr	r2, [r7, #16]
     b62:	00d5      	lsls	r5, r2, #3
     b64:	000a      	movs	r2, r1
     b66:	60ba      	str	r2, [r7, #8]
     b68:	2200      	movs	r2, #0
     b6a:	60fa      	str	r2, [r7, #12]
     b6c:	68bd      	ldr	r5, [r7, #8]
     b6e:	68fe      	ldr	r6, [r7, #12]
     b70:	002a      	movs	r2, r5
     b72:	0f52      	lsrs	r2, r2, #29
     b74:	0030      	movs	r0, r6
     b76:	00c4      	lsls	r4, r0, #3
     b78:	4314      	orrs	r4, r2
     b7a:	002a      	movs	r2, r5
     b7c:	00d3      	lsls	r3, r2, #3
     b7e:	000b      	movs	r3, r1
     b80:	3307      	adds	r3, #7
     b82:	08db      	lsrs	r3, r3, #3
     b84:	00db      	lsls	r3, r3, #3
     b86:	466a      	mov	r2, sp
     b88:	1ad3      	subs	r3, r2, r3
     b8a:	469d      	mov	sp, r3
     b8c:	466b      	mov	r3, sp
     b8e:	3300      	adds	r3, #0
     b90:	62bb      	str	r3, [r7, #40]	; 0x28
			memcpy(&data_buffer[0], word_address_buffer, 2);
     b92:	6aba      	ldr	r2, [r7, #40]	; 0x28
     b94:	230c      	movs	r3, #12
     b96:	2118      	movs	r1, #24
     b98:	468c      	mov	ip, r1
     b9a:	44bc      	add	ip, r7
     b9c:	4463      	add	r3, ip
     b9e:	0010      	movs	r0, r2
     ba0:	0019      	movs	r1, r3
     ba2:	2302      	movs	r3, #2
     ba4:	001a      	movs	r2, r3
     ba6:	4b24      	ldr	r3, [pc, #144]	; (c38 <aes132p_write_memory_physical+0x148>)
     ba8:	4798      	blx	r3
			memcpy(&data_buffer[2], data, count);
     baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
     bac:	1c98      	adds	r0, r3, #2
     bae:	231f      	movs	r3, #31
     bb0:	18fb      	adds	r3, r7, r3
     bb2:	781a      	ldrb	r2, [r3, #0]
     bb4:	69bb      	ldr	r3, [r7, #24]
     bb6:	0019      	movs	r1, r3
     bb8:	4b1f      	ldr	r3, [pc, #124]	; (c38 <aes132p_write_memory_physical+0x148>)
     bba:	4798      	blx	r3
	uint8_t aes132_lib_return = i2c_send_slave_address(I2C_WRITE);
     bbc:	230f      	movs	r3, #15
     bbe:	2218      	movs	r2, #24
     bc0:	18ba      	adds	r2, r7, r2
     bc2:	18d4      	adds	r4, r2, r3
     bc4:	2000      	movs	r0, #0
     bc6:	4b1d      	ldr	r3, [pc, #116]	; (c3c <aes132p_write_memory_physical+0x14c>)
     bc8:	4798      	blx	r3
     bca:	0003      	movs	r3, r0
     bcc:	7023      	strb	r3, [r4, #0]
	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS)
     bce:	230f      	movs	r3, #15
     bd0:	2218      	movs	r2, #24
     bd2:	4694      	mov	ip, r2
     bd4:	44bc      	add	ip, r7
     bd6:	4463      	add	r3, ip
     bd8:	781b      	ldrb	r3, [r3, #0]
     bda:	2b00      	cmp	r3, #0
     bdc:	d006      	beq.n	bec <aes132p_write_memory_physical+0xfc>
		// There is no need to create a Stop condition, since function
		// aes132p_send_slave_address does that already in case of error.
		return aes132_lib_return;
     bde:	230f      	movs	r3, #15
     be0:	2218      	movs	r2, #24
     be2:	4694      	mov	ip, r2
     be4:	44bc      	add	ip, r7
     be6:	4463      	add	r3, ip
     be8:	781b      	ldrb	r3, [r3, #0]
     bea:	e01f      	b.n	c2c <aes132p_write_memory_physical+0x13c>
		
	aes132_lib_return = i2c_send_bytes(sizeof(data_buffer), (uint8_t *) data_buffer);
     bec:	783b      	ldrb	r3, [r7, #0]
     bee:	6aba      	ldr	r2, [r7, #40]	; 0x28
     bf0:	210f      	movs	r1, #15
     bf2:	2018      	movs	r0, #24
     bf4:	1838      	adds	r0, r7, r0
     bf6:	1844      	adds	r4, r0, r1
     bf8:	0011      	movs	r1, r2
     bfa:	0018      	movs	r0, r3
     bfc:	4b10      	ldr	r3, [pc, #64]	; (c40 <aes132p_write_memory_physical+0x150>)
     bfe:	4798      	blx	r3
     c00:	0003      	movs	r3, r0
     c02:	7023      	strb	r3, [r4, #0]
	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
     c04:	230f      	movs	r3, #15
     c06:	2218      	movs	r2, #24
     c08:	4694      	mov	ip, r2
     c0a:	44bc      	add	ip, r7
     c0c:	4463      	add	r3, ip
     c0e:	781b      	ldrb	r3, [r3, #0]
     c10:	2b00      	cmp	r3, #0
     c12:	d008      	beq.n	c26 <aes132p_write_memory_physical+0x136>
		// Don't override the return code from i2c_send_bytes in case of error.
		(void) i2c_send_stop();
     c14:	4b0b      	ldr	r3, [pc, #44]	; (c44 <aes132p_write_memory_physical+0x154>)
     c16:	4798      	blx	r3
		return aes132_lib_return;
     c18:	230f      	movs	r3, #15
     c1a:	2218      	movs	r2, #24
     c1c:	4694      	mov	ip, r2
     c1e:	44bc      	add	ip, r7
     c20:	4463      	add	r3, ip
     c22:	781b      	ldrb	r3, [r3, #0]
     c24:	e002      	b.n	c2c <aes132p_write_memory_physical+0x13c>
	}
	
	// success
	return i2c_send_stop();
     c26:	4b07      	ldr	r3, [pc, #28]	; (c44 <aes132p_write_memory_physical+0x154>)
     c28:	4798      	blx	r3
     c2a:	0003      	movs	r3, r0
     c2c:	687a      	ldr	r2, [r7, #4]
     c2e:	4695      	mov	sp, r2
}
     c30:	0018      	movs	r0, r3
     c32:	46bd      	mov	sp, r7
     c34:	b00d      	add	sp, #52	; 0x34
     c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c38:	0000272f 	.word	0x0000272f
     c3c:	000010b9 	.word	0x000010b9
     c40:	00000f81 	.word	0x00000f81
     c44:	00000f4d 	.word	0x00000f4d

00000c48 <aes132p_read_memory_physical>:
 * \param[in] word_address word address to read from
 * \param[out] data pointer to rx buffer
 * \return status of the operation
 */
uint8_t aes132p_read_memory_physical(uint8_t size, uint16_t word_address, uint8_t *data)
{
     c48:	b590      	push	{r4, r7, lr}
     c4a:	b085      	sub	sp, #20
     c4c:	af00      	add	r7, sp, #0
     c4e:	603a      	str	r2, [r7, #0]
     c50:	1dfb      	adds	r3, r7, #7
     c52:	1c02      	adds	r2, r0, #0
     c54:	701a      	strb	r2, [r3, #0]
     c56:	1d3b      	adds	r3, r7, #4
     c58:	1c0a      	adds	r2, r1, #0
     c5a:	801a      	strh	r2, [r3, #0]
	// Random read:
	// Start, I2C address with write bit, word address,
	// Start, I2C address with read bit

	// In both, big-endian and little-endian systems, we send MSB first.
	const uint8_t word_address_buffer[2] = {(uint8_t) (word_address >> 8), (uint8_t) (word_address & 0x00FF)};
     c5c:	1d3b      	adds	r3, r7, #4
     c5e:	881b      	ldrh	r3, [r3, #0]
     c60:	0a1b      	lsrs	r3, r3, #8
     c62:	b29b      	uxth	r3, r3
     c64:	b2da      	uxtb	r2, r3
     c66:	230c      	movs	r3, #12
     c68:	18fb      	adds	r3, r7, r3
     c6a:	701a      	strb	r2, [r3, #0]
     c6c:	1d3b      	adds	r3, r7, #4
     c6e:	881b      	ldrh	r3, [r3, #0]
     c70:	b2da      	uxtb	r2, r3
     c72:	230c      	movs	r3, #12
     c74:	18fb      	adds	r3, r7, r3
     c76:	705a      	strb	r2, [r3, #1]

	uint8_t aes132_lib_return = i2c_send_slave_address(I2C_WRITE);
     c78:	230f      	movs	r3, #15
     c7a:	18fc      	adds	r4, r7, r3
     c7c:	2000      	movs	r0, #0
     c7e:	4b1f      	ldr	r3, [pc, #124]	; (cfc <aes132p_read_memory_physical+0xb4>)
     c80:	4798      	blx	r3
     c82:	0003      	movs	r3, r0
     c84:	7023      	strb	r3, [r4, #0]
	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS)
     c86:	230f      	movs	r3, #15
     c88:	18fb      	adds	r3, r7, r3
     c8a:	781b      	ldrb	r3, [r3, #0]
     c8c:	2b00      	cmp	r3, #0
     c8e:	d003      	beq.n	c98 <aes132p_read_memory_physical+0x50>
		// There is no need to create a Stop condition, since function
		// aes132p_send_slave_address does that already in case of error.
		return aes132_lib_return;
     c90:	230f      	movs	r3, #15
     c92:	18fb      	adds	r3, r7, r3
     c94:	781b      	ldrb	r3, [r3, #0]
     c96:	e02c      	b.n	cf2 <aes132p_read_memory_physical+0xaa>

	aes132_lib_return = i2c_send_bytes(2, (uint8_t *) word_address_buffer);
     c98:	230f      	movs	r3, #15
     c9a:	18fc      	adds	r4, r7, r3
     c9c:	230c      	movs	r3, #12
     c9e:	18fb      	adds	r3, r7, r3
     ca0:	0019      	movs	r1, r3
     ca2:	2002      	movs	r0, #2
     ca4:	4b16      	ldr	r3, [pc, #88]	; (d00 <aes132p_read_memory_physical+0xb8>)
     ca6:	4798      	blx	r3
     ca8:	0003      	movs	r3, r0
     caa:	7023      	strb	r3, [r4, #0]
	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
     cac:	230f      	movs	r3, #15
     cae:	18fb      	adds	r3, r7, r3
     cb0:	781b      	ldrb	r3, [r3, #0]
     cb2:	2b00      	cmp	r3, #0
     cb4:	d005      	beq.n	cc2 <aes132p_read_memory_physical+0x7a>
		// Don't override the return code from i2c_send_bytes in case of error.
		(void) i2c_send_stop();
     cb6:	4b13      	ldr	r3, [pc, #76]	; (d04 <aes132p_read_memory_physical+0xbc>)
     cb8:	4798      	blx	r3
		return aes132_lib_return;
     cba:	230f      	movs	r3, #15
     cbc:	18fb      	adds	r3, r7, r3
     cbe:	781b      	ldrb	r3, [r3, #0]
     cc0:	e017      	b.n	cf2 <aes132p_read_memory_physical+0xaa>
	}

	aes132_lib_return = i2c_send_slave_address(I2C_READ);
     cc2:	230f      	movs	r3, #15
     cc4:	18fc      	adds	r4, r7, r3
     cc6:	2001      	movs	r0, #1
     cc8:	4b0c      	ldr	r3, [pc, #48]	; (cfc <aes132p_read_memory_physical+0xb4>)
     cca:	4798      	blx	r3
     ccc:	0003      	movs	r3, r0
     cce:	7023      	strb	r3, [r4, #0]
	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS)
     cd0:	230f      	movs	r3, #15
     cd2:	18fb      	adds	r3, r7, r3
     cd4:	781b      	ldrb	r3, [r3, #0]
     cd6:	2b00      	cmp	r3, #0
     cd8:	d003      	beq.n	ce2 <aes132p_read_memory_physical+0x9a>
		return aes132_lib_return;
     cda:	230f      	movs	r3, #15
     cdc:	18fb      	adds	r3, r7, r3
     cde:	781b      	ldrb	r3, [r3, #0]
     ce0:	e007      	b.n	cf2 <aes132p_read_memory_physical+0xaa>

	return i2c_receive_bytes(size, data);
     ce2:	683a      	ldr	r2, [r7, #0]
     ce4:	1dfb      	adds	r3, r7, #7
     ce6:	781b      	ldrb	r3, [r3, #0]
     ce8:	0011      	movs	r1, r2
     cea:	0018      	movs	r0, r3
     cec:	4b06      	ldr	r3, [pc, #24]	; (d08 <aes132p_read_memory_physical+0xc0>)
     cee:	4798      	blx	r3
     cf0:	0003      	movs	r3, r0
}
     cf2:	0018      	movs	r0, r3
     cf4:	46bd      	mov	sp, r7
     cf6:	b005      	add	sp, #20
     cf8:	bd90      	pop	{r4, r7, pc}
     cfa:	46c0      	nop			; (mov r8, r8)
     cfc:	000010b9 	.word	0x000010b9
     d00:	00000f81 	.word	0x00000f81
     d04:	00000f4d 	.word	0x00000f4d
     d08:	0000100d 	.word	0x0000100d

00000d0c <aes132p_resync_physical>:

/** \brief This function resynchronizes communication.
 * \return status of the operation
 */
uint8_t aes132p_resync_physical(void)
{
     d0c:	b590      	push	{r4, r7, lr}
     d0e:	b083      	sub	sp, #12
     d10:	af00      	add	r7, sp, #0
	uint8_t nine_clocks = 0xFF;
     d12:	1d7b      	adds	r3, r7, #5
     d14:	22ff      	movs	r2, #255	; 0xff
     d16:	701a      	strb	r2, [r3, #0]
	uint8_t n_retries = 2;
     d18:	1dfb      	adds	r3, r7, #7
     d1a:	2202      	movs	r2, #2
     d1c:	701a      	strb	r2, [r3, #0]
	uint8_t aes132_lib_return;

	do {
		aes132_lib_return = i2c_send_start();
     d1e:	1dbc      	adds	r4, r7, #6
     d20:	4b13      	ldr	r3, [pc, #76]	; (d70 <aes132p_resync_physical+0x64>)
     d22:	4798      	blx	r3
     d24:	0003      	movs	r3, r0
     d26:	7023      	strb	r3, [r4, #0]
		if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
     d28:	1dbb      	adds	r3, r7, #6
     d2a:	781b      	ldrb	r3, [r3, #0]
     d2c:	2b00      	cmp	r3, #0
     d2e:	d003      	beq.n	d38 <aes132p_resync_physical+0x2c>
			// If a device is holding SDA or SCL, disabling and
			// re-enabling the I2C peripheral might help.
			i2c_disable_phys();
     d30:	4b10      	ldr	r3, [pc, #64]	; (d74 <aes132p_resync_physical+0x68>)
     d32:	4798      	blx	r3
			i2c_enable_phys();
     d34:	4b10      	ldr	r3, [pc, #64]	; (d78 <aes132p_resync_physical+0x6c>)
     d36:	4798      	blx	r3
		}
		if (--n_retries == 0)
     d38:	1dfb      	adds	r3, r7, #7
     d3a:	1dfa      	adds	r2, r7, #7
     d3c:	7812      	ldrb	r2, [r2, #0]
     d3e:	3a01      	subs	r2, #1
     d40:	701a      	strb	r2, [r3, #0]
     d42:	1dfb      	adds	r3, r7, #7
     d44:	781b      	ldrb	r3, [r3, #0]
     d46:	2b00      	cmp	r3, #0
     d48:	d102      	bne.n	d50 <aes132p_resync_physical+0x44>
			return aes132_lib_return;
     d4a:	1dbb      	adds	r3, r7, #6
     d4c:	781b      	ldrb	r3, [r3, #0]
     d4e:	e00b      	b.n	d68 <aes132p_resync_physical+0x5c>

		// Retry creating a Start condition if it failed.
	} while(aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS);
     d50:	1dbb      	adds	r3, r7, #6
     d52:	781b      	ldrb	r3, [r3, #0]
     d54:	2b00      	cmp	r3, #0
     d56:	d1e2      	bne.n	d1e <aes132p_resync_physical+0x12>

	// Do not evaluate the return code which most likely indicates error,
	// since nine_clocks is unlikely to be acknowledged.
	(void) i2c_send_bytes(1, &nine_clocks);
     d58:	1d7b      	adds	r3, r7, #5
     d5a:	0019      	movs	r1, r3
     d5c:	2001      	movs	r0, #1
     d5e:	4b07      	ldr	r3, [pc, #28]	; (d7c <aes132p_resync_physical+0x70>)
     d60:	4798      	blx	r3

	return i2c_send_stop();
     d62:	4b07      	ldr	r3, [pc, #28]	; (d80 <aes132p_resync_physical+0x74>)
     d64:	4798      	blx	r3
     d66:	0003      	movs	r3, r0
}
     d68:	0018      	movs	r0, r3
     d6a:	46bd      	mov	sp, r7
     d6c:	b003      	add	sp, #12
     d6e:	bd90      	pop	{r4, r7, pc}
     d70:	00000f41 	.word	0x00000f41
     d74:	00000f25 	.word	0x00000f25
     d78:	00000ed5 	.word	0x00000ed5
     d7c:	00000f81 	.word	0x00000f81
     d80:	00000f4d 	.word	0x00000f4d

00000d84 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
     d84:	b580      	push	{r7, lr}
     d86:	b084      	sub	sp, #16
     d88:	af00      	add	r7, sp, #0
     d8a:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     d8c:	687b      	ldr	r3, [r7, #4]
     d8e:	681b      	ldr	r3, [r3, #0]
     d90:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     d92:	68fb      	ldr	r3, [r7, #12]
     d94:	69db      	ldr	r3, [r3, #28]
     d96:	2207      	movs	r2, #7
     d98:	4013      	ands	r3, r2
     d9a:	1e5a      	subs	r2, r3, #1
     d9c:	4193      	sbcs	r3, r2
     d9e:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
     da0:	0018      	movs	r0, r3
     da2:	46bd      	mov	sp, r7
     da4:	b004      	add	sp, #16
     da6:	bd80      	pop	{r7, pc}

00000da8 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
     da8:	b580      	push	{r7, lr}
     daa:	b082      	sub	sp, #8
     dac:	af00      	add	r7, sp, #0
     dae:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     db0:	46c0      	nop			; (mov r8, r8)
     db2:	687b      	ldr	r3, [r7, #4]
     db4:	0018      	movs	r0, r3
     db6:	4b04      	ldr	r3, [pc, #16]	; (dc8 <_i2c_master_wait_for_sync+0x20>)
     db8:	4798      	blx	r3
     dba:	1e03      	subs	r3, r0, #0
     dbc:	d1f9      	bne.n	db2 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
     dbe:	46c0      	nop			; (mov r8, r8)
     dc0:	46bd      	mov	sp, r7
     dc2:	b002      	add	sp, #8
     dc4:	bd80      	pop	{r7, pc}
     dc6:	46c0      	nop			; (mov r8, r8)
     dc8:	00000d85 	.word	0x00000d85

00000dcc <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
     dcc:	b580      	push	{r7, lr}
     dce:	b082      	sub	sp, #8
     dd0:	af00      	add	r7, sp, #0
     dd2:	6078      	str	r0, [r7, #4]
	/*Sanity check argument. */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
     dd4:	687b      	ldr	r3, [r7, #4]
     dd6:	2264      	movs	r2, #100	; 0x64
     dd8:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
     dda:	687b      	ldr	r3, [r7, #4]
     ddc:	4a19      	ldr	r2, [pc, #100]	; (e44 <i2c_master_get_config_defaults+0x78>)
     dde:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
     de0:	687b      	ldr	r3, [r7, #4]
     de2:	2200      	movs	r2, #0
     de4:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
     de6:	687b      	ldr	r3, [r7, #4]
     de8:	2200      	movs	r2, #0
     dea:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
     dec:	687b      	ldr	r3, [r7, #4]
     dee:	2200      	movs	r2, #0
     df0:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
     df2:	687b      	ldr	r3, [r7, #4]
     df4:	2280      	movs	r2, #128	; 0x80
     df6:	0392      	lsls	r2, r2, #14
     df8:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
     dfa:	687b      	ldr	r3, [r7, #4]
     dfc:	2201      	movs	r2, #1
     dfe:	4252      	negs	r2, r2
     e00:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
     e02:	687b      	ldr	r3, [r7, #4]
     e04:	2201      	movs	r2, #1
     e06:	4252      	negs	r2, r2
     e08:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     e0a:	687b      	ldr	r3, [r7, #4]
     e0c:	2200      	movs	r2, #0
     e0e:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
     e10:	687b      	ldr	r3, [r7, #4]
     e12:	2200      	movs	r2, #0
     e14:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
     e16:	687b      	ldr	r3, [r7, #4]
     e18:	2224      	movs	r2, #36	; 0x24
     e1a:	2100      	movs	r1, #0
     e1c:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     e1e:	687b      	ldr	r3, [r7, #4]
     e20:	2200      	movs	r2, #0
     e22:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
     e24:	687b      	ldr	r3, [r7, #4]
     e26:	222c      	movs	r2, #44	; 0x2c
     e28:	2100      	movs	r1, #0
     e2a:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
     e2c:	687b      	ldr	r3, [r7, #4]
     e2e:	222d      	movs	r2, #45	; 0x2d
     e30:	2100      	movs	r1, #0
     e32:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
     e34:	687b      	ldr	r3, [r7, #4]
     e36:	222e      	movs	r2, #46	; 0x2e
     e38:	2100      	movs	r1, #0
     e3a:	5499      	strb	r1, [r3, r2]
#endif
}
     e3c:	46c0      	nop			; (mov r8, r8)
     e3e:	46bd      	mov	sp, r7
     e40:	b002      	add	sp, #8
     e42:	bd80      	pop	{r7, pc}
     e44:	00000d48 	.word	0x00000d48

00000e48 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
     e48:	b580      	push	{r7, lr}
     e4a:	b084      	sub	sp, #16
     e4c:	af00      	add	r7, sp, #0
     e4e:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     e50:	687b      	ldr	r3, [r7, #4]
     e52:	681b      	ldr	r3, [r3, #0]
     e54:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state. */
	uint32_t timeout_counter = 0;
     e56:	2300      	movs	r3, #0
     e58:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync. */
	_i2c_master_wait_for_sync(module);
     e5a:	687b      	ldr	r3, [r7, #4]
     e5c:	0018      	movs	r0, r3
     e5e:	4b10      	ldr	r3, [pc, #64]	; (ea0 <i2c_master_enable+0x58>)
     e60:	4798      	blx	r3

	/* Enable module. */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     e62:	68bb      	ldr	r3, [r7, #8]
     e64:	681b      	ldr	r3, [r3, #0]
     e66:	2202      	movs	r2, #2
     e68:	431a      	orrs	r2, r3
     e6a:	68bb      	ldr	r3, [r7, #8]
     e6c:	601a      	str	r2, [r3, #0]
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     e6e:	e00c      	b.n	e8a <i2c_master_enable+0x42>
		timeout_counter++;
     e70:	68fb      	ldr	r3, [r7, #12]
     e72:	3301      	adds	r3, #1
     e74:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     e76:	687b      	ldr	r3, [r7, #4]
     e78:	88db      	ldrh	r3, [r3, #6]
     e7a:	001a      	movs	r2, r3
     e7c:	68fb      	ldr	r3, [r7, #12]
     e7e:	429a      	cmp	r2, r3
     e80:	d803      	bhi.n	e8a <i2c_master_enable+0x42>
			/* Timeout, force bus state to idle. */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     e82:	68bb      	ldr	r3, [r7, #8]
     e84:	2210      	movs	r2, #16
     e86:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
     e88:	e006      	b.n	e98 <i2c_master_enable+0x50>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     e8a:	68bb      	ldr	r3, [r7, #8]
     e8c:	8b5b      	ldrh	r3, [r3, #26]
     e8e:	b29b      	uxth	r3, r3
     e90:	001a      	movs	r2, r3
     e92:	2310      	movs	r3, #16
     e94:	4013      	ands	r3, r2
     e96:	d0eb      	beq.n	e70 <i2c_master_enable+0x28>
		}
	}
}
     e98:	46bd      	mov	sp, r7
     e9a:	b004      	add	sp, #16
     e9c:	bd80      	pop	{r7, pc}
     e9e:	46c0      	nop			; (mov r8, r8)
     ea0:	00000da9 	.word	0x00000da9

00000ea4 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
     ea4:	b580      	push	{r7, lr}
     ea6:	b084      	sub	sp, #16
     ea8:	af00      	add	r7, sp, #0
     eaa:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     eac:	687b      	ldr	r3, [r7, #4]
     eae:	681b      	ldr	r3, [r3, #0]
     eb0:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync. */
	_i2c_master_wait_for_sync(module);
     eb2:	687b      	ldr	r3, [r7, #4]
     eb4:	0018      	movs	r0, r3
     eb6:	4b06      	ldr	r3, [pc, #24]	; (ed0 <i2c_master_disable+0x2c>)
     eb8:	4798      	blx	r3

	/* Disable module. */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
     eba:	68fb      	ldr	r3, [r7, #12]
     ebc:	681b      	ldr	r3, [r3, #0]
     ebe:	2202      	movs	r2, #2
     ec0:	4393      	bics	r3, r2
     ec2:	001a      	movs	r2, r3
     ec4:	68fb      	ldr	r3, [r7, #12]
     ec6:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Disable module interrupts */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#endif
}
     ec8:	46c0      	nop			; (mov r8, r8)
     eca:	46bd      	mov	sp, r7
     ecc:	b004      	add	sp, #16
     ece:	bd80      	pop	{r7, pc}
     ed0:	00000da9 	.word	0x00000da9

00000ed4 <i2c_enable_phys>:


/** \brief This function initializes and enables the I2C peripheral.
 * */
void i2c_enable_phys(void)
{
     ed4:	b580      	push	{r7, lr}
     ed6:	b08c      	sub	sp, #48	; 0x30
     ed8:	af00      	add	r7, sp, #0
	/* Initialize config structure and software module. */
	//! [init_conf]
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
     eda:	003b      	movs	r3, r7
     edc:	0018      	movs	r0, r3
     ede:	4b0b      	ldr	r3, [pc, #44]	; (f0c <i2c_enable_phys+0x38>)
     ee0:	4798      	blx	r3
	//! [init_conf]

	config_i2c_master.baud_rate = 400;
     ee2:	003b      	movs	r3, r7
     ee4:	22c8      	movs	r2, #200	; 0xc8
     ee6:	0052      	lsls	r2, r2, #1
     ee8:	601a      	str	r2, [r3, #0]

	/* Change buffer timeout to something longer. */
	//! [conf_change]
	config_i2c_master.buffer_timeout = 10000;
     eea:	003b      	movs	r3, r7
     eec:	4a08      	ldr	r2, [pc, #32]	; (f10 <i2c_enable_phys+0x3c>)
     eee:	82da      	strh	r2, [r3, #22]
	//! [conf_change]

	/* Initialize and enable device with config. */
	//! [init_module]
	i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);
     ef0:	003a      	movs	r2, r7
     ef2:	4908      	ldr	r1, [pc, #32]	; (f14 <i2c_enable_phys+0x40>)
     ef4:	4b08      	ldr	r3, [pc, #32]	; (f18 <i2c_enable_phys+0x44>)
     ef6:	0018      	movs	r0, r3
     ef8:	4b08      	ldr	r3, [pc, #32]	; (f1c <i2c_enable_phys+0x48>)
     efa:	4798      	blx	r3
	//! [init_module]

	//! [enable_module]
	i2c_master_enable(&i2c_master_instance);
     efc:	4b06      	ldr	r3, [pc, #24]	; (f18 <i2c_enable_phys+0x44>)
     efe:	0018      	movs	r0, r3
     f00:	4b07      	ldr	r3, [pc, #28]	; (f20 <i2c_enable_phys+0x4c>)
     f02:	4798      	blx	r3
	//! [enable_module]
}
     f04:	46c0      	nop			; (mov r8, r8)
     f06:	46bd      	mov	sp, r7
     f08:	b00c      	add	sp, #48	; 0x30
     f0a:	bd80      	pop	{r7, pc}
     f0c:	00000dcd 	.word	0x00000dcd
     f10:	00002710 	.word	0x00002710
     f14:	42001000 	.word	0x42001000
     f18:	200003b8 	.word	0x200003b8
     f1c:	000011a9 	.word	0x000011a9
     f20:	00000e49 	.word	0x00000e49

00000f24 <i2c_disable_phys>:


/** \brief This function disables the I2C peripheral. */
void i2c_disable_phys(void)
{
     f24:	b580      	push	{r7, lr}
     f26:	af00      	add	r7, sp, #0
	//! [enable_module]
	i2c_master_disable(&i2c_master_instance);
     f28:	4b03      	ldr	r3, [pc, #12]	; (f38 <i2c_disable_phys+0x14>)
     f2a:	0018      	movs	r0, r3
     f2c:	4b03      	ldr	r3, [pc, #12]	; (f3c <i2c_disable_phys+0x18>)
     f2e:	4798      	blx	r3
	//! [enable_module]
}
     f30:	46c0      	nop			; (mov r8, r8)
     f32:	46bd      	mov	sp, r7
     f34:	bd80      	pop	{r7, pc}
     f36:	46c0      	nop			; (mov r8, r8)
     f38:	200003b8 	.word	0x200003b8
     f3c:	00000ea5 	.word	0x00000ea5

00000f40 <i2c_send_start>:

/** \brief This function creates a Start condition (SDA low, then SCL low).
 * \return status of the operation
 * */
uint8_t i2c_send_start(void)
{
     f40:	b580      	push	{r7, lr}
     f42:	af00      	add	r7, sp, #0
	// Do nothing
	return I2C_FUNCTION_RETCODE_SUCCESS;
     f44:	2300      	movs	r3, #0
}
     f46:	0018      	movs	r0, r3
     f48:	46bd      	mov	sp, r7
     f4a:	bd80      	pop	{r7, pc}

00000f4c <i2c_send_stop>:

/** \brief This function creates a Stop condition (SCL high, then SDA high).
 * \return status of the operation
 * */
uint8_t i2c_send_stop(void)
{
     f4c:	b580      	push	{r7, lr}
     f4e:	b082      	sub	sp, #8
     f50:	af00      	add	r7, sp, #0
	SercomI2cm *const i2c_module = &(i2c_master_instance.hw->I2CM);
     f52:	4b09      	ldr	r3, [pc, #36]	; (f78 <i2c_send_stop+0x2c>)
     f54:	681b      	ldr	r3, [r3, #0]
     f56:	607b      	str	r3, [r7, #4]

	/* Send stop command unless arbitration is lost. */
	_i2c_master_wait_for_sync(&i2c_master_instance);
     f58:	4b07      	ldr	r3, [pc, #28]	; (f78 <i2c_send_stop+0x2c>)
     f5a:	0018      	movs	r0, r3
     f5c:	4b07      	ldr	r3, [pc, #28]	; (f7c <i2c_send_stop+0x30>)
     f5e:	4798      	blx	r3
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     f60:	687b      	ldr	r3, [r7, #4]
     f62:	685b      	ldr	r3, [r3, #4]
     f64:	22c0      	movs	r2, #192	; 0xc0
     f66:	0292      	lsls	r2, r2, #10
     f68:	431a      	orrs	r2, r3
     f6a:	687b      	ldr	r3, [r7, #4]
     f6c:	605a      	str	r2, [r3, #4]
	return I2C_FUNCTION_RETCODE_SUCCESS;
     f6e:	2300      	movs	r3, #0
}
     f70:	0018      	movs	r0, r3
     f72:	46bd      	mov	sp, r7
     f74:	b002      	add	sp, #8
     f76:	bd80      	pop	{r7, pc}
     f78:	200003b8 	.word	0x200003b8
     f7c:	00000da9 	.word	0x00000da9

00000f80 <i2c_send_bytes>:
 * \param[in] count number of bytes to send
 * \param[in] data pointer to tx buffer
 * \return status of the operation
 */
uint8_t i2c_send_bytes(uint8_t count, uint8_t *data)
{
     f80:	b590      	push	{r4, r7, lr}
     f82:	b087      	sub	sp, #28
     f84:	af00      	add	r7, sp, #0
     f86:	0002      	movs	r2, r0
     f88:	6039      	str	r1, [r7, #0]
     f8a:	1dfb      	adds	r3, r7, #7
     f8c:	701a      	strb	r2, [r3, #0]
	enum status_code statusCode = STATUS_OK;
     f8e:	2317      	movs	r3, #23
     f90:	18fb      	adds	r3, r7, r3
     f92:	2200      	movs	r2, #0
     f94:	701a      	strb	r2, [r3, #0]
	struct i2c_master_packet packet = {
     f96:	4b1a      	ldr	r3, [pc, #104]	; (1000 <i2c_send_bytes+0x80>)
     f98:	781b      	ldrb	r3, [r3, #0]
     f9a:	085b      	lsrs	r3, r3, #1
     f9c:	b2db      	uxtb	r3, r3
     f9e:	b29a      	uxth	r2, r3
     fa0:	2308      	movs	r3, #8
     fa2:	18fb      	adds	r3, r7, r3
     fa4:	801a      	strh	r2, [r3, #0]
     fa6:	1dfb      	adds	r3, r7, #7
     fa8:	781b      	ldrb	r3, [r3, #0]
     faa:	b29a      	uxth	r2, r3
     fac:	2308      	movs	r3, #8
     fae:	18fb      	adds	r3, r7, r3
     fb0:	805a      	strh	r2, [r3, #2]
     fb2:	2308      	movs	r3, #8
     fb4:	18fb      	adds	r3, r7, r3
     fb6:	683a      	ldr	r2, [r7, #0]
     fb8:	605a      	str	r2, [r3, #4]
     fba:	2308      	movs	r3, #8
     fbc:	18fb      	adds	r3, r7, r3
     fbe:	2200      	movs	r2, #0
     fc0:	721a      	strb	r2, [r3, #8]
     fc2:	2308      	movs	r3, #8
     fc4:	18fb      	adds	r3, r7, r3
     fc6:	2200      	movs	r2, #0
     fc8:	725a      	strb	r2, [r3, #9]
     fca:	2308      	movs	r3, #8
     fcc:	18fb      	adds	r3, r7, r3
     fce:	2200      	movs	r2, #0
     fd0:	729a      	strb	r2, [r3, #10]
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	//	statusCode = i2c_master_write_packet_wait(&i2c_master_instance, &packet);
	statusCode = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &packet);
     fd2:	2317      	movs	r3, #23
     fd4:	18fc      	adds	r4, r7, r3
     fd6:	2308      	movs	r3, #8
     fd8:	18fa      	adds	r2, r7, r3
     fda:	4b0a      	ldr	r3, [pc, #40]	; (1004 <i2c_send_bytes+0x84>)
     fdc:	0011      	movs	r1, r2
     fde:	0018      	movs	r0, r3
     fe0:	4b09      	ldr	r3, [pc, #36]	; (1008 <i2c_send_bytes+0x88>)
     fe2:	4798      	blx	r3
     fe4:	0003      	movs	r3, r0
     fe6:	7023      	strb	r3, [r4, #0]
	if (statusCode != STATUS_OK) return I2C_FUNCTION_RETCODE_COMM_FAIL;
     fe8:	2317      	movs	r3, #23
     fea:	18fb      	adds	r3, r7, r3
     fec:	781b      	ldrb	r3, [r3, #0]
     fee:	2b00      	cmp	r3, #0
     ff0:	d001      	beq.n	ff6 <i2c_send_bytes+0x76>
     ff2:	23f0      	movs	r3, #240	; 0xf0
     ff4:	e000      	b.n	ff8 <i2c_send_bytes+0x78>

	// Send the stop
	//statusCode = i2c_send_stop();
	//if (statusCode != STATUS_OK) return I2C_FUNCTION_RETCODE_COMM_FAIL;

	return I2C_FUNCTION_RETCODE_SUCCESS;
     ff6:	2300      	movs	r3, #0
}
     ff8:	0018      	movs	r0, r3
     ffa:	46bd      	mov	sp, r7
     ffc:	b007      	add	sp, #28
     ffe:	bd90      	pop	{r4, r7, pc}
    1000:	20000008 	.word	0x20000008
    1004:	200003b8 	.word	0x200003b8
    1008:	0000166d 	.word	0x0000166d

0000100c <i2c_receive_bytes>:
 * \param[in] count number of bytes to receive
 * \param[out] data pointer to rx buffer
 * \return status of the operation
 */
uint8_t i2c_receive_bytes(uint8_t count, uint8_t *data)
{
    100c:	b590      	push	{r4, r7, lr}
    100e:	b087      	sub	sp, #28
    1010:	af00      	add	r7, sp, #0
    1012:	0002      	movs	r2, r0
    1014:	6039      	str	r1, [r7, #0]
    1016:	1dfb      	adds	r3, r7, #7
    1018:	701a      	strb	r2, [r3, #0]
	enum status_code statusCode = I2C_FUNCTION_RETCODE_SUCCESS;
    101a:	2317      	movs	r3, #23
    101c:	18fb      	adds	r3, r7, r3
    101e:	2200      	movs	r2, #0
    1020:	701a      	strb	r2, [r3, #0]
	struct i2c_master_packet packet = {
    1022:	4b21      	ldr	r3, [pc, #132]	; (10a8 <i2c_receive_bytes+0x9c>)
    1024:	781b      	ldrb	r3, [r3, #0]
    1026:	085b      	lsrs	r3, r3, #1
    1028:	b2db      	uxtb	r3, r3
    102a:	b29a      	uxth	r2, r3
    102c:	2308      	movs	r3, #8
    102e:	18fb      	adds	r3, r7, r3
    1030:	801a      	strh	r2, [r3, #0]
    1032:	1dfb      	adds	r3, r7, #7
    1034:	781b      	ldrb	r3, [r3, #0]
    1036:	b29a      	uxth	r2, r3
    1038:	2308      	movs	r3, #8
    103a:	18fb      	adds	r3, r7, r3
    103c:	805a      	strh	r2, [r3, #2]
    103e:	2308      	movs	r3, #8
    1040:	18fb      	adds	r3, r7, r3
    1042:	683a      	ldr	r2, [r7, #0]
    1044:	605a      	str	r2, [r3, #4]
    1046:	2308      	movs	r3, #8
    1048:	18fb      	adds	r3, r7, r3
    104a:	2200      	movs	r2, #0
    104c:	721a      	strb	r2, [r3, #8]
    104e:	2308      	movs	r3, #8
    1050:	18fb      	adds	r3, r7, r3
    1052:	2200      	movs	r2, #0
    1054:	725a      	strb	r2, [r3, #9]
    1056:	2308      	movs	r3, #8
    1058:	18fb      	adds	r3, r7, r3
    105a:	2200      	movs	r2, #0
    105c:	729a      	strb	r2, [r3, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	statusCode = i2c_master_read_packet_wait(&i2c_master_instance, &packet);
    105e:	2317      	movs	r3, #23
    1060:	18fc      	adds	r4, r7, r3
    1062:	2308      	movs	r3, #8
    1064:	18fa      	adds	r2, r7, r3
    1066:	4b11      	ldr	r3, [pc, #68]	; (10ac <i2c_receive_bytes+0xa0>)
    1068:	0011      	movs	r1, r2
    106a:	0018      	movs	r0, r3
    106c:	4b10      	ldr	r3, [pc, #64]	; (10b0 <i2c_receive_bytes+0xa4>)
    106e:	4798      	blx	r3
    1070:	0003      	movs	r3, r0
    1072:	7023      	strb	r3, [r4, #0]
	if (statusCode != STATUS_OK)
    1074:	2317      	movs	r3, #23
    1076:	18fb      	adds	r3, r7, r3
    1078:	781b      	ldrb	r3, [r3, #0]
    107a:	2b00      	cmp	r3, #0
    107c:	d001      	beq.n	1082 <i2c_receive_bytes+0x76>
	{
		return I2C_FUNCTION_RETCODE_COMM_FAIL;
    107e:	23f0      	movs	r3, #240	; 0xf0
    1080:	e00d      	b.n	109e <i2c_receive_bytes+0x92>
	}
	
	statusCode = i2c_send_stop();
    1082:	2317      	movs	r3, #23
    1084:	18fc      	adds	r4, r7, r3
    1086:	4b0b      	ldr	r3, [pc, #44]	; (10b4 <i2c_receive_bytes+0xa8>)
    1088:	4798      	blx	r3
    108a:	0003      	movs	r3, r0
    108c:	7023      	strb	r3, [r4, #0]
	if (statusCode != I2C_FUNCTION_RETCODE_SUCCESS) return I2C_FUNCTION_RETCODE_COMM_FAIL;
    108e:	2317      	movs	r3, #23
    1090:	18fb      	adds	r3, r7, r3
    1092:	781b      	ldrb	r3, [r3, #0]
    1094:	2b00      	cmp	r3, #0
    1096:	d001      	beq.n	109c <i2c_receive_bytes+0x90>
    1098:	23f0      	movs	r3, #240	; 0xf0
    109a:	e000      	b.n	109e <i2c_receive_bytes+0x92>
	
	return I2C_FUNCTION_RETCODE_SUCCESS;
    109c:	2300      	movs	r3, #0
}
    109e:	0018      	movs	r0, r3
    10a0:	46bd      	mov	sp, r7
    10a2:	b007      	add	sp, #28
    10a4:	bd90      	pop	{r4, r7, pc}
    10a6:	46c0      	nop			; (mov r8, r8)
    10a8:	20000008 	.word	0x20000008
    10ac:	200003b8 	.word	0x200003b8
    10b0:	00001659 	.word	0x00001659
    10b4:	00000f4d 	.word	0x00000f4d

000010b8 <i2c_send_slave_address>:
/** \brief This function creates a Start condition and sends the I2C address.
 * \param[in] read I2C_READ for reading, I2C_WRITE for writing
 * \return status of the operation
 */
uint8_t i2c_send_slave_address(uint8_t read)
{
    10b8:	b580      	push	{r7, lr}
    10ba:	b082      	sub	sp, #8
    10bc:	af00      	add	r7, sp, #0
    10be:	0002      	movs	r2, r0
    10c0:	1dfb      	adds	r3, r7, #7
    10c2:	701a      	strb	r2, [r3, #0]
	// Do nothing
	return AES132_FUNCTION_RETCODE_SUCCESS;
    10c4:	2300      	movs	r3, #0
}
    10c6:	0018      	movs	r0, r3
    10c8:	46bd      	mov	sp, r7
    10ca:	b002      	add	sp, #8
    10cc:	bd80      	pop	{r7, pc}
	...

000010d0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    10d0:	4b0c      	ldr	r3, [pc, #48]	; (1104 <cpu_irq_enter_critical+0x34>)
    10d2:	681b      	ldr	r3, [r3, #0]
    10d4:	2b00      	cmp	r3, #0
    10d6:	d106      	bne.n	10e6 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    10d8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    10dc:	2b00      	cmp	r3, #0
    10de:	d007      	beq.n	10f0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    10e0:	2200      	movs	r2, #0
    10e2:	4b09      	ldr	r3, [pc, #36]	; (1108 <cpu_irq_enter_critical+0x38>)
    10e4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    10e6:	4a07      	ldr	r2, [pc, #28]	; (1104 <cpu_irq_enter_critical+0x34>)
    10e8:	6813      	ldr	r3, [r2, #0]
    10ea:	3301      	adds	r3, #1
    10ec:	6013      	str	r3, [r2, #0]
}
    10ee:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    10f0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    10f2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    10f6:	2200      	movs	r2, #0
    10f8:	4b04      	ldr	r3, [pc, #16]	; (110c <cpu_irq_enter_critical+0x3c>)
    10fa:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    10fc:	3201      	adds	r2, #1
    10fe:	4b02      	ldr	r3, [pc, #8]	; (1108 <cpu_irq_enter_critical+0x38>)
    1100:	701a      	strb	r2, [r3, #0]
    1102:	e7f0      	b.n	10e6 <cpu_irq_enter_critical+0x16>
    1104:	20000208 	.word	0x20000208
    1108:	2000020c 	.word	0x2000020c
    110c:	20000009 	.word	0x20000009

00001110 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1110:	4b08      	ldr	r3, [pc, #32]	; (1134 <cpu_irq_leave_critical+0x24>)
    1112:	681a      	ldr	r2, [r3, #0]
    1114:	3a01      	subs	r2, #1
    1116:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1118:	681b      	ldr	r3, [r3, #0]
    111a:	2b00      	cmp	r3, #0
    111c:	d109      	bne.n	1132 <cpu_irq_leave_critical+0x22>
    111e:	4b06      	ldr	r3, [pc, #24]	; (1138 <cpu_irq_leave_critical+0x28>)
    1120:	781b      	ldrb	r3, [r3, #0]
    1122:	2b00      	cmp	r3, #0
    1124:	d005      	beq.n	1132 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1126:	2201      	movs	r2, #1
    1128:	4b04      	ldr	r3, [pc, #16]	; (113c <cpu_irq_leave_critical+0x2c>)
    112a:	701a      	strb	r2, [r3, #0]
    112c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1130:	b662      	cpsie	i
	}
}
    1132:	4770      	bx	lr
    1134:	20000208 	.word	0x20000208
    1138:	2000020c 	.word	0x2000020c
    113c:	20000009 	.word	0x20000009

00001140 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1140:	b5f0      	push	{r4, r5, r6, r7, lr}
    1142:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1144:	ac01      	add	r4, sp, #4
    1146:	2501      	movs	r5, #1
    1148:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    114a:	2700      	movs	r7, #0
    114c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    114e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1150:	0021      	movs	r1, r4
    1152:	203e      	movs	r0, #62	; 0x3e
    1154:	4e06      	ldr	r6, [pc, #24]	; (1170 <system_board_init+0x30>)
    1156:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1158:	2280      	movs	r2, #128	; 0x80
    115a:	05d2      	lsls	r2, r2, #23
    115c:	4b05      	ldr	r3, [pc, #20]	; (1174 <system_board_init+0x34>)
    115e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1160:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1162:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1164:	0021      	movs	r1, r4
    1166:	200f      	movs	r0, #15
    1168:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    116a:	b003      	add	sp, #12
    116c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    116e:	46c0      	nop			; (mov r8, r8)
    1170:	00001179 	.word	0x00001179
    1174:	41004480 	.word	0x41004480

00001178 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1178:	b500      	push	{lr}
    117a:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    117c:	ab01      	add	r3, sp, #4
    117e:	2280      	movs	r2, #128	; 0x80
    1180:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1182:	780a      	ldrb	r2, [r1, #0]
    1184:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1186:	784a      	ldrb	r2, [r1, #1]
    1188:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    118a:	788a      	ldrb	r2, [r1, #2]
    118c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    118e:	0019      	movs	r1, r3
    1190:	4b01      	ldr	r3, [pc, #4]	; (1198 <port_pin_set_config+0x20>)
    1192:	4798      	blx	r3
}
    1194:	b003      	add	sp, #12
    1196:	bd00      	pop	{pc}
    1198:	0000234d 	.word	0x0000234d

0000119c <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    119c:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    119e:	2207      	movs	r2, #7
    11a0:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    11a2:	421a      	tst	r2, r3
    11a4:	d1fc      	bne.n	11a0 <_i2c_master_wait_for_sync+0x4>
}
    11a6:	4770      	bx	lr

000011a8 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    11a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    11aa:	46c6      	mov	lr, r8
    11ac:	b500      	push	{lr}
    11ae:	b082      	sub	sp, #8
    11b0:	0007      	movs	r7, r0
    11b2:	000d      	movs	r5, r1
    11b4:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    11b6:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    11b8:	0008      	movs	r0, r1
    11ba:	4b5c      	ldr	r3, [pc, #368]	; (132c <i2c_master_init+0x184>)
    11bc:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    11be:	4a5c      	ldr	r2, [pc, #368]	; (1330 <i2c_master_init+0x188>)
    11c0:	6a11      	ldr	r1, [r2, #32]
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    11c2:	1c84      	adds	r4, r0, #2
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    11c4:	2301      	movs	r3, #1
    11c6:	40a3      	lsls	r3, r4
    11c8:	430b      	orrs	r3, r1
    11ca:	6213      	str	r3, [r2, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    11cc:	a901      	add	r1, sp, #4
    11ce:	7b33      	ldrb	r3, [r6, #12]
    11d0:	700b      	strb	r3, [r1, #0]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    11d2:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    11d4:	b2c4      	uxtb	r4, r0
    11d6:	0020      	movs	r0, r4
    11d8:	4b56      	ldr	r3, [pc, #344]	; (1334 <i2c_master_init+0x18c>)
    11da:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    11dc:	0020      	movs	r0, r4
    11de:	4b56      	ldr	r3, [pc, #344]	; (1338 <i2c_master_init+0x190>)
    11e0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    11e2:	7b30      	ldrb	r0, [r6, #12]
    11e4:	2100      	movs	r1, #0
    11e6:	4b55      	ldr	r3, [pc, #340]	; (133c <i2c_master_init+0x194>)
    11e8:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    11ea:	682b      	ldr	r3, [r5, #0]
		return STATUS_ERR_DENIED;
    11ec:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    11ee:	079b      	lsls	r3, r3, #30
    11f0:	d503      	bpl.n	11fa <i2c_master_init+0x52>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    11f2:	b002      	add	sp, #8
    11f4:	bc04      	pop	{r2}
    11f6:	4690      	mov	r8, r2
    11f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    11fa:	682b      	ldr	r3, [r5, #0]
		return STATUS_BUSY;
    11fc:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    11fe:	07db      	lsls	r3, r3, #31
    1200:	d4f7      	bmi.n	11f2 <i2c_master_init+0x4a>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    1202:	2314      	movs	r3, #20
    1204:	602b      	str	r3, [r5, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1206:	683c      	ldr	r4, [r7, #0]
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    1208:	0020      	movs	r0, r4
    120a:	4b48      	ldr	r3, [pc, #288]	; (132c <i2c_master_init+0x184>)
    120c:	4798      	blx	r3
    120e:	4680      	mov	r8, r0
    1210:	2380      	movs	r3, #128	; 0x80
    1212:	466a      	mov	r2, sp
    1214:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1216:	2300      	movs	r3, #0
    1218:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    121a:	2201      	movs	r2, #1
    121c:	4669      	mov	r1, sp
    121e:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
    1220:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
    1222:	69f0      	ldr	r0, [r6, #28]
	uint32_t pad1 = config->pinmux_pad1;
    1224:	6a35      	ldr	r5, [r6, #32]
	if (pad0 == PINMUX_DEFAULT) {
    1226:	2800      	cmp	r0, #0
    1228:	d05d      	beq.n	12e6 <i2c_master_init+0x13e>
	pin_conf.mux_position = pad0 & 0xFFFF;
    122a:	466b      	mov	r3, sp
    122c:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    122e:	2302      	movs	r3, #2
    1230:	466a      	mov	r2, sp
    1232:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    1234:	0c00      	lsrs	r0, r0, #16
    1236:	b2c0      	uxtb	r0, r0
    1238:	4669      	mov	r1, sp
    123a:	4b41      	ldr	r3, [pc, #260]	; (1340 <i2c_master_init+0x198>)
    123c:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    123e:	2d00      	cmp	r5, #0
    1240:	d056      	beq.n	12f0 <i2c_master_init+0x148>
	pin_conf.mux_position = pad1 & 0xFFFF;
    1242:	466b      	mov	r3, sp
    1244:	701d      	strb	r5, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    1246:	2302      	movs	r3, #2
    1248:	466a      	mov	r2, sp
    124a:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    124c:	0c28      	lsrs	r0, r5, #16
    124e:	b2c0      	uxtb	r0, r0
    1250:	4669      	mov	r1, sp
    1252:	4b3b      	ldr	r3, [pc, #236]	; (1340 <i2c_master_init+0x198>)
    1254:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    1256:	8ab3      	ldrh	r3, [r6, #20]
    1258:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
    125a:	8af3      	ldrh	r3, [r6, #22]
    125c:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    125e:	7e33      	ldrb	r3, [r6, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    1260:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    1262:	2b00      	cmp	r3, #0
    1264:	d104      	bne.n	1270 <i2c_master_init+0xc8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1266:	4b37      	ldr	r3, [pc, #220]	; (1344 <i2c_master_init+0x19c>)
    1268:	789b      	ldrb	r3, [r3, #2]
    126a:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    126c:	0fdb      	lsrs	r3, r3, #31
    126e:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    1270:	6933      	ldr	r3, [r6, #16]
    1272:	68b1      	ldr	r1, [r6, #8]
    1274:	430b      	orrs	r3, r1
    1276:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    1278:	2224      	movs	r2, #36	; 0x24
    127a:	5cb2      	ldrb	r2, [r6, r2]
    127c:	2a00      	cmp	r2, #0
    127e:	d002      	beq.n	1286 <i2c_master_init+0xde>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    1280:	2280      	movs	r2, #128	; 0x80
    1282:	05d2      	lsls	r2, r2, #23
    1284:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    1286:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    1288:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit) {
    128a:	222c      	movs	r2, #44	; 0x2c
    128c:	5cb2      	ldrb	r2, [r6, r2]
    128e:	2a00      	cmp	r2, #0
    1290:	d002      	beq.n	1298 <i2c_master_init+0xf0>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    1292:	2280      	movs	r2, #128	; 0x80
    1294:	0512      	lsls	r2, r2, #20
    1296:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    1298:	222d      	movs	r2, #45	; 0x2d
    129a:	5cb2      	ldrb	r2, [r6, r2]
    129c:	2a00      	cmp	r2, #0
    129e:	d002      	beq.n	12a6 <i2c_master_init+0xfe>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    12a0:	2280      	movs	r2, #128	; 0x80
    12a2:	0412      	lsls	r2, r2, #16
    12a4:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    12a6:	222e      	movs	r2, #46	; 0x2e
    12a8:	5cb2      	ldrb	r2, [r6, r2]
    12aa:	2a00      	cmp	r2, #0
    12ac:	d002      	beq.n	12b4 <i2c_master_init+0x10c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    12ae:	2280      	movs	r2, #128	; 0x80
    12b0:	03d2      	lsls	r2, r2, #15
    12b2:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    12b4:	6822      	ldr	r2, [r4, #0]
    12b6:	4313      	orrs	r3, r2
    12b8:	6023      	str	r3, [r4, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    12ba:	2380      	movs	r3, #128	; 0x80
    12bc:	005b      	lsls	r3, r3, #1
    12be:	6063      	str	r3, [r4, #4]
	tmp_baud = (int32_t)(div_ceil(
    12c0:	4645      	mov	r5, r8
    12c2:	3514      	adds	r5, #20
    12c4:	b2ed      	uxtb	r5, r5
    12c6:	0028      	movs	r0, r5
    12c8:	4b1f      	ldr	r3, [pc, #124]	; (1348 <i2c_master_init+0x1a0>)
    12ca:	4798      	blx	r3
    12cc:	21fa      	movs	r1, #250	; 0xfa
    12ce:	00c9      	lsls	r1, r1, #3
    12d0:	6833      	ldr	r3, [r6, #0]
    12d2:	4359      	muls	r1, r3
    12d4:	1e4b      	subs	r3, r1, #1
    12d6:	1818      	adds	r0, r3, r0
    12d8:	4b1c      	ldr	r3, [pc, #112]	; (134c <i2c_master_init+0x1a4>)
    12da:	4798      	blx	r3
				(2000*(config->baud_rate))) - 5);
    12dc:	1f47      	subs	r7, r0, #5
	if (tmp_baud > 255 || tmp_baud < 0) {
    12de:	2fff      	cmp	r7, #255	; 0xff
    12e0:	d90c      	bls.n	12fc <i2c_master_init+0x154>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    12e2:	2040      	movs	r0, #64	; 0x40
    12e4:	e785      	b.n	11f2 <i2c_master_init+0x4a>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    12e6:	2100      	movs	r1, #0
    12e8:	0020      	movs	r0, r4
    12ea:	4b19      	ldr	r3, [pc, #100]	; (1350 <i2c_master_init+0x1a8>)
    12ec:	4798      	blx	r3
    12ee:	e79c      	b.n	122a <i2c_master_init+0x82>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    12f0:	2101      	movs	r1, #1
    12f2:	0020      	movs	r0, r4
    12f4:	4b16      	ldr	r3, [pc, #88]	; (1350 <i2c_master_init+0x1a8>)
    12f6:	4798      	blx	r3
    12f8:	0005      	movs	r5, r0
    12fa:	e7a2      	b.n	1242 <i2c_master_init+0x9a>
		tmp_baud_hs = (int32_t)(div_ceil(
    12fc:	0028      	movs	r0, r5
    12fe:	4b12      	ldr	r3, [pc, #72]	; (1348 <i2c_master_init+0x1a0>)
    1300:	4798      	blx	r3
    1302:	6873      	ldr	r3, [r6, #4]
    1304:	21fa      	movs	r1, #250	; 0xfa
    1306:	00c9      	lsls	r1, r1, #3
    1308:	4359      	muls	r1, r3
    130a:	1e4b      	subs	r3, r1, #1
    130c:	1818      	adds	r0, r3, r0
    130e:	4b0f      	ldr	r3, [pc, #60]	; (134c <i2c_master_init+0x1a4>)
    1310:	4798      	blx	r3
				(2000*(config->baud_rate_high_speed))) - 1);
    1312:	3801      	subs	r0, #1
		if (tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    1314:	28ff      	cmp	r0, #255	; 0xff
    1316:	d8e4      	bhi.n	12e2 <i2c_master_init+0x13a>
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs);
    1318:	0400      	lsls	r0, r0, #16
    131a:	23ff      	movs	r3, #255	; 0xff
    131c:	041b      	lsls	r3, r3, #16
    131e:	4018      	ands	r0, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1320:	23ff      	movs	r3, #255	; 0xff
    1322:	401f      	ands	r7, r3
    1324:	4338      	orrs	r0, r7
    1326:	60e0      	str	r0, [r4, #12]
	enum status_code tmp_status_code = STATUS_OK;
    1328:	2000      	movs	r0, #0
    132a:	e762      	b.n	11f2 <i2c_master_init+0x4a>
    132c:	00001a3d 	.word	0x00001a3d
    1330:	40000400 	.word	0x40000400
    1334:	00002255 	.word	0x00002255
    1338:	000021c9 	.word	0x000021c9
    133c:	00001879 	.word	0x00001879
    1340:	0000234d 	.word	0x0000234d
    1344:	41002000 	.word	0x41002000
    1348:	00002271 	.word	0x00002271
    134c:	0000255d 	.word	0x0000255d
    1350:	000018c5 	.word	0x000018c5

00001354 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1354:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1356:	7e1a      	ldrb	r2, [r3, #24]
    1358:	0792      	lsls	r2, r2, #30
    135a:	d507      	bpl.n	136c <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    135c:	2202      	movs	r2, #2
    135e:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1360:	8b5b      	ldrh	r3, [r3, #26]
    1362:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    1364:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    1366:	17db      	asrs	r3, r3, #31
    1368:	4018      	ands	r0, r3
}
    136a:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    136c:	8b5a      	ldrh	r2, [r3, #26]
    136e:	0752      	lsls	r2, r2, #29
    1370:	d506      	bpl.n	1380 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1372:	6859      	ldr	r1, [r3, #4]
    1374:	22c0      	movs	r2, #192	; 0xc0
    1376:	0292      	lsls	r2, r2, #10
    1378:	430a      	orrs	r2, r1
    137a:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    137c:	2018      	movs	r0, #24
    137e:	e7f4      	b.n	136a <_i2c_master_address_response+0x16>
	return STATUS_OK;
    1380:	2000      	movs	r0, #0
    1382:	e7f2      	b.n	136a <_i2c_master_address_response+0x16>

00001384 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    1384:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1386:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    1388:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    138a:	2401      	movs	r4, #1
    138c:	2502      	movs	r5, #2
    138e:	7e11      	ldrb	r1, [r2, #24]
    1390:	4221      	tst	r1, r4
    1392:	d10b      	bne.n	13ac <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    1394:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1396:	4229      	tst	r1, r5
    1398:	d106      	bne.n	13a8 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    139a:	3301      	adds	r3, #1
    139c:	b29b      	uxth	r3, r3
    139e:	8901      	ldrh	r1, [r0, #8]
    13a0:	4299      	cmp	r1, r3
    13a2:	d8f4      	bhi.n	138e <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    13a4:	2012      	movs	r0, #18
    13a6:	e002      	b.n	13ae <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    13a8:	2000      	movs	r0, #0
    13aa:	e000      	b.n	13ae <_i2c_master_wait_for_bus+0x2a>
    13ac:	2000      	movs	r0, #0
}
    13ae:	bd30      	pop	{r4, r5, pc}

000013b0 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    13b0:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    13b2:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    13b4:	6862      	ldr	r2, [r4, #4]
    13b6:	2380      	movs	r3, #128	; 0x80
    13b8:	02db      	lsls	r3, r3, #11
    13ba:	4313      	orrs	r3, r2
    13bc:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    13be:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    13c0:	4b02      	ldr	r3, [pc, #8]	; (13cc <_i2c_master_send_hs_master_code+0x1c>)
    13c2:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    13c4:	2301      	movs	r3, #1
    13c6:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    13c8:	bd10      	pop	{r4, pc}
    13ca:	46c0      	nop			; (mov r8, r8)
    13cc:	00001385 	.word	0x00001385

000013d0 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    13d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    13d2:	46de      	mov	lr, fp
    13d4:	4657      	mov	r7, sl
    13d6:	464e      	mov	r6, r9
    13d8:	4645      	mov	r5, r8
    13da:	b5e0      	push	{r5, r6, r7, lr}
    13dc:	b083      	sub	sp, #12
    13de:	0006      	movs	r6, r0
    13e0:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    13e2:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    13e4:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    13e6:	682b      	ldr	r3, [r5, #0]
    13e8:	011b      	lsls	r3, r3, #4
    13ea:	0fdb      	lsrs	r3, r3, #31
    13ec:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    13ee:	7a4b      	ldrb	r3, [r1, #9]
    13f0:	2b00      	cmp	r3, #0
    13f2:	d123      	bne.n	143c <_i2c_master_read_packet+0x6c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    13f4:	686b      	ldr	r3, [r5, #4]
    13f6:	4a55      	ldr	r2, [pc, #340]	; (154c <_i2c_master_read_packet+0x17c>)
    13f8:	4013      	ands	r3, r2
    13fa:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    13fc:	464b      	mov	r3, r9
    13fe:	7a1b      	ldrb	r3, [r3, #8]
    1400:	2b00      	cmp	r3, #0
    1402:	d11f      	bne.n	1444 <_i2c_master_read_packet+0x74>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1404:	464b      	mov	r3, r9
    1406:	881b      	ldrh	r3, [r3, #0]
    1408:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    140a:	464a      	mov	r2, r9
    140c:	7a52      	ldrb	r2, [r2, #9]
    140e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1410:	4313      	orrs	r3, r2
    1412:	2201      	movs	r2, #1
    1414:	4313      	orrs	r3, r2
    1416:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1418:	0030      	movs	r0, r6
    141a:	4b4d      	ldr	r3, [pc, #308]	; (1550 <_i2c_master_read_packet+0x180>)
    141c:	4798      	blx	r3
    141e:	9001      	str	r0, [sp, #4]

	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1420:	686b      	ldr	r3, [r5, #4]
    1422:	4a4a      	ldr	r2, [pc, #296]	; (154c <_i2c_master_read_packet+0x17c>)
    1424:	4013      	ands	r3, r2
    1426:	606b      	str	r3, [r5, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    1428:	2800      	cmp	r0, #0
    142a:	d034      	beq.n	1496 <_i2c_master_read_packet+0xc6>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    142c:	9801      	ldr	r0, [sp, #4]
    142e:	b003      	add	sp, #12
    1430:	bc3c      	pop	{r2, r3, r4, r5}
    1432:	4690      	mov	r8, r2
    1434:	4699      	mov	r9, r3
    1436:	46a2      	mov	sl, r4
    1438:	46ab      	mov	fp, r5
    143a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    143c:	7a89      	ldrb	r1, [r1, #10]
    143e:	4b45      	ldr	r3, [pc, #276]	; (1554 <_i2c_master_read_packet+0x184>)
    1440:	4798      	blx	r3
    1442:	e7d7      	b.n	13f4 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    1444:	464b      	mov	r3, r9
    1446:	881b      	ldrh	r3, [r3, #0]
    1448:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    144a:	464a      	mov	r2, r9
    144c:	7a52      	ldrb	r2, [r2, #9]
    144e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    1450:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1452:	2280      	movs	r2, #128	; 0x80
    1454:	0212      	lsls	r2, r2, #8
    1456:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    1458:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    145a:	0030      	movs	r0, r6
    145c:	4b3c      	ldr	r3, [pc, #240]	; (1550 <_i2c_master_read_packet+0x180>)
    145e:	4798      	blx	r3
    1460:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1462:	686b      	ldr	r3, [r5, #4]
    1464:	4a39      	ldr	r2, [pc, #228]	; (154c <_i2c_master_read_packet+0x17c>)
    1466:	4013      	ands	r3, r2
    1468:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    146a:	2800      	cmp	r0, #0
    146c:	d1de      	bne.n	142c <_i2c_master_read_packet+0x5c>
			tmp_status = _i2c_master_address_response(module);
    146e:	0030      	movs	r0, r6
    1470:	4b39      	ldr	r3, [pc, #228]	; (1558 <_i2c_master_read_packet+0x188>)
    1472:	4798      	blx	r3
    1474:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    1476:	2800      	cmp	r0, #0
    1478:	d1d8      	bne.n	142c <_i2c_master_read_packet+0x5c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    147a:	464b      	mov	r3, r9
    147c:	881b      	ldrh	r3, [r3, #0]
    147e:	0a1b      	lsrs	r3, r3, #8
    1480:	2278      	movs	r2, #120	; 0x78
    1482:	4313      	orrs	r3, r2
    1484:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1486:	464a      	mov	r2, r9
    1488:	7a52      	ldrb	r2, [r2, #9]
    148a:	0392      	lsls	r2, r2, #14
    148c:	2101      	movs	r1, #1
    148e:	430a      	orrs	r2, r1
    1490:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1492:	626b      	str	r3, [r5, #36]	; 0x24
    1494:	e7c0      	b.n	1418 <_i2c_master_read_packet+0x48>
		tmp_status = _i2c_master_address_response(module);
    1496:	0030      	movs	r0, r6
    1498:	4b2f      	ldr	r3, [pc, #188]	; (1558 <_i2c_master_read_packet+0x188>)
    149a:	4798      	blx	r3
    149c:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    149e:	2800      	cmp	r0, #0
    14a0:	d1c4      	bne.n	142c <_i2c_master_read_packet+0x5c>
    14a2:	3c01      	subs	r4, #1
    14a4:	b2a4      	uxth	r4, r4
    14a6:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    14a8:	4b2c      	ldr	r3, [pc, #176]	; (155c <_i2c_master_read_packet+0x18c>)
    14aa:	469b      	mov	fp, r3
    14ac:	e015      	b.n	14da <_i2c_master_read_packet+0x10a>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    14ae:	2c01      	cmp	r4, #1
    14b0:	d020      	beq.n	14f4 <_i2c_master_read_packet+0x124>
				_i2c_master_wait_for_sync(module);
    14b2:	0030      	movs	r0, r6
    14b4:	4b2a      	ldr	r3, [pc, #168]	; (1560 <_i2c_master_read_packet+0x190>)
    14b6:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    14b8:	4643      	mov	r3, r8
    14ba:	1c5f      	adds	r7, r3, #1
    14bc:	b2bf      	uxth	r7, r7
    14be:	2328      	movs	r3, #40	; 0x28
    14c0:	5ceb      	ldrb	r3, [r5, r3]
    14c2:	464a      	mov	r2, r9
    14c4:	6852      	ldr	r2, [r2, #4]
    14c6:	4641      	mov	r1, r8
    14c8:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    14ca:	0030      	movs	r0, r6
    14cc:	4b20      	ldr	r3, [pc, #128]	; (1550 <_i2c_master_read_packet+0x180>)
    14ce:	4798      	blx	r3
    14d0:	3c01      	subs	r4, #1
    14d2:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    14d4:	2800      	cmp	r0, #0
    14d6:	d115      	bne.n	1504 <_i2c_master_read_packet+0x134>
				packet->data[counter++] = i2c_module->DATA.reg;
    14d8:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    14da:	455c      	cmp	r4, fp
    14dc:	d014      	beq.n	1508 <_i2c_master_read_packet+0x138>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    14de:	8b6b      	ldrh	r3, [r5, #26]
    14e0:	069b      	lsls	r3, r3, #26
    14e2:	d52f      	bpl.n	1544 <_i2c_master_read_packet+0x174>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    14e4:	7af3      	ldrb	r3, [r6, #11]
    14e6:	2b00      	cmp	r3, #0
    14e8:	d0e3      	beq.n	14b2 <_i2c_master_read_packet+0xe2>
    14ea:	4653      	mov	r3, sl
    14ec:	2b00      	cmp	r3, #0
    14ee:	d1de      	bne.n	14ae <_i2c_master_read_packet+0xde>
    14f0:	2c00      	cmp	r4, #0
    14f2:	d1de      	bne.n	14b2 <_i2c_master_read_packet+0xe2>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    14f4:	686a      	ldr	r2, [r5, #4]
    14f6:	2380      	movs	r3, #128	; 0x80
    14f8:	02db      	lsls	r3, r3, #11
    14fa:	4313      	orrs	r3, r2
    14fc:	606b      	str	r3, [r5, #4]
    14fe:	3c01      	subs	r4, #1
    1500:	b2a4      	uxth	r4, r4
    1502:	e7ea      	b.n	14da <_i2c_master_read_packet+0x10a>
				packet->data[counter++] = i2c_module->DATA.reg;
    1504:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    1506:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    1508:	7ab3      	ldrb	r3, [r6, #10]
    150a:	2b00      	cmp	r3, #0
    150c:	d011      	beq.n	1532 <_i2c_master_read_packet+0x162>
			_i2c_master_wait_for_sync(module);
    150e:	0030      	movs	r0, r6
    1510:	4b13      	ldr	r3, [pc, #76]	; (1560 <_i2c_master_read_packet+0x190>)
    1512:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1514:	686a      	ldr	r2, [r5, #4]
    1516:	23c0      	movs	r3, #192	; 0xc0
    1518:	029b      	lsls	r3, r3, #10
    151a:	4313      	orrs	r3, r2
    151c:	606b      	str	r3, [r5, #4]
		_i2c_master_wait_for_sync(module);
    151e:	0030      	movs	r0, r6
    1520:	4b0f      	ldr	r3, [pc, #60]	; (1560 <_i2c_master_read_packet+0x190>)
    1522:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    1524:	2328      	movs	r3, #40	; 0x28
    1526:	5cea      	ldrb	r2, [r5, r3]
    1528:	464b      	mov	r3, r9
    152a:	685b      	ldr	r3, [r3, #4]
    152c:	4641      	mov	r1, r8
    152e:	545a      	strb	r2, [r3, r1]
    1530:	e77c      	b.n	142c <_i2c_master_read_packet+0x5c>
		  	_i2c_master_wait_for_sync(module);
    1532:	0030      	movs	r0, r6
    1534:	4b0a      	ldr	r3, [pc, #40]	; (1560 <_i2c_master_read_packet+0x190>)
    1536:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(1);
    1538:	686a      	ldr	r2, [r5, #4]
    153a:	2380      	movs	r3, #128	; 0x80
    153c:	025b      	lsls	r3, r3, #9
    153e:	4313      	orrs	r3, r2
    1540:	606b      	str	r3, [r5, #4]
    1542:	e7ec      	b.n	151e <_i2c_master_read_packet+0x14e>
				return STATUS_ERR_PACKET_COLLISION;
    1544:	2341      	movs	r3, #65	; 0x41
    1546:	9301      	str	r3, [sp, #4]
    1548:	e770      	b.n	142c <_i2c_master_read_packet+0x5c>
    154a:	46c0      	nop			; (mov r8, r8)
    154c:	fffbffff 	.word	0xfffbffff
    1550:	00001385 	.word	0x00001385
    1554:	000013b1 	.word	0x000013b1
    1558:	00001355 	.word	0x00001355
    155c:	0000ffff 	.word	0x0000ffff
    1560:	0000119d 	.word	0x0000119d

00001564 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1564:	b5f0      	push	{r4, r5, r6, r7, lr}
    1566:	46de      	mov	lr, fp
    1568:	4657      	mov	r7, sl
    156a:	464e      	mov	r6, r9
    156c:	4645      	mov	r5, r8
    156e:	b5e0      	push	{r5, r6, r7, lr}
    1570:	b083      	sub	sp, #12
    1572:	0006      	movs	r6, r0
    1574:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1576:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    1578:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    157a:	4b32      	ldr	r3, [pc, #200]	; (1644 <_i2c_master_write_packet+0xe0>)
    157c:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    157e:	7a7b      	ldrb	r3, [r7, #9]
    1580:	2b00      	cmp	r3, #0
    1582:	d11d      	bne.n	15c0 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1584:	686b      	ldr	r3, [r5, #4]
    1586:	4a30      	ldr	r2, [pc, #192]	; (1648 <_i2c_master_write_packet+0xe4>)
    1588:	4013      	ands	r3, r2
    158a:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    158c:	7a3b      	ldrb	r3, [r7, #8]
    158e:	2b00      	cmp	r3, #0
    1590:	d01b      	beq.n	15ca <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1592:	883b      	ldrh	r3, [r7, #0]
    1594:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1596:	7a7a      	ldrb	r2, [r7, #9]
    1598:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    159a:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    159c:	2280      	movs	r2, #128	; 0x80
    159e:	0212      	lsls	r2, r2, #8
    15a0:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    15a2:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    15a4:	0030      	movs	r0, r6
    15a6:	4b29      	ldr	r3, [pc, #164]	; (164c <_i2c_master_write_packet+0xe8>)
    15a8:	4798      	blx	r3
    15aa:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    15ac:	2800      	cmp	r0, #0
    15ae:	d013      	beq.n	15d8 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    15b0:	9801      	ldr	r0, [sp, #4]
    15b2:	b003      	add	sp, #12
    15b4:	bc3c      	pop	{r2, r3, r4, r5}
    15b6:	4690      	mov	r8, r2
    15b8:	4699      	mov	r9, r3
    15ba:	46a2      	mov	sl, r4
    15bc:	46ab      	mov	fp, r5
    15be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    15c0:	7ab9      	ldrb	r1, [r7, #10]
    15c2:	0030      	movs	r0, r6
    15c4:	4b22      	ldr	r3, [pc, #136]	; (1650 <_i2c_master_write_packet+0xec>)
    15c6:	4798      	blx	r3
    15c8:	e7dc      	b.n	1584 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    15ca:	883b      	ldrh	r3, [r7, #0]
    15cc:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    15ce:	7a7a      	ldrb	r2, [r7, #9]
    15d0:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    15d2:	4313      	orrs	r3, r2
    15d4:	626b      	str	r3, [r5, #36]	; 0x24
    15d6:	e7e5      	b.n	15a4 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    15d8:	0030      	movs	r0, r6
    15da:	4b1e      	ldr	r3, [pc, #120]	; (1654 <_i2c_master_write_packet+0xf0>)
    15dc:	4798      	blx	r3
    15de:	1e03      	subs	r3, r0, #0
    15e0:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    15e2:	d1e5      	bne.n	15b0 <_i2c_master_write_packet+0x4c>
    15e4:	46a0      	mov	r8, r4
    15e6:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    15e8:	3320      	adds	r3, #32
    15ea:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    15ec:	4b15      	ldr	r3, [pc, #84]	; (1644 <_i2c_master_write_packet+0xe0>)
    15ee:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    15f0:	4b16      	ldr	r3, [pc, #88]	; (164c <_i2c_master_write_packet+0xe8>)
    15f2:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    15f4:	4544      	cmp	r4, r8
    15f6:	d015      	beq.n	1624 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    15f8:	8b6b      	ldrh	r3, [r5, #26]
    15fa:	464a      	mov	r2, r9
    15fc:	4213      	tst	r3, r2
    15fe:	d01d      	beq.n	163c <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    1600:	0030      	movs	r0, r6
    1602:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    1604:	687b      	ldr	r3, [r7, #4]
    1606:	5d1a      	ldrb	r2, [r3, r4]
    1608:	2328      	movs	r3, #40	; 0x28
    160a:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    160c:	0030      	movs	r0, r6
    160e:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    1610:	2800      	cmp	r0, #0
    1612:	d106      	bne.n	1622 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1614:	8b6b      	ldrh	r3, [r5, #26]
    1616:	3401      	adds	r4, #1
    1618:	075b      	lsls	r3, r3, #29
    161a:	d5eb      	bpl.n	15f4 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    161c:	231e      	movs	r3, #30
    161e:	9301      	str	r3, [sp, #4]
    1620:	e000      	b.n	1624 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    1622:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    1624:	7ab3      	ldrb	r3, [r6, #10]
    1626:	2b00      	cmp	r3, #0
    1628:	d0c2      	beq.n	15b0 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    162a:	0030      	movs	r0, r6
    162c:	4b05      	ldr	r3, [pc, #20]	; (1644 <_i2c_master_write_packet+0xe0>)
    162e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1630:	686a      	ldr	r2, [r5, #4]
    1632:	23c0      	movs	r3, #192	; 0xc0
    1634:	029b      	lsls	r3, r3, #10
    1636:	4313      	orrs	r3, r2
    1638:	606b      	str	r3, [r5, #4]
    163a:	e7b9      	b.n	15b0 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    163c:	2341      	movs	r3, #65	; 0x41
    163e:	9301      	str	r3, [sp, #4]
    1640:	e7b6      	b.n	15b0 <_i2c_master_write_packet+0x4c>
    1642:	46c0      	nop			; (mov r8, r8)
    1644:	0000119d 	.word	0x0000119d
    1648:	fffbffff 	.word	0xfffbffff
    164c:	00001385 	.word	0x00001385
    1650:	000013b1 	.word	0x000013b1
    1654:	00001355 	.word	0x00001355

00001658 <i2c_master_read_packet_wait>:
{
    1658:	b510      	push	{r4, lr}
	module->send_stop = true;
    165a:	2301      	movs	r3, #1
    165c:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    165e:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    1660:	4b01      	ldr	r3, [pc, #4]	; (1668 <i2c_master_read_packet_wait+0x10>)
    1662:	4798      	blx	r3
}
    1664:	bd10      	pop	{r4, pc}
    1666:	46c0      	nop			; (mov r8, r8)
    1668:	000013d1 	.word	0x000013d1

0000166c <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    166c:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
    166e:	2300      	movs	r3, #0
    1670:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    1672:	3301      	adds	r3, #1
    1674:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    1676:	4b01      	ldr	r3, [pc, #4]	; (167c <i2c_master_write_packet_wait_no_stop+0x10>)
    1678:	4798      	blx	r3
}
    167a:	bd10      	pop	{r4, pc}
    167c:	00001565 	.word	0x00001565

00001680 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1680:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
    1682:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1684:	2340      	movs	r3, #64	; 0x40
    1686:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1688:	4281      	cmp	r1, r0
    168a:	d202      	bcs.n	1692 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    168c:	0018      	movs	r0, r3
    168e:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1690:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1692:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1694:	1c63      	adds	r3, r4, #1
    1696:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1698:	4288      	cmp	r0, r1
    169a:	d9f9      	bls.n	1690 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    169c:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    169e:	2cff      	cmp	r4, #255	; 0xff
    16a0:	d8f4      	bhi.n	168c <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    16a2:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    16a4:	2300      	movs	r3, #0
    16a6:	e7f1      	b.n	168c <_sercom_get_sync_baud_val+0xc>

000016a8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    16a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    16aa:	46de      	mov	lr, fp
    16ac:	4657      	mov	r7, sl
    16ae:	464e      	mov	r6, r9
    16b0:	4645      	mov	r5, r8
    16b2:	b5e0      	push	{r5, r6, r7, lr}
    16b4:	b089      	sub	sp, #36	; 0x24
    16b6:	000c      	movs	r4, r1
    16b8:	9205      	str	r2, [sp, #20]
    16ba:	aa12      	add	r2, sp, #72	; 0x48
    16bc:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    16be:	0005      	movs	r5, r0
    16c0:	434d      	muls	r5, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    16c2:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    16c4:	42a5      	cmp	r5, r4
    16c6:	d907      	bls.n	16d8 <_sercom_get_async_baud_val+0x30>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    16c8:	0010      	movs	r0, r2
    16ca:	b009      	add	sp, #36	; 0x24
    16cc:	bc3c      	pop	{r2, r3, r4, r5}
    16ce:	4690      	mov	r8, r2
    16d0:	4699      	mov	r9, r3
    16d2:	46a2      	mov	sl, r4
    16d4:	46ab      	mov	fp, r5
    16d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    16d8:	2b00      	cmp	r3, #0
    16da:	d155      	bne.n	1788 <_sercom_get_async_baud_val+0xe0>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    16dc:	0002      	movs	r2, r0
    16de:	0008      	movs	r0, r1
    16e0:	2100      	movs	r1, #0
    16e2:	4d63      	ldr	r5, [pc, #396]	; (1870 <_sercom_get_async_baud_val+0x1c8>)
    16e4:	47a8      	blx	r5
    16e6:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
    16e8:	0026      	movs	r6, r4
    16ea:	2700      	movs	r7, #0
	uint64_t q = 0, r = 0, bit_shift;
    16ec:	2300      	movs	r3, #0
    16ee:	2400      	movs	r4, #0
    16f0:	9300      	str	r3, [sp, #0]
    16f2:	9401      	str	r4, [sp, #4]
    16f4:	2200      	movs	r2, #0
    16f6:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    16f8:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    16fa:	2120      	movs	r1, #32
    16fc:	468c      	mov	ip, r1
    16fe:	391f      	subs	r1, #31
    1700:	9602      	str	r6, [sp, #8]
    1702:	9703      	str	r7, [sp, #12]
    1704:	e014      	b.n	1730 <_sercom_get_async_baud_val+0x88>
    1706:	4664      	mov	r4, ip
    1708:	1a24      	subs	r4, r4, r0
    170a:	000d      	movs	r5, r1
    170c:	40e5      	lsrs	r5, r4
    170e:	46a8      	mov	r8, r5
    1710:	e015      	b.n	173e <_sercom_get_async_baud_val+0x96>
			r = r - d;
    1712:	9c02      	ldr	r4, [sp, #8]
    1714:	9d03      	ldr	r5, [sp, #12]
    1716:	1b12      	subs	r2, r2, r4
    1718:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    171a:	464d      	mov	r5, r9
    171c:	9e00      	ldr	r6, [sp, #0]
    171e:	9f01      	ldr	r7, [sp, #4]
    1720:	4335      	orrs	r5, r6
    1722:	003c      	movs	r4, r7
    1724:	4646      	mov	r6, r8
    1726:	4334      	orrs	r4, r6
    1728:	9500      	str	r5, [sp, #0]
    172a:	9401      	str	r4, [sp, #4]
	for (i = 63; i >= 0; i--) {
    172c:	3801      	subs	r0, #1
    172e:	d31d      	bcc.n	176c <_sercom_get_async_baud_val+0xc4>
		bit_shift = (uint64_t)1 << i;
    1730:	2420      	movs	r4, #32
    1732:	4264      	negs	r4, r4
    1734:	1904      	adds	r4, r0, r4
    1736:	d4e6      	bmi.n	1706 <_sercom_get_async_baud_val+0x5e>
    1738:	000d      	movs	r5, r1
    173a:	40a5      	lsls	r5, r4
    173c:	46a8      	mov	r8, r5
    173e:	000c      	movs	r4, r1
    1740:	4084      	lsls	r4, r0
    1742:	46a1      	mov	r9, r4
		r = r << 1;
    1744:	1892      	adds	r2, r2, r2
    1746:	415b      	adcs	r3, r3
    1748:	0014      	movs	r4, r2
    174a:	001d      	movs	r5, r3
		if (n & bit_shift) {
    174c:	4646      	mov	r6, r8
    174e:	465f      	mov	r7, fp
    1750:	423e      	tst	r6, r7
    1752:	d003      	beq.n	175c <_sercom_get_async_baud_val+0xb4>
			r |= 0x01;
    1754:	000e      	movs	r6, r1
    1756:	4326      	orrs	r6, r4
    1758:	0032      	movs	r2, r6
    175a:	002b      	movs	r3, r5
		if (r >= d) {
    175c:	9c02      	ldr	r4, [sp, #8]
    175e:	9d03      	ldr	r5, [sp, #12]
    1760:	429d      	cmp	r5, r3
    1762:	d8e3      	bhi.n	172c <_sercom_get_async_baud_val+0x84>
    1764:	d1d5      	bne.n	1712 <_sercom_get_async_baud_val+0x6a>
    1766:	4294      	cmp	r4, r2
    1768:	d8e0      	bhi.n	172c <_sercom_get_async_baud_val+0x84>
    176a:	e7d2      	b.n	1712 <_sercom_get_async_baud_val+0x6a>
		scale = ((uint64_t)1 << SHIFT) - ratio;
    176c:	2200      	movs	r2, #0
    176e:	2301      	movs	r3, #1
    1770:	9800      	ldr	r0, [sp, #0]
    1772:	9901      	ldr	r1, [sp, #4]
    1774:	1a12      	subs	r2, r2, r0
    1776:	418b      	sbcs	r3, r1
    1778:	0019      	movs	r1, r3
		baud_calculated = (65536 * scale) >> SHIFT;
    177a:	0c13      	lsrs	r3, r2, #16
    177c:	040a      	lsls	r2, r1, #16
    177e:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1780:	9b05      	ldr	r3, [sp, #20]
    1782:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    1784:	2200      	movs	r2, #0
    1786:	e79f      	b.n	16c8 <_sercom_get_async_baud_val+0x20>
	uint64_t baud_calculated = 0;
    1788:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    178a:	2b01      	cmp	r3, #1
    178c:	d1f8      	bne.n	1780 <_sercom_get_async_baud_val+0xd8>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    178e:	0f63      	lsrs	r3, r4, #29
    1790:	9304      	str	r3, [sp, #16]
    1792:	00e3      	lsls	r3, r4, #3
    1794:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
    1796:	000a      	movs	r2, r1
    1798:	2300      	movs	r3, #0
    179a:	2100      	movs	r1, #0
    179c:	4c34      	ldr	r4, [pc, #208]	; (1870 <_sercom_get_async_baud_val+0x1c8>)
    179e:	47a0      	blx	r4
    17a0:	0004      	movs	r4, r0
    17a2:	000d      	movs	r5, r1
    17a4:	2300      	movs	r3, #0
    17a6:	469c      	mov	ip, r3
    17a8:	9306      	str	r3, [sp, #24]
		bit_shift = (uint64_t)1 << i;
    17aa:	3320      	adds	r3, #32
    17ac:	469b      	mov	fp, r3
    17ae:	2601      	movs	r6, #1
			if(baud_int < BAUD_INT_MAX) {
    17b0:	4663      	mov	r3, ip
    17b2:	9307      	str	r3, [sp, #28]
    17b4:	e048      	b.n	1848 <_sercom_get_async_baud_val+0x1a0>
		bit_shift = (uint64_t)1 << i;
    17b6:	4659      	mov	r1, fp
    17b8:	1bc9      	subs	r1, r1, r7
    17ba:	0030      	movs	r0, r6
    17bc:	40c8      	lsrs	r0, r1
    17be:	4682      	mov	sl, r0
    17c0:	e010      	b.n	17e4 <_sercom_get_async_baud_val+0x13c>
			r = r - d;
    17c2:	9800      	ldr	r0, [sp, #0]
    17c4:	9901      	ldr	r1, [sp, #4]
    17c6:	1a12      	subs	r2, r2, r0
    17c8:	418b      	sbcs	r3, r1
			q |= bit_shift;
    17ca:	9902      	ldr	r1, [sp, #8]
    17cc:	4648      	mov	r0, r9
    17ce:	4301      	orrs	r1, r0
    17d0:	9102      	str	r1, [sp, #8]
	for (i = 63; i >= 0; i--) {
    17d2:	3f01      	subs	r7, #1
    17d4:	d325      	bcc.n	1822 <_sercom_get_async_baud_val+0x17a>
		bit_shift = (uint64_t)1 << i;
    17d6:	2120      	movs	r1, #32
    17d8:	4249      	negs	r1, r1
    17da:	1879      	adds	r1, r7, r1
    17dc:	d4eb      	bmi.n	17b6 <_sercom_get_async_baud_val+0x10e>
    17de:	0030      	movs	r0, r6
    17e0:	4088      	lsls	r0, r1
    17e2:	4682      	mov	sl, r0
    17e4:	0031      	movs	r1, r6
    17e6:	40b9      	lsls	r1, r7
    17e8:	4689      	mov	r9, r1
		r = r << 1;
    17ea:	1892      	adds	r2, r2, r2
    17ec:	415b      	adcs	r3, r3
    17ee:	0010      	movs	r0, r2
    17f0:	0019      	movs	r1, r3
		if (n & bit_shift) {
    17f2:	4644      	mov	r4, r8
    17f4:	464d      	mov	r5, r9
    17f6:	402c      	ands	r4, r5
    17f8:	46a4      	mov	ip, r4
    17fa:	4654      	mov	r4, sl
    17fc:	9d04      	ldr	r5, [sp, #16]
    17fe:	402c      	ands	r4, r5
    1800:	46a2      	mov	sl, r4
    1802:	4664      	mov	r4, ip
    1804:	4655      	mov	r5, sl
    1806:	432c      	orrs	r4, r5
    1808:	d003      	beq.n	1812 <_sercom_get_async_baud_val+0x16a>
			r |= 0x01;
    180a:	0034      	movs	r4, r6
    180c:	4304      	orrs	r4, r0
    180e:	0022      	movs	r2, r4
    1810:	000b      	movs	r3, r1
		if (r >= d) {
    1812:	9800      	ldr	r0, [sp, #0]
    1814:	9901      	ldr	r1, [sp, #4]
    1816:	4299      	cmp	r1, r3
    1818:	d8db      	bhi.n	17d2 <_sercom_get_async_baud_val+0x12a>
    181a:	d1d2      	bne.n	17c2 <_sercom_get_async_baud_val+0x11a>
    181c:	4290      	cmp	r0, r2
    181e:	d8d8      	bhi.n	17d2 <_sercom_get_async_baud_val+0x12a>
    1820:	e7cf      	b.n	17c2 <_sercom_get_async_baud_val+0x11a>
    1822:	9c00      	ldr	r4, [sp, #0]
    1824:	9d01      	ldr	r5, [sp, #4]
			baud_int -= baud_fp;
    1826:	9902      	ldr	r1, [sp, #8]
    1828:	9a07      	ldr	r2, [sp, #28]
    182a:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
    182c:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
    182e:	4911      	ldr	r1, [pc, #68]	; (1874 <_sercom_get_async_baud_val+0x1cc>)
    1830:	428b      	cmp	r3, r1
    1832:	d914      	bls.n	185e <_sercom_get_async_baud_val+0x1b6>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    1834:	9b06      	ldr	r3, [sp, #24]
    1836:	3301      	adds	r3, #1
    1838:	b2db      	uxtb	r3, r3
    183a:	0019      	movs	r1, r3
    183c:	9306      	str	r3, [sp, #24]
    183e:	0013      	movs	r3, r2
    1840:	3301      	adds	r3, #1
    1842:	9307      	str	r3, [sp, #28]
    1844:	2908      	cmp	r1, #8
    1846:	d008      	beq.n	185a <_sercom_get_async_baud_val+0x1b2>
	uint64_t q = 0, r = 0, bit_shift;
    1848:	2300      	movs	r3, #0
    184a:	9302      	str	r3, [sp, #8]
    184c:	2200      	movs	r2, #0
    184e:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    1850:	213f      	movs	r1, #63	; 0x3f
    1852:	9400      	str	r4, [sp, #0]
    1854:	9501      	str	r5, [sp, #4]
    1856:	000f      	movs	r7, r1
    1858:	e7bd      	b.n	17d6 <_sercom_get_async_baud_val+0x12e>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    185a:	2240      	movs	r2, #64	; 0x40
    185c:	e734      	b.n	16c8 <_sercom_get_async_baud_val+0x20>
    185e:	2240      	movs	r2, #64	; 0x40
		if(baud_fp == BAUD_FP_MAX) {
    1860:	9906      	ldr	r1, [sp, #24]
    1862:	2908      	cmp	r1, #8
    1864:	d100      	bne.n	1868 <_sercom_get_async_baud_val+0x1c0>
    1866:	e72f      	b.n	16c8 <_sercom_get_async_baud_val+0x20>
		baud_calculated = baud_int | (baud_fp << 13);
    1868:	034a      	lsls	r2, r1, #13
    186a:	431a      	orrs	r2, r3
    186c:	e788      	b.n	1780 <_sercom_get_async_baud_val+0xd8>
    186e:	46c0      	nop			; (mov r8, r8)
    1870:	00002675 	.word	0x00002675
    1874:	00001fff 	.word	0x00001fff

00001878 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1878:	b510      	push	{r4, lr}
    187a:	b082      	sub	sp, #8
    187c:	0004      	movs	r4, r0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
    187e:	4b0e      	ldr	r3, [pc, #56]	; (18b8 <sercom_set_gclk_generator+0x40>)
    1880:	781b      	ldrb	r3, [r3, #0]
    1882:	2b00      	cmp	r3, #0
    1884:	d007      	beq.n	1896 <sercom_set_gclk_generator+0x1e>
    1886:	2900      	cmp	r1, #0
    1888:	d105      	bne.n	1896 <sercom_set_gclk_generator+0x1e>
		/* Save config. */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    188a:	4b0b      	ldr	r3, [pc, #44]	; (18b8 <sercom_set_gclk_generator+0x40>)
    188c:	785b      	ldrb	r3, [r3, #1]
    188e:	4283      	cmp	r3, r0
    1890:	d010      	beq.n	18b4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1892:	201d      	movs	r0, #29
    1894:	e00c      	b.n	18b0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1896:	a901      	add	r1, sp, #4
    1898:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    189a:	2013      	movs	r0, #19
    189c:	4b07      	ldr	r3, [pc, #28]	; (18bc <sercom_set_gclk_generator+0x44>)
    189e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    18a0:	2013      	movs	r0, #19
    18a2:	4b07      	ldr	r3, [pc, #28]	; (18c0 <sercom_set_gclk_generator+0x48>)
    18a4:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    18a6:	4b04      	ldr	r3, [pc, #16]	; (18b8 <sercom_set_gclk_generator+0x40>)
    18a8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    18aa:	2201      	movs	r2, #1
    18ac:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    18ae:	2000      	movs	r0, #0
}
    18b0:	b002      	add	sp, #8
    18b2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    18b4:	2000      	movs	r0, #0
    18b6:	e7fb      	b.n	18b0 <sercom_set_gclk_generator+0x38>
    18b8:	20000210 	.word	0x20000210
    18bc:	00002255 	.word	0x00002255
    18c0:	000021c9 	.word	0x000021c9

000018c4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    18c4:	4b40      	ldr	r3, [pc, #256]	; (19c8 <_sercom_get_default_pad+0x104>)
    18c6:	4298      	cmp	r0, r3
    18c8:	d031      	beq.n	192e <_sercom_get_default_pad+0x6a>
    18ca:	d90a      	bls.n	18e2 <_sercom_get_default_pad+0x1e>
    18cc:	4b3f      	ldr	r3, [pc, #252]	; (19cc <_sercom_get_default_pad+0x108>)
    18ce:	4298      	cmp	r0, r3
    18d0:	d04d      	beq.n	196e <_sercom_get_default_pad+0xaa>
    18d2:	4b3f      	ldr	r3, [pc, #252]	; (19d0 <_sercom_get_default_pad+0x10c>)
    18d4:	4298      	cmp	r0, r3
    18d6:	d05a      	beq.n	198e <_sercom_get_default_pad+0xca>
    18d8:	4b3e      	ldr	r3, [pc, #248]	; (19d4 <_sercom_get_default_pad+0x110>)
    18da:	4298      	cmp	r0, r3
    18dc:	d037      	beq.n	194e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    18de:	2000      	movs	r0, #0
}
    18e0:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    18e2:	4b3d      	ldr	r3, [pc, #244]	; (19d8 <_sercom_get_default_pad+0x114>)
    18e4:	4298      	cmp	r0, r3
    18e6:	d00c      	beq.n	1902 <_sercom_get_default_pad+0x3e>
    18e8:	4b3c      	ldr	r3, [pc, #240]	; (19dc <_sercom_get_default_pad+0x118>)
    18ea:	4298      	cmp	r0, r3
    18ec:	d1f7      	bne.n	18de <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    18ee:	2901      	cmp	r1, #1
    18f0:	d017      	beq.n	1922 <_sercom_get_default_pad+0x5e>
    18f2:	2900      	cmp	r1, #0
    18f4:	d05d      	beq.n	19b2 <_sercom_get_default_pad+0xee>
    18f6:	2902      	cmp	r1, #2
    18f8:	d015      	beq.n	1926 <_sercom_get_default_pad+0x62>
    18fa:	2903      	cmp	r1, #3
    18fc:	d015      	beq.n	192a <_sercom_get_default_pad+0x66>
	return 0;
    18fe:	2000      	movs	r0, #0
    1900:	e7ee      	b.n	18e0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1902:	2901      	cmp	r1, #1
    1904:	d007      	beq.n	1916 <_sercom_get_default_pad+0x52>
    1906:	2900      	cmp	r1, #0
    1908:	d051      	beq.n	19ae <_sercom_get_default_pad+0xea>
    190a:	2902      	cmp	r1, #2
    190c:	d005      	beq.n	191a <_sercom_get_default_pad+0x56>
    190e:	2903      	cmp	r1, #3
    1910:	d005      	beq.n	191e <_sercom_get_default_pad+0x5a>
	return 0;
    1912:	2000      	movs	r0, #0
    1914:	e7e4      	b.n	18e0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1916:	4832      	ldr	r0, [pc, #200]	; (19e0 <_sercom_get_default_pad+0x11c>)
    1918:	e7e2      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    191a:	4832      	ldr	r0, [pc, #200]	; (19e4 <_sercom_get_default_pad+0x120>)
    191c:	e7e0      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    191e:	4832      	ldr	r0, [pc, #200]	; (19e8 <_sercom_get_default_pad+0x124>)
    1920:	e7de      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    1922:	4832      	ldr	r0, [pc, #200]	; (19ec <_sercom_get_default_pad+0x128>)
    1924:	e7dc      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    1926:	4832      	ldr	r0, [pc, #200]	; (19f0 <_sercom_get_default_pad+0x12c>)
    1928:	e7da      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    192a:	4832      	ldr	r0, [pc, #200]	; (19f4 <_sercom_get_default_pad+0x130>)
    192c:	e7d8      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    192e:	2901      	cmp	r1, #1
    1930:	d007      	beq.n	1942 <_sercom_get_default_pad+0x7e>
    1932:	2900      	cmp	r1, #0
    1934:	d03f      	beq.n	19b6 <_sercom_get_default_pad+0xf2>
    1936:	2902      	cmp	r1, #2
    1938:	d005      	beq.n	1946 <_sercom_get_default_pad+0x82>
    193a:	2903      	cmp	r1, #3
    193c:	d005      	beq.n	194a <_sercom_get_default_pad+0x86>
	return 0;
    193e:	2000      	movs	r0, #0
    1940:	e7ce      	b.n	18e0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1942:	482d      	ldr	r0, [pc, #180]	; (19f8 <_sercom_get_default_pad+0x134>)
    1944:	e7cc      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    1946:	482d      	ldr	r0, [pc, #180]	; (19fc <_sercom_get_default_pad+0x138>)
    1948:	e7ca      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    194a:	482d      	ldr	r0, [pc, #180]	; (1a00 <_sercom_get_default_pad+0x13c>)
    194c:	e7c8      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    194e:	2901      	cmp	r1, #1
    1950:	d007      	beq.n	1962 <_sercom_get_default_pad+0x9e>
    1952:	2900      	cmp	r1, #0
    1954:	d031      	beq.n	19ba <_sercom_get_default_pad+0xf6>
    1956:	2902      	cmp	r1, #2
    1958:	d005      	beq.n	1966 <_sercom_get_default_pad+0xa2>
    195a:	2903      	cmp	r1, #3
    195c:	d005      	beq.n	196a <_sercom_get_default_pad+0xa6>
	return 0;
    195e:	2000      	movs	r0, #0
    1960:	e7be      	b.n	18e0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1962:	4828      	ldr	r0, [pc, #160]	; (1a04 <_sercom_get_default_pad+0x140>)
    1964:	e7bc      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    1966:	4828      	ldr	r0, [pc, #160]	; (1a08 <_sercom_get_default_pad+0x144>)
    1968:	e7ba      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    196a:	4828      	ldr	r0, [pc, #160]	; (1a0c <_sercom_get_default_pad+0x148>)
    196c:	e7b8      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    196e:	2901      	cmp	r1, #1
    1970:	d007      	beq.n	1982 <_sercom_get_default_pad+0xbe>
    1972:	2900      	cmp	r1, #0
    1974:	d023      	beq.n	19be <_sercom_get_default_pad+0xfa>
    1976:	2902      	cmp	r1, #2
    1978:	d005      	beq.n	1986 <_sercom_get_default_pad+0xc2>
    197a:	2903      	cmp	r1, #3
    197c:	d005      	beq.n	198a <_sercom_get_default_pad+0xc6>
	return 0;
    197e:	2000      	movs	r0, #0
    1980:	e7ae      	b.n	18e0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1982:	4823      	ldr	r0, [pc, #140]	; (1a10 <_sercom_get_default_pad+0x14c>)
    1984:	e7ac      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    1986:	4823      	ldr	r0, [pc, #140]	; (1a14 <_sercom_get_default_pad+0x150>)
    1988:	e7aa      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    198a:	4823      	ldr	r0, [pc, #140]	; (1a18 <_sercom_get_default_pad+0x154>)
    198c:	e7a8      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    198e:	2901      	cmp	r1, #1
    1990:	d007      	beq.n	19a2 <_sercom_get_default_pad+0xde>
    1992:	2900      	cmp	r1, #0
    1994:	d015      	beq.n	19c2 <_sercom_get_default_pad+0xfe>
    1996:	2902      	cmp	r1, #2
    1998:	d005      	beq.n	19a6 <_sercom_get_default_pad+0xe2>
    199a:	2903      	cmp	r1, #3
    199c:	d005      	beq.n	19aa <_sercom_get_default_pad+0xe6>
	return 0;
    199e:	2000      	movs	r0, #0
    19a0:	e79e      	b.n	18e0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    19a2:	481e      	ldr	r0, [pc, #120]	; (1a1c <_sercom_get_default_pad+0x158>)
    19a4:	e79c      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    19a6:	481e      	ldr	r0, [pc, #120]	; (1a20 <_sercom_get_default_pad+0x15c>)
    19a8:	e79a      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    19aa:	481e      	ldr	r0, [pc, #120]	; (1a24 <_sercom_get_default_pad+0x160>)
    19ac:	e798      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    19ae:	481e      	ldr	r0, [pc, #120]	; (1a28 <_sercom_get_default_pad+0x164>)
    19b0:	e796      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    19b2:	2003      	movs	r0, #3
    19b4:	e794      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    19b6:	481d      	ldr	r0, [pc, #116]	; (1a2c <_sercom_get_default_pad+0x168>)
    19b8:	e792      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    19ba:	481d      	ldr	r0, [pc, #116]	; (1a30 <_sercom_get_default_pad+0x16c>)
    19bc:	e790      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    19be:	481d      	ldr	r0, [pc, #116]	; (1a34 <_sercom_get_default_pad+0x170>)
    19c0:	e78e      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    19c2:	481d      	ldr	r0, [pc, #116]	; (1a38 <_sercom_get_default_pad+0x174>)
    19c4:	e78c      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    19c6:	46c0      	nop			; (mov r8, r8)
    19c8:	42001000 	.word	0x42001000
    19cc:	42001800 	.word	0x42001800
    19d0:	42001c00 	.word	0x42001c00
    19d4:	42001400 	.word	0x42001400
    19d8:	42000800 	.word	0x42000800
    19dc:	42000c00 	.word	0x42000c00
    19e0:	00050003 	.word	0x00050003
    19e4:	00060003 	.word	0x00060003
    19e8:	00070003 	.word	0x00070003
    19ec:	00010003 	.word	0x00010003
    19f0:	001e0003 	.word	0x001e0003
    19f4:	001f0003 	.word	0x001f0003
    19f8:	00090003 	.word	0x00090003
    19fc:	000a0003 	.word	0x000a0003
    1a00:	000b0003 	.word	0x000b0003
    1a04:	00110003 	.word	0x00110003
    1a08:	00120003 	.word	0x00120003
    1a0c:	00130003 	.word	0x00130003
    1a10:	000d0003 	.word	0x000d0003
    1a14:	000e0003 	.word	0x000e0003
    1a18:	000f0003 	.word	0x000f0003
    1a1c:	00170003 	.word	0x00170003
    1a20:	00180003 	.word	0x00180003
    1a24:	00190003 	.word	0x00190003
    1a28:	00040003 	.word	0x00040003
    1a2c:	00080003 	.word	0x00080003
    1a30:	00100003 	.word	0x00100003
    1a34:	000c0003 	.word	0x000c0003
    1a38:	00160003 	.word	0x00160003

00001a3c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1a3c:	b530      	push	{r4, r5, lr}
    1a3e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1a40:	4b0b      	ldr	r3, [pc, #44]	; (1a70 <_sercom_get_sercom_inst_index+0x34>)
    1a42:	466a      	mov	r2, sp
    1a44:	cb32      	ldmia	r3!, {r1, r4, r5}
    1a46:	c232      	stmia	r2!, {r1, r4, r5}
    1a48:	cb32      	ldmia	r3!, {r1, r4, r5}
    1a4a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1a4c:	9b00      	ldr	r3, [sp, #0]
    1a4e:	4283      	cmp	r3, r0
    1a50:	d00b      	beq.n	1a6a <_sercom_get_sercom_inst_index+0x2e>
    1a52:	2301      	movs	r3, #1
    1a54:	009a      	lsls	r2, r3, #2
    1a56:	4669      	mov	r1, sp
    1a58:	5852      	ldr	r2, [r2, r1]
    1a5a:	4282      	cmp	r2, r0
    1a5c:	d006      	beq.n	1a6c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1a5e:	3301      	adds	r3, #1
    1a60:	2b06      	cmp	r3, #6
    1a62:	d1f7      	bne.n	1a54 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1a64:	2000      	movs	r0, #0
}
    1a66:	b007      	add	sp, #28
    1a68:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1a6a:	2300      	movs	r3, #0
			return i;
    1a6c:	b2d8      	uxtb	r0, r3
    1a6e:	e7fa      	b.n	1a66 <_sercom_get_sercom_inst_index+0x2a>
    1a70:	000046c0 	.word	0x000046c0

00001a74 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1a74:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a76:	46de      	mov	lr, fp
    1a78:	4657      	mov	r7, sl
    1a7a:	464e      	mov	r6, r9
    1a7c:	4645      	mov	r5, r8
    1a7e:	b5e0      	push	{r5, r6, r7, lr}
    1a80:	b091      	sub	sp, #68	; 0x44
    1a82:	0005      	movs	r5, r0
    1a84:	000c      	movs	r4, r1
    1a86:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1a88:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1a8a:	0008      	movs	r0, r1
    1a8c:	4bb0      	ldr	r3, [pc, #704]	; (1d50 <usart_init+0x2dc>)
    1a8e:	4798      	blx	r3
    1a90:	0002      	movs	r2, r0
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1a92:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1a94:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1a96:	07db      	lsls	r3, r3, #31
    1a98:	d506      	bpl.n	1aa8 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1a9a:	b011      	add	sp, #68	; 0x44
    1a9c:	bc3c      	pop	{r2, r3, r4, r5}
    1a9e:	4690      	mov	r8, r2
    1aa0:	4699      	mov	r9, r3
    1aa2:	46a2      	mov	sl, r4
    1aa4:	46ab      	mov	fp, r5
    1aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1aa8:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    1aaa:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1aac:	079b      	lsls	r3, r3, #30
    1aae:	d4f4      	bmi.n	1a9a <usart_init+0x26>
    1ab0:	49a8      	ldr	r1, [pc, #672]	; (1d54 <usart_init+0x2e0>)
    1ab2:	6a08      	ldr	r0, [r1, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1ab4:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1ab6:	2301      	movs	r3, #1
    1ab8:	40bb      	lsls	r3, r7
    1aba:	4303      	orrs	r3, r0
    1abc:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1abe:	a90f      	add	r1, sp, #60	; 0x3c
    1ac0:	272d      	movs	r7, #45	; 0x2d
    1ac2:	5df3      	ldrb	r3, [r6, r7]
    1ac4:	700b      	strb	r3, [r1, #0]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1ac6:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1ac8:	b2d3      	uxtb	r3, r2
    1aca:	9303      	str	r3, [sp, #12]
    1acc:	0018      	movs	r0, r3
    1ace:	4ba2      	ldr	r3, [pc, #648]	; (1d58 <usart_init+0x2e4>)
    1ad0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1ad2:	9803      	ldr	r0, [sp, #12]
    1ad4:	4ba1      	ldr	r3, [pc, #644]	; (1d5c <usart_init+0x2e8>)
    1ad6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1ad8:	5df0      	ldrb	r0, [r6, r7]
    1ada:	2100      	movs	r1, #0
    1adc:	4ba0      	ldr	r3, [pc, #640]	; (1d60 <usart_init+0x2ec>)
    1ade:	4798      	blx	r3
	module->character_size = config->character_size;
    1ae0:	7af3      	ldrb	r3, [r6, #11]
    1ae2:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1ae4:	2324      	movs	r3, #36	; 0x24
    1ae6:	5cf3      	ldrb	r3, [r6, r3]
    1ae8:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1aea:	2325      	movs	r3, #37	; 0x25
    1aec:	5cf3      	ldrb	r3, [r6, r3]
    1aee:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1af0:	7ef3      	ldrb	r3, [r6, #27]
    1af2:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1af4:	7f33      	ldrb	r3, [r6, #28]
    1af6:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1af8:	682b      	ldr	r3, [r5, #0]
    1afa:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1afc:	0018      	movs	r0, r3
    1afe:	4b94      	ldr	r3, [pc, #592]	; (1d50 <usart_init+0x2dc>)
    1b00:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1b02:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    1b04:	2200      	movs	r2, #0
    1b06:	230e      	movs	r3, #14
    1b08:	a906      	add	r1, sp, #24
    1b0a:	468c      	mov	ip, r1
    1b0c:	4463      	add	r3, ip
    1b0e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1b10:	8a32      	ldrh	r2, [r6, #16]
    1b12:	9203      	str	r2, [sp, #12]
    1b14:	2380      	movs	r3, #128	; 0x80
    1b16:	01db      	lsls	r3, r3, #7
    1b18:	429a      	cmp	r2, r3
    1b1a:	d100      	bne.n	1b1e <usart_init+0xaa>
    1b1c:	e0a2      	b.n	1c64 <usart_init+0x1f0>
    1b1e:	d90f      	bls.n	1b40 <usart_init+0xcc>
    1b20:	23c0      	movs	r3, #192	; 0xc0
    1b22:	01db      	lsls	r3, r3, #7
    1b24:	9a03      	ldr	r2, [sp, #12]
    1b26:	429a      	cmp	r2, r3
    1b28:	d100      	bne.n	1b2c <usart_init+0xb8>
    1b2a:	e096      	b.n	1c5a <usart_init+0x1e6>
    1b2c:	2380      	movs	r3, #128	; 0x80
    1b2e:	021b      	lsls	r3, r3, #8
    1b30:	429a      	cmp	r2, r3
    1b32:	d000      	beq.n	1b36 <usart_init+0xc2>
    1b34:	e107      	b.n	1d46 <usart_init+0x2d2>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1b36:	2303      	movs	r3, #3
    1b38:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1b3a:	2300      	movs	r3, #0
    1b3c:	9307      	str	r3, [sp, #28]
    1b3e:	e008      	b.n	1b52 <usart_init+0xde>
	switch (config->sample_rate) {
    1b40:	2380      	movs	r3, #128	; 0x80
    1b42:	019b      	lsls	r3, r3, #6
    1b44:	429a      	cmp	r2, r3
    1b46:	d000      	beq.n	1b4a <usart_init+0xd6>
    1b48:	e0fd      	b.n	1d46 <usart_init+0x2d2>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1b4a:	2310      	movs	r3, #16
    1b4c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1b4e:	3b0f      	subs	r3, #15
    1b50:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1b52:	6833      	ldr	r3, [r6, #0]
    1b54:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
    1b56:	68f3      	ldr	r3, [r6, #12]
    1b58:	9305      	str	r3, [sp, #20]
		config->sample_adjustment |
    1b5a:	6973      	ldr	r3, [r6, #20]
    1b5c:	469a      	mov	sl, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1b5e:	7e33      	ldrb	r3, [r6, #24]
    1b60:	4699      	mov	r9, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1b62:	2326      	movs	r3, #38	; 0x26
    1b64:	5cf3      	ldrb	r3, [r6, r3]
    1b66:	9304      	str	r3, [sp, #16]
	switch (config->transfer_mode)
    1b68:	6873      	ldr	r3, [r6, #4]
    1b6a:	2b00      	cmp	r3, #0
    1b6c:	d100      	bne.n	1b70 <usart_init+0xfc>
    1b6e:	e0a4      	b.n	1cba <usart_init+0x246>
    1b70:	2280      	movs	r2, #128	; 0x80
    1b72:	0552      	lsls	r2, r2, #21
    1b74:	4293      	cmp	r3, r2
    1b76:	d100      	bne.n	1b7a <usart_init+0x106>
    1b78:	e088      	b.n	1c8c <usart_init+0x218>
	if(config->encoding_format_enable) {
    1b7a:	7e73      	ldrb	r3, [r6, #25]
    1b7c:	2b00      	cmp	r3, #0
    1b7e:	d002      	beq.n	1b86 <usart_init+0x112>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1b80:	7eb3      	ldrb	r3, [r6, #26]
    1b82:	4642      	mov	r2, r8
    1b84:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1b86:	682a      	ldr	r2, [r5, #0]
    1b88:	9f03      	ldr	r7, [sp, #12]
	return (usart_hw->SYNCBUSY.reg);
    1b8a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1b8c:	2b00      	cmp	r3, #0
    1b8e:	d1fc      	bne.n	1b8a <usart_init+0x116>
	usart_hw->BAUD.reg = baud;
    1b90:	330e      	adds	r3, #14
    1b92:	aa06      	add	r2, sp, #24
    1b94:	4694      	mov	ip, r2
    1b96:	4463      	add	r3, ip
    1b98:	881b      	ldrh	r3, [r3, #0]
    1b9a:	4642      	mov	r2, r8
    1b9c:	8193      	strh	r3, [r2, #12]
	ctrla |= config->transfer_mode;
    1b9e:	465b      	mov	r3, fp
    1ba0:	9a05      	ldr	r2, [sp, #20]
    1ba2:	4313      	orrs	r3, r2
    1ba4:	4652      	mov	r2, sl
    1ba6:	4313      	orrs	r3, r2
    1ba8:	6872      	ldr	r2, [r6, #4]
    1baa:	4313      	orrs	r3, r2
    1bac:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1bae:	464b      	mov	r3, r9
    1bb0:	021b      	lsls	r3, r3, #8
	ctrla |= config->transfer_mode;
    1bb2:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1bb4:	9b04      	ldr	r3, [sp, #16]
    1bb6:	075b      	lsls	r3, r3, #29
	ctrla |= config->transfer_mode;
    1bb8:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1bba:	2327      	movs	r3, #39	; 0x27
    1bbc:	5cf3      	ldrb	r3, [r6, r3]
    1bbe:	2b00      	cmp	r3, #0
    1bc0:	d101      	bne.n	1bc6 <usart_init+0x152>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1bc2:	3304      	adds	r3, #4
    1bc4:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1bc6:	7e72      	ldrb	r2, [r6, #25]
    1bc8:	0292      	lsls	r2, r2, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1bca:	7f33      	ldrb	r3, [r6, #28]
    1bcc:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1bce:	431a      	orrs	r2, r3
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    1bd0:	7ab3      	ldrb	r3, [r6, #10]
    1bd2:	7af1      	ldrb	r1, [r6, #11]
    1bd4:	430b      	orrs	r3, r1
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1bd6:	431a      	orrs	r2, r3
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1bd8:	7f73      	ldrb	r3, [r6, #29]
    1bda:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1bdc:	431a      	orrs	r2, r3
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1bde:	2324      	movs	r3, #36	; 0x24
    1be0:	5cf3      	ldrb	r3, [r6, r3]
    1be2:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1be4:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1be6:	2325      	movs	r3, #37	; 0x25
    1be8:	5cf3      	ldrb	r3, [r6, r3]
    1bea:	041b      	lsls	r3, r3, #16
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    1bec:	431a      	orrs	r2, r3
	if (config->parity != USART_PARITY_NONE) {
    1bee:	8933      	ldrh	r3, [r6, #8]
    1bf0:	2bff      	cmp	r3, #255	; 0xff
    1bf2:	d100      	bne.n	1bf6 <usart_init+0x182>
    1bf4:	e089      	b.n	1d0a <usart_init+0x296>
		if(config->lin_slave_enable) {
    1bf6:	7ef1      	ldrb	r1, [r6, #27]
    1bf8:	2900      	cmp	r1, #0
    1bfa:	d100      	bne.n	1bfe <usart_init+0x18a>
    1bfc:	e081      	b.n	1d02 <usart_init+0x28e>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
    1bfe:	21a0      	movs	r1, #160	; 0xa0
    1c00:	04c9      	lsls	r1, r1, #19
    1c02:	430f      	orrs	r7, r1
		ctrlb |= config->parity;
    1c04:	431a      	orrs	r2, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1c06:	232c      	movs	r3, #44	; 0x2c
    1c08:	5cf3      	ldrb	r3, [r6, r3]
    1c0a:	2b00      	cmp	r3, #0
    1c0c:	d103      	bne.n	1c16 <usart_init+0x1a2>
    1c0e:	4b55      	ldr	r3, [pc, #340]	; (1d64 <usart_init+0x2f0>)
    1c10:	789b      	ldrb	r3, [r3, #2]
    1c12:	079b      	lsls	r3, r3, #30
    1c14:	d501      	bpl.n	1c1a <usart_init+0x1a6>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1c16:	2380      	movs	r3, #128	; 0x80
    1c18:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1c1a:	6829      	ldr	r1, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1c1c:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
    1c1e:	2b00      	cmp	r3, #0
    1c20:	d1fc      	bne.n	1c1c <usart_init+0x1a8>
	usart_hw->CTRLB.reg = ctrlb;
    1c22:	4643      	mov	r3, r8
    1c24:	605a      	str	r2, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1c26:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1c28:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1c2a:	2b00      	cmp	r3, #0
    1c2c:	d1fc      	bne.n	1c28 <usart_init+0x1b4>
	usart_hw->CTRLA.reg = ctrla;
    1c2e:	4643      	mov	r3, r8
    1c30:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1c32:	ab0e      	add	r3, sp, #56	; 0x38
    1c34:	2280      	movs	r2, #128	; 0x80
    1c36:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1c38:	2200      	movs	r2, #0
    1c3a:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1c3c:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1c3e:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1c40:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1c42:	930a      	str	r3, [sp, #40]	; 0x28
    1c44:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1c46:	930b      	str	r3, [sp, #44]	; 0x2c
    1c48:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1c4a:	930c      	str	r3, [sp, #48]	; 0x30
    1c4c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1c4e:	9303      	str	r3, [sp, #12]
    1c50:	930d      	str	r3, [sp, #52]	; 0x34
    1c52:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1c54:	ad0a      	add	r5, sp, #40	; 0x28
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1c56:	4e44      	ldr	r6, [pc, #272]	; (1d68 <usart_init+0x2f4>)
    1c58:	e066      	b.n	1d28 <usart_init+0x2b4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1c5a:	2308      	movs	r3, #8
    1c5c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1c5e:	3b07      	subs	r3, #7
    1c60:	9307      	str	r3, [sp, #28]
    1c62:	e776      	b.n	1b52 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    1c64:	6833      	ldr	r3, [r6, #0]
    1c66:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
    1c68:	68f3      	ldr	r3, [r6, #12]
    1c6a:	9305      	str	r3, [sp, #20]
		config->sample_adjustment |
    1c6c:	6973      	ldr	r3, [r6, #20]
    1c6e:	469a      	mov	sl, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1c70:	7e33      	ldrb	r3, [r6, #24]
    1c72:	4699      	mov	r9, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1c74:	2326      	movs	r3, #38	; 0x26
    1c76:	5cf3      	ldrb	r3, [r6, r3]
    1c78:	9304      	str	r3, [sp, #16]
	switch (config->transfer_mode)
    1c7a:	6873      	ldr	r3, [r6, #4]
    1c7c:	2b00      	cmp	r3, #0
    1c7e:	d018      	beq.n	1cb2 <usart_init+0x23e>
    1c80:	2280      	movs	r2, #128	; 0x80
    1c82:	0552      	lsls	r2, r2, #21
    1c84:	4293      	cmp	r3, r2
    1c86:	d001      	beq.n	1c8c <usart_init+0x218>
	enum status_code status_code = STATUS_OK;
    1c88:	2000      	movs	r0, #0
    1c8a:	e025      	b.n	1cd8 <usart_init+0x264>
			if (!config->use_external_clock) {
    1c8c:	2327      	movs	r3, #39	; 0x27
    1c8e:	5cf3      	ldrb	r3, [r6, r3]
    1c90:	2b00      	cmp	r3, #0
    1c92:	d000      	beq.n	1c96 <usart_init+0x222>
    1c94:	e771      	b.n	1b7a <usart_init+0x106>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1c96:	6a33      	ldr	r3, [r6, #32]
    1c98:	001f      	movs	r7, r3
    1c9a:	b2c0      	uxtb	r0, r0
    1c9c:	4b33      	ldr	r3, [pc, #204]	; (1d6c <usart_init+0x2f8>)
    1c9e:	4798      	blx	r3
    1ca0:	0001      	movs	r1, r0
    1ca2:	220e      	movs	r2, #14
    1ca4:	ab06      	add	r3, sp, #24
    1ca6:	469c      	mov	ip, r3
    1ca8:	4462      	add	r2, ip
    1caa:	0038      	movs	r0, r7
    1cac:	4b30      	ldr	r3, [pc, #192]	; (1d70 <usart_init+0x2fc>)
    1cae:	4798      	blx	r3
    1cb0:	e012      	b.n	1cd8 <usart_init+0x264>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1cb2:	2308      	movs	r3, #8
    1cb4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1cb6:	2300      	movs	r3, #0
    1cb8:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1cba:	2327      	movs	r3, #39	; 0x27
    1cbc:	5cf3      	ldrb	r3, [r6, r3]
    1cbe:	2b00      	cmp	r3, #0
    1cc0:	d00e      	beq.n	1ce0 <usart_init+0x26c>
				status_code =
    1cc2:	9b06      	ldr	r3, [sp, #24]
    1cc4:	9300      	str	r3, [sp, #0]
    1cc6:	9b07      	ldr	r3, [sp, #28]
    1cc8:	220e      	movs	r2, #14
    1cca:	a906      	add	r1, sp, #24
    1ccc:	468c      	mov	ip, r1
    1cce:	4462      	add	r2, ip
    1cd0:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1cd2:	6a30      	ldr	r0, [r6, #32]
    1cd4:	4f27      	ldr	r7, [pc, #156]	; (1d74 <usart_init+0x300>)
    1cd6:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1cd8:	2800      	cmp	r0, #0
    1cda:	d000      	beq.n	1cde <usart_init+0x26a>
    1cdc:	e6dd      	b.n	1a9a <usart_init+0x26>
    1cde:	e74c      	b.n	1b7a <usart_init+0x106>
						_sercom_get_async_baud_val(config->baudrate,
    1ce0:	6a33      	ldr	r3, [r6, #32]
    1ce2:	001f      	movs	r7, r3
    1ce4:	b2c0      	uxtb	r0, r0
    1ce6:	4b21      	ldr	r3, [pc, #132]	; (1d6c <usart_init+0x2f8>)
    1ce8:	4798      	blx	r3
    1cea:	0001      	movs	r1, r0
				status_code =
    1cec:	9b06      	ldr	r3, [sp, #24]
    1cee:	9300      	str	r3, [sp, #0]
    1cf0:	9b07      	ldr	r3, [sp, #28]
    1cf2:	220e      	movs	r2, #14
    1cf4:	a806      	add	r0, sp, #24
    1cf6:	4684      	mov	ip, r0
    1cf8:	4462      	add	r2, ip
    1cfa:	0038      	movs	r0, r7
    1cfc:	4f1d      	ldr	r7, [pc, #116]	; (1d74 <usart_init+0x300>)
    1cfe:	47b8      	blx	r7
    1d00:	e7ea      	b.n	1cd8 <usart_init+0x264>
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1d02:	2180      	movs	r1, #128	; 0x80
    1d04:	0449      	lsls	r1, r1, #17
    1d06:	430f      	orrs	r7, r1
    1d08:	e77c      	b.n	1c04 <usart_init+0x190>
		if(config->lin_slave_enable) {
    1d0a:	7ef3      	ldrb	r3, [r6, #27]
    1d0c:	2b00      	cmp	r3, #0
    1d0e:	d100      	bne.n	1d12 <usart_init+0x29e>
    1d10:	e779      	b.n	1c06 <usart_init+0x192>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1d12:	2380      	movs	r3, #128	; 0x80
    1d14:	04db      	lsls	r3, r3, #19
    1d16:	431f      	orrs	r7, r3
    1d18:	e775      	b.n	1c06 <usart_init+0x192>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1d1a:	0020      	movs	r0, r4
    1d1c:	4b16      	ldr	r3, [pc, #88]	; (1d78 <usart_init+0x304>)
    1d1e:	4798      	blx	r3
    1d20:	e007      	b.n	1d32 <usart_init+0x2be>
    1d22:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1d24:	2f04      	cmp	r7, #4
    1d26:	d00c      	beq.n	1d42 <usart_init+0x2ce>
    1d28:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1d2a:	00bb      	lsls	r3, r7, #2
    1d2c:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    1d2e:	2800      	cmp	r0, #0
    1d30:	d0f3      	beq.n	1d1a <usart_init+0x2a6>
		if (current_pinmux != PINMUX_UNUSED) {
    1d32:	1c43      	adds	r3, r0, #1
    1d34:	d0f5      	beq.n	1d22 <usart_init+0x2ae>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1d36:	a90e      	add	r1, sp, #56	; 0x38
    1d38:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1d3a:	0c00      	lsrs	r0, r0, #16
    1d3c:	b2c0      	uxtb	r0, r0
    1d3e:	47b0      	blx	r6
    1d40:	e7ef      	b.n	1d22 <usart_init+0x2ae>
	return status_code;
    1d42:	2000      	movs	r0, #0
    1d44:	e6a9      	b.n	1a9a <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1d46:	2310      	movs	r3, #16
    1d48:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1d4a:	2300      	movs	r3, #0
    1d4c:	9307      	str	r3, [sp, #28]
    1d4e:	e700      	b.n	1b52 <usart_init+0xde>
    1d50:	00001a3d 	.word	0x00001a3d
    1d54:	40000400 	.word	0x40000400
    1d58:	00002255 	.word	0x00002255
    1d5c:	000021c9 	.word	0x000021c9
    1d60:	00001879 	.word	0x00001879
    1d64:	41002000 	.word	0x41002000
    1d68:	0000234d 	.word	0x0000234d
    1d6c:	00002271 	.word	0x00002271
    1d70:	00001681 	.word	0x00001681
    1d74:	000016a9 	.word	0x000016a9
    1d78:	000018c5 	.word	0x000018c5

00001d7c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1d7c:	79c3      	ldrb	r3, [r0, #7]
		return STATUS_ERR_DENIED;
    1d7e:	221c      	movs	r2, #28
	if (!(module->transmitter_enabled)) {
    1d80:	2b00      	cmp	r3, #0
    1d82:	d101      	bne.n	1d88 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1d84:	0010      	movs	r0, r2
    1d86:	4770      	bx	lr
	SercomUsart *const usart_hw = &(module->hw->USART);
    1d88:	6803      	ldr	r3, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE)) {
    1d8a:	7e18      	ldrb	r0, [r3, #24]
		return STATUS_BUSY;
    1d8c:	3a17      	subs	r2, #23
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE)) {
    1d8e:	07c0      	lsls	r0, r0, #31
    1d90:	d5f8      	bpl.n	1d84 <usart_write_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    1d92:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1d94:	2a00      	cmp	r2, #0
    1d96:	d1fc      	bne.n	1d92 <usart_write_wait+0x16>
	usart_hw->DATA.reg = tx_data;
    1d98:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1d9a:	2102      	movs	r1, #2
    1d9c:	7e1a      	ldrb	r2, [r3, #24]
    1d9e:	420a      	tst	r2, r1
    1da0:	d0fc      	beq.n	1d9c <usart_write_wait+0x20>
	return STATUS_OK;
    1da2:	2200      	movs	r2, #0
    1da4:	e7ee      	b.n	1d84 <usart_write_wait+0x8>

00001da6 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1da6:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1da8:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1daa:	2a00      	cmp	r2, #0
    1dac:	d101      	bne.n	1db2 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1dae:	0018      	movs	r0, r3
    1db0:	4770      	bx	lr
	SercomUsart *const usart_hw = &(module->hw->USART);
    1db2:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1db4:	7e10      	ldrb	r0, [r2, #24]
		return STATUS_BUSY;
    1db6:	3b17      	subs	r3, #23
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1db8:	0740      	lsls	r0, r0, #29
    1dba:	d5f8      	bpl.n	1dae <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    1dbc:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1dbe:	2b00      	cmp	r3, #0
    1dc0:	d1fc      	bne.n	1dbc <usart_read_wait+0x16>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1dc2:	8b53      	ldrh	r3, [r2, #26]
    1dc4:	b2db      	uxtb	r3, r3
	if (error_code) {
    1dc6:	0698      	lsls	r0, r3, #26
    1dc8:	d021      	beq.n	1e0e <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1dca:	0798      	lsls	r0, r3, #30
    1dcc:	d503      	bpl.n	1dd6 <usart_read_wait+0x30>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1dce:	2302      	movs	r3, #2
    1dd0:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1dd2:	3318      	adds	r3, #24
    1dd4:	e7eb      	b.n	1dae <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1dd6:	0758      	lsls	r0, r3, #29
    1dd8:	d503      	bpl.n	1de2 <usart_read_wait+0x3c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1dda:	2304      	movs	r3, #4
    1ddc:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1dde:	331a      	adds	r3, #26
    1de0:	e7e5      	b.n	1dae <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1de2:	07d8      	lsls	r0, r3, #31
    1de4:	d503      	bpl.n	1dee <usart_read_wait+0x48>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1de6:	2301      	movs	r3, #1
    1de8:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1dea:	3312      	adds	r3, #18
    1dec:	e7df      	b.n	1dae <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1dee:	06d8      	lsls	r0, r3, #27
    1df0:	d505      	bpl.n	1dfe <usart_read_wait+0x58>
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    1df2:	8b53      	ldrh	r3, [r2, #26]
    1df4:	2110      	movs	r1, #16
    1df6:	430b      	orrs	r3, r1
    1df8:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1dfa:	2342      	movs	r3, #66	; 0x42
    1dfc:	e7d7      	b.n	1dae <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1dfe:	069b      	lsls	r3, r3, #26
    1e00:	d505      	bpl.n	1e0e <usart_read_wait+0x68>
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    1e02:	8b53      	ldrh	r3, [r2, #26]
    1e04:	2120      	movs	r1, #32
    1e06:	430b      	orrs	r3, r1
    1e08:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    1e0a:	2341      	movs	r3, #65	; 0x41
    1e0c:	e7cf      	b.n	1dae <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1e0e:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1e10:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1e12:	2300      	movs	r3, #0
    1e14:	e7cb      	b.n	1dae <usart_read_wait+0x8>
	...

00001e18 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1e18:	b510      	push	{r4, lr}
	switch (clock_source) {
    1e1a:	2808      	cmp	r0, #8
    1e1c:	d803      	bhi.n	1e26 <system_clock_source_get_hz+0xe>
    1e1e:	0080      	lsls	r0, r0, #2
    1e20:	4b1b      	ldr	r3, [pc, #108]	; (1e90 <system_clock_source_get_hz+0x78>)
    1e22:	581b      	ldr	r3, [r3, r0]
    1e24:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1e26:	2000      	movs	r0, #0
    1e28:	e030      	b.n	1e8c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    1e2a:	4b1a      	ldr	r3, [pc, #104]	; (1e94 <system_clock_source_get_hz+0x7c>)
    1e2c:	6918      	ldr	r0, [r3, #16]
    1e2e:	e02d      	b.n	1e8c <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1e30:	4b19      	ldr	r3, [pc, #100]	; (1e98 <system_clock_source_get_hz+0x80>)
    1e32:	6a1b      	ldr	r3, [r3, #32]
    1e34:	059b      	lsls	r3, r3, #22
    1e36:	0f9b      	lsrs	r3, r3, #30
    1e38:	4818      	ldr	r0, [pc, #96]	; (1e9c <system_clock_source_get_hz+0x84>)
    1e3a:	40d8      	lsrs	r0, r3
    1e3c:	e026      	b.n	1e8c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    1e3e:	4b15      	ldr	r3, [pc, #84]	; (1e94 <system_clock_source_get_hz+0x7c>)
    1e40:	6958      	ldr	r0, [r3, #20]
    1e42:	e023      	b.n	1e8c <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1e44:	4b13      	ldr	r3, [pc, #76]	; (1e94 <system_clock_source_get_hz+0x7c>)
    1e46:	681b      	ldr	r3, [r3, #0]
			return 0;
    1e48:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1e4a:	079b      	lsls	r3, r3, #30
    1e4c:	d51e      	bpl.n	1e8c <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1e4e:	4912      	ldr	r1, [pc, #72]	; (1e98 <system_clock_source_get_hz+0x80>)
    1e50:	2210      	movs	r2, #16
    1e52:	68cb      	ldr	r3, [r1, #12]
    1e54:	421a      	tst	r2, r3
    1e56:	d0fc      	beq.n	1e52 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1e58:	4b0e      	ldr	r3, [pc, #56]	; (1e94 <system_clock_source_get_hz+0x7c>)
    1e5a:	681b      	ldr	r3, [r3, #0]
    1e5c:	075b      	lsls	r3, r3, #29
    1e5e:	d401      	bmi.n	1e64 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    1e60:	480f      	ldr	r0, [pc, #60]	; (1ea0 <system_clock_source_get_hz+0x88>)
    1e62:	e013      	b.n	1e8c <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1e64:	2000      	movs	r0, #0
    1e66:	4b0f      	ldr	r3, [pc, #60]	; (1ea4 <system_clock_source_get_hz+0x8c>)
    1e68:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1e6a:	4b0a      	ldr	r3, [pc, #40]	; (1e94 <system_clock_source_get_hz+0x7c>)
    1e6c:	689b      	ldr	r3, [r3, #8]
    1e6e:	041b      	lsls	r3, r3, #16
    1e70:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1e72:	4358      	muls	r0, r3
    1e74:	e00a      	b.n	1e8c <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1e76:	2350      	movs	r3, #80	; 0x50
    1e78:	4a07      	ldr	r2, [pc, #28]	; (1e98 <system_clock_source_get_hz+0x80>)
    1e7a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1e7c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1e7e:	075b      	lsls	r3, r3, #29
    1e80:	d504      	bpl.n	1e8c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    1e82:	4b04      	ldr	r3, [pc, #16]	; (1e94 <system_clock_source_get_hz+0x7c>)
    1e84:	68d8      	ldr	r0, [r3, #12]
    1e86:	e001      	b.n	1e8c <system_clock_source_get_hz+0x74>
		return 32768UL;
    1e88:	2080      	movs	r0, #128	; 0x80
    1e8a:	0200      	lsls	r0, r0, #8
	}
}
    1e8c:	bd10      	pop	{r4, pc}
    1e8e:	46c0      	nop			; (mov r8, r8)
    1e90:	000046d8 	.word	0x000046d8
    1e94:	20000214 	.word	0x20000214
    1e98:	40000800 	.word	0x40000800
    1e9c:	007a1200 	.word	0x007a1200
    1ea0:	02dc6c00 	.word	0x02dc6c00
    1ea4:	00002271 	.word	0x00002271

00001ea8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1ea8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1eaa:	490c      	ldr	r1, [pc, #48]	; (1edc <system_clock_source_osc8m_set_config+0x34>)
    1eac:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1eae:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1eb0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1eb2:	7840      	ldrb	r0, [r0, #1]
    1eb4:	2201      	movs	r2, #1
    1eb6:	4010      	ands	r0, r2
    1eb8:	0180      	lsls	r0, r0, #6
    1eba:	2640      	movs	r6, #64	; 0x40
    1ebc:	43b3      	bics	r3, r6
    1ebe:	4303      	orrs	r3, r0
    1ec0:	402a      	ands	r2, r5
    1ec2:	01d2      	lsls	r2, r2, #7
    1ec4:	2080      	movs	r0, #128	; 0x80
    1ec6:	4383      	bics	r3, r0
    1ec8:	4313      	orrs	r3, r2
    1eca:	2203      	movs	r2, #3
    1ecc:	4022      	ands	r2, r4
    1ece:	0212      	lsls	r2, r2, #8
    1ed0:	4803      	ldr	r0, [pc, #12]	; (1ee0 <system_clock_source_osc8m_set_config+0x38>)
    1ed2:	4003      	ands	r3, r0
    1ed4:	4313      	orrs	r3, r2
    1ed6:	620b      	str	r3, [r1, #32]
}
    1ed8:	bd70      	pop	{r4, r5, r6, pc}
    1eda:	46c0      	nop			; (mov r8, r8)
    1edc:	40000800 	.word	0x40000800
    1ee0:	fffffcff 	.word	0xfffffcff

00001ee4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1ee4:	2808      	cmp	r0, #8
    1ee6:	d803      	bhi.n	1ef0 <system_clock_source_enable+0xc>
    1ee8:	0080      	lsls	r0, r0, #2
    1eea:	4b22      	ldr	r3, [pc, #136]	; (1f74 <system_clock_source_enable+0x90>)
    1eec:	581b      	ldr	r3, [r3, r0]
    1eee:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1ef0:	2017      	movs	r0, #23
    1ef2:	e03e      	b.n	1f72 <system_clock_source_enable+0x8e>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1ef4:	4a20      	ldr	r2, [pc, #128]	; (1f78 <system_clock_source_enable+0x94>)
    1ef6:	6a13      	ldr	r3, [r2, #32]
    1ef8:	2102      	movs	r1, #2
    1efa:	430b      	orrs	r3, r1
    1efc:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1efe:	2000      	movs	r0, #0
    1f00:	e037      	b.n	1f72 <system_clock_source_enable+0x8e>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1f02:	4a1d      	ldr	r2, [pc, #116]	; (1f78 <system_clock_source_enable+0x94>)
    1f04:	6993      	ldr	r3, [r2, #24]
    1f06:	2102      	movs	r1, #2
    1f08:	430b      	orrs	r3, r1
    1f0a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1f0c:	2000      	movs	r0, #0
		break;
    1f0e:	e030      	b.n	1f72 <system_clock_source_enable+0x8e>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1f10:	4a19      	ldr	r2, [pc, #100]	; (1f78 <system_clock_source_enable+0x94>)
    1f12:	8a13      	ldrh	r3, [r2, #16]
    1f14:	2102      	movs	r1, #2
    1f16:	430b      	orrs	r3, r1
    1f18:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1f1a:	2000      	movs	r0, #0
		break;
    1f1c:	e029      	b.n	1f72 <system_clock_source_enable+0x8e>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1f1e:	4a16      	ldr	r2, [pc, #88]	; (1f78 <system_clock_source_enable+0x94>)
    1f20:	8a93      	ldrh	r3, [r2, #20]
    1f22:	2102      	movs	r1, #2
    1f24:	430b      	orrs	r3, r1
    1f26:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1f28:	2000      	movs	r0, #0
		break;
    1f2a:	e022      	b.n	1f72 <system_clock_source_enable+0x8e>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1f2c:	4b13      	ldr	r3, [pc, #76]	; (1f7c <system_clock_source_enable+0x98>)
    1f2e:	681a      	ldr	r2, [r3, #0]
    1f30:	2102      	movs	r1, #2
    1f32:	430a      	orrs	r2, r1
    1f34:	601a      	str	r2, [r3, #0]
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    1f36:	681b      	ldr	r3, [r3, #0]
    1f38:	4a11      	ldr	r2, [pc, #68]	; (1f80 <system_clock_source_enable+0x9c>)
    1f3a:	4013      	ands	r3, r2
    1f3c:	4a0e      	ldr	r2, [pc, #56]	; (1f78 <system_clock_source_enable+0x94>)
    1f3e:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1f40:	0011      	movs	r1, r2
    1f42:	2210      	movs	r2, #16
    1f44:	68cb      	ldr	r3, [r1, #12]
    1f46:	421a      	tst	r2, r3
    1f48:	d0fc      	beq.n	1f44 <system_clock_source_enable+0x60>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1f4a:	4a0c      	ldr	r2, [pc, #48]	; (1f7c <system_clock_source_enable+0x98>)
    1f4c:	6891      	ldr	r1, [r2, #8]
    1f4e:	4b0a      	ldr	r3, [pc, #40]	; (1f78 <system_clock_source_enable+0x94>)
    1f50:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1f52:	6851      	ldr	r1, [r2, #4]
    1f54:	6299      	str	r1, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1f56:	6812      	ldr	r2, [r2, #0]
    1f58:	b292      	uxth	r2, r2
    1f5a:	849a      	strh	r2, [r3, #36]	; 0x24
	return STATUS_OK;
    1f5c:	2000      	movs	r0, #0
    1f5e:	e008      	b.n	1f72 <system_clock_source_enable+0x8e>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1f60:	4905      	ldr	r1, [pc, #20]	; (1f78 <system_clock_source_enable+0x94>)
    1f62:	2244      	movs	r2, #68	; 0x44
    1f64:	5c8b      	ldrb	r3, [r1, r2]
    1f66:	2002      	movs	r0, #2
    1f68:	4303      	orrs	r3, r0
    1f6a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1f6c:	2000      	movs	r0, #0
		break;
    1f6e:	e000      	b.n	1f72 <system_clock_source_enable+0x8e>
		return STATUS_OK;
    1f70:	2000      	movs	r0, #0
}
    1f72:	4770      	bx	lr
    1f74:	000046fc 	.word	0x000046fc
    1f78:	40000800 	.word	0x40000800
    1f7c:	20000214 	.word	0x20000214
    1f80:	0000ff7f 	.word	0x0000ff7f

00001f84 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1f84:	b530      	push	{r4, r5, lr}
    1f86:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1f88:	22c2      	movs	r2, #194	; 0xc2
    1f8a:	00d2      	lsls	r2, r2, #3
    1f8c:	4b1a      	ldr	r3, [pc, #104]	; (1ff8 <system_clock_init+0x74>)
    1f8e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1f90:	4a1a      	ldr	r2, [pc, #104]	; (1ffc <system_clock_init+0x78>)
    1f92:	6853      	ldr	r3, [r2, #4]
    1f94:	211e      	movs	r1, #30
    1f96:	438b      	bics	r3, r1
    1f98:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1f9a:	2301      	movs	r3, #1
    1f9c:	466a      	mov	r2, sp
    1f9e:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1fa0:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1fa2:	4d17      	ldr	r5, [pc, #92]	; (2000 <STACK_SIZE>)
    1fa4:	b2e0      	uxtb	r0, r4
    1fa6:	4669      	mov	r1, sp
    1fa8:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1faa:	3401      	adds	r4, #1
    1fac:	2c25      	cmp	r4, #37	; 0x25
    1fae:	d1f9      	bne.n	1fa4 <system_clock_init+0x20>
	config->run_in_standby  = false;
    1fb0:	a803      	add	r0, sp, #12
    1fb2:	2400      	movs	r4, #0
    1fb4:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1fb6:	2501      	movs	r5, #1
    1fb8:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1fba:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1fbc:	4b11      	ldr	r3, [pc, #68]	; (2004 <STACK_SIZE+0x4>)
    1fbe:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1fc0:	2006      	movs	r0, #6
    1fc2:	4b11      	ldr	r3, [pc, #68]	; (2008 <STACK_SIZE+0x8>)
    1fc4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1fc6:	4b11      	ldr	r3, [pc, #68]	; (200c <STACK_SIZE+0xc>)
    1fc8:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    1fca:	4b11      	ldr	r3, [pc, #68]	; (2010 <STACK_SIZE+0x10>)
    1fcc:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1fce:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1fd0:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1fd2:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1fd4:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1fd6:	466b      	mov	r3, sp
    1fd8:	705c      	strb	r4, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1fda:	2306      	movs	r3, #6
    1fdc:	466a      	mov	r2, sp
    1fde:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    1fe0:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1fe2:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1fe4:	4669      	mov	r1, sp
    1fe6:	2000      	movs	r0, #0
    1fe8:	4b0a      	ldr	r3, [pc, #40]	; (2014 <STACK_SIZE+0x14>)
    1fea:	4798      	blx	r3
    1fec:	2000      	movs	r0, #0
    1fee:	4b0a      	ldr	r3, [pc, #40]	; (2018 <STACK_SIZE+0x18>)
    1ff0:	4798      	blx	r3
#endif
}
    1ff2:	b005      	add	sp, #20
    1ff4:	bd30      	pop	{r4, r5, pc}
    1ff6:	46c0      	nop			; (mov r8, r8)
    1ff8:	40000800 	.word	0x40000800
    1ffc:	41004000 	.word	0x41004000
    2000:	00002255 	.word	0x00002255
    2004:	00001ea9 	.word	0x00001ea9
    2008:	00001ee5 	.word	0x00001ee5
    200c:	0000201d 	.word	0x0000201d
    2010:	40000400 	.word	0x40000400
    2014:	00002041 	.word	0x00002041
    2018:	000020f9 	.word	0x000020f9

0000201c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    201c:	4a06      	ldr	r2, [pc, #24]	; (2038 <system_gclk_init+0x1c>)
    201e:	6993      	ldr	r3, [r2, #24]
    2020:	2108      	movs	r1, #8
    2022:	430b      	orrs	r3, r1
    2024:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2026:	2201      	movs	r2, #1
    2028:	4b04      	ldr	r3, [pc, #16]	; (203c <system_gclk_init+0x20>)
    202a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    202c:	0019      	movs	r1, r3
    202e:	780b      	ldrb	r3, [r1, #0]
    2030:	4213      	tst	r3, r2
    2032:	d1fc      	bne.n	202e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2034:	4770      	bx	lr
    2036:	46c0      	nop			; (mov r8, r8)
    2038:	40000400 	.word	0x40000400
    203c:	40000c00 	.word	0x40000c00

00002040 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2040:	b570      	push	{r4, r5, r6, lr}
    2042:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2044:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2046:	780d      	ldrb	r5, [r1, #0]
    2048:	022d      	lsls	r5, r5, #8
    204a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    204c:	784b      	ldrb	r3, [r1, #1]
    204e:	2b00      	cmp	r3, #0
    2050:	d002      	beq.n	2058 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2052:	2380      	movs	r3, #128	; 0x80
    2054:	02db      	lsls	r3, r3, #11
    2056:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2058:	7a4b      	ldrb	r3, [r1, #9]
    205a:	2b00      	cmp	r3, #0
    205c:	d002      	beq.n	2064 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    205e:	2380      	movs	r3, #128	; 0x80
    2060:	031b      	lsls	r3, r3, #12
    2062:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2064:	6848      	ldr	r0, [r1, #4]
    2066:	2801      	cmp	r0, #1
    2068:	d910      	bls.n	208c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    206a:	1e43      	subs	r3, r0, #1
    206c:	4218      	tst	r0, r3
    206e:	d134      	bne.n	20da <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2070:	2802      	cmp	r0, #2
    2072:	d930      	bls.n	20d6 <system_gclk_gen_set_config+0x96>
    2074:	2302      	movs	r3, #2
    2076:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2078:	3201      	adds	r2, #1
						mask <<= 1) {
    207a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    207c:	4298      	cmp	r0, r3
    207e:	d8fb      	bhi.n	2078 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2080:	0212      	lsls	r2, r2, #8
    2082:	4332      	orrs	r2, r6
    2084:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2086:	2380      	movs	r3, #128	; 0x80
    2088:	035b      	lsls	r3, r3, #13
    208a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    208c:	7a0b      	ldrb	r3, [r1, #8]
    208e:	2b00      	cmp	r3, #0
    2090:	d002      	beq.n	2098 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2092:	2380      	movs	r3, #128	; 0x80
    2094:	039b      	lsls	r3, r3, #14
    2096:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2098:	4a13      	ldr	r2, [pc, #76]	; (20e8 <system_gclk_gen_set_config+0xa8>)
    209a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    209c:	b25b      	sxtb	r3, r3
    209e:	2b00      	cmp	r3, #0
    20a0:	dbfb      	blt.n	209a <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    20a2:	4b12      	ldr	r3, [pc, #72]	; (20ec <system_gclk_gen_set_config+0xac>)
    20a4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    20a6:	4b12      	ldr	r3, [pc, #72]	; (20f0 <system_gclk_gen_set_config+0xb0>)
    20a8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    20aa:	4a0f      	ldr	r2, [pc, #60]	; (20e8 <system_gclk_gen_set_config+0xa8>)
    20ac:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    20ae:	b25b      	sxtb	r3, r3
    20b0:	2b00      	cmp	r3, #0
    20b2:	dbfb      	blt.n	20ac <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    20b4:	4b0c      	ldr	r3, [pc, #48]	; (20e8 <system_gclk_gen_set_config+0xa8>)
    20b6:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    20b8:	001a      	movs	r2, r3
    20ba:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    20bc:	b25b      	sxtb	r3, r3
    20be:	2b00      	cmp	r3, #0
    20c0:	dbfb      	blt.n	20ba <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    20c2:	4a09      	ldr	r2, [pc, #36]	; (20e8 <system_gclk_gen_set_config+0xa8>)
    20c4:	6853      	ldr	r3, [r2, #4]
    20c6:	2180      	movs	r1, #128	; 0x80
    20c8:	0249      	lsls	r1, r1, #9
    20ca:	400b      	ands	r3, r1
    20cc:	431d      	orrs	r5, r3
    20ce:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    20d0:	4b08      	ldr	r3, [pc, #32]	; (20f4 <system_gclk_gen_set_config+0xb4>)
    20d2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    20d4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    20d6:	2200      	movs	r2, #0
    20d8:	e7d2      	b.n	2080 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    20da:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    20dc:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    20de:	2380      	movs	r3, #128	; 0x80
    20e0:	029b      	lsls	r3, r3, #10
    20e2:	431d      	orrs	r5, r3
    20e4:	e7d2      	b.n	208c <system_gclk_gen_set_config+0x4c>
    20e6:	46c0      	nop			; (mov r8, r8)
    20e8:	40000c00 	.word	0x40000c00
    20ec:	000010d1 	.word	0x000010d1
    20f0:	40000c08 	.word	0x40000c08
    20f4:	00001111 	.word	0x00001111

000020f8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    20f8:	b510      	push	{r4, lr}
    20fa:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    20fc:	4a0b      	ldr	r2, [pc, #44]	; (212c <system_gclk_gen_enable+0x34>)
    20fe:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2100:	b25b      	sxtb	r3, r3
    2102:	2b00      	cmp	r3, #0
    2104:	dbfb      	blt.n	20fe <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    2106:	4b0a      	ldr	r3, [pc, #40]	; (2130 <system_gclk_gen_enable+0x38>)
    2108:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    210a:	4b0a      	ldr	r3, [pc, #40]	; (2134 <system_gclk_gen_enable+0x3c>)
    210c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    210e:	4a07      	ldr	r2, [pc, #28]	; (212c <system_gclk_gen_enable+0x34>)
    2110:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2112:	b25b      	sxtb	r3, r3
    2114:	2b00      	cmp	r3, #0
    2116:	dbfb      	blt.n	2110 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2118:	4a04      	ldr	r2, [pc, #16]	; (212c <system_gclk_gen_enable+0x34>)
    211a:	6851      	ldr	r1, [r2, #4]
    211c:	2380      	movs	r3, #128	; 0x80
    211e:	025b      	lsls	r3, r3, #9
    2120:	430b      	orrs	r3, r1
    2122:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2124:	4b04      	ldr	r3, [pc, #16]	; (2138 <system_gclk_gen_enable+0x40>)
    2126:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2128:	bd10      	pop	{r4, pc}
    212a:	46c0      	nop			; (mov r8, r8)
    212c:	40000c00 	.word	0x40000c00
    2130:	000010d1 	.word	0x000010d1
    2134:	40000c04 	.word	0x40000c04
    2138:	00001111 	.word	0x00001111

0000213c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    213c:	b570      	push	{r4, r5, r6, lr}
    213e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2140:	4a1a      	ldr	r2, [pc, #104]	; (21ac <system_gclk_gen_get_hz+0x70>)
    2142:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2144:	b25b      	sxtb	r3, r3
    2146:	2b00      	cmp	r3, #0
    2148:	dbfb      	blt.n	2142 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    214a:	4b19      	ldr	r3, [pc, #100]	; (21b0 <system_gclk_gen_get_hz+0x74>)
    214c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    214e:	4b19      	ldr	r3, [pc, #100]	; (21b4 <system_gclk_gen_get_hz+0x78>)
    2150:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2152:	4a16      	ldr	r2, [pc, #88]	; (21ac <system_gclk_gen_get_hz+0x70>)
    2154:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2156:	b25b      	sxtb	r3, r3
    2158:	2b00      	cmp	r3, #0
    215a:	dbfb      	blt.n	2154 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    215c:	4e13      	ldr	r6, [pc, #76]	; (21ac <system_gclk_gen_get_hz+0x70>)
    215e:	6870      	ldr	r0, [r6, #4]
    2160:	04c0      	lsls	r0, r0, #19
    2162:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2164:	4b14      	ldr	r3, [pc, #80]	; (21b8 <system_gclk_gen_get_hz+0x7c>)
    2166:	4798      	blx	r3
    2168:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    216a:	4b12      	ldr	r3, [pc, #72]	; (21b4 <system_gclk_gen_get_hz+0x78>)
    216c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    216e:	6876      	ldr	r6, [r6, #4]
    2170:	02f6      	lsls	r6, r6, #11
    2172:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2174:	4b11      	ldr	r3, [pc, #68]	; (21bc <system_gclk_gen_get_hz+0x80>)
    2176:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2178:	4a0c      	ldr	r2, [pc, #48]	; (21ac <system_gclk_gen_get_hz+0x70>)
    217a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    217c:	b25b      	sxtb	r3, r3
    217e:	2b00      	cmp	r3, #0
    2180:	dbfb      	blt.n	217a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2182:	4b0a      	ldr	r3, [pc, #40]	; (21ac <system_gclk_gen_get_hz+0x70>)
    2184:	689c      	ldr	r4, [r3, #8]
    2186:	0224      	lsls	r4, r4, #8
    2188:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    218a:	4b0d      	ldr	r3, [pc, #52]	; (21c0 <system_gclk_gen_get_hz+0x84>)
    218c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    218e:	2e00      	cmp	r6, #0
    2190:	d107      	bne.n	21a2 <system_gclk_gen_get_hz+0x66>
    2192:	2c01      	cmp	r4, #1
    2194:	d907      	bls.n	21a6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    2196:	0021      	movs	r1, r4
    2198:	0028      	movs	r0, r5
    219a:	4b0a      	ldr	r3, [pc, #40]	; (21c4 <system_gclk_gen_get_hz+0x88>)
    219c:	4798      	blx	r3
    219e:	0005      	movs	r5, r0
    21a0:	e001      	b.n	21a6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    21a2:	3401      	adds	r4, #1
    21a4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    21a6:	0028      	movs	r0, r5
    21a8:	bd70      	pop	{r4, r5, r6, pc}
    21aa:	46c0      	nop			; (mov r8, r8)
    21ac:	40000c00 	.word	0x40000c00
    21b0:	000010d1 	.word	0x000010d1
    21b4:	40000c04 	.word	0x40000c04
    21b8:	00001e19 	.word	0x00001e19
    21bc:	40000c08 	.word	0x40000c08
    21c0:	00001111 	.word	0x00001111
    21c4:	0000255d 	.word	0x0000255d

000021c8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    21c8:	b510      	push	{r4, lr}
    21ca:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    21cc:	4b06      	ldr	r3, [pc, #24]	; (21e8 <system_gclk_chan_enable+0x20>)
    21ce:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    21d0:	4b06      	ldr	r3, [pc, #24]	; (21ec <system_gclk_chan_enable+0x24>)
    21d2:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    21d4:	4a06      	ldr	r2, [pc, #24]	; (21f0 <system_gclk_chan_enable+0x28>)
    21d6:	8853      	ldrh	r3, [r2, #2]
    21d8:	2180      	movs	r1, #128	; 0x80
    21da:	01c9      	lsls	r1, r1, #7
    21dc:	430b      	orrs	r3, r1
    21de:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    21e0:	4b04      	ldr	r3, [pc, #16]	; (21f4 <system_gclk_chan_enable+0x2c>)
    21e2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    21e4:	bd10      	pop	{r4, pc}
    21e6:	46c0      	nop			; (mov r8, r8)
    21e8:	000010d1 	.word	0x000010d1
    21ec:	40000c02 	.word	0x40000c02
    21f0:	40000c00 	.word	0x40000c00
    21f4:	00001111 	.word	0x00001111

000021f8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    21f8:	b510      	push	{r4, lr}
    21fa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    21fc:	4b0f      	ldr	r3, [pc, #60]	; (223c <system_gclk_chan_disable+0x44>)
    21fe:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2200:	4b0f      	ldr	r3, [pc, #60]	; (2240 <system_gclk_chan_disable+0x48>)
    2202:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2204:	4a0f      	ldr	r2, [pc, #60]	; (2244 <system_gclk_chan_disable+0x4c>)
    2206:	8853      	ldrh	r3, [r2, #2]
    2208:	051b      	lsls	r3, r3, #20
    220a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    220c:	8853      	ldrh	r3, [r2, #2]
    220e:	490e      	ldr	r1, [pc, #56]	; (2248 <system_gclk_chan_disable+0x50>)
    2210:	400b      	ands	r3, r1
    2212:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2214:	8853      	ldrh	r3, [r2, #2]
    2216:	490d      	ldr	r1, [pc, #52]	; (224c <system_gclk_chan_disable+0x54>)
    2218:	400b      	ands	r3, r1
    221a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    221c:	0011      	movs	r1, r2
    221e:	2280      	movs	r2, #128	; 0x80
    2220:	01d2      	lsls	r2, r2, #7
    2222:	884b      	ldrh	r3, [r1, #2]
    2224:	4213      	tst	r3, r2
    2226:	d1fc      	bne.n	2222 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2228:	4906      	ldr	r1, [pc, #24]	; (2244 <system_gclk_chan_disable+0x4c>)
    222a:	884a      	ldrh	r2, [r1, #2]
    222c:	0203      	lsls	r3, r0, #8
    222e:	4806      	ldr	r0, [pc, #24]	; (2248 <system_gclk_chan_disable+0x50>)
    2230:	4002      	ands	r2, r0
    2232:	4313      	orrs	r3, r2
    2234:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    2236:	4b06      	ldr	r3, [pc, #24]	; (2250 <system_gclk_chan_disable+0x58>)
    2238:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    223a:	bd10      	pop	{r4, pc}
    223c:	000010d1 	.word	0x000010d1
    2240:	40000c02 	.word	0x40000c02
    2244:	40000c00 	.word	0x40000c00
    2248:	fffff0ff 	.word	0xfffff0ff
    224c:	ffffbfff 	.word	0xffffbfff
    2250:	00001111 	.word	0x00001111

00002254 <system_gclk_chan_set_config>:
{
    2254:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2256:	780c      	ldrb	r4, [r1, #0]
    2258:	0224      	lsls	r4, r4, #8
    225a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    225c:	4b02      	ldr	r3, [pc, #8]	; (2268 <system_gclk_chan_set_config+0x14>)
    225e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2260:	b2a4      	uxth	r4, r4
    2262:	4b02      	ldr	r3, [pc, #8]	; (226c <system_gclk_chan_set_config+0x18>)
    2264:	805c      	strh	r4, [r3, #2]
}
    2266:	bd10      	pop	{r4, pc}
    2268:	000021f9 	.word	0x000021f9
    226c:	40000c00 	.word	0x40000c00

00002270 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2270:	b510      	push	{r4, lr}
    2272:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2274:	4b06      	ldr	r3, [pc, #24]	; (2290 <system_gclk_chan_get_hz+0x20>)
    2276:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2278:	4b06      	ldr	r3, [pc, #24]	; (2294 <system_gclk_chan_get_hz+0x24>)
    227a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    227c:	4b06      	ldr	r3, [pc, #24]	; (2298 <system_gclk_chan_get_hz+0x28>)
    227e:	885c      	ldrh	r4, [r3, #2]
    2280:	0524      	lsls	r4, r4, #20
    2282:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2284:	4b05      	ldr	r3, [pc, #20]	; (229c <system_gclk_chan_get_hz+0x2c>)
    2286:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2288:	0020      	movs	r0, r4
    228a:	4b05      	ldr	r3, [pc, #20]	; (22a0 <system_gclk_chan_get_hz+0x30>)
    228c:	4798      	blx	r3
}
    228e:	bd10      	pop	{r4, pc}
    2290:	000010d1 	.word	0x000010d1
    2294:	40000c02 	.word	0x40000c02
    2298:	40000c00 	.word	0x40000c00
    229c:	00001111 	.word	0x00001111
    22a0:	0000213d 	.word	0x0000213d

000022a4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    22a4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    22a6:	78d3      	ldrb	r3, [r2, #3]
    22a8:	2b00      	cmp	r3, #0
    22aa:	d135      	bne.n	2318 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    22ac:	7813      	ldrb	r3, [r2, #0]
    22ae:	2b80      	cmp	r3, #128	; 0x80
    22b0:	d029      	beq.n	2306 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    22b2:	061b      	lsls	r3, r3, #24
    22b4:	2480      	movs	r4, #128	; 0x80
    22b6:	0264      	lsls	r4, r4, #9
    22b8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    22ba:	7854      	ldrb	r4, [r2, #1]
    22bc:	2502      	movs	r5, #2
    22be:	43ac      	bics	r4, r5
    22c0:	d106      	bne.n	22d0 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    22c2:	7894      	ldrb	r4, [r2, #2]
    22c4:	2c00      	cmp	r4, #0
    22c6:	d120      	bne.n	230a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    22c8:	2480      	movs	r4, #128	; 0x80
    22ca:	02a4      	lsls	r4, r4, #10
    22cc:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    22ce:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    22d0:	7854      	ldrb	r4, [r2, #1]
    22d2:	3c01      	subs	r4, #1
    22d4:	2c01      	cmp	r4, #1
    22d6:	d91c      	bls.n	2312 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    22d8:	040d      	lsls	r5, r1, #16
    22da:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    22dc:	24a0      	movs	r4, #160	; 0xa0
    22de:	05e4      	lsls	r4, r4, #23
    22e0:	432c      	orrs	r4, r5
    22e2:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    22e4:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    22e6:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    22e8:	24d0      	movs	r4, #208	; 0xd0
    22ea:	0624      	lsls	r4, r4, #24
    22ec:	432c      	orrs	r4, r5
    22ee:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    22f0:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    22f2:	78d4      	ldrb	r4, [r2, #3]
    22f4:	2c00      	cmp	r4, #0
    22f6:	d122      	bne.n	233e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    22f8:	035b      	lsls	r3, r3, #13
    22fa:	d51c      	bpl.n	2336 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    22fc:	7893      	ldrb	r3, [r2, #2]
    22fe:	2b01      	cmp	r3, #1
    2300:	d01e      	beq.n	2340 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2302:	6141      	str	r1, [r0, #20]
    2304:	e017      	b.n	2336 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2306:	2300      	movs	r3, #0
    2308:	e7d7      	b.n	22ba <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    230a:	24c0      	movs	r4, #192	; 0xc0
    230c:	02e4      	lsls	r4, r4, #11
    230e:	4323      	orrs	r3, r4
    2310:	e7dd      	b.n	22ce <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2312:	4c0d      	ldr	r4, [pc, #52]	; (2348 <_system_pinmux_config+0xa4>)
    2314:	4023      	ands	r3, r4
    2316:	e7df      	b.n	22d8 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2318:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    231a:	040c      	lsls	r4, r1, #16
    231c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    231e:	23a0      	movs	r3, #160	; 0xa0
    2320:	05db      	lsls	r3, r3, #23
    2322:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2324:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2326:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2328:	23d0      	movs	r3, #208	; 0xd0
    232a:	061b      	lsls	r3, r3, #24
    232c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    232e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2330:	78d3      	ldrb	r3, [r2, #3]
    2332:	2b00      	cmp	r3, #0
    2334:	d103      	bne.n	233e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2336:	7853      	ldrb	r3, [r2, #1]
    2338:	3b01      	subs	r3, #1
    233a:	2b01      	cmp	r3, #1
    233c:	d902      	bls.n	2344 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    233e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2340:	6181      	str	r1, [r0, #24]
    2342:	e7f8      	b.n	2336 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2344:	6081      	str	r1, [r0, #8]
}
    2346:	e7fa      	b.n	233e <_system_pinmux_config+0x9a>
    2348:	fffbffff 	.word	0xfffbffff

0000234c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    234c:	b510      	push	{r4, lr}
    234e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2350:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2352:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2354:	2900      	cmp	r1, #0
    2356:	d104      	bne.n	2362 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2358:	0943      	lsrs	r3, r0, #5
    235a:	01db      	lsls	r3, r3, #7
    235c:	4905      	ldr	r1, [pc, #20]	; (2374 <system_pinmux_pin_set_config+0x28>)
    235e:	468c      	mov	ip, r1
    2360:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2362:	241f      	movs	r4, #31
    2364:	4020      	ands	r0, r4
    2366:	2101      	movs	r1, #1
    2368:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    236a:	0018      	movs	r0, r3
    236c:	4b02      	ldr	r3, [pc, #8]	; (2378 <system_pinmux_pin_set_config+0x2c>)
    236e:	4798      	blx	r3
}
    2370:	bd10      	pop	{r4, pc}
    2372:	46c0      	nop			; (mov r8, r8)
    2374:	41004400 	.word	0x41004400
    2378:	000022a5 	.word	0x000022a5

0000237c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    237c:	4770      	bx	lr
	...

00002380 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2380:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2382:	4b04      	ldr	r3, [pc, #16]	; (2394 <system_init+0x14>)
    2384:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2386:	4b04      	ldr	r3, [pc, #16]	; (2398 <system_init+0x18>)
    2388:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    238a:	4b04      	ldr	r3, [pc, #16]	; (239c <system_init+0x1c>)
    238c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    238e:	4b04      	ldr	r3, [pc, #16]	; (23a0 <system_init+0x20>)
    2390:	4798      	blx	r3
}
    2392:	bd10      	pop	{r4, pc}
    2394:	00001f85 	.word	0x00001f85
    2398:	00001141 	.word	0x00001141
    239c:	0000237d 	.word	0x0000237d
    23a0:	0000237d 	.word	0x0000237d

000023a4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    23a4:	e7fe      	b.n	23a4 <Dummy_Handler>
	...

000023a8 <Reset_Handler>:
{
    23a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    23aa:	4a2a      	ldr	r2, [pc, #168]	; (2454 <Reset_Handler+0xac>)
    23ac:	4b2a      	ldr	r3, [pc, #168]	; (2458 <Reset_Handler+0xb0>)
    23ae:	429a      	cmp	r2, r3
    23b0:	d011      	beq.n	23d6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    23b2:	001a      	movs	r2, r3
    23b4:	4b29      	ldr	r3, [pc, #164]	; (245c <Reset_Handler+0xb4>)
    23b6:	429a      	cmp	r2, r3
    23b8:	d20d      	bcs.n	23d6 <Reset_Handler+0x2e>
    23ba:	4a29      	ldr	r2, [pc, #164]	; (2460 <Reset_Handler+0xb8>)
    23bc:	3303      	adds	r3, #3
    23be:	1a9b      	subs	r3, r3, r2
    23c0:	089b      	lsrs	r3, r3, #2
    23c2:	3301      	adds	r3, #1
    23c4:	009b      	lsls	r3, r3, #2
    23c6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    23c8:	4823      	ldr	r0, [pc, #140]	; (2458 <Reset_Handler+0xb0>)
    23ca:	4922      	ldr	r1, [pc, #136]	; (2454 <Reset_Handler+0xac>)
    23cc:	588c      	ldr	r4, [r1, r2]
    23ce:	5084      	str	r4, [r0, r2]
    23d0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    23d2:	429a      	cmp	r2, r3
    23d4:	d1fa      	bne.n	23cc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    23d6:	4a23      	ldr	r2, [pc, #140]	; (2464 <Reset_Handler+0xbc>)
    23d8:	4b23      	ldr	r3, [pc, #140]	; (2468 <Reset_Handler+0xc0>)
    23da:	429a      	cmp	r2, r3
    23dc:	d20a      	bcs.n	23f4 <Reset_Handler+0x4c>
    23de:	43d3      	mvns	r3, r2
    23e0:	4921      	ldr	r1, [pc, #132]	; (2468 <Reset_Handler+0xc0>)
    23e2:	185b      	adds	r3, r3, r1
    23e4:	2103      	movs	r1, #3
    23e6:	438b      	bics	r3, r1
    23e8:	3304      	adds	r3, #4
    23ea:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    23ec:	2100      	movs	r1, #0
    23ee:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    23f0:	4293      	cmp	r3, r2
    23f2:	d1fc      	bne.n	23ee <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    23f4:	4a1d      	ldr	r2, [pc, #116]	; (246c <Reset_Handler+0xc4>)
    23f6:	21ff      	movs	r1, #255	; 0xff
    23f8:	4b1d      	ldr	r3, [pc, #116]	; (2470 <Reset_Handler+0xc8>)
    23fa:	438b      	bics	r3, r1
    23fc:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    23fe:	39fd      	subs	r1, #253	; 0xfd
    2400:	2390      	movs	r3, #144	; 0x90
    2402:	005b      	lsls	r3, r3, #1
    2404:	4a1b      	ldr	r2, [pc, #108]	; (2474 <Reset_Handler+0xcc>)
    2406:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2408:	4a1b      	ldr	r2, [pc, #108]	; (2478 <Reset_Handler+0xd0>)
    240a:	78d3      	ldrb	r3, [r2, #3]
    240c:	2503      	movs	r5, #3
    240e:	43ab      	bics	r3, r5
    2410:	2402      	movs	r4, #2
    2412:	4323      	orrs	r3, r4
    2414:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2416:	78d3      	ldrb	r3, [r2, #3]
    2418:	270c      	movs	r7, #12
    241a:	43bb      	bics	r3, r7
    241c:	2608      	movs	r6, #8
    241e:	4333      	orrs	r3, r6
    2420:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2422:	4b16      	ldr	r3, [pc, #88]	; (247c <Reset_Handler+0xd4>)
    2424:	7b98      	ldrb	r0, [r3, #14]
    2426:	2230      	movs	r2, #48	; 0x30
    2428:	4390      	bics	r0, r2
    242a:	2220      	movs	r2, #32
    242c:	4310      	orrs	r0, r2
    242e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2430:	7b99      	ldrb	r1, [r3, #14]
    2432:	43b9      	bics	r1, r7
    2434:	4331      	orrs	r1, r6
    2436:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2438:	7b9a      	ldrb	r2, [r3, #14]
    243a:	43aa      	bics	r2, r5
    243c:	4322      	orrs	r2, r4
    243e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2440:	4a0f      	ldr	r2, [pc, #60]	; (2480 <Reset_Handler+0xd8>)
    2442:	6853      	ldr	r3, [r2, #4]
    2444:	2180      	movs	r1, #128	; 0x80
    2446:	430b      	orrs	r3, r1
    2448:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    244a:	4b0e      	ldr	r3, [pc, #56]	; (2484 <Reset_Handler+0xdc>)
    244c:	4798      	blx	r3
        main();
    244e:	4b0e      	ldr	r3, [pc, #56]	; (2488 <Reset_Handler+0xe0>)
    2450:	4798      	blx	r3
    2452:	e7fe      	b.n	2452 <Reset_Handler+0xaa>
    2454:	0000490c 	.word	0x0000490c
    2458:	20000000 	.word	0x20000000
    245c:	200001dc 	.word	0x200001dc
    2460:	20000004 	.word	0x20000004
    2464:	200001dc 	.word	0x200001dc
    2468:	200003d4 	.word	0x200003d4
    246c:	e000ed00 	.word	0xe000ed00
    2470:	00000000 	.word	0x00000000
    2474:	41007000 	.word	0x41007000
    2478:	41005000 	.word	0x41005000
    247c:	41004800 	.word	0x41004800
    2480:	41004000 	.word	0x41004000
    2484:	000026c9 	.word	0x000026c9
    2488:	000009b1 	.word	0x000009b1

0000248c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    248c:	b5f0      	push	{r4, r5, r6, r7, lr}
    248e:	46c6      	mov	lr, r8
    2490:	b500      	push	{lr}
    2492:	000c      	movs	r4, r1
    2494:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    2496:	2800      	cmp	r0, #0
    2498:	d10f      	bne.n	24ba <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    249a:	2a00      	cmp	r2, #0
    249c:	dd11      	ble.n	24c2 <_read+0x36>
    249e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    24a0:	4e09      	ldr	r6, [pc, #36]	; (24c8 <_read+0x3c>)
    24a2:	4d0a      	ldr	r5, [pc, #40]	; (24cc <_read+0x40>)
    24a4:	6830      	ldr	r0, [r6, #0]
    24a6:	0021      	movs	r1, r4
    24a8:	682b      	ldr	r3, [r5, #0]
    24aa:	4798      	blx	r3
		ptr++;
    24ac:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    24ae:	42bc      	cmp	r4, r7
    24b0:	d1f8      	bne.n	24a4 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    24b2:	4640      	mov	r0, r8
    24b4:	bc04      	pop	{r2}
    24b6:	4690      	mov	r8, r2
    24b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    24ba:	2301      	movs	r3, #1
    24bc:	425b      	negs	r3, r3
    24be:	4698      	mov	r8, r3
    24c0:	e7f7      	b.n	24b2 <_read+0x26>
	for (; len > 0; --len) {
    24c2:	4680      	mov	r8, r0
    24c4:	e7f5      	b.n	24b2 <_read+0x26>
    24c6:	46c0      	nop			; (mov r8, r8)
    24c8:	200003cc 	.word	0x200003cc
    24cc:	200003c4 	.word	0x200003c4

000024d0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    24d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    24d2:	46c6      	mov	lr, r8
    24d4:	b500      	push	{lr}
    24d6:	000e      	movs	r6, r1
    24d8:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    24da:	3801      	subs	r0, #1
    24dc:	2802      	cmp	r0, #2
    24de:	d810      	bhi.n	2502 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    24e0:	2a00      	cmp	r2, #0
    24e2:	d011      	beq.n	2508 <_write+0x38>
    24e4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    24e6:	4b0c      	ldr	r3, [pc, #48]	; (2518 <_write+0x48>)
    24e8:	4698      	mov	r8, r3
    24ea:	4f0c      	ldr	r7, [pc, #48]	; (251c <_write+0x4c>)
    24ec:	4643      	mov	r3, r8
    24ee:	6818      	ldr	r0, [r3, #0]
    24f0:	5d31      	ldrb	r1, [r6, r4]
    24f2:	683b      	ldr	r3, [r7, #0]
    24f4:	4798      	blx	r3
    24f6:	2800      	cmp	r0, #0
    24f8:	db08      	blt.n	250c <_write+0x3c>
			return -1;
		}
		++nChars;
    24fa:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    24fc:	42a5      	cmp	r5, r4
    24fe:	d1f5      	bne.n	24ec <_write+0x1c>
    2500:	e006      	b.n	2510 <_write+0x40>
		return -1;
    2502:	2401      	movs	r4, #1
    2504:	4264      	negs	r4, r4
    2506:	e003      	b.n	2510 <_write+0x40>
	for (; len != 0; --len) {
    2508:	0014      	movs	r4, r2
    250a:	e001      	b.n	2510 <_write+0x40>
			return -1;
    250c:	2401      	movs	r4, #1
    250e:	4264      	negs	r4, r4
	}
	return nChars;
}
    2510:	0020      	movs	r0, r4
    2512:	bc04      	pop	{r2}
    2514:	4690      	mov	r8, r2
    2516:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2518:	200003cc 	.word	0x200003cc
    251c:	200003c8 	.word	0x200003c8

00002520 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2520:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2522:	4a06      	ldr	r2, [pc, #24]	; (253c <_sbrk+0x1c>)
    2524:	6812      	ldr	r2, [r2, #0]
    2526:	2a00      	cmp	r2, #0
    2528:	d004      	beq.n	2534 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    252a:	4a04      	ldr	r2, [pc, #16]	; (253c <_sbrk+0x1c>)
    252c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    252e:	18c3      	adds	r3, r0, r3
    2530:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2532:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2534:	4902      	ldr	r1, [pc, #8]	; (2540 <_sbrk+0x20>)
    2536:	4a01      	ldr	r2, [pc, #4]	; (253c <_sbrk+0x1c>)
    2538:	6011      	str	r1, [r2, #0]
    253a:	e7f6      	b.n	252a <_sbrk+0xa>
    253c:	2000022c 	.word	0x2000022c
    2540:	200023d8 	.word	0x200023d8

00002544 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    2544:	2001      	movs	r0, #1
    2546:	4240      	negs	r0, r0
    2548:	4770      	bx	lr

0000254a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    254a:	2380      	movs	r3, #128	; 0x80
    254c:	019b      	lsls	r3, r3, #6
    254e:	604b      	str	r3, [r1, #4]

	return 0;
}
    2550:	2000      	movs	r0, #0
    2552:	4770      	bx	lr

00002554 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2554:	2001      	movs	r0, #1
    2556:	4770      	bx	lr

00002558 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2558:	2000      	movs	r0, #0
    255a:	4770      	bx	lr

0000255c <__udivsi3>:
    255c:	2200      	movs	r2, #0
    255e:	0843      	lsrs	r3, r0, #1
    2560:	428b      	cmp	r3, r1
    2562:	d374      	bcc.n	264e <__udivsi3+0xf2>
    2564:	0903      	lsrs	r3, r0, #4
    2566:	428b      	cmp	r3, r1
    2568:	d35f      	bcc.n	262a <__udivsi3+0xce>
    256a:	0a03      	lsrs	r3, r0, #8
    256c:	428b      	cmp	r3, r1
    256e:	d344      	bcc.n	25fa <__udivsi3+0x9e>
    2570:	0b03      	lsrs	r3, r0, #12
    2572:	428b      	cmp	r3, r1
    2574:	d328      	bcc.n	25c8 <__udivsi3+0x6c>
    2576:	0c03      	lsrs	r3, r0, #16
    2578:	428b      	cmp	r3, r1
    257a:	d30d      	bcc.n	2598 <__udivsi3+0x3c>
    257c:	22ff      	movs	r2, #255	; 0xff
    257e:	0209      	lsls	r1, r1, #8
    2580:	ba12      	rev	r2, r2
    2582:	0c03      	lsrs	r3, r0, #16
    2584:	428b      	cmp	r3, r1
    2586:	d302      	bcc.n	258e <__udivsi3+0x32>
    2588:	1212      	asrs	r2, r2, #8
    258a:	0209      	lsls	r1, r1, #8
    258c:	d065      	beq.n	265a <__udivsi3+0xfe>
    258e:	0b03      	lsrs	r3, r0, #12
    2590:	428b      	cmp	r3, r1
    2592:	d319      	bcc.n	25c8 <__udivsi3+0x6c>
    2594:	e000      	b.n	2598 <__udivsi3+0x3c>
    2596:	0a09      	lsrs	r1, r1, #8
    2598:	0bc3      	lsrs	r3, r0, #15
    259a:	428b      	cmp	r3, r1
    259c:	d301      	bcc.n	25a2 <__udivsi3+0x46>
    259e:	03cb      	lsls	r3, r1, #15
    25a0:	1ac0      	subs	r0, r0, r3
    25a2:	4152      	adcs	r2, r2
    25a4:	0b83      	lsrs	r3, r0, #14
    25a6:	428b      	cmp	r3, r1
    25a8:	d301      	bcc.n	25ae <__udivsi3+0x52>
    25aa:	038b      	lsls	r3, r1, #14
    25ac:	1ac0      	subs	r0, r0, r3
    25ae:	4152      	adcs	r2, r2
    25b0:	0b43      	lsrs	r3, r0, #13
    25b2:	428b      	cmp	r3, r1
    25b4:	d301      	bcc.n	25ba <__udivsi3+0x5e>
    25b6:	034b      	lsls	r3, r1, #13
    25b8:	1ac0      	subs	r0, r0, r3
    25ba:	4152      	adcs	r2, r2
    25bc:	0b03      	lsrs	r3, r0, #12
    25be:	428b      	cmp	r3, r1
    25c0:	d301      	bcc.n	25c6 <__udivsi3+0x6a>
    25c2:	030b      	lsls	r3, r1, #12
    25c4:	1ac0      	subs	r0, r0, r3
    25c6:	4152      	adcs	r2, r2
    25c8:	0ac3      	lsrs	r3, r0, #11
    25ca:	428b      	cmp	r3, r1
    25cc:	d301      	bcc.n	25d2 <__udivsi3+0x76>
    25ce:	02cb      	lsls	r3, r1, #11
    25d0:	1ac0      	subs	r0, r0, r3
    25d2:	4152      	adcs	r2, r2
    25d4:	0a83      	lsrs	r3, r0, #10
    25d6:	428b      	cmp	r3, r1
    25d8:	d301      	bcc.n	25de <__udivsi3+0x82>
    25da:	028b      	lsls	r3, r1, #10
    25dc:	1ac0      	subs	r0, r0, r3
    25de:	4152      	adcs	r2, r2
    25e0:	0a43      	lsrs	r3, r0, #9
    25e2:	428b      	cmp	r3, r1
    25e4:	d301      	bcc.n	25ea <__udivsi3+0x8e>
    25e6:	024b      	lsls	r3, r1, #9
    25e8:	1ac0      	subs	r0, r0, r3
    25ea:	4152      	adcs	r2, r2
    25ec:	0a03      	lsrs	r3, r0, #8
    25ee:	428b      	cmp	r3, r1
    25f0:	d301      	bcc.n	25f6 <__udivsi3+0x9a>
    25f2:	020b      	lsls	r3, r1, #8
    25f4:	1ac0      	subs	r0, r0, r3
    25f6:	4152      	adcs	r2, r2
    25f8:	d2cd      	bcs.n	2596 <__udivsi3+0x3a>
    25fa:	09c3      	lsrs	r3, r0, #7
    25fc:	428b      	cmp	r3, r1
    25fe:	d301      	bcc.n	2604 <__udivsi3+0xa8>
    2600:	01cb      	lsls	r3, r1, #7
    2602:	1ac0      	subs	r0, r0, r3
    2604:	4152      	adcs	r2, r2
    2606:	0983      	lsrs	r3, r0, #6
    2608:	428b      	cmp	r3, r1
    260a:	d301      	bcc.n	2610 <__udivsi3+0xb4>
    260c:	018b      	lsls	r3, r1, #6
    260e:	1ac0      	subs	r0, r0, r3
    2610:	4152      	adcs	r2, r2
    2612:	0943      	lsrs	r3, r0, #5
    2614:	428b      	cmp	r3, r1
    2616:	d301      	bcc.n	261c <__udivsi3+0xc0>
    2618:	014b      	lsls	r3, r1, #5
    261a:	1ac0      	subs	r0, r0, r3
    261c:	4152      	adcs	r2, r2
    261e:	0903      	lsrs	r3, r0, #4
    2620:	428b      	cmp	r3, r1
    2622:	d301      	bcc.n	2628 <__udivsi3+0xcc>
    2624:	010b      	lsls	r3, r1, #4
    2626:	1ac0      	subs	r0, r0, r3
    2628:	4152      	adcs	r2, r2
    262a:	08c3      	lsrs	r3, r0, #3
    262c:	428b      	cmp	r3, r1
    262e:	d301      	bcc.n	2634 <__udivsi3+0xd8>
    2630:	00cb      	lsls	r3, r1, #3
    2632:	1ac0      	subs	r0, r0, r3
    2634:	4152      	adcs	r2, r2
    2636:	0883      	lsrs	r3, r0, #2
    2638:	428b      	cmp	r3, r1
    263a:	d301      	bcc.n	2640 <__udivsi3+0xe4>
    263c:	008b      	lsls	r3, r1, #2
    263e:	1ac0      	subs	r0, r0, r3
    2640:	4152      	adcs	r2, r2
    2642:	0843      	lsrs	r3, r0, #1
    2644:	428b      	cmp	r3, r1
    2646:	d301      	bcc.n	264c <__udivsi3+0xf0>
    2648:	004b      	lsls	r3, r1, #1
    264a:	1ac0      	subs	r0, r0, r3
    264c:	4152      	adcs	r2, r2
    264e:	1a41      	subs	r1, r0, r1
    2650:	d200      	bcs.n	2654 <__udivsi3+0xf8>
    2652:	4601      	mov	r1, r0
    2654:	4152      	adcs	r2, r2
    2656:	4610      	mov	r0, r2
    2658:	4770      	bx	lr
    265a:	e7ff      	b.n	265c <__udivsi3+0x100>
    265c:	b501      	push	{r0, lr}
    265e:	2000      	movs	r0, #0
    2660:	f000 f806 	bl	2670 <__aeabi_idiv0>
    2664:	bd02      	pop	{r1, pc}
    2666:	46c0      	nop			; (mov r8, r8)

00002668 <__aeabi_uidivmod>:
    2668:	2900      	cmp	r1, #0
    266a:	d0f7      	beq.n	265c <__udivsi3+0x100>
    266c:	e776      	b.n	255c <__udivsi3>
    266e:	4770      	bx	lr

00002670 <__aeabi_idiv0>:
    2670:	4770      	bx	lr
    2672:	46c0      	nop			; (mov r8, r8)

00002674 <__aeabi_lmul>:
    2674:	b5f0      	push	{r4, r5, r6, r7, lr}
    2676:	46ce      	mov	lr, r9
    2678:	4647      	mov	r7, r8
    267a:	0415      	lsls	r5, r2, #16
    267c:	0c2d      	lsrs	r5, r5, #16
    267e:	002e      	movs	r6, r5
    2680:	b580      	push	{r7, lr}
    2682:	0407      	lsls	r7, r0, #16
    2684:	0c14      	lsrs	r4, r2, #16
    2686:	0c3f      	lsrs	r7, r7, #16
    2688:	4699      	mov	r9, r3
    268a:	0c03      	lsrs	r3, r0, #16
    268c:	437e      	muls	r6, r7
    268e:	435d      	muls	r5, r3
    2690:	4367      	muls	r7, r4
    2692:	4363      	muls	r3, r4
    2694:	197f      	adds	r7, r7, r5
    2696:	0c34      	lsrs	r4, r6, #16
    2698:	19e4      	adds	r4, r4, r7
    269a:	469c      	mov	ip, r3
    269c:	42a5      	cmp	r5, r4
    269e:	d903      	bls.n	26a8 <__aeabi_lmul+0x34>
    26a0:	2380      	movs	r3, #128	; 0x80
    26a2:	025b      	lsls	r3, r3, #9
    26a4:	4698      	mov	r8, r3
    26a6:	44c4      	add	ip, r8
    26a8:	464b      	mov	r3, r9
    26aa:	4351      	muls	r1, r2
    26ac:	4343      	muls	r3, r0
    26ae:	0436      	lsls	r6, r6, #16
    26b0:	0c36      	lsrs	r6, r6, #16
    26b2:	0c25      	lsrs	r5, r4, #16
    26b4:	0424      	lsls	r4, r4, #16
    26b6:	4465      	add	r5, ip
    26b8:	19a4      	adds	r4, r4, r6
    26ba:	1859      	adds	r1, r3, r1
    26bc:	1949      	adds	r1, r1, r5
    26be:	0020      	movs	r0, r4
    26c0:	bc0c      	pop	{r2, r3}
    26c2:	4690      	mov	r8, r2
    26c4:	4699      	mov	r9, r3
    26c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000026c8 <__libc_init_array>:
    26c8:	b570      	push	{r4, r5, r6, lr}
    26ca:	2600      	movs	r6, #0
    26cc:	4d0c      	ldr	r5, [pc, #48]	; (2700 <__libc_init_array+0x38>)
    26ce:	4c0d      	ldr	r4, [pc, #52]	; (2704 <__libc_init_array+0x3c>)
    26d0:	1b64      	subs	r4, r4, r5
    26d2:	10a4      	asrs	r4, r4, #2
    26d4:	42a6      	cmp	r6, r4
    26d6:	d109      	bne.n	26ec <__libc_init_array+0x24>
    26d8:	2600      	movs	r6, #0
    26da:	f002 f907 	bl	48ec <_init>
    26de:	4d0a      	ldr	r5, [pc, #40]	; (2708 <__libc_init_array+0x40>)
    26e0:	4c0a      	ldr	r4, [pc, #40]	; (270c <__libc_init_array+0x44>)
    26e2:	1b64      	subs	r4, r4, r5
    26e4:	10a4      	asrs	r4, r4, #2
    26e6:	42a6      	cmp	r6, r4
    26e8:	d105      	bne.n	26f6 <__libc_init_array+0x2e>
    26ea:	bd70      	pop	{r4, r5, r6, pc}
    26ec:	00b3      	lsls	r3, r6, #2
    26ee:	58eb      	ldr	r3, [r5, r3]
    26f0:	4798      	blx	r3
    26f2:	3601      	adds	r6, #1
    26f4:	e7ee      	b.n	26d4 <__libc_init_array+0xc>
    26f6:	00b3      	lsls	r3, r6, #2
    26f8:	58eb      	ldr	r3, [r5, r3]
    26fa:	4798      	blx	r3
    26fc:	3601      	adds	r6, #1
    26fe:	e7f2      	b.n	26e6 <__libc_init_array+0x1e>
    2700:	000048f8 	.word	0x000048f8
    2704:	000048f8 	.word	0x000048f8
    2708:	000048f8 	.word	0x000048f8
    270c:	000048fc 	.word	0x000048fc

00002710 <memcmp>:
    2710:	b530      	push	{r4, r5, lr}
    2712:	2400      	movs	r4, #0
    2714:	42a2      	cmp	r2, r4
    2716:	d101      	bne.n	271c <memcmp+0xc>
    2718:	2000      	movs	r0, #0
    271a:	e005      	b.n	2728 <memcmp+0x18>
    271c:	5d03      	ldrb	r3, [r0, r4]
    271e:	1c65      	adds	r5, r4, #1
    2720:	5d0c      	ldrb	r4, [r1, r4]
    2722:	42a3      	cmp	r3, r4
    2724:	d001      	beq.n	272a <memcmp+0x1a>
    2726:	1b18      	subs	r0, r3, r4
    2728:	bd30      	pop	{r4, r5, pc}
    272a:	002c      	movs	r4, r5
    272c:	e7f2      	b.n	2714 <memcmp+0x4>

0000272e <memcpy>:
    272e:	2300      	movs	r3, #0
    2730:	b510      	push	{r4, lr}
    2732:	429a      	cmp	r2, r3
    2734:	d100      	bne.n	2738 <memcpy+0xa>
    2736:	bd10      	pop	{r4, pc}
    2738:	5ccc      	ldrb	r4, [r1, r3]
    273a:	54c4      	strb	r4, [r0, r3]
    273c:	3301      	adds	r3, #1
    273e:	e7f8      	b.n	2732 <memcpy+0x4>

00002740 <memset>:
    2740:	0003      	movs	r3, r0
    2742:	1882      	adds	r2, r0, r2
    2744:	4293      	cmp	r3, r2
    2746:	d100      	bne.n	274a <memset+0xa>
    2748:	4770      	bx	lr
    274a:	7019      	strb	r1, [r3, #0]
    274c:	3301      	adds	r3, #1
    274e:	e7f9      	b.n	2744 <memset+0x4>

00002750 <iprintf>:
    2750:	b40f      	push	{r0, r1, r2, r3}
    2752:	4b0b      	ldr	r3, [pc, #44]	; (2780 <iprintf+0x30>)
    2754:	b513      	push	{r0, r1, r4, lr}
    2756:	681c      	ldr	r4, [r3, #0]
    2758:	2c00      	cmp	r4, #0
    275a:	d005      	beq.n	2768 <iprintf+0x18>
    275c:	69a3      	ldr	r3, [r4, #24]
    275e:	2b00      	cmp	r3, #0
    2760:	d102      	bne.n	2768 <iprintf+0x18>
    2762:	0020      	movs	r0, r4
    2764:	f000 fb34 	bl	2dd0 <__sinit>
    2768:	ab05      	add	r3, sp, #20
    276a:	9a04      	ldr	r2, [sp, #16]
    276c:	68a1      	ldr	r1, [r4, #8]
    276e:	0020      	movs	r0, r4
    2770:	9301      	str	r3, [sp, #4]
    2772:	f000 fd25 	bl	31c0 <_vfiprintf_r>
    2776:	bc16      	pop	{r1, r2, r4}
    2778:	bc08      	pop	{r3}
    277a:	b004      	add	sp, #16
    277c:	4718      	bx	r3
    277e:	46c0      	nop			; (mov r8, r8)
    2780:	2000000c 	.word	0x2000000c

00002784 <putchar>:
    2784:	4b08      	ldr	r3, [pc, #32]	; (27a8 <putchar+0x24>)
    2786:	b570      	push	{r4, r5, r6, lr}
    2788:	681c      	ldr	r4, [r3, #0]
    278a:	0005      	movs	r5, r0
    278c:	2c00      	cmp	r4, #0
    278e:	d005      	beq.n	279c <putchar+0x18>
    2790:	69a3      	ldr	r3, [r4, #24]
    2792:	2b00      	cmp	r3, #0
    2794:	d102      	bne.n	279c <putchar+0x18>
    2796:	0020      	movs	r0, r4
    2798:	f000 fb1a 	bl	2dd0 <__sinit>
    279c:	0029      	movs	r1, r5
    279e:	68a2      	ldr	r2, [r4, #8]
    27a0:	0020      	movs	r0, r4
    27a2:	f001 fac3 	bl	3d2c <_putc_r>
    27a6:	bd70      	pop	{r4, r5, r6, pc}
    27a8:	2000000c 	.word	0x2000000c

000027ac <_puts_r>:
    27ac:	b570      	push	{r4, r5, r6, lr}
    27ae:	0005      	movs	r5, r0
    27b0:	000e      	movs	r6, r1
    27b2:	2800      	cmp	r0, #0
    27b4:	d004      	beq.n	27c0 <_puts_r+0x14>
    27b6:	6983      	ldr	r3, [r0, #24]
    27b8:	2b00      	cmp	r3, #0
    27ba:	d101      	bne.n	27c0 <_puts_r+0x14>
    27bc:	f000 fb08 	bl	2dd0 <__sinit>
    27c0:	69ab      	ldr	r3, [r5, #24]
    27c2:	68ac      	ldr	r4, [r5, #8]
    27c4:	2b00      	cmp	r3, #0
    27c6:	d102      	bne.n	27ce <_puts_r+0x22>
    27c8:	0028      	movs	r0, r5
    27ca:	f000 fb01 	bl	2dd0 <__sinit>
    27ce:	4b24      	ldr	r3, [pc, #144]	; (2860 <_puts_r+0xb4>)
    27d0:	429c      	cmp	r4, r3
    27d2:	d10f      	bne.n	27f4 <_puts_r+0x48>
    27d4:	686c      	ldr	r4, [r5, #4]
    27d6:	89a3      	ldrh	r3, [r4, #12]
    27d8:	071b      	lsls	r3, r3, #28
    27da:	d502      	bpl.n	27e2 <_puts_r+0x36>
    27dc:	6923      	ldr	r3, [r4, #16]
    27de:	2b00      	cmp	r3, #0
    27e0:	d120      	bne.n	2824 <_puts_r+0x78>
    27e2:	0021      	movs	r1, r4
    27e4:	0028      	movs	r0, r5
    27e6:	f000 f971 	bl	2acc <__swsetup_r>
    27ea:	2800      	cmp	r0, #0
    27ec:	d01a      	beq.n	2824 <_puts_r+0x78>
    27ee:	2001      	movs	r0, #1
    27f0:	4240      	negs	r0, r0
    27f2:	bd70      	pop	{r4, r5, r6, pc}
    27f4:	4b1b      	ldr	r3, [pc, #108]	; (2864 <_puts_r+0xb8>)
    27f6:	429c      	cmp	r4, r3
    27f8:	d101      	bne.n	27fe <_puts_r+0x52>
    27fa:	68ac      	ldr	r4, [r5, #8]
    27fc:	e7eb      	b.n	27d6 <_puts_r+0x2a>
    27fe:	4b1a      	ldr	r3, [pc, #104]	; (2868 <_puts_r+0xbc>)
    2800:	429c      	cmp	r4, r3
    2802:	d1e8      	bne.n	27d6 <_puts_r+0x2a>
    2804:	68ec      	ldr	r4, [r5, #12]
    2806:	e7e6      	b.n	27d6 <_puts_r+0x2a>
    2808:	3b01      	subs	r3, #1
    280a:	3601      	adds	r6, #1
    280c:	60a3      	str	r3, [r4, #8]
    280e:	2b00      	cmp	r3, #0
    2810:	da04      	bge.n	281c <_puts_r+0x70>
    2812:	69a2      	ldr	r2, [r4, #24]
    2814:	4293      	cmp	r3, r2
    2816:	db16      	blt.n	2846 <_puts_r+0x9a>
    2818:	290a      	cmp	r1, #10
    281a:	d014      	beq.n	2846 <_puts_r+0x9a>
    281c:	6823      	ldr	r3, [r4, #0]
    281e:	1c5a      	adds	r2, r3, #1
    2820:	6022      	str	r2, [r4, #0]
    2822:	7019      	strb	r1, [r3, #0]
    2824:	7831      	ldrb	r1, [r6, #0]
    2826:	68a3      	ldr	r3, [r4, #8]
    2828:	2900      	cmp	r1, #0
    282a:	d1ed      	bne.n	2808 <_puts_r+0x5c>
    282c:	3b01      	subs	r3, #1
    282e:	60a3      	str	r3, [r4, #8]
    2830:	2b00      	cmp	r3, #0
    2832:	da0f      	bge.n	2854 <_puts_r+0xa8>
    2834:	0022      	movs	r2, r4
    2836:	310a      	adds	r1, #10
    2838:	0028      	movs	r0, r5
    283a:	f000 f8f1 	bl	2a20 <__swbuf_r>
    283e:	1c43      	adds	r3, r0, #1
    2840:	d0d5      	beq.n	27ee <_puts_r+0x42>
    2842:	200a      	movs	r0, #10
    2844:	e7d5      	b.n	27f2 <_puts_r+0x46>
    2846:	0022      	movs	r2, r4
    2848:	0028      	movs	r0, r5
    284a:	f000 f8e9 	bl	2a20 <__swbuf_r>
    284e:	1c43      	adds	r3, r0, #1
    2850:	d1e8      	bne.n	2824 <_puts_r+0x78>
    2852:	e7cc      	b.n	27ee <_puts_r+0x42>
    2854:	200a      	movs	r0, #10
    2856:	6823      	ldr	r3, [r4, #0]
    2858:	1c5a      	adds	r2, r3, #1
    285a:	6022      	str	r2, [r4, #0]
    285c:	7018      	strb	r0, [r3, #0]
    285e:	e7c8      	b.n	27f2 <_puts_r+0x46>
    2860:	00004744 	.word	0x00004744
    2864:	00004764 	.word	0x00004764
    2868:	00004724 	.word	0x00004724

0000286c <puts>:
    286c:	b510      	push	{r4, lr}
    286e:	4b03      	ldr	r3, [pc, #12]	; (287c <puts+0x10>)
    2870:	0001      	movs	r1, r0
    2872:	6818      	ldr	r0, [r3, #0]
    2874:	f7ff ff9a 	bl	27ac <_puts_r>
    2878:	bd10      	pop	{r4, pc}
    287a:	46c0      	nop			; (mov r8, r8)
    287c:	2000000c 	.word	0x2000000c

00002880 <iscanf>:
    2880:	b40f      	push	{r0, r1, r2, r3}
    2882:	4b0b      	ldr	r3, [pc, #44]	; (28b0 <iscanf+0x30>)
    2884:	b513      	push	{r0, r1, r4, lr}
    2886:	681c      	ldr	r4, [r3, #0]
    2888:	2c00      	cmp	r4, #0
    288a:	d005      	beq.n	2898 <iscanf+0x18>
    288c:	69a3      	ldr	r3, [r4, #24]
    288e:	2b00      	cmp	r3, #0
    2890:	d102      	bne.n	2898 <iscanf+0x18>
    2892:	0020      	movs	r0, r4
    2894:	f000 fa9c 	bl	2dd0 <__sinit>
    2898:	ab05      	add	r3, sp, #20
    289a:	9a04      	ldr	r2, [sp, #16]
    289c:	6861      	ldr	r1, [r4, #4]
    289e:	0020      	movs	r0, r4
    28a0:	9301      	str	r3, [sp, #4]
    28a2:	f001 f8b7 	bl	3a14 <_vfiscanf_r>
    28a6:	bc16      	pop	{r1, r2, r4}
    28a8:	bc08      	pop	{r3}
    28aa:	b004      	add	sp, #16
    28ac:	4718      	bx	r3
    28ae:	46c0      	nop			; (mov r8, r8)
    28b0:	2000000c 	.word	0x2000000c

000028b4 <setbuf>:
    28b4:	424a      	negs	r2, r1
    28b6:	414a      	adcs	r2, r1
    28b8:	2380      	movs	r3, #128	; 0x80
    28ba:	b510      	push	{r4, lr}
    28bc:	0052      	lsls	r2, r2, #1
    28be:	00db      	lsls	r3, r3, #3
    28c0:	f000 f802 	bl	28c8 <setvbuf>
    28c4:	bd10      	pop	{r4, pc}
	...

000028c8 <setvbuf>:
    28c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    28ca:	001d      	movs	r5, r3
    28cc:	4b4f      	ldr	r3, [pc, #316]	; (2a0c <setvbuf+0x144>)
    28ce:	b085      	sub	sp, #20
    28d0:	681e      	ldr	r6, [r3, #0]
    28d2:	0004      	movs	r4, r0
    28d4:	000f      	movs	r7, r1
    28d6:	9200      	str	r2, [sp, #0]
    28d8:	2e00      	cmp	r6, #0
    28da:	d005      	beq.n	28e8 <setvbuf+0x20>
    28dc:	69b3      	ldr	r3, [r6, #24]
    28de:	2b00      	cmp	r3, #0
    28e0:	d102      	bne.n	28e8 <setvbuf+0x20>
    28e2:	0030      	movs	r0, r6
    28e4:	f000 fa74 	bl	2dd0 <__sinit>
    28e8:	4b49      	ldr	r3, [pc, #292]	; (2a10 <setvbuf+0x148>)
    28ea:	429c      	cmp	r4, r3
    28ec:	d150      	bne.n	2990 <setvbuf+0xc8>
    28ee:	6874      	ldr	r4, [r6, #4]
    28f0:	9b00      	ldr	r3, [sp, #0]
    28f2:	2b02      	cmp	r3, #2
    28f4:	d005      	beq.n	2902 <setvbuf+0x3a>
    28f6:	2b01      	cmp	r3, #1
    28f8:	d900      	bls.n	28fc <setvbuf+0x34>
    28fa:	e084      	b.n	2a06 <setvbuf+0x13e>
    28fc:	2d00      	cmp	r5, #0
    28fe:	da00      	bge.n	2902 <setvbuf+0x3a>
    2900:	e081      	b.n	2a06 <setvbuf+0x13e>
    2902:	0021      	movs	r1, r4
    2904:	0030      	movs	r0, r6
    2906:	f000 f9e1 	bl	2ccc <_fflush_r>
    290a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    290c:	2900      	cmp	r1, #0
    290e:	d008      	beq.n	2922 <setvbuf+0x5a>
    2910:	0023      	movs	r3, r4
    2912:	3344      	adds	r3, #68	; 0x44
    2914:	4299      	cmp	r1, r3
    2916:	d002      	beq.n	291e <setvbuf+0x56>
    2918:	0030      	movs	r0, r6
    291a:	f000 fb81 	bl	3020 <_free_r>
    291e:	2300      	movs	r3, #0
    2920:	6363      	str	r3, [r4, #52]	; 0x34
    2922:	2300      	movs	r3, #0
    2924:	61a3      	str	r3, [r4, #24]
    2926:	6063      	str	r3, [r4, #4]
    2928:	89a3      	ldrh	r3, [r4, #12]
    292a:	061b      	lsls	r3, r3, #24
    292c:	d503      	bpl.n	2936 <setvbuf+0x6e>
    292e:	6921      	ldr	r1, [r4, #16]
    2930:	0030      	movs	r0, r6
    2932:	f000 fb75 	bl	3020 <_free_r>
    2936:	89a3      	ldrh	r3, [r4, #12]
    2938:	4a36      	ldr	r2, [pc, #216]	; (2a14 <setvbuf+0x14c>)
    293a:	4013      	ands	r3, r2
    293c:	81a3      	strh	r3, [r4, #12]
    293e:	9b00      	ldr	r3, [sp, #0]
    2940:	2b02      	cmp	r3, #2
    2942:	d05a      	beq.n	29fa <setvbuf+0x132>
    2944:	ab03      	add	r3, sp, #12
    2946:	aa02      	add	r2, sp, #8
    2948:	0021      	movs	r1, r4
    294a:	0030      	movs	r0, r6
    294c:	f000 faf2 	bl	2f34 <__swhatbuf_r>
    2950:	89a3      	ldrh	r3, [r4, #12]
    2952:	4318      	orrs	r0, r3
    2954:	81a0      	strh	r0, [r4, #12]
    2956:	2d00      	cmp	r5, #0
    2958:	d124      	bne.n	29a4 <setvbuf+0xdc>
    295a:	9d02      	ldr	r5, [sp, #8]
    295c:	0028      	movs	r0, r5
    295e:	f000 fb55 	bl	300c <malloc>
    2962:	9501      	str	r5, [sp, #4]
    2964:	1e07      	subs	r7, r0, #0
    2966:	d142      	bne.n	29ee <setvbuf+0x126>
    2968:	9b02      	ldr	r3, [sp, #8]
    296a:	9301      	str	r3, [sp, #4]
    296c:	42ab      	cmp	r3, r5
    296e:	d139      	bne.n	29e4 <setvbuf+0x11c>
    2970:	2001      	movs	r0, #1
    2972:	4240      	negs	r0, r0
    2974:	2302      	movs	r3, #2
    2976:	89a2      	ldrh	r2, [r4, #12]
    2978:	4313      	orrs	r3, r2
    297a:	81a3      	strh	r3, [r4, #12]
    297c:	2300      	movs	r3, #0
    297e:	60a3      	str	r3, [r4, #8]
    2980:	0023      	movs	r3, r4
    2982:	3347      	adds	r3, #71	; 0x47
    2984:	6023      	str	r3, [r4, #0]
    2986:	6123      	str	r3, [r4, #16]
    2988:	2301      	movs	r3, #1
    298a:	6163      	str	r3, [r4, #20]
    298c:	b005      	add	sp, #20
    298e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2990:	4b21      	ldr	r3, [pc, #132]	; (2a18 <setvbuf+0x150>)
    2992:	429c      	cmp	r4, r3
    2994:	d101      	bne.n	299a <setvbuf+0xd2>
    2996:	68b4      	ldr	r4, [r6, #8]
    2998:	e7aa      	b.n	28f0 <setvbuf+0x28>
    299a:	4b20      	ldr	r3, [pc, #128]	; (2a1c <setvbuf+0x154>)
    299c:	429c      	cmp	r4, r3
    299e:	d1a7      	bne.n	28f0 <setvbuf+0x28>
    29a0:	68f4      	ldr	r4, [r6, #12]
    29a2:	e7a5      	b.n	28f0 <setvbuf+0x28>
    29a4:	2f00      	cmp	r7, #0
    29a6:	d0d9      	beq.n	295c <setvbuf+0x94>
    29a8:	69b3      	ldr	r3, [r6, #24]
    29aa:	2b00      	cmp	r3, #0
    29ac:	d102      	bne.n	29b4 <setvbuf+0xec>
    29ae:	0030      	movs	r0, r6
    29b0:	f000 fa0e 	bl	2dd0 <__sinit>
    29b4:	9b00      	ldr	r3, [sp, #0]
    29b6:	2b01      	cmp	r3, #1
    29b8:	d103      	bne.n	29c2 <setvbuf+0xfa>
    29ba:	89a3      	ldrh	r3, [r4, #12]
    29bc:	9a00      	ldr	r2, [sp, #0]
    29be:	431a      	orrs	r2, r3
    29c0:	81a2      	strh	r2, [r4, #12]
    29c2:	2008      	movs	r0, #8
    29c4:	89a3      	ldrh	r3, [r4, #12]
    29c6:	6027      	str	r7, [r4, #0]
    29c8:	6127      	str	r7, [r4, #16]
    29ca:	6165      	str	r5, [r4, #20]
    29cc:	4018      	ands	r0, r3
    29ce:	d018      	beq.n	2a02 <setvbuf+0x13a>
    29d0:	2001      	movs	r0, #1
    29d2:	4018      	ands	r0, r3
    29d4:	2300      	movs	r3, #0
    29d6:	4298      	cmp	r0, r3
    29d8:	d011      	beq.n	29fe <setvbuf+0x136>
    29da:	426d      	negs	r5, r5
    29dc:	60a3      	str	r3, [r4, #8]
    29de:	61a5      	str	r5, [r4, #24]
    29e0:	0018      	movs	r0, r3
    29e2:	e7d3      	b.n	298c <setvbuf+0xc4>
    29e4:	9801      	ldr	r0, [sp, #4]
    29e6:	f000 fb11 	bl	300c <malloc>
    29ea:	1e07      	subs	r7, r0, #0
    29ec:	d0c0      	beq.n	2970 <setvbuf+0xa8>
    29ee:	2380      	movs	r3, #128	; 0x80
    29f0:	89a2      	ldrh	r2, [r4, #12]
    29f2:	9d01      	ldr	r5, [sp, #4]
    29f4:	4313      	orrs	r3, r2
    29f6:	81a3      	strh	r3, [r4, #12]
    29f8:	e7d6      	b.n	29a8 <setvbuf+0xe0>
    29fa:	2000      	movs	r0, #0
    29fc:	e7ba      	b.n	2974 <setvbuf+0xac>
    29fe:	60a5      	str	r5, [r4, #8]
    2a00:	e7c4      	b.n	298c <setvbuf+0xc4>
    2a02:	60a0      	str	r0, [r4, #8]
    2a04:	e7c2      	b.n	298c <setvbuf+0xc4>
    2a06:	2001      	movs	r0, #1
    2a08:	4240      	negs	r0, r0
    2a0a:	e7bf      	b.n	298c <setvbuf+0xc4>
    2a0c:	2000000c 	.word	0x2000000c
    2a10:	00004744 	.word	0x00004744
    2a14:	fffff35c 	.word	0xfffff35c
    2a18:	00004764 	.word	0x00004764
    2a1c:	00004724 	.word	0x00004724

00002a20 <__swbuf_r>:
    2a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a22:	0005      	movs	r5, r0
    2a24:	000e      	movs	r6, r1
    2a26:	0014      	movs	r4, r2
    2a28:	2800      	cmp	r0, #0
    2a2a:	d004      	beq.n	2a36 <__swbuf_r+0x16>
    2a2c:	6983      	ldr	r3, [r0, #24]
    2a2e:	2b00      	cmp	r3, #0
    2a30:	d101      	bne.n	2a36 <__swbuf_r+0x16>
    2a32:	f000 f9cd 	bl	2dd0 <__sinit>
    2a36:	4b22      	ldr	r3, [pc, #136]	; (2ac0 <__swbuf_r+0xa0>)
    2a38:	429c      	cmp	r4, r3
    2a3a:	d12d      	bne.n	2a98 <__swbuf_r+0x78>
    2a3c:	686c      	ldr	r4, [r5, #4]
    2a3e:	69a3      	ldr	r3, [r4, #24]
    2a40:	60a3      	str	r3, [r4, #8]
    2a42:	89a3      	ldrh	r3, [r4, #12]
    2a44:	071b      	lsls	r3, r3, #28
    2a46:	d531      	bpl.n	2aac <__swbuf_r+0x8c>
    2a48:	6923      	ldr	r3, [r4, #16]
    2a4a:	2b00      	cmp	r3, #0
    2a4c:	d02e      	beq.n	2aac <__swbuf_r+0x8c>
    2a4e:	6823      	ldr	r3, [r4, #0]
    2a50:	6922      	ldr	r2, [r4, #16]
    2a52:	b2f7      	uxtb	r7, r6
    2a54:	1a98      	subs	r0, r3, r2
    2a56:	6963      	ldr	r3, [r4, #20]
    2a58:	b2f6      	uxtb	r6, r6
    2a5a:	4298      	cmp	r0, r3
    2a5c:	db05      	blt.n	2a6a <__swbuf_r+0x4a>
    2a5e:	0021      	movs	r1, r4
    2a60:	0028      	movs	r0, r5
    2a62:	f000 f933 	bl	2ccc <_fflush_r>
    2a66:	2800      	cmp	r0, #0
    2a68:	d126      	bne.n	2ab8 <__swbuf_r+0x98>
    2a6a:	68a3      	ldr	r3, [r4, #8]
    2a6c:	3001      	adds	r0, #1
    2a6e:	3b01      	subs	r3, #1
    2a70:	60a3      	str	r3, [r4, #8]
    2a72:	6823      	ldr	r3, [r4, #0]
    2a74:	1c5a      	adds	r2, r3, #1
    2a76:	6022      	str	r2, [r4, #0]
    2a78:	701f      	strb	r7, [r3, #0]
    2a7a:	6963      	ldr	r3, [r4, #20]
    2a7c:	4298      	cmp	r0, r3
    2a7e:	d004      	beq.n	2a8a <__swbuf_r+0x6a>
    2a80:	89a3      	ldrh	r3, [r4, #12]
    2a82:	07db      	lsls	r3, r3, #31
    2a84:	d51a      	bpl.n	2abc <__swbuf_r+0x9c>
    2a86:	2e0a      	cmp	r6, #10
    2a88:	d118      	bne.n	2abc <__swbuf_r+0x9c>
    2a8a:	0021      	movs	r1, r4
    2a8c:	0028      	movs	r0, r5
    2a8e:	f000 f91d 	bl	2ccc <_fflush_r>
    2a92:	2800      	cmp	r0, #0
    2a94:	d012      	beq.n	2abc <__swbuf_r+0x9c>
    2a96:	e00f      	b.n	2ab8 <__swbuf_r+0x98>
    2a98:	4b0a      	ldr	r3, [pc, #40]	; (2ac4 <__swbuf_r+0xa4>)
    2a9a:	429c      	cmp	r4, r3
    2a9c:	d101      	bne.n	2aa2 <__swbuf_r+0x82>
    2a9e:	68ac      	ldr	r4, [r5, #8]
    2aa0:	e7cd      	b.n	2a3e <__swbuf_r+0x1e>
    2aa2:	4b09      	ldr	r3, [pc, #36]	; (2ac8 <__swbuf_r+0xa8>)
    2aa4:	429c      	cmp	r4, r3
    2aa6:	d1ca      	bne.n	2a3e <__swbuf_r+0x1e>
    2aa8:	68ec      	ldr	r4, [r5, #12]
    2aaa:	e7c8      	b.n	2a3e <__swbuf_r+0x1e>
    2aac:	0021      	movs	r1, r4
    2aae:	0028      	movs	r0, r5
    2ab0:	f000 f80c 	bl	2acc <__swsetup_r>
    2ab4:	2800      	cmp	r0, #0
    2ab6:	d0ca      	beq.n	2a4e <__swbuf_r+0x2e>
    2ab8:	2601      	movs	r6, #1
    2aba:	4276      	negs	r6, r6
    2abc:	0030      	movs	r0, r6
    2abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ac0:	00004744 	.word	0x00004744
    2ac4:	00004764 	.word	0x00004764
    2ac8:	00004724 	.word	0x00004724

00002acc <__swsetup_r>:
    2acc:	4b36      	ldr	r3, [pc, #216]	; (2ba8 <__swsetup_r+0xdc>)
    2ace:	b570      	push	{r4, r5, r6, lr}
    2ad0:	681d      	ldr	r5, [r3, #0]
    2ad2:	0006      	movs	r6, r0
    2ad4:	000c      	movs	r4, r1
    2ad6:	2d00      	cmp	r5, #0
    2ad8:	d005      	beq.n	2ae6 <__swsetup_r+0x1a>
    2ada:	69ab      	ldr	r3, [r5, #24]
    2adc:	2b00      	cmp	r3, #0
    2ade:	d102      	bne.n	2ae6 <__swsetup_r+0x1a>
    2ae0:	0028      	movs	r0, r5
    2ae2:	f000 f975 	bl	2dd0 <__sinit>
    2ae6:	4b31      	ldr	r3, [pc, #196]	; (2bac <__swsetup_r+0xe0>)
    2ae8:	429c      	cmp	r4, r3
    2aea:	d10f      	bne.n	2b0c <__swsetup_r+0x40>
    2aec:	686c      	ldr	r4, [r5, #4]
    2aee:	230c      	movs	r3, #12
    2af0:	5ee2      	ldrsh	r2, [r4, r3]
    2af2:	b293      	uxth	r3, r2
    2af4:	0719      	lsls	r1, r3, #28
    2af6:	d42d      	bmi.n	2b54 <__swsetup_r+0x88>
    2af8:	06d9      	lsls	r1, r3, #27
    2afa:	d411      	bmi.n	2b20 <__swsetup_r+0x54>
    2afc:	2309      	movs	r3, #9
    2afe:	2001      	movs	r0, #1
    2b00:	6033      	str	r3, [r6, #0]
    2b02:	3337      	adds	r3, #55	; 0x37
    2b04:	4313      	orrs	r3, r2
    2b06:	81a3      	strh	r3, [r4, #12]
    2b08:	4240      	negs	r0, r0
    2b0a:	bd70      	pop	{r4, r5, r6, pc}
    2b0c:	4b28      	ldr	r3, [pc, #160]	; (2bb0 <__swsetup_r+0xe4>)
    2b0e:	429c      	cmp	r4, r3
    2b10:	d101      	bne.n	2b16 <__swsetup_r+0x4a>
    2b12:	68ac      	ldr	r4, [r5, #8]
    2b14:	e7eb      	b.n	2aee <__swsetup_r+0x22>
    2b16:	4b27      	ldr	r3, [pc, #156]	; (2bb4 <__swsetup_r+0xe8>)
    2b18:	429c      	cmp	r4, r3
    2b1a:	d1e8      	bne.n	2aee <__swsetup_r+0x22>
    2b1c:	68ec      	ldr	r4, [r5, #12]
    2b1e:	e7e6      	b.n	2aee <__swsetup_r+0x22>
    2b20:	075b      	lsls	r3, r3, #29
    2b22:	d513      	bpl.n	2b4c <__swsetup_r+0x80>
    2b24:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2b26:	2900      	cmp	r1, #0
    2b28:	d008      	beq.n	2b3c <__swsetup_r+0x70>
    2b2a:	0023      	movs	r3, r4
    2b2c:	3344      	adds	r3, #68	; 0x44
    2b2e:	4299      	cmp	r1, r3
    2b30:	d002      	beq.n	2b38 <__swsetup_r+0x6c>
    2b32:	0030      	movs	r0, r6
    2b34:	f000 fa74 	bl	3020 <_free_r>
    2b38:	2300      	movs	r3, #0
    2b3a:	6363      	str	r3, [r4, #52]	; 0x34
    2b3c:	2224      	movs	r2, #36	; 0x24
    2b3e:	89a3      	ldrh	r3, [r4, #12]
    2b40:	4393      	bics	r3, r2
    2b42:	81a3      	strh	r3, [r4, #12]
    2b44:	2300      	movs	r3, #0
    2b46:	6063      	str	r3, [r4, #4]
    2b48:	6923      	ldr	r3, [r4, #16]
    2b4a:	6023      	str	r3, [r4, #0]
    2b4c:	2308      	movs	r3, #8
    2b4e:	89a2      	ldrh	r2, [r4, #12]
    2b50:	4313      	orrs	r3, r2
    2b52:	81a3      	strh	r3, [r4, #12]
    2b54:	6923      	ldr	r3, [r4, #16]
    2b56:	2b00      	cmp	r3, #0
    2b58:	d10b      	bne.n	2b72 <__swsetup_r+0xa6>
    2b5a:	21a0      	movs	r1, #160	; 0xa0
    2b5c:	2280      	movs	r2, #128	; 0x80
    2b5e:	89a3      	ldrh	r3, [r4, #12]
    2b60:	0089      	lsls	r1, r1, #2
    2b62:	0092      	lsls	r2, r2, #2
    2b64:	400b      	ands	r3, r1
    2b66:	4293      	cmp	r3, r2
    2b68:	d003      	beq.n	2b72 <__swsetup_r+0xa6>
    2b6a:	0021      	movs	r1, r4
    2b6c:	0030      	movs	r0, r6
    2b6e:	f000 fa09 	bl	2f84 <__smakebuf_r>
    2b72:	2301      	movs	r3, #1
    2b74:	89a2      	ldrh	r2, [r4, #12]
    2b76:	4013      	ands	r3, r2
    2b78:	d011      	beq.n	2b9e <__swsetup_r+0xd2>
    2b7a:	2300      	movs	r3, #0
    2b7c:	60a3      	str	r3, [r4, #8]
    2b7e:	6963      	ldr	r3, [r4, #20]
    2b80:	425b      	negs	r3, r3
    2b82:	61a3      	str	r3, [r4, #24]
    2b84:	2000      	movs	r0, #0
    2b86:	6923      	ldr	r3, [r4, #16]
    2b88:	4283      	cmp	r3, r0
    2b8a:	d1be      	bne.n	2b0a <__swsetup_r+0x3e>
    2b8c:	230c      	movs	r3, #12
    2b8e:	5ee2      	ldrsh	r2, [r4, r3]
    2b90:	0613      	lsls	r3, r2, #24
    2b92:	d5ba      	bpl.n	2b0a <__swsetup_r+0x3e>
    2b94:	2340      	movs	r3, #64	; 0x40
    2b96:	4313      	orrs	r3, r2
    2b98:	81a3      	strh	r3, [r4, #12]
    2b9a:	3801      	subs	r0, #1
    2b9c:	e7b5      	b.n	2b0a <__swsetup_r+0x3e>
    2b9e:	0792      	lsls	r2, r2, #30
    2ba0:	d400      	bmi.n	2ba4 <__swsetup_r+0xd8>
    2ba2:	6963      	ldr	r3, [r4, #20]
    2ba4:	60a3      	str	r3, [r4, #8]
    2ba6:	e7ed      	b.n	2b84 <__swsetup_r+0xb8>
    2ba8:	2000000c 	.word	0x2000000c
    2bac:	00004744 	.word	0x00004744
    2bb0:	00004764 	.word	0x00004764
    2bb4:	00004724 	.word	0x00004724

00002bb8 <__sflush_r>:
    2bb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2bba:	898a      	ldrh	r2, [r1, #12]
    2bbc:	0005      	movs	r5, r0
    2bbe:	000c      	movs	r4, r1
    2bc0:	0713      	lsls	r3, r2, #28
    2bc2:	d460      	bmi.n	2c86 <__sflush_r+0xce>
    2bc4:	684b      	ldr	r3, [r1, #4]
    2bc6:	2b00      	cmp	r3, #0
    2bc8:	dc04      	bgt.n	2bd4 <__sflush_r+0x1c>
    2bca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    2bcc:	2b00      	cmp	r3, #0
    2bce:	dc01      	bgt.n	2bd4 <__sflush_r+0x1c>
    2bd0:	2000      	movs	r0, #0
    2bd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2bd4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2bd6:	2f00      	cmp	r7, #0
    2bd8:	d0fa      	beq.n	2bd0 <__sflush_r+0x18>
    2bda:	2300      	movs	r3, #0
    2bdc:	682e      	ldr	r6, [r5, #0]
    2bde:	602b      	str	r3, [r5, #0]
    2be0:	2380      	movs	r3, #128	; 0x80
    2be2:	015b      	lsls	r3, r3, #5
    2be4:	401a      	ands	r2, r3
    2be6:	d034      	beq.n	2c52 <__sflush_r+0x9a>
    2be8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    2bea:	89a3      	ldrh	r3, [r4, #12]
    2bec:	075b      	lsls	r3, r3, #29
    2bee:	d506      	bpl.n	2bfe <__sflush_r+0x46>
    2bf0:	6863      	ldr	r3, [r4, #4]
    2bf2:	1ac0      	subs	r0, r0, r3
    2bf4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2bf6:	2b00      	cmp	r3, #0
    2bf8:	d001      	beq.n	2bfe <__sflush_r+0x46>
    2bfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2bfc:	1ac0      	subs	r0, r0, r3
    2bfe:	0002      	movs	r2, r0
    2c00:	6a21      	ldr	r1, [r4, #32]
    2c02:	2300      	movs	r3, #0
    2c04:	0028      	movs	r0, r5
    2c06:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2c08:	47b8      	blx	r7
    2c0a:	89a1      	ldrh	r1, [r4, #12]
    2c0c:	1c43      	adds	r3, r0, #1
    2c0e:	d106      	bne.n	2c1e <__sflush_r+0x66>
    2c10:	682b      	ldr	r3, [r5, #0]
    2c12:	2b1d      	cmp	r3, #29
    2c14:	d831      	bhi.n	2c7a <__sflush_r+0xc2>
    2c16:	4a2c      	ldr	r2, [pc, #176]	; (2cc8 <__sflush_r+0x110>)
    2c18:	40da      	lsrs	r2, r3
    2c1a:	07d3      	lsls	r3, r2, #31
    2c1c:	d52d      	bpl.n	2c7a <__sflush_r+0xc2>
    2c1e:	2300      	movs	r3, #0
    2c20:	6063      	str	r3, [r4, #4]
    2c22:	6923      	ldr	r3, [r4, #16]
    2c24:	6023      	str	r3, [r4, #0]
    2c26:	04cb      	lsls	r3, r1, #19
    2c28:	d505      	bpl.n	2c36 <__sflush_r+0x7e>
    2c2a:	1c43      	adds	r3, r0, #1
    2c2c:	d102      	bne.n	2c34 <__sflush_r+0x7c>
    2c2e:	682b      	ldr	r3, [r5, #0]
    2c30:	2b00      	cmp	r3, #0
    2c32:	d100      	bne.n	2c36 <__sflush_r+0x7e>
    2c34:	6560      	str	r0, [r4, #84]	; 0x54
    2c36:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2c38:	602e      	str	r6, [r5, #0]
    2c3a:	2900      	cmp	r1, #0
    2c3c:	d0c8      	beq.n	2bd0 <__sflush_r+0x18>
    2c3e:	0023      	movs	r3, r4
    2c40:	3344      	adds	r3, #68	; 0x44
    2c42:	4299      	cmp	r1, r3
    2c44:	d002      	beq.n	2c4c <__sflush_r+0x94>
    2c46:	0028      	movs	r0, r5
    2c48:	f000 f9ea 	bl	3020 <_free_r>
    2c4c:	2000      	movs	r0, #0
    2c4e:	6360      	str	r0, [r4, #52]	; 0x34
    2c50:	e7bf      	b.n	2bd2 <__sflush_r+0x1a>
    2c52:	2301      	movs	r3, #1
    2c54:	6a21      	ldr	r1, [r4, #32]
    2c56:	0028      	movs	r0, r5
    2c58:	47b8      	blx	r7
    2c5a:	1c43      	adds	r3, r0, #1
    2c5c:	d1c5      	bne.n	2bea <__sflush_r+0x32>
    2c5e:	682b      	ldr	r3, [r5, #0]
    2c60:	2b00      	cmp	r3, #0
    2c62:	d0c2      	beq.n	2bea <__sflush_r+0x32>
    2c64:	2b1d      	cmp	r3, #29
    2c66:	d001      	beq.n	2c6c <__sflush_r+0xb4>
    2c68:	2b16      	cmp	r3, #22
    2c6a:	d101      	bne.n	2c70 <__sflush_r+0xb8>
    2c6c:	602e      	str	r6, [r5, #0]
    2c6e:	e7af      	b.n	2bd0 <__sflush_r+0x18>
    2c70:	2340      	movs	r3, #64	; 0x40
    2c72:	89a2      	ldrh	r2, [r4, #12]
    2c74:	4313      	orrs	r3, r2
    2c76:	81a3      	strh	r3, [r4, #12]
    2c78:	e7ab      	b.n	2bd2 <__sflush_r+0x1a>
    2c7a:	2340      	movs	r3, #64	; 0x40
    2c7c:	430b      	orrs	r3, r1
    2c7e:	2001      	movs	r0, #1
    2c80:	81a3      	strh	r3, [r4, #12]
    2c82:	4240      	negs	r0, r0
    2c84:	e7a5      	b.n	2bd2 <__sflush_r+0x1a>
    2c86:	690f      	ldr	r7, [r1, #16]
    2c88:	2f00      	cmp	r7, #0
    2c8a:	d0a1      	beq.n	2bd0 <__sflush_r+0x18>
    2c8c:	680b      	ldr	r3, [r1, #0]
    2c8e:	600f      	str	r7, [r1, #0]
    2c90:	1bdb      	subs	r3, r3, r7
    2c92:	9301      	str	r3, [sp, #4]
    2c94:	2300      	movs	r3, #0
    2c96:	0792      	lsls	r2, r2, #30
    2c98:	d100      	bne.n	2c9c <__sflush_r+0xe4>
    2c9a:	694b      	ldr	r3, [r1, #20]
    2c9c:	60a3      	str	r3, [r4, #8]
    2c9e:	9b01      	ldr	r3, [sp, #4]
    2ca0:	2b00      	cmp	r3, #0
    2ca2:	dc00      	bgt.n	2ca6 <__sflush_r+0xee>
    2ca4:	e794      	b.n	2bd0 <__sflush_r+0x18>
    2ca6:	9b01      	ldr	r3, [sp, #4]
    2ca8:	003a      	movs	r2, r7
    2caa:	6a21      	ldr	r1, [r4, #32]
    2cac:	0028      	movs	r0, r5
    2cae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2cb0:	47b0      	blx	r6
    2cb2:	2800      	cmp	r0, #0
    2cb4:	dc03      	bgt.n	2cbe <__sflush_r+0x106>
    2cb6:	2340      	movs	r3, #64	; 0x40
    2cb8:	89a2      	ldrh	r2, [r4, #12]
    2cba:	4313      	orrs	r3, r2
    2cbc:	e7df      	b.n	2c7e <__sflush_r+0xc6>
    2cbe:	9b01      	ldr	r3, [sp, #4]
    2cc0:	183f      	adds	r7, r7, r0
    2cc2:	1a1b      	subs	r3, r3, r0
    2cc4:	9301      	str	r3, [sp, #4]
    2cc6:	e7ea      	b.n	2c9e <__sflush_r+0xe6>
    2cc8:	20400001 	.word	0x20400001

00002ccc <_fflush_r>:
    2ccc:	690b      	ldr	r3, [r1, #16]
    2cce:	b570      	push	{r4, r5, r6, lr}
    2cd0:	0005      	movs	r5, r0
    2cd2:	000c      	movs	r4, r1
    2cd4:	2b00      	cmp	r3, #0
    2cd6:	d101      	bne.n	2cdc <_fflush_r+0x10>
    2cd8:	2000      	movs	r0, #0
    2cda:	bd70      	pop	{r4, r5, r6, pc}
    2cdc:	2800      	cmp	r0, #0
    2cde:	d004      	beq.n	2cea <_fflush_r+0x1e>
    2ce0:	6983      	ldr	r3, [r0, #24]
    2ce2:	2b00      	cmp	r3, #0
    2ce4:	d101      	bne.n	2cea <_fflush_r+0x1e>
    2ce6:	f000 f873 	bl	2dd0 <__sinit>
    2cea:	4b0b      	ldr	r3, [pc, #44]	; (2d18 <_fflush_r+0x4c>)
    2cec:	429c      	cmp	r4, r3
    2cee:	d109      	bne.n	2d04 <_fflush_r+0x38>
    2cf0:	686c      	ldr	r4, [r5, #4]
    2cf2:	220c      	movs	r2, #12
    2cf4:	5ea3      	ldrsh	r3, [r4, r2]
    2cf6:	2b00      	cmp	r3, #0
    2cf8:	d0ee      	beq.n	2cd8 <_fflush_r+0xc>
    2cfa:	0021      	movs	r1, r4
    2cfc:	0028      	movs	r0, r5
    2cfe:	f7ff ff5b 	bl	2bb8 <__sflush_r>
    2d02:	e7ea      	b.n	2cda <_fflush_r+0xe>
    2d04:	4b05      	ldr	r3, [pc, #20]	; (2d1c <_fflush_r+0x50>)
    2d06:	429c      	cmp	r4, r3
    2d08:	d101      	bne.n	2d0e <_fflush_r+0x42>
    2d0a:	68ac      	ldr	r4, [r5, #8]
    2d0c:	e7f1      	b.n	2cf2 <_fflush_r+0x26>
    2d0e:	4b04      	ldr	r3, [pc, #16]	; (2d20 <_fflush_r+0x54>)
    2d10:	429c      	cmp	r4, r3
    2d12:	d1ee      	bne.n	2cf2 <_fflush_r+0x26>
    2d14:	68ec      	ldr	r4, [r5, #12]
    2d16:	e7ec      	b.n	2cf2 <_fflush_r+0x26>
    2d18:	00004744 	.word	0x00004744
    2d1c:	00004764 	.word	0x00004764
    2d20:	00004724 	.word	0x00004724

00002d24 <fflush>:
    2d24:	b510      	push	{r4, lr}
    2d26:	1e01      	subs	r1, r0, #0
    2d28:	d105      	bne.n	2d36 <fflush+0x12>
    2d2a:	4b05      	ldr	r3, [pc, #20]	; (2d40 <fflush+0x1c>)
    2d2c:	4905      	ldr	r1, [pc, #20]	; (2d44 <fflush+0x20>)
    2d2e:	6818      	ldr	r0, [r3, #0]
    2d30:	f000 f8de 	bl	2ef0 <_fwalk_reent>
    2d34:	bd10      	pop	{r4, pc}
    2d36:	4b04      	ldr	r3, [pc, #16]	; (2d48 <fflush+0x24>)
    2d38:	6818      	ldr	r0, [r3, #0]
    2d3a:	f7ff ffc7 	bl	2ccc <_fflush_r>
    2d3e:	e7f9      	b.n	2d34 <fflush+0x10>
    2d40:	00004720 	.word	0x00004720
    2d44:	00002ccd 	.word	0x00002ccd
    2d48:	2000000c 	.word	0x2000000c

00002d4c <_cleanup_r>:
    2d4c:	b510      	push	{r4, lr}
    2d4e:	4902      	ldr	r1, [pc, #8]	; (2d58 <_cleanup_r+0xc>)
    2d50:	f000 f8ce 	bl	2ef0 <_fwalk_reent>
    2d54:	bd10      	pop	{r4, pc}
    2d56:	46c0      	nop			; (mov r8, r8)
    2d58:	00002ccd 	.word	0x00002ccd

00002d5c <std.isra.0>:
    2d5c:	2300      	movs	r3, #0
    2d5e:	b510      	push	{r4, lr}
    2d60:	0004      	movs	r4, r0
    2d62:	6003      	str	r3, [r0, #0]
    2d64:	6043      	str	r3, [r0, #4]
    2d66:	6083      	str	r3, [r0, #8]
    2d68:	8181      	strh	r1, [r0, #12]
    2d6a:	6643      	str	r3, [r0, #100]	; 0x64
    2d6c:	81c2      	strh	r2, [r0, #14]
    2d6e:	6103      	str	r3, [r0, #16]
    2d70:	6143      	str	r3, [r0, #20]
    2d72:	6183      	str	r3, [r0, #24]
    2d74:	0019      	movs	r1, r3
    2d76:	2208      	movs	r2, #8
    2d78:	305c      	adds	r0, #92	; 0x5c
    2d7a:	f7ff fce1 	bl	2740 <memset>
    2d7e:	4b05      	ldr	r3, [pc, #20]	; (2d94 <std.isra.0+0x38>)
    2d80:	6224      	str	r4, [r4, #32]
    2d82:	6263      	str	r3, [r4, #36]	; 0x24
    2d84:	4b04      	ldr	r3, [pc, #16]	; (2d98 <std.isra.0+0x3c>)
    2d86:	62a3      	str	r3, [r4, #40]	; 0x28
    2d88:	4b04      	ldr	r3, [pc, #16]	; (2d9c <std.isra.0+0x40>)
    2d8a:	62e3      	str	r3, [r4, #44]	; 0x2c
    2d8c:	4b04      	ldr	r3, [pc, #16]	; (2da0 <std.isra.0+0x44>)
    2d8e:	6323      	str	r3, [r4, #48]	; 0x30
    2d90:	bd10      	pop	{r4, pc}
    2d92:	46c0      	nop			; (mov r8, r8)
    2d94:	00003f59 	.word	0x00003f59
    2d98:	00003f81 	.word	0x00003f81
    2d9c:	00003fb9 	.word	0x00003fb9
    2da0:	00003fe5 	.word	0x00003fe5

00002da4 <__sfmoreglue>:
    2da4:	b570      	push	{r4, r5, r6, lr}
    2da6:	2568      	movs	r5, #104	; 0x68
    2da8:	1e4a      	subs	r2, r1, #1
    2daa:	4355      	muls	r5, r2
    2dac:	000e      	movs	r6, r1
    2dae:	0029      	movs	r1, r5
    2db0:	3174      	adds	r1, #116	; 0x74
    2db2:	f000 f97f 	bl	30b4 <_malloc_r>
    2db6:	1e04      	subs	r4, r0, #0
    2db8:	d008      	beq.n	2dcc <__sfmoreglue+0x28>
    2dba:	2100      	movs	r1, #0
    2dbc:	002a      	movs	r2, r5
    2dbe:	6001      	str	r1, [r0, #0]
    2dc0:	6046      	str	r6, [r0, #4]
    2dc2:	300c      	adds	r0, #12
    2dc4:	60a0      	str	r0, [r4, #8]
    2dc6:	3268      	adds	r2, #104	; 0x68
    2dc8:	f7ff fcba 	bl	2740 <memset>
    2dcc:	0020      	movs	r0, r4
    2dce:	bd70      	pop	{r4, r5, r6, pc}

00002dd0 <__sinit>:
    2dd0:	6983      	ldr	r3, [r0, #24]
    2dd2:	b513      	push	{r0, r1, r4, lr}
    2dd4:	0004      	movs	r4, r0
    2dd6:	2b00      	cmp	r3, #0
    2dd8:	d128      	bne.n	2e2c <__sinit+0x5c>
    2dda:	6483      	str	r3, [r0, #72]	; 0x48
    2ddc:	64c3      	str	r3, [r0, #76]	; 0x4c
    2dde:	6503      	str	r3, [r0, #80]	; 0x50
    2de0:	4b13      	ldr	r3, [pc, #76]	; (2e30 <__sinit+0x60>)
    2de2:	4a14      	ldr	r2, [pc, #80]	; (2e34 <__sinit+0x64>)
    2de4:	681b      	ldr	r3, [r3, #0]
    2de6:	6282      	str	r2, [r0, #40]	; 0x28
    2de8:	9301      	str	r3, [sp, #4]
    2dea:	4298      	cmp	r0, r3
    2dec:	d101      	bne.n	2df2 <__sinit+0x22>
    2dee:	2301      	movs	r3, #1
    2df0:	6183      	str	r3, [r0, #24]
    2df2:	0020      	movs	r0, r4
    2df4:	f000 f820 	bl	2e38 <__sfp>
    2df8:	6060      	str	r0, [r4, #4]
    2dfa:	0020      	movs	r0, r4
    2dfc:	f000 f81c 	bl	2e38 <__sfp>
    2e00:	60a0      	str	r0, [r4, #8]
    2e02:	0020      	movs	r0, r4
    2e04:	f000 f818 	bl	2e38 <__sfp>
    2e08:	2200      	movs	r2, #0
    2e0a:	60e0      	str	r0, [r4, #12]
    2e0c:	2104      	movs	r1, #4
    2e0e:	6860      	ldr	r0, [r4, #4]
    2e10:	f7ff ffa4 	bl	2d5c <std.isra.0>
    2e14:	2201      	movs	r2, #1
    2e16:	2109      	movs	r1, #9
    2e18:	68a0      	ldr	r0, [r4, #8]
    2e1a:	f7ff ff9f 	bl	2d5c <std.isra.0>
    2e1e:	2202      	movs	r2, #2
    2e20:	2112      	movs	r1, #18
    2e22:	68e0      	ldr	r0, [r4, #12]
    2e24:	f7ff ff9a 	bl	2d5c <std.isra.0>
    2e28:	2301      	movs	r3, #1
    2e2a:	61a3      	str	r3, [r4, #24]
    2e2c:	bd13      	pop	{r0, r1, r4, pc}
    2e2e:	46c0      	nop			; (mov r8, r8)
    2e30:	00004720 	.word	0x00004720
    2e34:	00002d4d 	.word	0x00002d4d

00002e38 <__sfp>:
    2e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e3a:	4b1e      	ldr	r3, [pc, #120]	; (2eb4 <__sfp+0x7c>)
    2e3c:	0007      	movs	r7, r0
    2e3e:	681e      	ldr	r6, [r3, #0]
    2e40:	69b3      	ldr	r3, [r6, #24]
    2e42:	2b00      	cmp	r3, #0
    2e44:	d102      	bne.n	2e4c <__sfp+0x14>
    2e46:	0030      	movs	r0, r6
    2e48:	f7ff ffc2 	bl	2dd0 <__sinit>
    2e4c:	3648      	adds	r6, #72	; 0x48
    2e4e:	68b4      	ldr	r4, [r6, #8]
    2e50:	6873      	ldr	r3, [r6, #4]
    2e52:	3b01      	subs	r3, #1
    2e54:	d504      	bpl.n	2e60 <__sfp+0x28>
    2e56:	6833      	ldr	r3, [r6, #0]
    2e58:	2b00      	cmp	r3, #0
    2e5a:	d007      	beq.n	2e6c <__sfp+0x34>
    2e5c:	6836      	ldr	r6, [r6, #0]
    2e5e:	e7f6      	b.n	2e4e <__sfp+0x16>
    2e60:	220c      	movs	r2, #12
    2e62:	5ea5      	ldrsh	r5, [r4, r2]
    2e64:	2d00      	cmp	r5, #0
    2e66:	d00d      	beq.n	2e84 <__sfp+0x4c>
    2e68:	3468      	adds	r4, #104	; 0x68
    2e6a:	e7f2      	b.n	2e52 <__sfp+0x1a>
    2e6c:	2104      	movs	r1, #4
    2e6e:	0038      	movs	r0, r7
    2e70:	f7ff ff98 	bl	2da4 <__sfmoreglue>
    2e74:	6030      	str	r0, [r6, #0]
    2e76:	2800      	cmp	r0, #0
    2e78:	d1f0      	bne.n	2e5c <__sfp+0x24>
    2e7a:	230c      	movs	r3, #12
    2e7c:	0004      	movs	r4, r0
    2e7e:	603b      	str	r3, [r7, #0]
    2e80:	0020      	movs	r0, r4
    2e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e84:	2301      	movs	r3, #1
    2e86:	0020      	movs	r0, r4
    2e88:	425b      	negs	r3, r3
    2e8a:	81e3      	strh	r3, [r4, #14]
    2e8c:	3302      	adds	r3, #2
    2e8e:	81a3      	strh	r3, [r4, #12]
    2e90:	6665      	str	r5, [r4, #100]	; 0x64
    2e92:	6025      	str	r5, [r4, #0]
    2e94:	60a5      	str	r5, [r4, #8]
    2e96:	6065      	str	r5, [r4, #4]
    2e98:	6125      	str	r5, [r4, #16]
    2e9a:	6165      	str	r5, [r4, #20]
    2e9c:	61a5      	str	r5, [r4, #24]
    2e9e:	2208      	movs	r2, #8
    2ea0:	0029      	movs	r1, r5
    2ea2:	305c      	adds	r0, #92	; 0x5c
    2ea4:	f7ff fc4c 	bl	2740 <memset>
    2ea8:	6365      	str	r5, [r4, #52]	; 0x34
    2eaa:	63a5      	str	r5, [r4, #56]	; 0x38
    2eac:	64a5      	str	r5, [r4, #72]	; 0x48
    2eae:	64e5      	str	r5, [r4, #76]	; 0x4c
    2eb0:	e7e6      	b.n	2e80 <__sfp+0x48>
    2eb2:	46c0      	nop			; (mov r8, r8)
    2eb4:	00004720 	.word	0x00004720

00002eb8 <_fwalk>:
    2eb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2eba:	3048      	adds	r0, #72	; 0x48
    2ebc:	0004      	movs	r4, r0
    2ebe:	2600      	movs	r6, #0
    2ec0:	9101      	str	r1, [sp, #4]
    2ec2:	2c00      	cmp	r4, #0
    2ec4:	d101      	bne.n	2eca <_fwalk+0x12>
    2ec6:	0030      	movs	r0, r6
    2ec8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2eca:	68a5      	ldr	r5, [r4, #8]
    2ecc:	6867      	ldr	r7, [r4, #4]
    2ece:	3f01      	subs	r7, #1
    2ed0:	d501      	bpl.n	2ed6 <_fwalk+0x1e>
    2ed2:	6824      	ldr	r4, [r4, #0]
    2ed4:	e7f5      	b.n	2ec2 <_fwalk+0xa>
    2ed6:	89ab      	ldrh	r3, [r5, #12]
    2ed8:	2b01      	cmp	r3, #1
    2eda:	d907      	bls.n	2eec <_fwalk+0x34>
    2edc:	220e      	movs	r2, #14
    2ede:	5eab      	ldrsh	r3, [r5, r2]
    2ee0:	3301      	adds	r3, #1
    2ee2:	d003      	beq.n	2eec <_fwalk+0x34>
    2ee4:	0028      	movs	r0, r5
    2ee6:	9b01      	ldr	r3, [sp, #4]
    2ee8:	4798      	blx	r3
    2eea:	4306      	orrs	r6, r0
    2eec:	3568      	adds	r5, #104	; 0x68
    2eee:	e7ee      	b.n	2ece <_fwalk+0x16>

00002ef0 <_fwalk_reent>:
    2ef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2ef2:	0004      	movs	r4, r0
    2ef4:	0007      	movs	r7, r0
    2ef6:	2600      	movs	r6, #0
    2ef8:	9101      	str	r1, [sp, #4]
    2efa:	3448      	adds	r4, #72	; 0x48
    2efc:	2c00      	cmp	r4, #0
    2efe:	d101      	bne.n	2f04 <_fwalk_reent+0x14>
    2f00:	0030      	movs	r0, r6
    2f02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2f04:	6863      	ldr	r3, [r4, #4]
    2f06:	68a5      	ldr	r5, [r4, #8]
    2f08:	9300      	str	r3, [sp, #0]
    2f0a:	9b00      	ldr	r3, [sp, #0]
    2f0c:	3b01      	subs	r3, #1
    2f0e:	9300      	str	r3, [sp, #0]
    2f10:	d501      	bpl.n	2f16 <_fwalk_reent+0x26>
    2f12:	6824      	ldr	r4, [r4, #0]
    2f14:	e7f2      	b.n	2efc <_fwalk_reent+0xc>
    2f16:	89ab      	ldrh	r3, [r5, #12]
    2f18:	2b01      	cmp	r3, #1
    2f1a:	d908      	bls.n	2f2e <_fwalk_reent+0x3e>
    2f1c:	220e      	movs	r2, #14
    2f1e:	5eab      	ldrsh	r3, [r5, r2]
    2f20:	3301      	adds	r3, #1
    2f22:	d004      	beq.n	2f2e <_fwalk_reent+0x3e>
    2f24:	0029      	movs	r1, r5
    2f26:	0038      	movs	r0, r7
    2f28:	9b01      	ldr	r3, [sp, #4]
    2f2a:	4798      	blx	r3
    2f2c:	4306      	orrs	r6, r0
    2f2e:	3568      	adds	r5, #104	; 0x68
    2f30:	e7eb      	b.n	2f0a <_fwalk_reent+0x1a>
	...

00002f34 <__swhatbuf_r>:
    2f34:	b570      	push	{r4, r5, r6, lr}
    2f36:	000e      	movs	r6, r1
    2f38:	001d      	movs	r5, r3
    2f3a:	230e      	movs	r3, #14
    2f3c:	5ec9      	ldrsh	r1, [r1, r3]
    2f3e:	b090      	sub	sp, #64	; 0x40
    2f40:	0014      	movs	r4, r2
    2f42:	2900      	cmp	r1, #0
    2f44:	da07      	bge.n	2f56 <__swhatbuf_r+0x22>
    2f46:	2300      	movs	r3, #0
    2f48:	602b      	str	r3, [r5, #0]
    2f4a:	89b3      	ldrh	r3, [r6, #12]
    2f4c:	061b      	lsls	r3, r3, #24
    2f4e:	d411      	bmi.n	2f74 <__swhatbuf_r+0x40>
    2f50:	2380      	movs	r3, #128	; 0x80
    2f52:	00db      	lsls	r3, r3, #3
    2f54:	e00f      	b.n	2f76 <__swhatbuf_r+0x42>
    2f56:	aa01      	add	r2, sp, #4
    2f58:	f001 fa4e 	bl	43f8 <_fstat_r>
    2f5c:	2800      	cmp	r0, #0
    2f5e:	dbf2      	blt.n	2f46 <__swhatbuf_r+0x12>
    2f60:	22f0      	movs	r2, #240	; 0xf0
    2f62:	9b02      	ldr	r3, [sp, #8]
    2f64:	0212      	lsls	r2, r2, #8
    2f66:	4013      	ands	r3, r2
    2f68:	4a05      	ldr	r2, [pc, #20]	; (2f80 <__swhatbuf_r+0x4c>)
    2f6a:	189b      	adds	r3, r3, r2
    2f6c:	425a      	negs	r2, r3
    2f6e:	4153      	adcs	r3, r2
    2f70:	602b      	str	r3, [r5, #0]
    2f72:	e7ed      	b.n	2f50 <__swhatbuf_r+0x1c>
    2f74:	2340      	movs	r3, #64	; 0x40
    2f76:	2000      	movs	r0, #0
    2f78:	6023      	str	r3, [r4, #0]
    2f7a:	b010      	add	sp, #64	; 0x40
    2f7c:	bd70      	pop	{r4, r5, r6, pc}
    2f7e:	46c0      	nop			; (mov r8, r8)
    2f80:	ffffe000 	.word	0xffffe000

00002f84 <__smakebuf_r>:
    2f84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2f86:	2602      	movs	r6, #2
    2f88:	898b      	ldrh	r3, [r1, #12]
    2f8a:	0005      	movs	r5, r0
    2f8c:	000c      	movs	r4, r1
    2f8e:	4233      	tst	r3, r6
    2f90:	d006      	beq.n	2fa0 <__smakebuf_r+0x1c>
    2f92:	0023      	movs	r3, r4
    2f94:	3347      	adds	r3, #71	; 0x47
    2f96:	6023      	str	r3, [r4, #0]
    2f98:	6123      	str	r3, [r4, #16]
    2f9a:	2301      	movs	r3, #1
    2f9c:	6163      	str	r3, [r4, #20]
    2f9e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2fa0:	ab01      	add	r3, sp, #4
    2fa2:	466a      	mov	r2, sp
    2fa4:	f7ff ffc6 	bl	2f34 <__swhatbuf_r>
    2fa8:	9900      	ldr	r1, [sp, #0]
    2faa:	0007      	movs	r7, r0
    2fac:	0028      	movs	r0, r5
    2fae:	f000 f881 	bl	30b4 <_malloc_r>
    2fb2:	2800      	cmp	r0, #0
    2fb4:	d108      	bne.n	2fc8 <__smakebuf_r+0x44>
    2fb6:	220c      	movs	r2, #12
    2fb8:	5ea3      	ldrsh	r3, [r4, r2]
    2fba:	059a      	lsls	r2, r3, #22
    2fbc:	d4ef      	bmi.n	2f9e <__smakebuf_r+0x1a>
    2fbe:	2203      	movs	r2, #3
    2fc0:	4393      	bics	r3, r2
    2fc2:	431e      	orrs	r6, r3
    2fc4:	81a6      	strh	r6, [r4, #12]
    2fc6:	e7e4      	b.n	2f92 <__smakebuf_r+0xe>
    2fc8:	4b0f      	ldr	r3, [pc, #60]	; (3008 <__smakebuf_r+0x84>)
    2fca:	62ab      	str	r3, [r5, #40]	; 0x28
    2fcc:	2380      	movs	r3, #128	; 0x80
    2fce:	89a2      	ldrh	r2, [r4, #12]
    2fd0:	6020      	str	r0, [r4, #0]
    2fd2:	4313      	orrs	r3, r2
    2fd4:	81a3      	strh	r3, [r4, #12]
    2fd6:	9b00      	ldr	r3, [sp, #0]
    2fd8:	6120      	str	r0, [r4, #16]
    2fda:	6163      	str	r3, [r4, #20]
    2fdc:	9b01      	ldr	r3, [sp, #4]
    2fde:	2b00      	cmp	r3, #0
    2fe0:	d00d      	beq.n	2ffe <__smakebuf_r+0x7a>
    2fe2:	230e      	movs	r3, #14
    2fe4:	5ee1      	ldrsh	r1, [r4, r3]
    2fe6:	0028      	movs	r0, r5
    2fe8:	f001 fa18 	bl	441c <_isatty_r>
    2fec:	2800      	cmp	r0, #0
    2fee:	d006      	beq.n	2ffe <__smakebuf_r+0x7a>
    2ff0:	2203      	movs	r2, #3
    2ff2:	89a3      	ldrh	r3, [r4, #12]
    2ff4:	4393      	bics	r3, r2
    2ff6:	001a      	movs	r2, r3
    2ff8:	2301      	movs	r3, #1
    2ffa:	4313      	orrs	r3, r2
    2ffc:	81a3      	strh	r3, [r4, #12]
    2ffe:	89a0      	ldrh	r0, [r4, #12]
    3000:	4338      	orrs	r0, r7
    3002:	81a0      	strh	r0, [r4, #12]
    3004:	e7cb      	b.n	2f9e <__smakebuf_r+0x1a>
    3006:	46c0      	nop			; (mov r8, r8)
    3008:	00002d4d 	.word	0x00002d4d

0000300c <malloc>:
    300c:	b510      	push	{r4, lr}
    300e:	4b03      	ldr	r3, [pc, #12]	; (301c <malloc+0x10>)
    3010:	0001      	movs	r1, r0
    3012:	6818      	ldr	r0, [r3, #0]
    3014:	f000 f84e 	bl	30b4 <_malloc_r>
    3018:	bd10      	pop	{r4, pc}
    301a:	46c0      	nop			; (mov r8, r8)
    301c:	2000000c 	.word	0x2000000c

00003020 <_free_r>:
    3020:	b570      	push	{r4, r5, r6, lr}
    3022:	0005      	movs	r5, r0
    3024:	2900      	cmp	r1, #0
    3026:	d010      	beq.n	304a <_free_r+0x2a>
    3028:	1f0c      	subs	r4, r1, #4
    302a:	6823      	ldr	r3, [r4, #0]
    302c:	2b00      	cmp	r3, #0
    302e:	da00      	bge.n	3032 <_free_r+0x12>
    3030:	18e4      	adds	r4, r4, r3
    3032:	0028      	movs	r0, r5
    3034:	f001 fa47 	bl	44c6 <__malloc_lock>
    3038:	4a1d      	ldr	r2, [pc, #116]	; (30b0 <_free_r+0x90>)
    303a:	6813      	ldr	r3, [r2, #0]
    303c:	2b00      	cmp	r3, #0
    303e:	d105      	bne.n	304c <_free_r+0x2c>
    3040:	6063      	str	r3, [r4, #4]
    3042:	6014      	str	r4, [r2, #0]
    3044:	0028      	movs	r0, r5
    3046:	f001 fa3f 	bl	44c8 <__malloc_unlock>
    304a:	bd70      	pop	{r4, r5, r6, pc}
    304c:	42a3      	cmp	r3, r4
    304e:	d909      	bls.n	3064 <_free_r+0x44>
    3050:	6821      	ldr	r1, [r4, #0]
    3052:	1860      	adds	r0, r4, r1
    3054:	4283      	cmp	r3, r0
    3056:	d1f3      	bne.n	3040 <_free_r+0x20>
    3058:	6818      	ldr	r0, [r3, #0]
    305a:	685b      	ldr	r3, [r3, #4]
    305c:	1841      	adds	r1, r0, r1
    305e:	6021      	str	r1, [r4, #0]
    3060:	e7ee      	b.n	3040 <_free_r+0x20>
    3062:	0013      	movs	r3, r2
    3064:	685a      	ldr	r2, [r3, #4]
    3066:	2a00      	cmp	r2, #0
    3068:	d001      	beq.n	306e <_free_r+0x4e>
    306a:	42a2      	cmp	r2, r4
    306c:	d9f9      	bls.n	3062 <_free_r+0x42>
    306e:	6819      	ldr	r1, [r3, #0]
    3070:	1858      	adds	r0, r3, r1
    3072:	42a0      	cmp	r0, r4
    3074:	d10b      	bne.n	308e <_free_r+0x6e>
    3076:	6820      	ldr	r0, [r4, #0]
    3078:	1809      	adds	r1, r1, r0
    307a:	1858      	adds	r0, r3, r1
    307c:	6019      	str	r1, [r3, #0]
    307e:	4282      	cmp	r2, r0
    3080:	d1e0      	bne.n	3044 <_free_r+0x24>
    3082:	6810      	ldr	r0, [r2, #0]
    3084:	6852      	ldr	r2, [r2, #4]
    3086:	1841      	adds	r1, r0, r1
    3088:	6019      	str	r1, [r3, #0]
    308a:	605a      	str	r2, [r3, #4]
    308c:	e7da      	b.n	3044 <_free_r+0x24>
    308e:	42a0      	cmp	r0, r4
    3090:	d902      	bls.n	3098 <_free_r+0x78>
    3092:	230c      	movs	r3, #12
    3094:	602b      	str	r3, [r5, #0]
    3096:	e7d5      	b.n	3044 <_free_r+0x24>
    3098:	6821      	ldr	r1, [r4, #0]
    309a:	1860      	adds	r0, r4, r1
    309c:	4282      	cmp	r2, r0
    309e:	d103      	bne.n	30a8 <_free_r+0x88>
    30a0:	6810      	ldr	r0, [r2, #0]
    30a2:	6852      	ldr	r2, [r2, #4]
    30a4:	1841      	adds	r1, r0, r1
    30a6:	6021      	str	r1, [r4, #0]
    30a8:	6062      	str	r2, [r4, #4]
    30aa:	605c      	str	r4, [r3, #4]
    30ac:	e7ca      	b.n	3044 <_free_r+0x24>
    30ae:	46c0      	nop			; (mov r8, r8)
    30b0:	20000230 	.word	0x20000230

000030b4 <_malloc_r>:
    30b4:	2303      	movs	r3, #3
    30b6:	b570      	push	{r4, r5, r6, lr}
    30b8:	1ccd      	adds	r5, r1, #3
    30ba:	439d      	bics	r5, r3
    30bc:	3508      	adds	r5, #8
    30be:	0006      	movs	r6, r0
    30c0:	2d0c      	cmp	r5, #12
    30c2:	d21e      	bcs.n	3102 <_malloc_r+0x4e>
    30c4:	250c      	movs	r5, #12
    30c6:	42a9      	cmp	r1, r5
    30c8:	d81d      	bhi.n	3106 <_malloc_r+0x52>
    30ca:	0030      	movs	r0, r6
    30cc:	f001 f9fb 	bl	44c6 <__malloc_lock>
    30d0:	4a25      	ldr	r2, [pc, #148]	; (3168 <_malloc_r+0xb4>)
    30d2:	6814      	ldr	r4, [r2, #0]
    30d4:	0021      	movs	r1, r4
    30d6:	2900      	cmp	r1, #0
    30d8:	d119      	bne.n	310e <_malloc_r+0x5a>
    30da:	4c24      	ldr	r4, [pc, #144]	; (316c <_malloc_r+0xb8>)
    30dc:	6823      	ldr	r3, [r4, #0]
    30de:	2b00      	cmp	r3, #0
    30e0:	d103      	bne.n	30ea <_malloc_r+0x36>
    30e2:	0030      	movs	r0, r6
    30e4:	f000 fef4 	bl	3ed0 <_sbrk_r>
    30e8:	6020      	str	r0, [r4, #0]
    30ea:	0029      	movs	r1, r5
    30ec:	0030      	movs	r0, r6
    30ee:	f000 feef 	bl	3ed0 <_sbrk_r>
    30f2:	1c43      	adds	r3, r0, #1
    30f4:	d12c      	bne.n	3150 <_malloc_r+0x9c>
    30f6:	230c      	movs	r3, #12
    30f8:	0030      	movs	r0, r6
    30fa:	6033      	str	r3, [r6, #0]
    30fc:	f001 f9e4 	bl	44c8 <__malloc_unlock>
    3100:	e003      	b.n	310a <_malloc_r+0x56>
    3102:	2d00      	cmp	r5, #0
    3104:	dadf      	bge.n	30c6 <_malloc_r+0x12>
    3106:	230c      	movs	r3, #12
    3108:	6033      	str	r3, [r6, #0]
    310a:	2000      	movs	r0, #0
    310c:	bd70      	pop	{r4, r5, r6, pc}
    310e:	680b      	ldr	r3, [r1, #0]
    3110:	1b5b      	subs	r3, r3, r5
    3112:	d41a      	bmi.n	314a <_malloc_r+0x96>
    3114:	2b0b      	cmp	r3, #11
    3116:	d903      	bls.n	3120 <_malloc_r+0x6c>
    3118:	600b      	str	r3, [r1, #0]
    311a:	18cc      	adds	r4, r1, r3
    311c:	6025      	str	r5, [r4, #0]
    311e:	e003      	b.n	3128 <_malloc_r+0x74>
    3120:	428c      	cmp	r4, r1
    3122:	d10e      	bne.n	3142 <_malloc_r+0x8e>
    3124:	6863      	ldr	r3, [r4, #4]
    3126:	6013      	str	r3, [r2, #0]
    3128:	0030      	movs	r0, r6
    312a:	f001 f9cd 	bl	44c8 <__malloc_unlock>
    312e:	0020      	movs	r0, r4
    3130:	2207      	movs	r2, #7
    3132:	300b      	adds	r0, #11
    3134:	1d23      	adds	r3, r4, #4
    3136:	4390      	bics	r0, r2
    3138:	1ac3      	subs	r3, r0, r3
    313a:	d0e7      	beq.n	310c <_malloc_r+0x58>
    313c:	425a      	negs	r2, r3
    313e:	50e2      	str	r2, [r4, r3]
    3140:	e7e4      	b.n	310c <_malloc_r+0x58>
    3142:	684b      	ldr	r3, [r1, #4]
    3144:	6063      	str	r3, [r4, #4]
    3146:	000c      	movs	r4, r1
    3148:	e7ee      	b.n	3128 <_malloc_r+0x74>
    314a:	000c      	movs	r4, r1
    314c:	6849      	ldr	r1, [r1, #4]
    314e:	e7c2      	b.n	30d6 <_malloc_r+0x22>
    3150:	2303      	movs	r3, #3
    3152:	1cc4      	adds	r4, r0, #3
    3154:	439c      	bics	r4, r3
    3156:	42a0      	cmp	r0, r4
    3158:	d0e0      	beq.n	311c <_malloc_r+0x68>
    315a:	1a21      	subs	r1, r4, r0
    315c:	0030      	movs	r0, r6
    315e:	f000 feb7 	bl	3ed0 <_sbrk_r>
    3162:	1c43      	adds	r3, r0, #1
    3164:	d1da      	bne.n	311c <_malloc_r+0x68>
    3166:	e7c6      	b.n	30f6 <_malloc_r+0x42>
    3168:	20000230 	.word	0x20000230
    316c:	20000234 	.word	0x20000234

00003170 <__sfputc_r>:
    3170:	6893      	ldr	r3, [r2, #8]
    3172:	b510      	push	{r4, lr}
    3174:	3b01      	subs	r3, #1
    3176:	6093      	str	r3, [r2, #8]
    3178:	2b00      	cmp	r3, #0
    317a:	da05      	bge.n	3188 <__sfputc_r+0x18>
    317c:	6994      	ldr	r4, [r2, #24]
    317e:	42a3      	cmp	r3, r4
    3180:	db08      	blt.n	3194 <__sfputc_r+0x24>
    3182:	b2cb      	uxtb	r3, r1
    3184:	2b0a      	cmp	r3, #10
    3186:	d005      	beq.n	3194 <__sfputc_r+0x24>
    3188:	6813      	ldr	r3, [r2, #0]
    318a:	1c58      	adds	r0, r3, #1
    318c:	6010      	str	r0, [r2, #0]
    318e:	7019      	strb	r1, [r3, #0]
    3190:	b2c8      	uxtb	r0, r1
    3192:	bd10      	pop	{r4, pc}
    3194:	f7ff fc44 	bl	2a20 <__swbuf_r>
    3198:	e7fb      	b.n	3192 <__sfputc_r+0x22>

0000319a <__sfputs_r>:
    319a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    319c:	0006      	movs	r6, r0
    319e:	000f      	movs	r7, r1
    31a0:	0014      	movs	r4, r2
    31a2:	18d5      	adds	r5, r2, r3
    31a4:	42ac      	cmp	r4, r5
    31a6:	d101      	bne.n	31ac <__sfputs_r+0x12>
    31a8:	2000      	movs	r0, #0
    31aa:	e007      	b.n	31bc <__sfputs_r+0x22>
    31ac:	7821      	ldrb	r1, [r4, #0]
    31ae:	003a      	movs	r2, r7
    31b0:	0030      	movs	r0, r6
    31b2:	f7ff ffdd 	bl	3170 <__sfputc_r>
    31b6:	3401      	adds	r4, #1
    31b8:	1c43      	adds	r3, r0, #1
    31ba:	d1f3      	bne.n	31a4 <__sfputs_r+0xa>
    31bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000031c0 <_vfiprintf_r>:
    31c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    31c2:	b09f      	sub	sp, #124	; 0x7c
    31c4:	0006      	movs	r6, r0
    31c6:	000f      	movs	r7, r1
    31c8:	0014      	movs	r4, r2
    31ca:	9305      	str	r3, [sp, #20]
    31cc:	2800      	cmp	r0, #0
    31ce:	d004      	beq.n	31da <_vfiprintf_r+0x1a>
    31d0:	6983      	ldr	r3, [r0, #24]
    31d2:	2b00      	cmp	r3, #0
    31d4:	d101      	bne.n	31da <_vfiprintf_r+0x1a>
    31d6:	f7ff fdfb 	bl	2dd0 <__sinit>
    31da:	4b7f      	ldr	r3, [pc, #508]	; (33d8 <_vfiprintf_r+0x218>)
    31dc:	429f      	cmp	r7, r3
    31de:	d15c      	bne.n	329a <_vfiprintf_r+0xda>
    31e0:	6877      	ldr	r7, [r6, #4]
    31e2:	89bb      	ldrh	r3, [r7, #12]
    31e4:	071b      	lsls	r3, r3, #28
    31e6:	d562      	bpl.n	32ae <_vfiprintf_r+0xee>
    31e8:	693b      	ldr	r3, [r7, #16]
    31ea:	2b00      	cmp	r3, #0
    31ec:	d05f      	beq.n	32ae <_vfiprintf_r+0xee>
    31ee:	2300      	movs	r3, #0
    31f0:	ad06      	add	r5, sp, #24
    31f2:	616b      	str	r3, [r5, #20]
    31f4:	3320      	adds	r3, #32
    31f6:	766b      	strb	r3, [r5, #25]
    31f8:	3310      	adds	r3, #16
    31fa:	76ab      	strb	r3, [r5, #26]
    31fc:	9402      	str	r4, [sp, #8]
    31fe:	9c02      	ldr	r4, [sp, #8]
    3200:	7823      	ldrb	r3, [r4, #0]
    3202:	2b00      	cmp	r3, #0
    3204:	d15d      	bne.n	32c2 <_vfiprintf_r+0x102>
    3206:	9b02      	ldr	r3, [sp, #8]
    3208:	1ae3      	subs	r3, r4, r3
    320a:	9304      	str	r3, [sp, #16]
    320c:	d00d      	beq.n	322a <_vfiprintf_r+0x6a>
    320e:	9b04      	ldr	r3, [sp, #16]
    3210:	9a02      	ldr	r2, [sp, #8]
    3212:	0039      	movs	r1, r7
    3214:	0030      	movs	r0, r6
    3216:	f7ff ffc0 	bl	319a <__sfputs_r>
    321a:	1c43      	adds	r3, r0, #1
    321c:	d100      	bne.n	3220 <_vfiprintf_r+0x60>
    321e:	e0cc      	b.n	33ba <_vfiprintf_r+0x1fa>
    3220:	696a      	ldr	r2, [r5, #20]
    3222:	9b04      	ldr	r3, [sp, #16]
    3224:	4694      	mov	ip, r2
    3226:	4463      	add	r3, ip
    3228:	616b      	str	r3, [r5, #20]
    322a:	7823      	ldrb	r3, [r4, #0]
    322c:	2b00      	cmp	r3, #0
    322e:	d100      	bne.n	3232 <_vfiprintf_r+0x72>
    3230:	e0c3      	b.n	33ba <_vfiprintf_r+0x1fa>
    3232:	2201      	movs	r2, #1
    3234:	2300      	movs	r3, #0
    3236:	4252      	negs	r2, r2
    3238:	606a      	str	r2, [r5, #4]
    323a:	a902      	add	r1, sp, #8
    323c:	3254      	adds	r2, #84	; 0x54
    323e:	1852      	adds	r2, r2, r1
    3240:	3401      	adds	r4, #1
    3242:	602b      	str	r3, [r5, #0]
    3244:	60eb      	str	r3, [r5, #12]
    3246:	60ab      	str	r3, [r5, #8]
    3248:	7013      	strb	r3, [r2, #0]
    324a:	65ab      	str	r3, [r5, #88]	; 0x58
    324c:	7821      	ldrb	r1, [r4, #0]
    324e:	2205      	movs	r2, #5
    3250:	4862      	ldr	r0, [pc, #392]	; (33dc <_vfiprintf_r+0x21c>)
    3252:	f001 f92d 	bl	44b0 <memchr>
    3256:	1c63      	adds	r3, r4, #1
    3258:	469c      	mov	ip, r3
    325a:	2800      	cmp	r0, #0
    325c:	d135      	bne.n	32ca <_vfiprintf_r+0x10a>
    325e:	6829      	ldr	r1, [r5, #0]
    3260:	06cb      	lsls	r3, r1, #27
    3262:	d504      	bpl.n	326e <_vfiprintf_r+0xae>
    3264:	2353      	movs	r3, #83	; 0x53
    3266:	aa02      	add	r2, sp, #8
    3268:	3020      	adds	r0, #32
    326a:	189b      	adds	r3, r3, r2
    326c:	7018      	strb	r0, [r3, #0]
    326e:	070b      	lsls	r3, r1, #28
    3270:	d504      	bpl.n	327c <_vfiprintf_r+0xbc>
    3272:	2353      	movs	r3, #83	; 0x53
    3274:	202b      	movs	r0, #43	; 0x2b
    3276:	aa02      	add	r2, sp, #8
    3278:	189b      	adds	r3, r3, r2
    327a:	7018      	strb	r0, [r3, #0]
    327c:	7823      	ldrb	r3, [r4, #0]
    327e:	2b2a      	cmp	r3, #42	; 0x2a
    3280:	d02c      	beq.n	32dc <_vfiprintf_r+0x11c>
    3282:	2000      	movs	r0, #0
    3284:	210a      	movs	r1, #10
    3286:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3288:	7822      	ldrb	r2, [r4, #0]
    328a:	3a30      	subs	r2, #48	; 0x30
    328c:	2a09      	cmp	r2, #9
    328e:	d800      	bhi.n	3292 <_vfiprintf_r+0xd2>
    3290:	e06b      	b.n	336a <_vfiprintf_r+0x1aa>
    3292:	2800      	cmp	r0, #0
    3294:	d02a      	beq.n	32ec <_vfiprintf_r+0x12c>
    3296:	9309      	str	r3, [sp, #36]	; 0x24
    3298:	e028      	b.n	32ec <_vfiprintf_r+0x12c>
    329a:	4b51      	ldr	r3, [pc, #324]	; (33e0 <_vfiprintf_r+0x220>)
    329c:	429f      	cmp	r7, r3
    329e:	d101      	bne.n	32a4 <_vfiprintf_r+0xe4>
    32a0:	68b7      	ldr	r7, [r6, #8]
    32a2:	e79e      	b.n	31e2 <_vfiprintf_r+0x22>
    32a4:	4b4f      	ldr	r3, [pc, #316]	; (33e4 <_vfiprintf_r+0x224>)
    32a6:	429f      	cmp	r7, r3
    32a8:	d19b      	bne.n	31e2 <_vfiprintf_r+0x22>
    32aa:	68f7      	ldr	r7, [r6, #12]
    32ac:	e799      	b.n	31e2 <_vfiprintf_r+0x22>
    32ae:	0039      	movs	r1, r7
    32b0:	0030      	movs	r0, r6
    32b2:	f7ff fc0b 	bl	2acc <__swsetup_r>
    32b6:	2800      	cmp	r0, #0
    32b8:	d099      	beq.n	31ee <_vfiprintf_r+0x2e>
    32ba:	2001      	movs	r0, #1
    32bc:	4240      	negs	r0, r0
    32be:	b01f      	add	sp, #124	; 0x7c
    32c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32c2:	2b25      	cmp	r3, #37	; 0x25
    32c4:	d09f      	beq.n	3206 <_vfiprintf_r+0x46>
    32c6:	3401      	adds	r4, #1
    32c8:	e79a      	b.n	3200 <_vfiprintf_r+0x40>
    32ca:	4b44      	ldr	r3, [pc, #272]	; (33dc <_vfiprintf_r+0x21c>)
    32cc:	6829      	ldr	r1, [r5, #0]
    32ce:	1ac0      	subs	r0, r0, r3
    32d0:	2301      	movs	r3, #1
    32d2:	4083      	lsls	r3, r0
    32d4:	430b      	orrs	r3, r1
    32d6:	602b      	str	r3, [r5, #0]
    32d8:	4664      	mov	r4, ip
    32da:	e7b7      	b.n	324c <_vfiprintf_r+0x8c>
    32dc:	9b05      	ldr	r3, [sp, #20]
    32de:	1d18      	adds	r0, r3, #4
    32e0:	681b      	ldr	r3, [r3, #0]
    32e2:	9005      	str	r0, [sp, #20]
    32e4:	2b00      	cmp	r3, #0
    32e6:	db3a      	blt.n	335e <_vfiprintf_r+0x19e>
    32e8:	9309      	str	r3, [sp, #36]	; 0x24
    32ea:	4664      	mov	r4, ip
    32ec:	7823      	ldrb	r3, [r4, #0]
    32ee:	2b2e      	cmp	r3, #46	; 0x2e
    32f0:	d10b      	bne.n	330a <_vfiprintf_r+0x14a>
    32f2:	7863      	ldrb	r3, [r4, #1]
    32f4:	1c62      	adds	r2, r4, #1
    32f6:	2b2a      	cmp	r3, #42	; 0x2a
    32f8:	d13f      	bne.n	337a <_vfiprintf_r+0x1ba>
    32fa:	9b05      	ldr	r3, [sp, #20]
    32fc:	3402      	adds	r4, #2
    32fe:	1d1a      	adds	r2, r3, #4
    3300:	681b      	ldr	r3, [r3, #0]
    3302:	9205      	str	r2, [sp, #20]
    3304:	2b00      	cmp	r3, #0
    3306:	db35      	blt.n	3374 <_vfiprintf_r+0x1b4>
    3308:	9307      	str	r3, [sp, #28]
    330a:	7821      	ldrb	r1, [r4, #0]
    330c:	2203      	movs	r2, #3
    330e:	4836      	ldr	r0, [pc, #216]	; (33e8 <_vfiprintf_r+0x228>)
    3310:	f001 f8ce 	bl	44b0 <memchr>
    3314:	2800      	cmp	r0, #0
    3316:	d007      	beq.n	3328 <_vfiprintf_r+0x168>
    3318:	4b33      	ldr	r3, [pc, #204]	; (33e8 <_vfiprintf_r+0x228>)
    331a:	682a      	ldr	r2, [r5, #0]
    331c:	1ac0      	subs	r0, r0, r3
    331e:	2340      	movs	r3, #64	; 0x40
    3320:	4083      	lsls	r3, r0
    3322:	4313      	orrs	r3, r2
    3324:	602b      	str	r3, [r5, #0]
    3326:	3401      	adds	r4, #1
    3328:	7821      	ldrb	r1, [r4, #0]
    332a:	1c63      	adds	r3, r4, #1
    332c:	2206      	movs	r2, #6
    332e:	482f      	ldr	r0, [pc, #188]	; (33ec <_vfiprintf_r+0x22c>)
    3330:	9302      	str	r3, [sp, #8]
    3332:	7629      	strb	r1, [r5, #24]
    3334:	f001 f8bc 	bl	44b0 <memchr>
    3338:	2800      	cmp	r0, #0
    333a:	d044      	beq.n	33c6 <_vfiprintf_r+0x206>
    333c:	4b2c      	ldr	r3, [pc, #176]	; (33f0 <_vfiprintf_r+0x230>)
    333e:	2b00      	cmp	r3, #0
    3340:	d12f      	bne.n	33a2 <_vfiprintf_r+0x1e2>
    3342:	6829      	ldr	r1, [r5, #0]
    3344:	9b05      	ldr	r3, [sp, #20]
    3346:	2207      	movs	r2, #7
    3348:	05c9      	lsls	r1, r1, #23
    334a:	d528      	bpl.n	339e <_vfiprintf_r+0x1de>
    334c:	189b      	adds	r3, r3, r2
    334e:	4393      	bics	r3, r2
    3350:	3308      	adds	r3, #8
    3352:	9305      	str	r3, [sp, #20]
    3354:	696b      	ldr	r3, [r5, #20]
    3356:	9a03      	ldr	r2, [sp, #12]
    3358:	189b      	adds	r3, r3, r2
    335a:	616b      	str	r3, [r5, #20]
    335c:	e74f      	b.n	31fe <_vfiprintf_r+0x3e>
    335e:	425b      	negs	r3, r3
    3360:	60eb      	str	r3, [r5, #12]
    3362:	2302      	movs	r3, #2
    3364:	430b      	orrs	r3, r1
    3366:	602b      	str	r3, [r5, #0]
    3368:	e7bf      	b.n	32ea <_vfiprintf_r+0x12a>
    336a:	434b      	muls	r3, r1
    336c:	3401      	adds	r4, #1
    336e:	189b      	adds	r3, r3, r2
    3370:	2001      	movs	r0, #1
    3372:	e789      	b.n	3288 <_vfiprintf_r+0xc8>
    3374:	2301      	movs	r3, #1
    3376:	425b      	negs	r3, r3
    3378:	e7c6      	b.n	3308 <_vfiprintf_r+0x148>
    337a:	2300      	movs	r3, #0
    337c:	0014      	movs	r4, r2
    337e:	200a      	movs	r0, #10
    3380:	001a      	movs	r2, r3
    3382:	606b      	str	r3, [r5, #4]
    3384:	7821      	ldrb	r1, [r4, #0]
    3386:	3930      	subs	r1, #48	; 0x30
    3388:	2909      	cmp	r1, #9
    338a:	d903      	bls.n	3394 <_vfiprintf_r+0x1d4>
    338c:	2b00      	cmp	r3, #0
    338e:	d0bc      	beq.n	330a <_vfiprintf_r+0x14a>
    3390:	9207      	str	r2, [sp, #28]
    3392:	e7ba      	b.n	330a <_vfiprintf_r+0x14a>
    3394:	4342      	muls	r2, r0
    3396:	3401      	adds	r4, #1
    3398:	1852      	adds	r2, r2, r1
    339a:	2301      	movs	r3, #1
    339c:	e7f2      	b.n	3384 <_vfiprintf_r+0x1c4>
    339e:	3307      	adds	r3, #7
    33a0:	e7d5      	b.n	334e <_vfiprintf_r+0x18e>
    33a2:	ab05      	add	r3, sp, #20
    33a4:	9300      	str	r3, [sp, #0]
    33a6:	003a      	movs	r2, r7
    33a8:	4b12      	ldr	r3, [pc, #72]	; (33f4 <_vfiprintf_r+0x234>)
    33aa:	0029      	movs	r1, r5
    33ac:	0030      	movs	r0, r6
    33ae:	e000      	b.n	33b2 <_vfiprintf_r+0x1f2>
    33b0:	bf00      	nop
    33b2:	9003      	str	r0, [sp, #12]
    33b4:	9b03      	ldr	r3, [sp, #12]
    33b6:	3301      	adds	r3, #1
    33b8:	d1cc      	bne.n	3354 <_vfiprintf_r+0x194>
    33ba:	89bb      	ldrh	r3, [r7, #12]
    33bc:	065b      	lsls	r3, r3, #25
    33be:	d500      	bpl.n	33c2 <_vfiprintf_r+0x202>
    33c0:	e77b      	b.n	32ba <_vfiprintf_r+0xfa>
    33c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    33c4:	e77b      	b.n	32be <_vfiprintf_r+0xfe>
    33c6:	ab05      	add	r3, sp, #20
    33c8:	9300      	str	r3, [sp, #0]
    33ca:	003a      	movs	r2, r7
    33cc:	4b09      	ldr	r3, [pc, #36]	; (33f4 <_vfiprintf_r+0x234>)
    33ce:	0029      	movs	r1, r5
    33d0:	0030      	movs	r0, r6
    33d2:	f000 f87f 	bl	34d4 <_printf_i>
    33d6:	e7ec      	b.n	33b2 <_vfiprintf_r+0x1f2>
    33d8:	00004744 	.word	0x00004744
    33dc:	00004784 	.word	0x00004784
    33e0:	00004764 	.word	0x00004764
    33e4:	00004724 	.word	0x00004724
    33e8:	0000478a 	.word	0x0000478a
    33ec:	0000478e 	.word	0x0000478e
    33f0:	00000000 	.word	0x00000000
    33f4:	0000319b 	.word	0x0000319b

000033f8 <_printf_common>:
    33f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    33fa:	0015      	movs	r5, r2
    33fc:	9301      	str	r3, [sp, #4]
    33fe:	688a      	ldr	r2, [r1, #8]
    3400:	690b      	ldr	r3, [r1, #16]
    3402:	9000      	str	r0, [sp, #0]
    3404:	000c      	movs	r4, r1
    3406:	4293      	cmp	r3, r2
    3408:	da00      	bge.n	340c <_printf_common+0x14>
    340a:	0013      	movs	r3, r2
    340c:	0022      	movs	r2, r4
    340e:	602b      	str	r3, [r5, #0]
    3410:	3243      	adds	r2, #67	; 0x43
    3412:	7812      	ldrb	r2, [r2, #0]
    3414:	2a00      	cmp	r2, #0
    3416:	d001      	beq.n	341c <_printf_common+0x24>
    3418:	3301      	adds	r3, #1
    341a:	602b      	str	r3, [r5, #0]
    341c:	6823      	ldr	r3, [r4, #0]
    341e:	069b      	lsls	r3, r3, #26
    3420:	d502      	bpl.n	3428 <_printf_common+0x30>
    3422:	682b      	ldr	r3, [r5, #0]
    3424:	3302      	adds	r3, #2
    3426:	602b      	str	r3, [r5, #0]
    3428:	2706      	movs	r7, #6
    342a:	6823      	ldr	r3, [r4, #0]
    342c:	401f      	ands	r7, r3
    342e:	d027      	beq.n	3480 <_printf_common+0x88>
    3430:	0023      	movs	r3, r4
    3432:	3343      	adds	r3, #67	; 0x43
    3434:	781b      	ldrb	r3, [r3, #0]
    3436:	1e5a      	subs	r2, r3, #1
    3438:	4193      	sbcs	r3, r2
    343a:	6822      	ldr	r2, [r4, #0]
    343c:	0692      	lsls	r2, r2, #26
    343e:	d430      	bmi.n	34a2 <_printf_common+0xaa>
    3440:	0022      	movs	r2, r4
    3442:	9901      	ldr	r1, [sp, #4]
    3444:	3243      	adds	r2, #67	; 0x43
    3446:	9800      	ldr	r0, [sp, #0]
    3448:	9e08      	ldr	r6, [sp, #32]
    344a:	47b0      	blx	r6
    344c:	1c43      	adds	r3, r0, #1
    344e:	d025      	beq.n	349c <_printf_common+0xa4>
    3450:	2306      	movs	r3, #6
    3452:	6820      	ldr	r0, [r4, #0]
    3454:	682a      	ldr	r2, [r5, #0]
    3456:	68e1      	ldr	r1, [r4, #12]
    3458:	4003      	ands	r3, r0
    345a:	2500      	movs	r5, #0
    345c:	2b04      	cmp	r3, #4
    345e:	d103      	bne.n	3468 <_printf_common+0x70>
    3460:	1a8d      	subs	r5, r1, r2
    3462:	43eb      	mvns	r3, r5
    3464:	17db      	asrs	r3, r3, #31
    3466:	401d      	ands	r5, r3
    3468:	68a3      	ldr	r3, [r4, #8]
    346a:	6922      	ldr	r2, [r4, #16]
    346c:	4293      	cmp	r3, r2
    346e:	dd01      	ble.n	3474 <_printf_common+0x7c>
    3470:	1a9b      	subs	r3, r3, r2
    3472:	18ed      	adds	r5, r5, r3
    3474:	2700      	movs	r7, #0
    3476:	42bd      	cmp	r5, r7
    3478:	d120      	bne.n	34bc <_printf_common+0xc4>
    347a:	2000      	movs	r0, #0
    347c:	e010      	b.n	34a0 <_printf_common+0xa8>
    347e:	3701      	adds	r7, #1
    3480:	68e3      	ldr	r3, [r4, #12]
    3482:	682a      	ldr	r2, [r5, #0]
    3484:	1a9b      	subs	r3, r3, r2
    3486:	429f      	cmp	r7, r3
    3488:	dad2      	bge.n	3430 <_printf_common+0x38>
    348a:	0022      	movs	r2, r4
    348c:	2301      	movs	r3, #1
    348e:	3219      	adds	r2, #25
    3490:	9901      	ldr	r1, [sp, #4]
    3492:	9800      	ldr	r0, [sp, #0]
    3494:	9e08      	ldr	r6, [sp, #32]
    3496:	47b0      	blx	r6
    3498:	1c43      	adds	r3, r0, #1
    349a:	d1f0      	bne.n	347e <_printf_common+0x86>
    349c:	2001      	movs	r0, #1
    349e:	4240      	negs	r0, r0
    34a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    34a2:	2030      	movs	r0, #48	; 0x30
    34a4:	18e1      	adds	r1, r4, r3
    34a6:	3143      	adds	r1, #67	; 0x43
    34a8:	7008      	strb	r0, [r1, #0]
    34aa:	0021      	movs	r1, r4
    34ac:	1c5a      	adds	r2, r3, #1
    34ae:	3145      	adds	r1, #69	; 0x45
    34b0:	7809      	ldrb	r1, [r1, #0]
    34b2:	18a2      	adds	r2, r4, r2
    34b4:	3243      	adds	r2, #67	; 0x43
    34b6:	3302      	adds	r3, #2
    34b8:	7011      	strb	r1, [r2, #0]
    34ba:	e7c1      	b.n	3440 <_printf_common+0x48>
    34bc:	0022      	movs	r2, r4
    34be:	2301      	movs	r3, #1
    34c0:	321a      	adds	r2, #26
    34c2:	9901      	ldr	r1, [sp, #4]
    34c4:	9800      	ldr	r0, [sp, #0]
    34c6:	9e08      	ldr	r6, [sp, #32]
    34c8:	47b0      	blx	r6
    34ca:	1c43      	adds	r3, r0, #1
    34cc:	d0e6      	beq.n	349c <_printf_common+0xa4>
    34ce:	3701      	adds	r7, #1
    34d0:	e7d1      	b.n	3476 <_printf_common+0x7e>
	...

000034d4 <_printf_i>:
    34d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    34d6:	b08b      	sub	sp, #44	; 0x2c
    34d8:	9206      	str	r2, [sp, #24]
    34da:	000a      	movs	r2, r1
    34dc:	3243      	adds	r2, #67	; 0x43
    34de:	9307      	str	r3, [sp, #28]
    34e0:	9005      	str	r0, [sp, #20]
    34e2:	9204      	str	r2, [sp, #16]
    34e4:	7e0a      	ldrb	r2, [r1, #24]
    34e6:	000c      	movs	r4, r1
    34e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    34ea:	2a6e      	cmp	r2, #110	; 0x6e
    34ec:	d100      	bne.n	34f0 <_printf_i+0x1c>
    34ee:	e08f      	b.n	3610 <_printf_i+0x13c>
    34f0:	d817      	bhi.n	3522 <_printf_i+0x4e>
    34f2:	2a63      	cmp	r2, #99	; 0x63
    34f4:	d02c      	beq.n	3550 <_printf_i+0x7c>
    34f6:	d808      	bhi.n	350a <_printf_i+0x36>
    34f8:	2a00      	cmp	r2, #0
    34fa:	d100      	bne.n	34fe <_printf_i+0x2a>
    34fc:	e099      	b.n	3632 <_printf_i+0x15e>
    34fe:	2a58      	cmp	r2, #88	; 0x58
    3500:	d054      	beq.n	35ac <_printf_i+0xd8>
    3502:	0026      	movs	r6, r4
    3504:	3642      	adds	r6, #66	; 0x42
    3506:	7032      	strb	r2, [r6, #0]
    3508:	e029      	b.n	355e <_printf_i+0x8a>
    350a:	2a64      	cmp	r2, #100	; 0x64
    350c:	d001      	beq.n	3512 <_printf_i+0x3e>
    350e:	2a69      	cmp	r2, #105	; 0x69
    3510:	d1f7      	bne.n	3502 <_printf_i+0x2e>
    3512:	6821      	ldr	r1, [r4, #0]
    3514:	681a      	ldr	r2, [r3, #0]
    3516:	0608      	lsls	r0, r1, #24
    3518:	d523      	bpl.n	3562 <_printf_i+0x8e>
    351a:	1d11      	adds	r1, r2, #4
    351c:	6019      	str	r1, [r3, #0]
    351e:	6815      	ldr	r5, [r2, #0]
    3520:	e025      	b.n	356e <_printf_i+0x9a>
    3522:	2a73      	cmp	r2, #115	; 0x73
    3524:	d100      	bne.n	3528 <_printf_i+0x54>
    3526:	e088      	b.n	363a <_printf_i+0x166>
    3528:	d808      	bhi.n	353c <_printf_i+0x68>
    352a:	2a6f      	cmp	r2, #111	; 0x6f
    352c:	d029      	beq.n	3582 <_printf_i+0xae>
    352e:	2a70      	cmp	r2, #112	; 0x70
    3530:	d1e7      	bne.n	3502 <_printf_i+0x2e>
    3532:	2220      	movs	r2, #32
    3534:	6809      	ldr	r1, [r1, #0]
    3536:	430a      	orrs	r2, r1
    3538:	6022      	str	r2, [r4, #0]
    353a:	e003      	b.n	3544 <_printf_i+0x70>
    353c:	2a75      	cmp	r2, #117	; 0x75
    353e:	d020      	beq.n	3582 <_printf_i+0xae>
    3540:	2a78      	cmp	r2, #120	; 0x78
    3542:	d1de      	bne.n	3502 <_printf_i+0x2e>
    3544:	0022      	movs	r2, r4
    3546:	2178      	movs	r1, #120	; 0x78
    3548:	3245      	adds	r2, #69	; 0x45
    354a:	7011      	strb	r1, [r2, #0]
    354c:	4a6c      	ldr	r2, [pc, #432]	; (3700 <_printf_i+0x22c>)
    354e:	e030      	b.n	35b2 <_printf_i+0xde>
    3550:	000e      	movs	r6, r1
    3552:	681a      	ldr	r2, [r3, #0]
    3554:	3642      	adds	r6, #66	; 0x42
    3556:	1d11      	adds	r1, r2, #4
    3558:	6019      	str	r1, [r3, #0]
    355a:	6813      	ldr	r3, [r2, #0]
    355c:	7033      	strb	r3, [r6, #0]
    355e:	2301      	movs	r3, #1
    3560:	e079      	b.n	3656 <_printf_i+0x182>
    3562:	0649      	lsls	r1, r1, #25
    3564:	d5d9      	bpl.n	351a <_printf_i+0x46>
    3566:	1d11      	adds	r1, r2, #4
    3568:	6019      	str	r1, [r3, #0]
    356a:	2300      	movs	r3, #0
    356c:	5ed5      	ldrsh	r5, [r2, r3]
    356e:	2d00      	cmp	r5, #0
    3570:	da03      	bge.n	357a <_printf_i+0xa6>
    3572:	232d      	movs	r3, #45	; 0x2d
    3574:	9a04      	ldr	r2, [sp, #16]
    3576:	426d      	negs	r5, r5
    3578:	7013      	strb	r3, [r2, #0]
    357a:	4b62      	ldr	r3, [pc, #392]	; (3704 <_printf_i+0x230>)
    357c:	270a      	movs	r7, #10
    357e:	9303      	str	r3, [sp, #12]
    3580:	e02f      	b.n	35e2 <_printf_i+0x10e>
    3582:	6820      	ldr	r0, [r4, #0]
    3584:	6819      	ldr	r1, [r3, #0]
    3586:	0605      	lsls	r5, r0, #24
    3588:	d503      	bpl.n	3592 <_printf_i+0xbe>
    358a:	1d08      	adds	r0, r1, #4
    358c:	6018      	str	r0, [r3, #0]
    358e:	680d      	ldr	r5, [r1, #0]
    3590:	e005      	b.n	359e <_printf_i+0xca>
    3592:	0640      	lsls	r0, r0, #25
    3594:	d5f9      	bpl.n	358a <_printf_i+0xb6>
    3596:	680d      	ldr	r5, [r1, #0]
    3598:	1d08      	adds	r0, r1, #4
    359a:	6018      	str	r0, [r3, #0]
    359c:	b2ad      	uxth	r5, r5
    359e:	4b59      	ldr	r3, [pc, #356]	; (3704 <_printf_i+0x230>)
    35a0:	2708      	movs	r7, #8
    35a2:	9303      	str	r3, [sp, #12]
    35a4:	2a6f      	cmp	r2, #111	; 0x6f
    35a6:	d018      	beq.n	35da <_printf_i+0x106>
    35a8:	270a      	movs	r7, #10
    35aa:	e016      	b.n	35da <_printf_i+0x106>
    35ac:	3145      	adds	r1, #69	; 0x45
    35ae:	700a      	strb	r2, [r1, #0]
    35b0:	4a54      	ldr	r2, [pc, #336]	; (3704 <_printf_i+0x230>)
    35b2:	9203      	str	r2, [sp, #12]
    35b4:	681a      	ldr	r2, [r3, #0]
    35b6:	6821      	ldr	r1, [r4, #0]
    35b8:	1d10      	adds	r0, r2, #4
    35ba:	6018      	str	r0, [r3, #0]
    35bc:	6815      	ldr	r5, [r2, #0]
    35be:	0608      	lsls	r0, r1, #24
    35c0:	d522      	bpl.n	3608 <_printf_i+0x134>
    35c2:	07cb      	lsls	r3, r1, #31
    35c4:	d502      	bpl.n	35cc <_printf_i+0xf8>
    35c6:	2320      	movs	r3, #32
    35c8:	4319      	orrs	r1, r3
    35ca:	6021      	str	r1, [r4, #0]
    35cc:	2710      	movs	r7, #16
    35ce:	2d00      	cmp	r5, #0
    35d0:	d103      	bne.n	35da <_printf_i+0x106>
    35d2:	2320      	movs	r3, #32
    35d4:	6822      	ldr	r2, [r4, #0]
    35d6:	439a      	bics	r2, r3
    35d8:	6022      	str	r2, [r4, #0]
    35da:	0023      	movs	r3, r4
    35dc:	2200      	movs	r2, #0
    35de:	3343      	adds	r3, #67	; 0x43
    35e0:	701a      	strb	r2, [r3, #0]
    35e2:	6863      	ldr	r3, [r4, #4]
    35e4:	60a3      	str	r3, [r4, #8]
    35e6:	2b00      	cmp	r3, #0
    35e8:	db5c      	blt.n	36a4 <_printf_i+0x1d0>
    35ea:	2204      	movs	r2, #4
    35ec:	6821      	ldr	r1, [r4, #0]
    35ee:	4391      	bics	r1, r2
    35f0:	6021      	str	r1, [r4, #0]
    35f2:	2d00      	cmp	r5, #0
    35f4:	d158      	bne.n	36a8 <_printf_i+0x1d4>
    35f6:	9e04      	ldr	r6, [sp, #16]
    35f8:	2b00      	cmp	r3, #0
    35fa:	d064      	beq.n	36c6 <_printf_i+0x1f2>
    35fc:	0026      	movs	r6, r4
    35fe:	9b03      	ldr	r3, [sp, #12]
    3600:	3642      	adds	r6, #66	; 0x42
    3602:	781b      	ldrb	r3, [r3, #0]
    3604:	7033      	strb	r3, [r6, #0]
    3606:	e05e      	b.n	36c6 <_printf_i+0x1f2>
    3608:	0648      	lsls	r0, r1, #25
    360a:	d5da      	bpl.n	35c2 <_printf_i+0xee>
    360c:	b2ad      	uxth	r5, r5
    360e:	e7d8      	b.n	35c2 <_printf_i+0xee>
    3610:	6809      	ldr	r1, [r1, #0]
    3612:	681a      	ldr	r2, [r3, #0]
    3614:	0608      	lsls	r0, r1, #24
    3616:	d505      	bpl.n	3624 <_printf_i+0x150>
    3618:	1d11      	adds	r1, r2, #4
    361a:	6019      	str	r1, [r3, #0]
    361c:	6813      	ldr	r3, [r2, #0]
    361e:	6962      	ldr	r2, [r4, #20]
    3620:	601a      	str	r2, [r3, #0]
    3622:	e006      	b.n	3632 <_printf_i+0x15e>
    3624:	0649      	lsls	r1, r1, #25
    3626:	d5f7      	bpl.n	3618 <_printf_i+0x144>
    3628:	1d11      	adds	r1, r2, #4
    362a:	6019      	str	r1, [r3, #0]
    362c:	6813      	ldr	r3, [r2, #0]
    362e:	8aa2      	ldrh	r2, [r4, #20]
    3630:	801a      	strh	r2, [r3, #0]
    3632:	2300      	movs	r3, #0
    3634:	9e04      	ldr	r6, [sp, #16]
    3636:	6123      	str	r3, [r4, #16]
    3638:	e054      	b.n	36e4 <_printf_i+0x210>
    363a:	681a      	ldr	r2, [r3, #0]
    363c:	1d11      	adds	r1, r2, #4
    363e:	6019      	str	r1, [r3, #0]
    3640:	6816      	ldr	r6, [r2, #0]
    3642:	2100      	movs	r1, #0
    3644:	6862      	ldr	r2, [r4, #4]
    3646:	0030      	movs	r0, r6
    3648:	f000 ff32 	bl	44b0 <memchr>
    364c:	2800      	cmp	r0, #0
    364e:	d001      	beq.n	3654 <_printf_i+0x180>
    3650:	1b80      	subs	r0, r0, r6
    3652:	6060      	str	r0, [r4, #4]
    3654:	6863      	ldr	r3, [r4, #4]
    3656:	6123      	str	r3, [r4, #16]
    3658:	2300      	movs	r3, #0
    365a:	9a04      	ldr	r2, [sp, #16]
    365c:	7013      	strb	r3, [r2, #0]
    365e:	e041      	b.n	36e4 <_printf_i+0x210>
    3660:	6923      	ldr	r3, [r4, #16]
    3662:	0032      	movs	r2, r6
    3664:	9906      	ldr	r1, [sp, #24]
    3666:	9805      	ldr	r0, [sp, #20]
    3668:	9d07      	ldr	r5, [sp, #28]
    366a:	47a8      	blx	r5
    366c:	1c43      	adds	r3, r0, #1
    366e:	d043      	beq.n	36f8 <_printf_i+0x224>
    3670:	6823      	ldr	r3, [r4, #0]
    3672:	2500      	movs	r5, #0
    3674:	079b      	lsls	r3, r3, #30
    3676:	d40f      	bmi.n	3698 <_printf_i+0x1c4>
    3678:	9b09      	ldr	r3, [sp, #36]	; 0x24
    367a:	68e0      	ldr	r0, [r4, #12]
    367c:	4298      	cmp	r0, r3
    367e:	da3d      	bge.n	36fc <_printf_i+0x228>
    3680:	0018      	movs	r0, r3
    3682:	e03b      	b.n	36fc <_printf_i+0x228>
    3684:	0022      	movs	r2, r4
    3686:	2301      	movs	r3, #1
    3688:	3219      	adds	r2, #25
    368a:	9906      	ldr	r1, [sp, #24]
    368c:	9805      	ldr	r0, [sp, #20]
    368e:	9e07      	ldr	r6, [sp, #28]
    3690:	47b0      	blx	r6
    3692:	1c43      	adds	r3, r0, #1
    3694:	d030      	beq.n	36f8 <_printf_i+0x224>
    3696:	3501      	adds	r5, #1
    3698:	68e3      	ldr	r3, [r4, #12]
    369a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    369c:	1a9b      	subs	r3, r3, r2
    369e:	429d      	cmp	r5, r3
    36a0:	dbf0      	blt.n	3684 <_printf_i+0x1b0>
    36a2:	e7e9      	b.n	3678 <_printf_i+0x1a4>
    36a4:	2d00      	cmp	r5, #0
    36a6:	d0a9      	beq.n	35fc <_printf_i+0x128>
    36a8:	9e04      	ldr	r6, [sp, #16]
    36aa:	0028      	movs	r0, r5
    36ac:	0039      	movs	r1, r7
    36ae:	f7fe ffdb 	bl	2668 <__aeabi_uidivmod>
    36b2:	9b03      	ldr	r3, [sp, #12]
    36b4:	3e01      	subs	r6, #1
    36b6:	5c5b      	ldrb	r3, [r3, r1]
    36b8:	0028      	movs	r0, r5
    36ba:	7033      	strb	r3, [r6, #0]
    36bc:	0039      	movs	r1, r7
    36be:	f7fe ff4d 	bl	255c <__udivsi3>
    36c2:	1e05      	subs	r5, r0, #0
    36c4:	d1f1      	bne.n	36aa <_printf_i+0x1d6>
    36c6:	2f08      	cmp	r7, #8
    36c8:	d109      	bne.n	36de <_printf_i+0x20a>
    36ca:	6823      	ldr	r3, [r4, #0]
    36cc:	07db      	lsls	r3, r3, #31
    36ce:	d506      	bpl.n	36de <_printf_i+0x20a>
    36d0:	6863      	ldr	r3, [r4, #4]
    36d2:	6922      	ldr	r2, [r4, #16]
    36d4:	4293      	cmp	r3, r2
    36d6:	dc02      	bgt.n	36de <_printf_i+0x20a>
    36d8:	2330      	movs	r3, #48	; 0x30
    36da:	3e01      	subs	r6, #1
    36dc:	7033      	strb	r3, [r6, #0]
    36de:	9b04      	ldr	r3, [sp, #16]
    36e0:	1b9b      	subs	r3, r3, r6
    36e2:	6123      	str	r3, [r4, #16]
    36e4:	9b07      	ldr	r3, [sp, #28]
    36e6:	aa09      	add	r2, sp, #36	; 0x24
    36e8:	9300      	str	r3, [sp, #0]
    36ea:	0021      	movs	r1, r4
    36ec:	9b06      	ldr	r3, [sp, #24]
    36ee:	9805      	ldr	r0, [sp, #20]
    36f0:	f7ff fe82 	bl	33f8 <_printf_common>
    36f4:	1c43      	adds	r3, r0, #1
    36f6:	d1b3      	bne.n	3660 <_printf_i+0x18c>
    36f8:	2001      	movs	r0, #1
    36fa:	4240      	negs	r0, r0
    36fc:	b00b      	add	sp, #44	; 0x2c
    36fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3700:	000047a6 	.word	0x000047a6
    3704:	00004795 	.word	0x00004795

00003708 <__svfiscanf_r>:
    3708:	b5f0      	push	{r4, r5, r6, r7, lr}
    370a:	4cbd      	ldr	r4, [pc, #756]	; (3a00 <__svfiscanf_r+0x2f8>)
    370c:	2586      	movs	r5, #134	; 0x86
    370e:	44a5      	add	sp, r4
    3710:	9303      	str	r3, [sp, #12]
    3712:	2300      	movs	r3, #0
    3714:	9348      	str	r3, [sp, #288]	; 0x120
    3716:	9349      	str	r3, [sp, #292]	; 0x124
    3718:	ab05      	add	r3, sp, #20
    371a:	934a      	str	r3, [sp, #296]	; 0x128
    371c:	23be      	movs	r3, #190	; 0xbe
    371e:	006d      	lsls	r5, r5, #1
    3720:	9000      	str	r0, [sp, #0]
    3722:	000c      	movs	r4, r1
    3724:	a802      	add	r0, sp, #8
    3726:	49b7      	ldr	r1, [pc, #732]	; (3a04 <__svfiscanf_r+0x2fc>)
    3728:	005b      	lsls	r3, r3, #1
    372a:	1940      	adds	r0, r0, r5
    372c:	27c0      	movs	r7, #192	; 0xc0
    372e:	50c1      	str	r1, [r0, r3]
    3730:	ab02      	add	r3, sp, #8
    3732:	195b      	adds	r3, r3, r5
    3734:	0015      	movs	r5, r2
    3736:	49b4      	ldr	r1, [pc, #720]	; (3a08 <__svfiscanf_r+0x300>)
    3738:	007f      	lsls	r7, r7, #1
    373a:	51d9      	str	r1, [r3, r7]
    373c:	782b      	ldrb	r3, [r5, #0]
    373e:	2b00      	cmp	r3, #0
    3740:	d100      	bne.n	3744 <__svfiscanf_r+0x3c>
    3742:	e15b      	b.n	39fc <__svfiscanf_r+0x2f4>
    3744:	f000 fe80 	bl	4448 <__locale_ctype_ptr>
    3748:	2208      	movs	r2, #8
    374a:	782b      	ldrb	r3, [r5, #0]
    374c:	18c0      	adds	r0, r0, r3
    374e:	9301      	str	r3, [sp, #4]
    3750:	7843      	ldrb	r3, [r0, #1]
    3752:	4013      	ands	r3, r2
    3754:	d141      	bne.n	37da <__svfiscanf_r+0xd2>
    3756:	9a01      	ldr	r2, [sp, #4]
    3758:	1c6e      	adds	r6, r5, #1
    375a:	2a25      	cmp	r2, #37	; 0x25
    375c:	d000      	beq.n	3760 <__svfiscanf_r+0x58>
    375e:	e0a8      	b.n	38b2 <__svfiscanf_r+0x1aa>
    3760:	9347      	str	r3, [sp, #284]	; 0x11c
    3762:	9345      	str	r3, [sp, #276]	; 0x114
    3764:	786b      	ldrb	r3, [r5, #1]
    3766:	2b2a      	cmp	r3, #42	; 0x2a
    3768:	d102      	bne.n	3770 <__svfiscanf_r+0x68>
    376a:	3b1a      	subs	r3, #26
    376c:	9345      	str	r3, [sp, #276]	; 0x114
    376e:	1cae      	adds	r6, r5, #2
    3770:	0035      	movs	r5, r6
    3772:	220a      	movs	r2, #10
    3774:	7829      	ldrb	r1, [r5, #0]
    3776:	000b      	movs	r3, r1
    3778:	3b30      	subs	r3, #48	; 0x30
    377a:	2b09      	cmp	r3, #9
    377c:	d948      	bls.n	3810 <__svfiscanf_r+0x108>
    377e:	4ea3      	ldr	r6, [pc, #652]	; (3a0c <__svfiscanf_r+0x304>)
    3780:	2203      	movs	r2, #3
    3782:	0030      	movs	r0, r6
    3784:	f000 fe94 	bl	44b0 <memchr>
    3788:	2800      	cmp	r0, #0
    378a:	d007      	beq.n	379c <__svfiscanf_r+0x94>
    378c:	2301      	movs	r3, #1
    378e:	1b80      	subs	r0, r0, r6
    3790:	4083      	lsls	r3, r0
    3792:	9a45      	ldr	r2, [sp, #276]	; 0x114
    3794:	3501      	adds	r5, #1
    3796:	4313      	orrs	r3, r2
    3798:	9202      	str	r2, [sp, #8]
    379a:	9345      	str	r3, [sp, #276]	; 0x114
    379c:	782b      	ldrb	r3, [r5, #0]
    379e:	1c6e      	adds	r6, r5, #1
    37a0:	2b67      	cmp	r3, #103	; 0x67
    37a2:	d858      	bhi.n	3856 <__svfiscanf_r+0x14e>
    37a4:	2b65      	cmp	r3, #101	; 0x65
    37a6:	d300      	bcc.n	37aa <__svfiscanf_r+0xa2>
    37a8:	e0dd      	b.n	3966 <__svfiscanf_r+0x25e>
    37aa:	2b47      	cmp	r3, #71	; 0x47
    37ac:	d838      	bhi.n	3820 <__svfiscanf_r+0x118>
    37ae:	2b45      	cmp	r3, #69	; 0x45
    37b0:	d300      	bcc.n	37b4 <__svfiscanf_r+0xac>
    37b2:	e0d8      	b.n	3966 <__svfiscanf_r+0x25e>
    37b4:	2b00      	cmp	r3, #0
    37b6:	d100      	bne.n	37ba <__svfiscanf_r+0xb2>
    37b8:	e11d      	b.n	39f6 <__svfiscanf_r+0x2ee>
    37ba:	2b25      	cmp	r3, #37	; 0x25
    37bc:	d079      	beq.n	38b2 <__svfiscanf_r+0x1aa>
    37be:	2303      	movs	r3, #3
    37c0:	934b      	str	r3, [sp, #300]	; 0x12c
    37c2:	3307      	adds	r3, #7
    37c4:	9346      	str	r3, [sp, #280]	; 0x118
    37c6:	e053      	b.n	3870 <__svfiscanf_r+0x168>
    37c8:	9a49      	ldr	r2, [sp, #292]	; 0x124
    37ca:	3301      	adds	r3, #1
    37cc:	9201      	str	r2, [sp, #4]
    37ce:	3201      	adds	r2, #1
    37d0:	9249      	str	r2, [sp, #292]	; 0x124
    37d2:	6862      	ldr	r2, [r4, #4]
    37d4:	6023      	str	r3, [r4, #0]
    37d6:	3a01      	subs	r2, #1
    37d8:	6062      	str	r2, [r4, #4]
    37da:	6863      	ldr	r3, [r4, #4]
    37dc:	2b00      	cmp	r3, #0
    37de:	dd0b      	ble.n	37f8 <__svfiscanf_r+0xf0>
    37e0:	f000 fe32 	bl	4448 <__locale_ctype_ptr>
    37e4:	2108      	movs	r1, #8
    37e6:	6823      	ldr	r3, [r4, #0]
    37e8:	781a      	ldrb	r2, [r3, #0]
    37ea:	1880      	adds	r0, r0, r2
    37ec:	7842      	ldrb	r2, [r0, #1]
    37ee:	420a      	tst	r2, r1
    37f0:	d1ea      	bne.n	37c8 <__svfiscanf_r+0xc0>
    37f2:	1c6e      	adds	r6, r5, #1
    37f4:	0035      	movs	r5, r6
    37f6:	e7a1      	b.n	373c <__svfiscanf_r+0x34>
    37f8:	2286      	movs	r2, #134	; 0x86
    37fa:	ab02      	add	r3, sp, #8
    37fc:	0052      	lsls	r2, r2, #1
    37fe:	189b      	adds	r3, r3, r2
    3800:	59db      	ldr	r3, [r3, r7]
    3802:	0021      	movs	r1, r4
    3804:	9800      	ldr	r0, [sp, #0]
    3806:	9301      	str	r3, [sp, #4]
    3808:	4798      	blx	r3
    380a:	2800      	cmp	r0, #0
    380c:	d0e8      	beq.n	37e0 <__svfiscanf_r+0xd8>
    380e:	e7f0      	b.n	37f2 <__svfiscanf_r+0xea>
    3810:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    3812:	3501      	adds	r5, #1
    3814:	9302      	str	r3, [sp, #8]
    3816:	4353      	muls	r3, r2
    3818:	3b30      	subs	r3, #48	; 0x30
    381a:	1859      	adds	r1, r3, r1
    381c:	9147      	str	r1, [sp, #284]	; 0x11c
    381e:	e7a9      	b.n	3774 <__svfiscanf_r+0x6c>
    3820:	2b5b      	cmp	r3, #91	; 0x5b
    3822:	d100      	bne.n	3826 <__svfiscanf_r+0x11e>
    3824:	e077      	b.n	3916 <__svfiscanf_r+0x20e>
    3826:	d80f      	bhi.n	3848 <__svfiscanf_r+0x140>
    3828:	2b58      	cmp	r3, #88	; 0x58
    382a:	d1c8      	bne.n	37be <__svfiscanf_r+0xb6>
    382c:	9a45      	ldr	r2, [sp, #276]	; 0x114
    382e:	9201      	str	r2, [sp, #4]
    3830:	2280      	movs	r2, #128	; 0x80
    3832:	9901      	ldr	r1, [sp, #4]
    3834:	0092      	lsls	r2, r2, #2
    3836:	430a      	orrs	r2, r1
    3838:	9245      	str	r2, [sp, #276]	; 0x114
    383a:	2210      	movs	r2, #16
    383c:	9246      	str	r2, [sp, #280]	; 0x118
    383e:	2203      	movs	r2, #3
    3840:	2b6e      	cmp	r3, #110	; 0x6e
    3842:	dd14      	ble.n	386e <__svfiscanf_r+0x166>
    3844:	3201      	adds	r2, #1
    3846:	e012      	b.n	386e <__svfiscanf_r+0x166>
    3848:	2b63      	cmp	r3, #99	; 0x63
    384a:	d100      	bne.n	384e <__svfiscanf_r+0x146>
    384c:	e071      	b.n	3932 <__svfiscanf_r+0x22a>
    384e:	2b64      	cmp	r3, #100	; 0x64
    3850:	d1b5      	bne.n	37be <__svfiscanf_r+0xb6>
    3852:	220a      	movs	r2, #10
    3854:	e7f2      	b.n	383c <__svfiscanf_r+0x134>
    3856:	2b70      	cmp	r3, #112	; 0x70
    3858:	d052      	beq.n	3900 <__svfiscanf_r+0x1f8>
    385a:	d822      	bhi.n	38a2 <__svfiscanf_r+0x19a>
    385c:	2b6e      	cmp	r3, #110	; 0x6e
    385e:	d100      	bne.n	3862 <__svfiscanf_r+0x15a>
    3860:	e06f      	b.n	3942 <__svfiscanf_r+0x23a>
    3862:	d854      	bhi.n	390e <__svfiscanf_r+0x206>
    3864:	2b69      	cmp	r3, #105	; 0x69
    3866:	d1aa      	bne.n	37be <__svfiscanf_r+0xb6>
    3868:	2300      	movs	r3, #0
    386a:	2203      	movs	r2, #3
    386c:	9346      	str	r3, [sp, #280]	; 0x118
    386e:	924b      	str	r2, [sp, #300]	; 0x12c
    3870:	6863      	ldr	r3, [r4, #4]
    3872:	2b00      	cmp	r3, #0
    3874:	dc00      	bgt.n	3878 <__svfiscanf_r+0x170>
    3876:	e078      	b.n	396a <__svfiscanf_r+0x262>
    3878:	9b45      	ldr	r3, [sp, #276]	; 0x114
    387a:	9301      	str	r3, [sp, #4]
    387c:	065b      	lsls	r3, r3, #25
    387e:	d400      	bmi.n	3882 <__svfiscanf_r+0x17a>
    3880:	e08b      	b.n	399a <__svfiscanf_r+0x292>
    3882:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    3884:	2b02      	cmp	r3, #2
    3886:	dd00      	ble.n	388a <__svfiscanf_r+0x182>
    3888:	e09d      	b.n	39c6 <__svfiscanf_r+0x2be>
    388a:	ab03      	add	r3, sp, #12
    388c:	0022      	movs	r2, r4
    388e:	a945      	add	r1, sp, #276	; 0x114
    3890:	9800      	ldr	r0, [sp, #0]
    3892:	f000 f8e7 	bl	3a64 <_scanf_chars>
    3896:	2801      	cmp	r0, #1
    3898:	d100      	bne.n	389c <__svfiscanf_r+0x194>
    389a:	e0af      	b.n	39fc <__svfiscanf_r+0x2f4>
    389c:	2802      	cmp	r0, #2
    389e:	d1a9      	bne.n	37f4 <__svfiscanf_r+0xec>
    38a0:	e025      	b.n	38ee <__svfiscanf_r+0x1e6>
    38a2:	2b75      	cmp	r3, #117	; 0x75
    38a4:	d0d5      	beq.n	3852 <__svfiscanf_r+0x14a>
    38a6:	2b78      	cmp	r3, #120	; 0x78
    38a8:	d0c0      	beq.n	382c <__svfiscanf_r+0x124>
    38aa:	2b73      	cmp	r3, #115	; 0x73
    38ac:	d187      	bne.n	37be <__svfiscanf_r+0xb6>
    38ae:	2302      	movs	r3, #2
    38b0:	e03d      	b.n	392e <__svfiscanf_r+0x226>
    38b2:	6863      	ldr	r3, [r4, #4]
    38b4:	2b00      	cmp	r3, #0
    38b6:	dd0f      	ble.n	38d8 <__svfiscanf_r+0x1d0>
    38b8:	6823      	ldr	r3, [r4, #0]
    38ba:	9901      	ldr	r1, [sp, #4]
    38bc:	781a      	ldrb	r2, [r3, #0]
    38be:	4291      	cmp	r1, r2
    38c0:	d000      	beq.n	38c4 <__svfiscanf_r+0x1bc>
    38c2:	e09b      	b.n	39fc <__svfiscanf_r+0x2f4>
    38c4:	3301      	adds	r3, #1
    38c6:	6862      	ldr	r2, [r4, #4]
    38c8:	6023      	str	r3, [r4, #0]
    38ca:	9b49      	ldr	r3, [sp, #292]	; 0x124
    38cc:	3a01      	subs	r2, #1
    38ce:	9301      	str	r3, [sp, #4]
    38d0:	3301      	adds	r3, #1
    38d2:	6062      	str	r2, [r4, #4]
    38d4:	9349      	str	r3, [sp, #292]	; 0x124
    38d6:	e78d      	b.n	37f4 <__svfiscanf_r+0xec>
    38d8:	2286      	movs	r2, #134	; 0x86
    38da:	ab02      	add	r3, sp, #8
    38dc:	0052      	lsls	r2, r2, #1
    38de:	189b      	adds	r3, r3, r2
    38e0:	59db      	ldr	r3, [r3, r7]
    38e2:	0021      	movs	r1, r4
    38e4:	9800      	ldr	r0, [sp, #0]
    38e6:	9302      	str	r3, [sp, #8]
    38e8:	4798      	blx	r3
    38ea:	2800      	cmp	r0, #0
    38ec:	d0e4      	beq.n	38b8 <__svfiscanf_r+0x1b0>
    38ee:	9848      	ldr	r0, [sp, #288]	; 0x120
    38f0:	2800      	cmp	r0, #0
    38f2:	d000      	beq.n	38f6 <__svfiscanf_r+0x1ee>
    38f4:	e07b      	b.n	39ee <__svfiscanf_r+0x2e6>
    38f6:	3801      	subs	r0, #1
    38f8:	23a7      	movs	r3, #167	; 0xa7
    38fa:	009b      	lsls	r3, r3, #2
    38fc:	449d      	add	sp, r3
    38fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3900:	9a45      	ldr	r2, [sp, #276]	; 0x114
    3902:	9201      	str	r2, [sp, #4]
    3904:	2220      	movs	r2, #32
    3906:	9901      	ldr	r1, [sp, #4]
    3908:	430a      	orrs	r2, r1
    390a:	9245      	str	r2, [sp, #276]	; 0x114
    390c:	e78e      	b.n	382c <__svfiscanf_r+0x124>
    390e:	2308      	movs	r3, #8
    3910:	2204      	movs	r2, #4
    3912:	9346      	str	r3, [sp, #280]	; 0x118
    3914:	e7ab      	b.n	386e <__svfiscanf_r+0x166>
    3916:	0031      	movs	r1, r6
    3918:	a805      	add	r0, sp, #20
    391a:	f000 faeb 	bl	3ef4 <__sccl>
    391e:	9b45      	ldr	r3, [sp, #276]	; 0x114
    3920:	0006      	movs	r6, r0
    3922:	9301      	str	r3, [sp, #4]
    3924:	2340      	movs	r3, #64	; 0x40
    3926:	9a01      	ldr	r2, [sp, #4]
    3928:	4313      	orrs	r3, r2
    392a:	9345      	str	r3, [sp, #276]	; 0x114
    392c:	2301      	movs	r3, #1
    392e:	934b      	str	r3, [sp, #300]	; 0x12c
    3930:	e79e      	b.n	3870 <__svfiscanf_r+0x168>
    3932:	9b45      	ldr	r3, [sp, #276]	; 0x114
    3934:	9301      	str	r3, [sp, #4]
    3936:	2340      	movs	r3, #64	; 0x40
    3938:	9a01      	ldr	r2, [sp, #4]
    393a:	4313      	orrs	r3, r2
    393c:	9345      	str	r3, [sp, #276]	; 0x114
    393e:	2300      	movs	r3, #0
    3940:	e7f5      	b.n	392e <__svfiscanf_r+0x226>
    3942:	9945      	ldr	r1, [sp, #276]	; 0x114
    3944:	06cb      	lsls	r3, r1, #27
    3946:	d500      	bpl.n	394a <__svfiscanf_r+0x242>
    3948:	e754      	b.n	37f4 <__svfiscanf_r+0xec>
    394a:	9b03      	ldr	r3, [sp, #12]
    394c:	9a49      	ldr	r2, [sp, #292]	; 0x124
    394e:	07c8      	lsls	r0, r1, #31
    3950:	d504      	bpl.n	395c <__svfiscanf_r+0x254>
    3952:	1d19      	adds	r1, r3, #4
    3954:	9103      	str	r1, [sp, #12]
    3956:	681b      	ldr	r3, [r3, #0]
    3958:	801a      	strh	r2, [r3, #0]
    395a:	e74b      	b.n	37f4 <__svfiscanf_r+0xec>
    395c:	1d19      	adds	r1, r3, #4
    395e:	9103      	str	r1, [sp, #12]
    3960:	681b      	ldr	r3, [r3, #0]
    3962:	601a      	str	r2, [r3, #0]
    3964:	e746      	b.n	37f4 <__svfiscanf_r+0xec>
    3966:	2305      	movs	r3, #5
    3968:	e7e1      	b.n	392e <__svfiscanf_r+0x226>
    396a:	2286      	movs	r2, #134	; 0x86
    396c:	ab02      	add	r3, sp, #8
    396e:	0052      	lsls	r2, r2, #1
    3970:	189b      	adds	r3, r3, r2
    3972:	59db      	ldr	r3, [r3, r7]
    3974:	0021      	movs	r1, r4
    3976:	9800      	ldr	r0, [sp, #0]
    3978:	9301      	str	r3, [sp, #4]
    397a:	4798      	blx	r3
    397c:	2800      	cmp	r0, #0
    397e:	d100      	bne.n	3982 <__svfiscanf_r+0x27a>
    3980:	e77a      	b.n	3878 <__svfiscanf_r+0x170>
    3982:	e7b4      	b.n	38ee <__svfiscanf_r+0x1e6>
    3984:	9a49      	ldr	r2, [sp, #292]	; 0x124
    3986:	9201      	str	r2, [sp, #4]
    3988:	3201      	adds	r2, #1
    398a:	9249      	str	r2, [sp, #292]	; 0x124
    398c:	6862      	ldr	r2, [r4, #4]
    398e:	3a01      	subs	r2, #1
    3990:	6062      	str	r2, [r4, #4]
    3992:	2a00      	cmp	r2, #0
    3994:	dd0b      	ble.n	39ae <__svfiscanf_r+0x2a6>
    3996:	3301      	adds	r3, #1
    3998:	6023      	str	r3, [r4, #0]
    399a:	f000 fd55 	bl	4448 <__locale_ctype_ptr>
    399e:	2108      	movs	r1, #8
    39a0:	6823      	ldr	r3, [r4, #0]
    39a2:	781a      	ldrb	r2, [r3, #0]
    39a4:	1880      	adds	r0, r0, r2
    39a6:	7842      	ldrb	r2, [r0, #1]
    39a8:	420a      	tst	r2, r1
    39aa:	d1eb      	bne.n	3984 <__svfiscanf_r+0x27c>
    39ac:	e769      	b.n	3882 <__svfiscanf_r+0x17a>
    39ae:	2286      	movs	r2, #134	; 0x86
    39b0:	ab02      	add	r3, sp, #8
    39b2:	0052      	lsls	r2, r2, #1
    39b4:	189b      	adds	r3, r3, r2
    39b6:	59db      	ldr	r3, [r3, r7]
    39b8:	0021      	movs	r1, r4
    39ba:	9800      	ldr	r0, [sp, #0]
    39bc:	9301      	str	r3, [sp, #4]
    39be:	4798      	blx	r3
    39c0:	2800      	cmp	r0, #0
    39c2:	d0ea      	beq.n	399a <__svfiscanf_r+0x292>
    39c4:	e793      	b.n	38ee <__svfiscanf_r+0x1e6>
    39c6:	2b04      	cmp	r3, #4
    39c8:	dc06      	bgt.n	39d8 <__svfiscanf_r+0x2d0>
    39ca:	ab03      	add	r3, sp, #12
    39cc:	0022      	movs	r2, r4
    39ce:	a945      	add	r1, sp, #276	; 0x114
    39d0:	9800      	ldr	r0, [sp, #0]
    39d2:	f000 f8ab 	bl	3b2c <_scanf_i>
    39d6:	e75e      	b.n	3896 <__svfiscanf_r+0x18e>
    39d8:	4b0d      	ldr	r3, [pc, #52]	; (3a10 <__svfiscanf_r+0x308>)
    39da:	2b00      	cmp	r3, #0
    39dc:	d100      	bne.n	39e0 <__svfiscanf_r+0x2d8>
    39de:	e709      	b.n	37f4 <__svfiscanf_r+0xec>
    39e0:	ab03      	add	r3, sp, #12
    39e2:	0022      	movs	r2, r4
    39e4:	a945      	add	r1, sp, #276	; 0x114
    39e6:	9800      	ldr	r0, [sp, #0]
    39e8:	e000      	b.n	39ec <__svfiscanf_r+0x2e4>
    39ea:	bf00      	nop
    39ec:	e753      	b.n	3896 <__svfiscanf_r+0x18e>
    39ee:	89a3      	ldrh	r3, [r4, #12]
    39f0:	065b      	lsls	r3, r3, #25
    39f2:	d400      	bmi.n	39f6 <__svfiscanf_r+0x2ee>
    39f4:	e780      	b.n	38f8 <__svfiscanf_r+0x1f0>
    39f6:	2001      	movs	r0, #1
    39f8:	4240      	negs	r0, r0
    39fa:	e77d      	b.n	38f8 <__svfiscanf_r+0x1f0>
    39fc:	9848      	ldr	r0, [sp, #288]	; 0x120
    39fe:	e77b      	b.n	38f8 <__svfiscanf_r+0x1f0>
    3a00:	fffffd64 	.word	0xfffffd64
    3a04:	000042c9 	.word	0x000042c9
    3a08:	00003db1 	.word	0x00003db1
    3a0c:	0000478a 	.word	0x0000478a
    3a10:	00000000 	.word	0x00000000

00003a14 <_vfiscanf_r>:
    3a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a16:	0004      	movs	r4, r0
    3a18:	000d      	movs	r5, r1
    3a1a:	0016      	movs	r6, r2
    3a1c:	001f      	movs	r7, r3
    3a1e:	2800      	cmp	r0, #0
    3a20:	d004      	beq.n	3a2c <_vfiscanf_r+0x18>
    3a22:	6983      	ldr	r3, [r0, #24]
    3a24:	2b00      	cmp	r3, #0
    3a26:	d101      	bne.n	3a2c <_vfiscanf_r+0x18>
    3a28:	f7ff f9d2 	bl	2dd0 <__sinit>
    3a2c:	4b0a      	ldr	r3, [pc, #40]	; (3a58 <_vfiscanf_r+0x44>)
    3a2e:	429d      	cmp	r5, r3
    3a30:	d107      	bne.n	3a42 <_vfiscanf_r+0x2e>
    3a32:	6865      	ldr	r5, [r4, #4]
    3a34:	003b      	movs	r3, r7
    3a36:	0032      	movs	r2, r6
    3a38:	0029      	movs	r1, r5
    3a3a:	0020      	movs	r0, r4
    3a3c:	f7ff fe64 	bl	3708 <__svfiscanf_r>
    3a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a42:	4b06      	ldr	r3, [pc, #24]	; (3a5c <_vfiscanf_r+0x48>)
    3a44:	429d      	cmp	r5, r3
    3a46:	d101      	bne.n	3a4c <_vfiscanf_r+0x38>
    3a48:	68a5      	ldr	r5, [r4, #8]
    3a4a:	e7f3      	b.n	3a34 <_vfiscanf_r+0x20>
    3a4c:	4b04      	ldr	r3, [pc, #16]	; (3a60 <_vfiscanf_r+0x4c>)
    3a4e:	429d      	cmp	r5, r3
    3a50:	d1f0      	bne.n	3a34 <_vfiscanf_r+0x20>
    3a52:	68e5      	ldr	r5, [r4, #12]
    3a54:	e7ee      	b.n	3a34 <_vfiscanf_r+0x20>
    3a56:	46c0      	nop			; (mov r8, r8)
    3a58:	00004744 	.word	0x00004744
    3a5c:	00004764 	.word	0x00004764
    3a60:	00004724 	.word	0x00004724

00003a64 <_scanf_chars>:
    3a64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3a66:	0015      	movs	r5, r2
    3a68:	688a      	ldr	r2, [r1, #8]
    3a6a:	9001      	str	r0, [sp, #4]
    3a6c:	000c      	movs	r4, r1
    3a6e:	2a00      	cmp	r2, #0
    3a70:	d106      	bne.n	3a80 <_scanf_chars+0x1c>
    3a72:	698a      	ldr	r2, [r1, #24]
    3a74:	1e51      	subs	r1, r2, #1
    3a76:	418a      	sbcs	r2, r1
    3a78:	2101      	movs	r1, #1
    3a7a:	4252      	negs	r2, r2
    3a7c:	430a      	orrs	r2, r1
    3a7e:	60a2      	str	r2, [r4, #8]
    3a80:	6822      	ldr	r2, [r4, #0]
    3a82:	06d2      	lsls	r2, r2, #27
    3a84:	d403      	bmi.n	3a8e <_scanf_chars+0x2a>
    3a86:	681a      	ldr	r2, [r3, #0]
    3a88:	1d11      	adds	r1, r2, #4
    3a8a:	6019      	str	r1, [r3, #0]
    3a8c:	6817      	ldr	r7, [r2, #0]
    3a8e:	2600      	movs	r6, #0
    3a90:	69a3      	ldr	r3, [r4, #24]
    3a92:	2b00      	cmp	r3, #0
    3a94:	d01c      	beq.n	3ad0 <_scanf_chars+0x6c>
    3a96:	2b01      	cmp	r3, #1
    3a98:	d108      	bne.n	3aac <_scanf_chars+0x48>
    3a9a:	682b      	ldr	r3, [r5, #0]
    3a9c:	6962      	ldr	r2, [r4, #20]
    3a9e:	781b      	ldrb	r3, [r3, #0]
    3aa0:	5cd3      	ldrb	r3, [r2, r3]
    3aa2:	2b00      	cmp	r3, #0
    3aa4:	d114      	bne.n	3ad0 <_scanf_chars+0x6c>
    3aa6:	2e00      	cmp	r6, #0
    3aa8:	d130      	bne.n	3b0c <_scanf_chars+0xa8>
    3aaa:	e006      	b.n	3aba <_scanf_chars+0x56>
    3aac:	2b02      	cmp	r3, #2
    3aae:	d006      	beq.n	3abe <_scanf_chars+0x5a>
    3ab0:	2e00      	cmp	r6, #0
    3ab2:	d12b      	bne.n	3b0c <_scanf_chars+0xa8>
    3ab4:	69a3      	ldr	r3, [r4, #24]
    3ab6:	2b01      	cmp	r3, #1
    3ab8:	d128      	bne.n	3b0c <_scanf_chars+0xa8>
    3aba:	2001      	movs	r0, #1
    3abc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3abe:	f000 fcc3 	bl	4448 <__locale_ctype_ptr>
    3ac2:	2208      	movs	r2, #8
    3ac4:	682b      	ldr	r3, [r5, #0]
    3ac6:	781b      	ldrb	r3, [r3, #0]
    3ac8:	18c0      	adds	r0, r0, r3
    3aca:	7843      	ldrb	r3, [r0, #1]
    3acc:	4213      	tst	r3, r2
    3ace:	d1ef      	bne.n	3ab0 <_scanf_chars+0x4c>
    3ad0:	2210      	movs	r2, #16
    3ad2:	6823      	ldr	r3, [r4, #0]
    3ad4:	3601      	adds	r6, #1
    3ad6:	4213      	tst	r3, r2
    3ad8:	d103      	bne.n	3ae2 <_scanf_chars+0x7e>
    3ada:	682b      	ldr	r3, [r5, #0]
    3adc:	781b      	ldrb	r3, [r3, #0]
    3ade:	703b      	strb	r3, [r7, #0]
    3ae0:	3701      	adds	r7, #1
    3ae2:	682a      	ldr	r2, [r5, #0]
    3ae4:	686b      	ldr	r3, [r5, #4]
    3ae6:	3201      	adds	r2, #1
    3ae8:	602a      	str	r2, [r5, #0]
    3aea:	68a2      	ldr	r2, [r4, #8]
    3aec:	3b01      	subs	r3, #1
    3aee:	3a01      	subs	r2, #1
    3af0:	606b      	str	r3, [r5, #4]
    3af2:	60a2      	str	r2, [r4, #8]
    3af4:	2a00      	cmp	r2, #0
    3af6:	d009      	beq.n	3b0c <_scanf_chars+0xa8>
    3af8:	2b00      	cmp	r3, #0
    3afa:	dcc9      	bgt.n	3a90 <_scanf_chars+0x2c>
    3afc:	23c0      	movs	r3, #192	; 0xc0
    3afe:	005b      	lsls	r3, r3, #1
    3b00:	58e3      	ldr	r3, [r4, r3]
    3b02:	0029      	movs	r1, r5
    3b04:	9801      	ldr	r0, [sp, #4]
    3b06:	4798      	blx	r3
    3b08:	2800      	cmp	r0, #0
    3b0a:	d0c1      	beq.n	3a90 <_scanf_chars+0x2c>
    3b0c:	2310      	movs	r3, #16
    3b0e:	6822      	ldr	r2, [r4, #0]
    3b10:	4013      	ands	r3, r2
    3b12:	d106      	bne.n	3b22 <_scanf_chars+0xbe>
    3b14:	68e2      	ldr	r2, [r4, #12]
    3b16:	3201      	adds	r2, #1
    3b18:	60e2      	str	r2, [r4, #12]
    3b1a:	69a2      	ldr	r2, [r4, #24]
    3b1c:	2a00      	cmp	r2, #0
    3b1e:	d000      	beq.n	3b22 <_scanf_chars+0xbe>
    3b20:	703b      	strb	r3, [r7, #0]
    3b22:	6923      	ldr	r3, [r4, #16]
    3b24:	2000      	movs	r0, #0
    3b26:	199e      	adds	r6, r3, r6
    3b28:	6126      	str	r6, [r4, #16]
    3b2a:	e7c7      	b.n	3abc <_scanf_chars+0x58>

00003b2c <_scanf_i>:
    3b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b2e:	000c      	movs	r4, r1
    3b30:	b08d      	sub	sp, #52	; 0x34
    3b32:	9302      	str	r3, [sp, #8]
    3b34:	4b77      	ldr	r3, [pc, #476]	; (3d14 <_scanf_i+0x1e8>)
    3b36:	9005      	str	r0, [sp, #20]
    3b38:	0016      	movs	r6, r2
    3b3a:	aa09      	add	r2, sp, #36	; 0x24
    3b3c:	cb23      	ldmia	r3!, {r0, r1, r5}
    3b3e:	c223      	stmia	r2!, {r0, r1, r5}
    3b40:	4b75      	ldr	r3, [pc, #468]	; (3d18 <_scanf_i+0x1ec>)
    3b42:	9306      	str	r3, [sp, #24]
    3b44:	69a3      	ldr	r3, [r4, #24]
    3b46:	2b03      	cmp	r3, #3
    3b48:	d001      	beq.n	3b4e <_scanf_i+0x22>
    3b4a:	4b74      	ldr	r3, [pc, #464]	; (3d1c <_scanf_i+0x1f0>)
    3b4c:	9306      	str	r3, [sp, #24]
    3b4e:	22ae      	movs	r2, #174	; 0xae
    3b50:	2000      	movs	r0, #0
    3b52:	68a3      	ldr	r3, [r4, #8]
    3b54:	0052      	lsls	r2, r2, #1
    3b56:	1e59      	subs	r1, r3, #1
    3b58:	9004      	str	r0, [sp, #16]
    3b5a:	4291      	cmp	r1, r2
    3b5c:	d905      	bls.n	3b6a <_scanf_i+0x3e>
    3b5e:	3b5e      	subs	r3, #94	; 0x5e
    3b60:	3bff      	subs	r3, #255	; 0xff
    3b62:	9304      	str	r3, [sp, #16]
    3b64:	235e      	movs	r3, #94	; 0x5e
    3b66:	33ff      	adds	r3, #255	; 0xff
    3b68:	60a3      	str	r3, [r4, #8]
    3b6a:	0023      	movs	r3, r4
    3b6c:	331c      	adds	r3, #28
    3b6e:	9301      	str	r3, [sp, #4]
    3b70:	23d0      	movs	r3, #208	; 0xd0
    3b72:	2700      	movs	r7, #0
    3b74:	6822      	ldr	r2, [r4, #0]
    3b76:	011b      	lsls	r3, r3, #4
    3b78:	4313      	orrs	r3, r2
    3b7a:	6023      	str	r3, [r4, #0]
    3b7c:	9b01      	ldr	r3, [sp, #4]
    3b7e:	9303      	str	r3, [sp, #12]
    3b80:	6833      	ldr	r3, [r6, #0]
    3b82:	a809      	add	r0, sp, #36	; 0x24
    3b84:	7819      	ldrb	r1, [r3, #0]
    3b86:	00bb      	lsls	r3, r7, #2
    3b88:	2202      	movs	r2, #2
    3b8a:	5818      	ldr	r0, [r3, r0]
    3b8c:	f000 fc90 	bl	44b0 <memchr>
    3b90:	2800      	cmp	r0, #0
    3b92:	d02b      	beq.n	3bec <_scanf_i+0xc0>
    3b94:	2f01      	cmp	r7, #1
    3b96:	d15f      	bne.n	3c58 <_scanf_i+0x12c>
    3b98:	6863      	ldr	r3, [r4, #4]
    3b9a:	2b00      	cmp	r3, #0
    3b9c:	d106      	bne.n	3bac <_scanf_i+0x80>
    3b9e:	3308      	adds	r3, #8
    3ba0:	6822      	ldr	r2, [r4, #0]
    3ba2:	6063      	str	r3, [r4, #4]
    3ba4:	33f9      	adds	r3, #249	; 0xf9
    3ba6:	33ff      	adds	r3, #255	; 0xff
    3ba8:	4313      	orrs	r3, r2
    3baa:	6023      	str	r3, [r4, #0]
    3bac:	4b5c      	ldr	r3, [pc, #368]	; (3d20 <_scanf_i+0x1f4>)
    3bae:	6822      	ldr	r2, [r4, #0]
    3bb0:	4013      	ands	r3, r2
    3bb2:	6023      	str	r3, [r4, #0]
    3bb4:	68a3      	ldr	r3, [r4, #8]
    3bb6:	1e5a      	subs	r2, r3, #1
    3bb8:	60a2      	str	r2, [r4, #8]
    3bba:	2b00      	cmp	r3, #0
    3bbc:	d016      	beq.n	3bec <_scanf_i+0xc0>
    3bbe:	9b03      	ldr	r3, [sp, #12]
    3bc0:	1c5d      	adds	r5, r3, #1
    3bc2:	6833      	ldr	r3, [r6, #0]
    3bc4:	1c5a      	adds	r2, r3, #1
    3bc6:	6032      	str	r2, [r6, #0]
    3bc8:	781b      	ldrb	r3, [r3, #0]
    3bca:	9a03      	ldr	r2, [sp, #12]
    3bcc:	9503      	str	r5, [sp, #12]
    3bce:	7013      	strb	r3, [r2, #0]
    3bd0:	6873      	ldr	r3, [r6, #4]
    3bd2:	3b01      	subs	r3, #1
    3bd4:	6073      	str	r3, [r6, #4]
    3bd6:	2b00      	cmp	r3, #0
    3bd8:	dc08      	bgt.n	3bec <_scanf_i+0xc0>
    3bda:	23c0      	movs	r3, #192	; 0xc0
    3bdc:	005b      	lsls	r3, r3, #1
    3bde:	58e3      	ldr	r3, [r4, r3]
    3be0:	0031      	movs	r1, r6
    3be2:	9805      	ldr	r0, [sp, #20]
    3be4:	9307      	str	r3, [sp, #28]
    3be6:	4798      	blx	r3
    3be8:	2800      	cmp	r0, #0
    3bea:	d17d      	bne.n	3ce8 <_scanf_i+0x1bc>
    3bec:	3701      	adds	r7, #1
    3bee:	2f03      	cmp	r7, #3
    3bf0:	d1c6      	bne.n	3b80 <_scanf_i+0x54>
    3bf2:	6863      	ldr	r3, [r4, #4]
    3bf4:	2b00      	cmp	r3, #0
    3bf6:	d101      	bne.n	3bfc <_scanf_i+0xd0>
    3bf8:	330a      	adds	r3, #10
    3bfa:	6063      	str	r3, [r4, #4]
    3bfc:	2110      	movs	r1, #16
    3bfe:	2700      	movs	r7, #0
    3c00:	6863      	ldr	r3, [r4, #4]
    3c02:	6960      	ldr	r0, [r4, #20]
    3c04:	1ac9      	subs	r1, r1, r3
    3c06:	4b47      	ldr	r3, [pc, #284]	; (3d24 <_scanf_i+0x1f8>)
    3c08:	18c9      	adds	r1, r1, r3
    3c0a:	f000 f973 	bl	3ef4 <__sccl>
    3c0e:	9d03      	ldr	r5, [sp, #12]
    3c10:	68a3      	ldr	r3, [r4, #8]
    3c12:	2b00      	cmp	r3, #0
    3c14:	d041      	beq.n	3c9a <_scanf_i+0x16e>
    3c16:	6832      	ldr	r2, [r6, #0]
    3c18:	6960      	ldr	r0, [r4, #20]
    3c1a:	7811      	ldrb	r1, [r2, #0]
    3c1c:	5c40      	ldrb	r0, [r0, r1]
    3c1e:	2800      	cmp	r0, #0
    3c20:	d03b      	beq.n	3c9a <_scanf_i+0x16e>
    3c22:	2930      	cmp	r1, #48	; 0x30
    3c24:	d128      	bne.n	3c78 <_scanf_i+0x14c>
    3c26:	2080      	movs	r0, #128	; 0x80
    3c28:	6821      	ldr	r1, [r4, #0]
    3c2a:	0100      	lsls	r0, r0, #4
    3c2c:	4201      	tst	r1, r0
    3c2e:	d023      	beq.n	3c78 <_scanf_i+0x14c>
    3c30:	9a04      	ldr	r2, [sp, #16]
    3c32:	3701      	adds	r7, #1
    3c34:	2a00      	cmp	r2, #0
    3c36:	d003      	beq.n	3c40 <_scanf_i+0x114>
    3c38:	3a01      	subs	r2, #1
    3c3a:	3301      	adds	r3, #1
    3c3c:	9204      	str	r2, [sp, #16]
    3c3e:	60a3      	str	r3, [r4, #8]
    3c40:	6873      	ldr	r3, [r6, #4]
    3c42:	3b01      	subs	r3, #1
    3c44:	6073      	str	r3, [r6, #4]
    3c46:	2b00      	cmp	r3, #0
    3c48:	dd1e      	ble.n	3c88 <_scanf_i+0x15c>
    3c4a:	6833      	ldr	r3, [r6, #0]
    3c4c:	3301      	adds	r3, #1
    3c4e:	6033      	str	r3, [r6, #0]
    3c50:	68a3      	ldr	r3, [r4, #8]
    3c52:	3b01      	subs	r3, #1
    3c54:	60a3      	str	r3, [r4, #8]
    3c56:	e7db      	b.n	3c10 <_scanf_i+0xe4>
    3c58:	2f02      	cmp	r7, #2
    3c5a:	d1ab      	bne.n	3bb4 <_scanf_i+0x88>
    3c5c:	21c0      	movs	r1, #192	; 0xc0
    3c5e:	2380      	movs	r3, #128	; 0x80
    3c60:	6822      	ldr	r2, [r4, #0]
    3c62:	00c9      	lsls	r1, r1, #3
    3c64:	4011      	ands	r1, r2
    3c66:	009b      	lsls	r3, r3, #2
    3c68:	4299      	cmp	r1, r3
    3c6a:	d1c2      	bne.n	3bf2 <_scanf_i+0xc6>
    3c6c:	3bf1      	subs	r3, #241	; 0xf1
    3c6e:	3bff      	subs	r3, #255	; 0xff
    3c70:	6063      	str	r3, [r4, #4]
    3c72:	33f0      	adds	r3, #240	; 0xf0
    3c74:	4313      	orrs	r3, r2
    3c76:	e79c      	b.n	3bb2 <_scanf_i+0x86>
    3c78:	6821      	ldr	r1, [r4, #0]
    3c7a:	4b2b      	ldr	r3, [pc, #172]	; (3d28 <_scanf_i+0x1fc>)
    3c7c:	400b      	ands	r3, r1
    3c7e:	6023      	str	r3, [r4, #0]
    3c80:	7813      	ldrb	r3, [r2, #0]
    3c82:	702b      	strb	r3, [r5, #0]
    3c84:	3501      	adds	r5, #1
    3c86:	e7db      	b.n	3c40 <_scanf_i+0x114>
    3c88:	23c0      	movs	r3, #192	; 0xc0
    3c8a:	005b      	lsls	r3, r3, #1
    3c8c:	58e3      	ldr	r3, [r4, r3]
    3c8e:	0031      	movs	r1, r6
    3c90:	9805      	ldr	r0, [sp, #20]
    3c92:	9303      	str	r3, [sp, #12]
    3c94:	4798      	blx	r3
    3c96:	2800      	cmp	r0, #0
    3c98:	d0da      	beq.n	3c50 <_scanf_i+0x124>
    3c9a:	6823      	ldr	r3, [r4, #0]
    3c9c:	05db      	lsls	r3, r3, #23
    3c9e:	d50e      	bpl.n	3cbe <_scanf_i+0x192>
    3ca0:	9b01      	ldr	r3, [sp, #4]
    3ca2:	429d      	cmp	r5, r3
    3ca4:	d907      	bls.n	3cb6 <_scanf_i+0x18a>
    3ca6:	23be      	movs	r3, #190	; 0xbe
    3ca8:	3d01      	subs	r5, #1
    3caa:	005b      	lsls	r3, r3, #1
    3cac:	7829      	ldrb	r1, [r5, #0]
    3cae:	58e3      	ldr	r3, [r4, r3]
    3cb0:	0032      	movs	r2, r6
    3cb2:	9805      	ldr	r0, [sp, #20]
    3cb4:	4798      	blx	r3
    3cb6:	9b01      	ldr	r3, [sp, #4]
    3cb8:	2001      	movs	r0, #1
    3cba:	429d      	cmp	r5, r3
    3cbc:	d027      	beq.n	3d0e <_scanf_i+0x1e2>
    3cbe:	2210      	movs	r2, #16
    3cc0:	6823      	ldr	r3, [r4, #0]
    3cc2:	401a      	ands	r2, r3
    3cc4:	d11c      	bne.n	3d00 <_scanf_i+0x1d4>
    3cc6:	702a      	strb	r2, [r5, #0]
    3cc8:	6863      	ldr	r3, [r4, #4]
    3cca:	9901      	ldr	r1, [sp, #4]
    3ccc:	9805      	ldr	r0, [sp, #20]
    3cce:	9e06      	ldr	r6, [sp, #24]
    3cd0:	47b0      	blx	r6
    3cd2:	9b02      	ldr	r3, [sp, #8]
    3cd4:	6822      	ldr	r2, [r4, #0]
    3cd6:	681b      	ldr	r3, [r3, #0]
    3cd8:	0691      	lsls	r1, r2, #26
    3cda:	d507      	bpl.n	3cec <_scanf_i+0x1c0>
    3cdc:	9902      	ldr	r1, [sp, #8]
    3cde:	1d1a      	adds	r2, r3, #4
    3ce0:	600a      	str	r2, [r1, #0]
    3ce2:	681b      	ldr	r3, [r3, #0]
    3ce4:	6018      	str	r0, [r3, #0]
    3ce6:	e008      	b.n	3cfa <_scanf_i+0x1ce>
    3ce8:	2700      	movs	r7, #0
    3cea:	e7d6      	b.n	3c9a <_scanf_i+0x16e>
    3cec:	07d1      	lsls	r1, r2, #31
    3cee:	d5f5      	bpl.n	3cdc <_scanf_i+0x1b0>
    3cf0:	9902      	ldr	r1, [sp, #8]
    3cf2:	1d1a      	adds	r2, r3, #4
    3cf4:	600a      	str	r2, [r1, #0]
    3cf6:	681b      	ldr	r3, [r3, #0]
    3cf8:	8018      	strh	r0, [r3, #0]
    3cfa:	68e3      	ldr	r3, [r4, #12]
    3cfc:	3301      	adds	r3, #1
    3cfe:	60e3      	str	r3, [r4, #12]
    3d00:	2000      	movs	r0, #0
    3d02:	9b01      	ldr	r3, [sp, #4]
    3d04:	1aed      	subs	r5, r5, r3
    3d06:	6923      	ldr	r3, [r4, #16]
    3d08:	19ef      	adds	r7, r5, r7
    3d0a:	19df      	adds	r7, r3, r7
    3d0c:	6127      	str	r7, [r4, #16]
    3d0e:	b00d      	add	sp, #52	; 0x34
    3d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d12:	46c0      	nop			; (mov r8, r8)
    3d14:	000047b8 	.word	0x000047b8
    3d18:	000040fd 	.word	0x000040fd
    3d1c:	0000422d 	.word	0x0000422d
    3d20:	fffffaff 	.word	0xfffffaff
    3d24:	000047c4 	.word	0x000047c4
    3d28:	fffff6ff 	.word	0xfffff6ff

00003d2c <_putc_r>:
    3d2c:	b570      	push	{r4, r5, r6, lr}
    3d2e:	0006      	movs	r6, r0
    3d30:	000d      	movs	r5, r1
    3d32:	0014      	movs	r4, r2
    3d34:	2800      	cmp	r0, #0
    3d36:	d004      	beq.n	3d42 <_putc_r+0x16>
    3d38:	6983      	ldr	r3, [r0, #24]
    3d3a:	2b00      	cmp	r3, #0
    3d3c:	d101      	bne.n	3d42 <_putc_r+0x16>
    3d3e:	f7ff f847 	bl	2dd0 <__sinit>
    3d42:	4b12      	ldr	r3, [pc, #72]	; (3d8c <_putc_r+0x60>)
    3d44:	429c      	cmp	r4, r3
    3d46:	d111      	bne.n	3d6c <_putc_r+0x40>
    3d48:	6874      	ldr	r4, [r6, #4]
    3d4a:	68a3      	ldr	r3, [r4, #8]
    3d4c:	3b01      	subs	r3, #1
    3d4e:	60a3      	str	r3, [r4, #8]
    3d50:	2b00      	cmp	r3, #0
    3d52:	da05      	bge.n	3d60 <_putc_r+0x34>
    3d54:	69a2      	ldr	r2, [r4, #24]
    3d56:	4293      	cmp	r3, r2
    3d58:	db12      	blt.n	3d80 <_putc_r+0x54>
    3d5a:	b2eb      	uxtb	r3, r5
    3d5c:	2b0a      	cmp	r3, #10
    3d5e:	d00f      	beq.n	3d80 <_putc_r+0x54>
    3d60:	6823      	ldr	r3, [r4, #0]
    3d62:	b2e8      	uxtb	r0, r5
    3d64:	1c5a      	adds	r2, r3, #1
    3d66:	6022      	str	r2, [r4, #0]
    3d68:	701d      	strb	r5, [r3, #0]
    3d6a:	bd70      	pop	{r4, r5, r6, pc}
    3d6c:	4b08      	ldr	r3, [pc, #32]	; (3d90 <_putc_r+0x64>)
    3d6e:	429c      	cmp	r4, r3
    3d70:	d101      	bne.n	3d76 <_putc_r+0x4a>
    3d72:	68b4      	ldr	r4, [r6, #8]
    3d74:	e7e9      	b.n	3d4a <_putc_r+0x1e>
    3d76:	4b07      	ldr	r3, [pc, #28]	; (3d94 <_putc_r+0x68>)
    3d78:	429c      	cmp	r4, r3
    3d7a:	d1e6      	bne.n	3d4a <_putc_r+0x1e>
    3d7c:	68f4      	ldr	r4, [r6, #12]
    3d7e:	e7e4      	b.n	3d4a <_putc_r+0x1e>
    3d80:	0022      	movs	r2, r4
    3d82:	0029      	movs	r1, r5
    3d84:	0030      	movs	r0, r6
    3d86:	f7fe fe4b 	bl	2a20 <__swbuf_r>
    3d8a:	e7ee      	b.n	3d6a <_putc_r+0x3e>
    3d8c:	00004744 	.word	0x00004744
    3d90:	00004764 	.word	0x00004764
    3d94:	00004724 	.word	0x00004724

00003d98 <lflush>:
    3d98:	2209      	movs	r2, #9
    3d9a:	b510      	push	{r4, lr}
    3d9c:	8983      	ldrh	r3, [r0, #12]
    3d9e:	4013      	ands	r3, r2
    3da0:	2200      	movs	r2, #0
    3da2:	2b09      	cmp	r3, #9
    3da4:	d102      	bne.n	3dac <lflush+0x14>
    3da6:	f7fe ffbd 	bl	2d24 <fflush>
    3daa:	0002      	movs	r2, r0
    3dac:	0010      	movs	r0, r2
    3dae:	bd10      	pop	{r4, pc}

00003db0 <__srefill_r>:
    3db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3db2:	0005      	movs	r5, r0
    3db4:	000c      	movs	r4, r1
    3db6:	2800      	cmp	r0, #0
    3db8:	d004      	beq.n	3dc4 <__srefill_r+0x14>
    3dba:	6983      	ldr	r3, [r0, #24]
    3dbc:	2b00      	cmp	r3, #0
    3dbe:	d101      	bne.n	3dc4 <__srefill_r+0x14>
    3dc0:	f7ff f806 	bl	2dd0 <__sinit>
    3dc4:	4b3d      	ldr	r3, [pc, #244]	; (3ebc <__srefill_r+0x10c>)
    3dc6:	429c      	cmp	r4, r3
    3dc8:	d10a      	bne.n	3de0 <__srefill_r+0x30>
    3dca:	686c      	ldr	r4, [r5, #4]
    3dcc:	2300      	movs	r3, #0
    3dce:	6063      	str	r3, [r4, #4]
    3dd0:	230c      	movs	r3, #12
    3dd2:	5ee2      	ldrsh	r2, [r4, r3]
    3dd4:	b293      	uxth	r3, r2
    3dd6:	0699      	lsls	r1, r3, #26
    3dd8:	d50c      	bpl.n	3df4 <__srefill_r+0x44>
    3dda:	2001      	movs	r0, #1
    3ddc:	4240      	negs	r0, r0
    3dde:	e068      	b.n	3eb2 <__srefill_r+0x102>
    3de0:	4b37      	ldr	r3, [pc, #220]	; (3ec0 <__srefill_r+0x110>)
    3de2:	429c      	cmp	r4, r3
    3de4:	d101      	bne.n	3dea <__srefill_r+0x3a>
    3de6:	68ac      	ldr	r4, [r5, #8]
    3de8:	e7f0      	b.n	3dcc <__srefill_r+0x1c>
    3dea:	4b36      	ldr	r3, [pc, #216]	; (3ec4 <__srefill_r+0x114>)
    3dec:	429c      	cmp	r4, r3
    3dee:	d1ed      	bne.n	3dcc <__srefill_r+0x1c>
    3df0:	68ec      	ldr	r4, [r5, #12]
    3df2:	e7eb      	b.n	3dcc <__srefill_r+0x1c>
    3df4:	0759      	lsls	r1, r3, #29
    3df6:	d44a      	bmi.n	3e8e <__srefill_r+0xde>
    3df8:	06d9      	lsls	r1, r3, #27
    3dfa:	d405      	bmi.n	3e08 <__srefill_r+0x58>
    3dfc:	2309      	movs	r3, #9
    3dfe:	602b      	str	r3, [r5, #0]
    3e00:	3337      	adds	r3, #55	; 0x37
    3e02:	4313      	orrs	r3, r2
    3e04:	81a3      	strh	r3, [r4, #12]
    3e06:	e7e8      	b.n	3dda <__srefill_r+0x2a>
    3e08:	2608      	movs	r6, #8
    3e0a:	4233      	tst	r3, r6
    3e0c:	d00a      	beq.n	3e24 <__srefill_r+0x74>
    3e0e:	0021      	movs	r1, r4
    3e10:	0028      	movs	r0, r5
    3e12:	f7fe ff5b 	bl	2ccc <_fflush_r>
    3e16:	2800      	cmp	r0, #0
    3e18:	d1df      	bne.n	3dda <__srefill_r+0x2a>
    3e1a:	89a3      	ldrh	r3, [r4, #12]
    3e1c:	60a0      	str	r0, [r4, #8]
    3e1e:	43b3      	bics	r3, r6
    3e20:	81a3      	strh	r3, [r4, #12]
    3e22:	61a0      	str	r0, [r4, #24]
    3e24:	2304      	movs	r3, #4
    3e26:	89a2      	ldrh	r2, [r4, #12]
    3e28:	4313      	orrs	r3, r2
    3e2a:	81a3      	strh	r3, [r4, #12]
    3e2c:	6923      	ldr	r3, [r4, #16]
    3e2e:	2b00      	cmp	r3, #0
    3e30:	d103      	bne.n	3e3a <__srefill_r+0x8a>
    3e32:	0021      	movs	r1, r4
    3e34:	0028      	movs	r0, r5
    3e36:	f7ff f8a5 	bl	2f84 <__smakebuf_r>
    3e3a:	230c      	movs	r3, #12
    3e3c:	5ee7      	ldrsh	r7, [r4, r3]
    3e3e:	b2be      	uxth	r6, r7
    3e40:	07b3      	lsls	r3, r6, #30
    3e42:	d00f      	beq.n	3e64 <__srefill_r+0xb4>
    3e44:	2301      	movs	r3, #1
    3e46:	81a3      	strh	r3, [r4, #12]
    3e48:	4b1f      	ldr	r3, [pc, #124]	; (3ec8 <__srefill_r+0x118>)
    3e4a:	4920      	ldr	r1, [pc, #128]	; (3ecc <__srefill_r+0x11c>)
    3e4c:	6818      	ldr	r0, [r3, #0]
    3e4e:	f7ff f833 	bl	2eb8 <_fwalk>
    3e52:	2309      	movs	r3, #9
    3e54:	81a7      	strh	r7, [r4, #12]
    3e56:	401e      	ands	r6, r3
    3e58:	429e      	cmp	r6, r3
    3e5a:	d103      	bne.n	3e64 <__srefill_r+0xb4>
    3e5c:	0021      	movs	r1, r4
    3e5e:	0028      	movs	r0, r5
    3e60:	f7fe feaa 	bl	2bb8 <__sflush_r>
    3e64:	6923      	ldr	r3, [r4, #16]
    3e66:	6922      	ldr	r2, [r4, #16]
    3e68:	6023      	str	r3, [r4, #0]
    3e6a:	0028      	movs	r0, r5
    3e6c:	6963      	ldr	r3, [r4, #20]
    3e6e:	6a21      	ldr	r1, [r4, #32]
    3e70:	6a65      	ldr	r5, [r4, #36]	; 0x24
    3e72:	47a8      	blx	r5
    3e74:	0002      	movs	r2, r0
    3e76:	6060      	str	r0, [r4, #4]
    3e78:	2000      	movs	r0, #0
    3e7a:	4282      	cmp	r2, r0
    3e7c:	dc19      	bgt.n	3eb2 <__srefill_r+0x102>
    3e7e:	89a1      	ldrh	r1, [r4, #12]
    3e80:	4282      	cmp	r2, r0
    3e82:	d117      	bne.n	3eb4 <__srefill_r+0x104>
    3e84:	2320      	movs	r3, #32
    3e86:	430b      	orrs	r3, r1
    3e88:	81a3      	strh	r3, [r4, #12]
    3e8a:	3801      	subs	r0, #1
    3e8c:	e011      	b.n	3eb2 <__srefill_r+0x102>
    3e8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3e90:	2900      	cmp	r1, #0
    3e92:	d0cb      	beq.n	3e2c <__srefill_r+0x7c>
    3e94:	0023      	movs	r3, r4
    3e96:	3344      	adds	r3, #68	; 0x44
    3e98:	4299      	cmp	r1, r3
    3e9a:	d002      	beq.n	3ea2 <__srefill_r+0xf2>
    3e9c:	0028      	movs	r0, r5
    3e9e:	f7ff f8bf 	bl	3020 <_free_r>
    3ea2:	2000      	movs	r0, #0
    3ea4:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3ea6:	6360      	str	r0, [r4, #52]	; 0x34
    3ea8:	6063      	str	r3, [r4, #4]
    3eaa:	4283      	cmp	r3, r0
    3eac:	d0be      	beq.n	3e2c <__srefill_r+0x7c>
    3eae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3eb0:	6023      	str	r3, [r4, #0]
    3eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3eb4:	2340      	movs	r3, #64	; 0x40
    3eb6:	6060      	str	r0, [r4, #4]
    3eb8:	430b      	orrs	r3, r1
    3eba:	e7a3      	b.n	3e04 <__srefill_r+0x54>
    3ebc:	00004744 	.word	0x00004744
    3ec0:	00004764 	.word	0x00004764
    3ec4:	00004724 	.word	0x00004724
    3ec8:	00004720 	.word	0x00004720
    3ecc:	00003d99 	.word	0x00003d99

00003ed0 <_sbrk_r>:
    3ed0:	2300      	movs	r3, #0
    3ed2:	b570      	push	{r4, r5, r6, lr}
    3ed4:	4c06      	ldr	r4, [pc, #24]	; (3ef0 <_sbrk_r+0x20>)
    3ed6:	0005      	movs	r5, r0
    3ed8:	0008      	movs	r0, r1
    3eda:	6023      	str	r3, [r4, #0]
    3edc:	f7fe fb20 	bl	2520 <_sbrk>
    3ee0:	1c43      	adds	r3, r0, #1
    3ee2:	d103      	bne.n	3eec <_sbrk_r+0x1c>
    3ee4:	6823      	ldr	r3, [r4, #0]
    3ee6:	2b00      	cmp	r3, #0
    3ee8:	d000      	beq.n	3eec <_sbrk_r+0x1c>
    3eea:	602b      	str	r3, [r5, #0]
    3eec:	bd70      	pop	{r4, r5, r6, pc}
    3eee:	46c0      	nop			; (mov r8, r8)
    3ef0:	200003d0 	.word	0x200003d0

00003ef4 <__sccl>:
    3ef4:	b570      	push	{r4, r5, r6, lr}
    3ef6:	780b      	ldrb	r3, [r1, #0]
    3ef8:	2b5e      	cmp	r3, #94	; 0x5e
    3efa:	d00d      	beq.n	3f18 <__sccl+0x24>
    3efc:	1c4a      	adds	r2, r1, #1
    3efe:	2100      	movs	r1, #0
    3f00:	0004      	movs	r4, r0
    3f02:	1c45      	adds	r5, r0, #1
    3f04:	35ff      	adds	r5, #255	; 0xff
    3f06:	7021      	strb	r1, [r4, #0]
    3f08:	3401      	adds	r4, #1
    3f0a:	42a5      	cmp	r5, r4
    3f0c:	d1fb      	bne.n	3f06 <__sccl+0x12>
    3f0e:	2b00      	cmp	r3, #0
    3f10:	d106      	bne.n	3f20 <__sccl+0x2c>
    3f12:	3a01      	subs	r2, #1
    3f14:	0010      	movs	r0, r2
    3f16:	bd70      	pop	{r4, r5, r6, pc}
    3f18:	1c8a      	adds	r2, r1, #2
    3f1a:	784b      	ldrb	r3, [r1, #1]
    3f1c:	2101      	movs	r1, #1
    3f1e:	e7ef      	b.n	3f00 <__sccl+0xc>
    3f20:	2401      	movs	r4, #1
    3f22:	404c      	eors	r4, r1
    3f24:	0011      	movs	r1, r2
    3f26:	54c4      	strb	r4, [r0, r3]
    3f28:	780d      	ldrb	r5, [r1, #0]
    3f2a:	1c4a      	adds	r2, r1, #1
    3f2c:	2d2d      	cmp	r5, #45	; 0x2d
    3f2e:	d007      	beq.n	3f40 <__sccl+0x4c>
    3f30:	2d5d      	cmp	r5, #93	; 0x5d
    3f32:	d0ef      	beq.n	3f14 <__sccl+0x20>
    3f34:	2d00      	cmp	r5, #0
    3f36:	d101      	bne.n	3f3c <__sccl+0x48>
    3f38:	000a      	movs	r2, r1
    3f3a:	e7eb      	b.n	3f14 <__sccl+0x20>
    3f3c:	002b      	movs	r3, r5
    3f3e:	e7f1      	b.n	3f24 <__sccl+0x30>
    3f40:	784e      	ldrb	r6, [r1, #1]
    3f42:	2e5d      	cmp	r6, #93	; 0x5d
    3f44:	d0fa      	beq.n	3f3c <__sccl+0x48>
    3f46:	42b3      	cmp	r3, r6
    3f48:	dcf8      	bgt.n	3f3c <__sccl+0x48>
    3f4a:	3102      	adds	r1, #2
    3f4c:	3301      	adds	r3, #1
    3f4e:	54c4      	strb	r4, [r0, r3]
    3f50:	429e      	cmp	r6, r3
    3f52:	dcfb      	bgt.n	3f4c <__sccl+0x58>
    3f54:	e7e8      	b.n	3f28 <__sccl+0x34>
	...

00003f58 <__sread>:
    3f58:	b570      	push	{r4, r5, r6, lr}
    3f5a:	000c      	movs	r4, r1
    3f5c:	250e      	movs	r5, #14
    3f5e:	5f49      	ldrsh	r1, [r1, r5]
    3f60:	f000 fada 	bl	4518 <_read_r>
    3f64:	2800      	cmp	r0, #0
    3f66:	db03      	blt.n	3f70 <__sread+0x18>
    3f68:	6d63      	ldr	r3, [r4, #84]	; 0x54
    3f6a:	181b      	adds	r3, r3, r0
    3f6c:	6563      	str	r3, [r4, #84]	; 0x54
    3f6e:	bd70      	pop	{r4, r5, r6, pc}
    3f70:	89a3      	ldrh	r3, [r4, #12]
    3f72:	4a02      	ldr	r2, [pc, #8]	; (3f7c <__sread+0x24>)
    3f74:	4013      	ands	r3, r2
    3f76:	81a3      	strh	r3, [r4, #12]
    3f78:	e7f9      	b.n	3f6e <__sread+0x16>
    3f7a:	46c0      	nop			; (mov r8, r8)
    3f7c:	ffffefff 	.word	0xffffefff

00003f80 <__swrite>:
    3f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f82:	001f      	movs	r7, r3
    3f84:	898b      	ldrh	r3, [r1, #12]
    3f86:	0005      	movs	r5, r0
    3f88:	000c      	movs	r4, r1
    3f8a:	0016      	movs	r6, r2
    3f8c:	05db      	lsls	r3, r3, #23
    3f8e:	d505      	bpl.n	3f9c <__swrite+0x1c>
    3f90:	230e      	movs	r3, #14
    3f92:	5ec9      	ldrsh	r1, [r1, r3]
    3f94:	2200      	movs	r2, #0
    3f96:	2302      	movs	r3, #2
    3f98:	f000 fa64 	bl	4464 <_lseek_r>
    3f9c:	89a3      	ldrh	r3, [r4, #12]
    3f9e:	4a05      	ldr	r2, [pc, #20]	; (3fb4 <__swrite+0x34>)
    3fa0:	0028      	movs	r0, r5
    3fa2:	4013      	ands	r3, r2
    3fa4:	81a3      	strh	r3, [r4, #12]
    3fa6:	0032      	movs	r2, r6
    3fa8:	230e      	movs	r3, #14
    3faa:	5ee1      	ldrsh	r1, [r4, r3]
    3fac:	003b      	movs	r3, r7
    3fae:	f000 f9fd 	bl	43ac <_write_r>
    3fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3fb4:	ffffefff 	.word	0xffffefff

00003fb8 <__sseek>:
    3fb8:	b570      	push	{r4, r5, r6, lr}
    3fba:	000c      	movs	r4, r1
    3fbc:	250e      	movs	r5, #14
    3fbe:	5f49      	ldrsh	r1, [r1, r5]
    3fc0:	f000 fa50 	bl	4464 <_lseek_r>
    3fc4:	89a3      	ldrh	r3, [r4, #12]
    3fc6:	1c42      	adds	r2, r0, #1
    3fc8:	d103      	bne.n	3fd2 <__sseek+0x1a>
    3fca:	4a05      	ldr	r2, [pc, #20]	; (3fe0 <__sseek+0x28>)
    3fcc:	4013      	ands	r3, r2
    3fce:	81a3      	strh	r3, [r4, #12]
    3fd0:	bd70      	pop	{r4, r5, r6, pc}
    3fd2:	2280      	movs	r2, #128	; 0x80
    3fd4:	0152      	lsls	r2, r2, #5
    3fd6:	4313      	orrs	r3, r2
    3fd8:	81a3      	strh	r3, [r4, #12]
    3fda:	6560      	str	r0, [r4, #84]	; 0x54
    3fdc:	e7f8      	b.n	3fd0 <__sseek+0x18>
    3fde:	46c0      	nop			; (mov r8, r8)
    3fe0:	ffffefff 	.word	0xffffefff

00003fe4 <__sclose>:
    3fe4:	b510      	push	{r4, lr}
    3fe6:	230e      	movs	r3, #14
    3fe8:	5ec9      	ldrsh	r1, [r1, r3]
    3fea:	f000 f9f3 	bl	43d4 <_close_r>
    3fee:	bd10      	pop	{r4, pc}

00003ff0 <_strtol_l.isra.0>:
    3ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ff2:	001f      	movs	r7, r3
    3ff4:	000e      	movs	r6, r1
    3ff6:	b087      	sub	sp, #28
    3ff8:	9005      	str	r0, [sp, #20]
    3ffa:	9103      	str	r1, [sp, #12]
    3ffc:	9202      	str	r2, [sp, #8]
    3ffe:	980c      	ldr	r0, [sp, #48]	; 0x30
    4000:	7834      	ldrb	r4, [r6, #0]
    4002:	f000 fa1d 	bl	4440 <__locale_ctype_ptr_l>
    4006:	2208      	movs	r2, #8
    4008:	1900      	adds	r0, r0, r4
    400a:	7843      	ldrb	r3, [r0, #1]
    400c:	1c75      	adds	r5, r6, #1
    400e:	4013      	ands	r3, r2
    4010:	d10c      	bne.n	402c <_strtol_l.isra.0+0x3c>
    4012:	2c2d      	cmp	r4, #45	; 0x2d
    4014:	d10c      	bne.n	4030 <_strtol_l.isra.0+0x40>
    4016:	3301      	adds	r3, #1
    4018:	782c      	ldrb	r4, [r5, #0]
    401a:	9301      	str	r3, [sp, #4]
    401c:	1cb5      	adds	r5, r6, #2
    401e:	2f00      	cmp	r7, #0
    4020:	d00c      	beq.n	403c <_strtol_l.isra.0+0x4c>
    4022:	2f10      	cmp	r7, #16
    4024:	d114      	bne.n	4050 <_strtol_l.isra.0+0x60>
    4026:	2c30      	cmp	r4, #48	; 0x30
    4028:	d00a      	beq.n	4040 <_strtol_l.isra.0+0x50>
    402a:	e011      	b.n	4050 <_strtol_l.isra.0+0x60>
    402c:	002e      	movs	r6, r5
    402e:	e7e6      	b.n	3ffe <_strtol_l.isra.0+0xe>
    4030:	9301      	str	r3, [sp, #4]
    4032:	2c2b      	cmp	r4, #43	; 0x2b
    4034:	d1f3      	bne.n	401e <_strtol_l.isra.0+0x2e>
    4036:	782c      	ldrb	r4, [r5, #0]
    4038:	1cb5      	adds	r5, r6, #2
    403a:	e7f0      	b.n	401e <_strtol_l.isra.0+0x2e>
    403c:	2c30      	cmp	r4, #48	; 0x30
    403e:	d12f      	bne.n	40a0 <_strtol_l.isra.0+0xb0>
    4040:	2220      	movs	r2, #32
    4042:	782b      	ldrb	r3, [r5, #0]
    4044:	4393      	bics	r3, r2
    4046:	2b58      	cmp	r3, #88	; 0x58
    4048:	d151      	bne.n	40ee <_strtol_l.isra.0+0xfe>
    404a:	2710      	movs	r7, #16
    404c:	786c      	ldrb	r4, [r5, #1]
    404e:	3502      	adds	r5, #2
    4050:	9b01      	ldr	r3, [sp, #4]
    4052:	4a29      	ldr	r2, [pc, #164]	; (40f8 <_strtol_l.isra.0+0x108>)
    4054:	0039      	movs	r1, r7
    4056:	189e      	adds	r6, r3, r2
    4058:	0030      	movs	r0, r6
    405a:	f7fe fb05 	bl	2668 <__aeabi_uidivmod>
    405e:	0030      	movs	r0, r6
    4060:	9104      	str	r1, [sp, #16]
    4062:	0039      	movs	r1, r7
    4064:	f7fe fa7a 	bl	255c <__udivsi3>
    4068:	2101      	movs	r1, #1
    406a:	2300      	movs	r3, #0
    406c:	4249      	negs	r1, r1
    406e:	0002      	movs	r2, r0
    4070:	468c      	mov	ip, r1
    4072:	0018      	movs	r0, r3
    4074:	0021      	movs	r1, r4
    4076:	3930      	subs	r1, #48	; 0x30
    4078:	2909      	cmp	r1, #9
    407a:	d813      	bhi.n	40a4 <_strtol_l.isra.0+0xb4>
    407c:	000c      	movs	r4, r1
    407e:	42a7      	cmp	r7, r4
    4080:	dd1c      	ble.n	40bc <_strtol_l.isra.0+0xcc>
    4082:	1c59      	adds	r1, r3, #1
    4084:	d009      	beq.n	409a <_strtol_l.isra.0+0xaa>
    4086:	4663      	mov	r3, ip
    4088:	4282      	cmp	r2, r0
    408a:	d306      	bcc.n	409a <_strtol_l.isra.0+0xaa>
    408c:	d102      	bne.n	4094 <_strtol_l.isra.0+0xa4>
    408e:	9904      	ldr	r1, [sp, #16]
    4090:	42a1      	cmp	r1, r4
    4092:	db02      	blt.n	409a <_strtol_l.isra.0+0xaa>
    4094:	2301      	movs	r3, #1
    4096:	4378      	muls	r0, r7
    4098:	1820      	adds	r0, r4, r0
    409a:	782c      	ldrb	r4, [r5, #0]
    409c:	3501      	adds	r5, #1
    409e:	e7e9      	b.n	4074 <_strtol_l.isra.0+0x84>
    40a0:	270a      	movs	r7, #10
    40a2:	e7d5      	b.n	4050 <_strtol_l.isra.0+0x60>
    40a4:	0021      	movs	r1, r4
    40a6:	3941      	subs	r1, #65	; 0x41
    40a8:	2919      	cmp	r1, #25
    40aa:	d801      	bhi.n	40b0 <_strtol_l.isra.0+0xc0>
    40ac:	3c37      	subs	r4, #55	; 0x37
    40ae:	e7e6      	b.n	407e <_strtol_l.isra.0+0x8e>
    40b0:	0021      	movs	r1, r4
    40b2:	3961      	subs	r1, #97	; 0x61
    40b4:	2919      	cmp	r1, #25
    40b6:	d801      	bhi.n	40bc <_strtol_l.isra.0+0xcc>
    40b8:	3c57      	subs	r4, #87	; 0x57
    40ba:	e7e0      	b.n	407e <_strtol_l.isra.0+0x8e>
    40bc:	1c5a      	adds	r2, r3, #1
    40be:	d108      	bne.n	40d2 <_strtol_l.isra.0+0xe2>
    40c0:	9a05      	ldr	r2, [sp, #20]
    40c2:	3323      	adds	r3, #35	; 0x23
    40c4:	6013      	str	r3, [r2, #0]
    40c6:	9b02      	ldr	r3, [sp, #8]
    40c8:	0030      	movs	r0, r6
    40ca:	2b00      	cmp	r3, #0
    40cc:	d10b      	bne.n	40e6 <_strtol_l.isra.0+0xf6>
    40ce:	b007      	add	sp, #28
    40d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40d2:	9a01      	ldr	r2, [sp, #4]
    40d4:	2a00      	cmp	r2, #0
    40d6:	d000      	beq.n	40da <_strtol_l.isra.0+0xea>
    40d8:	4240      	negs	r0, r0
    40da:	9a02      	ldr	r2, [sp, #8]
    40dc:	2a00      	cmp	r2, #0
    40de:	d0f6      	beq.n	40ce <_strtol_l.isra.0+0xde>
    40e0:	9a03      	ldr	r2, [sp, #12]
    40e2:	2b00      	cmp	r3, #0
    40e4:	d000      	beq.n	40e8 <_strtol_l.isra.0+0xf8>
    40e6:	1e6a      	subs	r2, r5, #1
    40e8:	9b02      	ldr	r3, [sp, #8]
    40ea:	601a      	str	r2, [r3, #0]
    40ec:	e7ef      	b.n	40ce <_strtol_l.isra.0+0xde>
    40ee:	2430      	movs	r4, #48	; 0x30
    40f0:	2f00      	cmp	r7, #0
    40f2:	d1ad      	bne.n	4050 <_strtol_l.isra.0+0x60>
    40f4:	3708      	adds	r7, #8
    40f6:	e7ab      	b.n	4050 <_strtol_l.isra.0+0x60>
    40f8:	7fffffff 	.word	0x7fffffff

000040fc <_strtol_r>:
    40fc:	b513      	push	{r0, r1, r4, lr}
    40fe:	4c05      	ldr	r4, [pc, #20]	; (4114 <_strtol_r+0x18>)
    4100:	6824      	ldr	r4, [r4, #0]
    4102:	6a24      	ldr	r4, [r4, #32]
    4104:	2c00      	cmp	r4, #0
    4106:	d100      	bne.n	410a <_strtol_r+0xe>
    4108:	4c03      	ldr	r4, [pc, #12]	; (4118 <_strtol_r+0x1c>)
    410a:	9400      	str	r4, [sp, #0]
    410c:	f7ff ff70 	bl	3ff0 <_strtol_l.isra.0>
    4110:	bd16      	pop	{r1, r2, r4, pc}
    4112:	46c0      	nop			; (mov r8, r8)
    4114:	2000000c 	.word	0x2000000c
    4118:	20000070 	.word	0x20000070

0000411c <_strtoul_l.isra.0>:
    411c:	b5f0      	push	{r4, r5, r6, r7, lr}
    411e:	001f      	movs	r7, r3
    4120:	000e      	movs	r6, r1
    4122:	b087      	sub	sp, #28
    4124:	9005      	str	r0, [sp, #20]
    4126:	9103      	str	r1, [sp, #12]
    4128:	9201      	str	r2, [sp, #4]
    412a:	980c      	ldr	r0, [sp, #48]	; 0x30
    412c:	7834      	ldrb	r4, [r6, #0]
    412e:	f000 f987 	bl	4440 <__locale_ctype_ptr_l>
    4132:	2208      	movs	r2, #8
    4134:	1900      	adds	r0, r0, r4
    4136:	7843      	ldrb	r3, [r0, #1]
    4138:	1c75      	adds	r5, r6, #1
    413a:	4013      	ands	r3, r2
    413c:	d10c      	bne.n	4158 <_strtoul_l.isra.0+0x3c>
    413e:	2c2d      	cmp	r4, #45	; 0x2d
    4140:	d10c      	bne.n	415c <_strtoul_l.isra.0+0x40>
    4142:	3301      	adds	r3, #1
    4144:	782c      	ldrb	r4, [r5, #0]
    4146:	9302      	str	r3, [sp, #8]
    4148:	1cb5      	adds	r5, r6, #2
    414a:	2f00      	cmp	r7, #0
    414c:	d00c      	beq.n	4168 <_strtoul_l.isra.0+0x4c>
    414e:	2f10      	cmp	r7, #16
    4150:	d114      	bne.n	417c <_strtoul_l.isra.0+0x60>
    4152:	2c30      	cmp	r4, #48	; 0x30
    4154:	d00a      	beq.n	416c <_strtoul_l.isra.0+0x50>
    4156:	e011      	b.n	417c <_strtoul_l.isra.0+0x60>
    4158:	002e      	movs	r6, r5
    415a:	e7e6      	b.n	412a <_strtoul_l.isra.0+0xe>
    415c:	9302      	str	r3, [sp, #8]
    415e:	2c2b      	cmp	r4, #43	; 0x2b
    4160:	d1f3      	bne.n	414a <_strtoul_l.isra.0+0x2e>
    4162:	782c      	ldrb	r4, [r5, #0]
    4164:	1cb5      	adds	r5, r6, #2
    4166:	e7f0      	b.n	414a <_strtoul_l.isra.0+0x2e>
    4168:	2c30      	cmp	r4, #48	; 0x30
    416a:	d12f      	bne.n	41cc <_strtoul_l.isra.0+0xb0>
    416c:	2220      	movs	r2, #32
    416e:	782b      	ldrb	r3, [r5, #0]
    4170:	4393      	bics	r3, r2
    4172:	2b58      	cmp	r3, #88	; 0x58
    4174:	d154      	bne.n	4220 <_strtoul_l.isra.0+0x104>
    4176:	2710      	movs	r7, #16
    4178:	786c      	ldrb	r4, [r5, #1]
    417a:	3502      	adds	r5, #2
    417c:	2001      	movs	r0, #1
    417e:	0039      	movs	r1, r7
    4180:	4240      	negs	r0, r0
    4182:	f7fe f9eb 	bl	255c <__udivsi3>
    4186:	0006      	movs	r6, r0
    4188:	2001      	movs	r0, #1
    418a:	0039      	movs	r1, r7
    418c:	4240      	negs	r0, r0
    418e:	f7fe fa6b 	bl	2668 <__aeabi_uidivmod>
    4192:	2300      	movs	r3, #0
    4194:	9104      	str	r1, [sp, #16]
    4196:	2101      	movs	r1, #1
    4198:	2201      	movs	r2, #1
    419a:	0018      	movs	r0, r3
    419c:	468c      	mov	ip, r1
    419e:	4252      	negs	r2, r2
    41a0:	0021      	movs	r1, r4
    41a2:	3930      	subs	r1, #48	; 0x30
    41a4:	2909      	cmp	r1, #9
    41a6:	d813      	bhi.n	41d0 <_strtoul_l.isra.0+0xb4>
    41a8:	000c      	movs	r4, r1
    41aa:	42a7      	cmp	r7, r4
    41ac:	dd1e      	ble.n	41ec <_strtoul_l.isra.0+0xd0>
    41ae:	2b00      	cmp	r3, #0
    41b0:	db1a      	blt.n	41e8 <_strtoul_l.isra.0+0xcc>
    41b2:	0013      	movs	r3, r2
    41b4:	4286      	cmp	r6, r0
    41b6:	d306      	bcc.n	41c6 <_strtoul_l.isra.0+0xaa>
    41b8:	d102      	bne.n	41c0 <_strtoul_l.isra.0+0xa4>
    41ba:	9904      	ldr	r1, [sp, #16]
    41bc:	42a1      	cmp	r1, r4
    41be:	db02      	blt.n	41c6 <_strtoul_l.isra.0+0xaa>
    41c0:	4663      	mov	r3, ip
    41c2:	4378      	muls	r0, r7
    41c4:	1820      	adds	r0, r4, r0
    41c6:	782c      	ldrb	r4, [r5, #0]
    41c8:	3501      	adds	r5, #1
    41ca:	e7e9      	b.n	41a0 <_strtoul_l.isra.0+0x84>
    41cc:	270a      	movs	r7, #10
    41ce:	e7d5      	b.n	417c <_strtoul_l.isra.0+0x60>
    41d0:	0021      	movs	r1, r4
    41d2:	3941      	subs	r1, #65	; 0x41
    41d4:	2919      	cmp	r1, #25
    41d6:	d801      	bhi.n	41dc <_strtoul_l.isra.0+0xc0>
    41d8:	3c37      	subs	r4, #55	; 0x37
    41da:	e7e6      	b.n	41aa <_strtoul_l.isra.0+0x8e>
    41dc:	0021      	movs	r1, r4
    41de:	3961      	subs	r1, #97	; 0x61
    41e0:	2919      	cmp	r1, #25
    41e2:	d803      	bhi.n	41ec <_strtoul_l.isra.0+0xd0>
    41e4:	3c57      	subs	r4, #87	; 0x57
    41e6:	e7e0      	b.n	41aa <_strtoul_l.isra.0+0x8e>
    41e8:	0013      	movs	r3, r2
    41ea:	e7ec      	b.n	41c6 <_strtoul_l.isra.0+0xaa>
    41ec:	2b00      	cmp	r3, #0
    41ee:	da09      	bge.n	4204 <_strtoul_l.isra.0+0xe8>
    41f0:	2322      	movs	r3, #34	; 0x22
    41f2:	2001      	movs	r0, #1
    41f4:	9a05      	ldr	r2, [sp, #20]
    41f6:	4240      	negs	r0, r0
    41f8:	6013      	str	r3, [r2, #0]
    41fa:	9b01      	ldr	r3, [sp, #4]
    41fc:	2b00      	cmp	r3, #0
    41fe:	d10b      	bne.n	4218 <_strtoul_l.isra.0+0xfc>
    4200:	b007      	add	sp, #28
    4202:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4204:	9a02      	ldr	r2, [sp, #8]
    4206:	2a00      	cmp	r2, #0
    4208:	d000      	beq.n	420c <_strtoul_l.isra.0+0xf0>
    420a:	4240      	negs	r0, r0
    420c:	9a01      	ldr	r2, [sp, #4]
    420e:	2a00      	cmp	r2, #0
    4210:	d0f6      	beq.n	4200 <_strtoul_l.isra.0+0xe4>
    4212:	9a03      	ldr	r2, [sp, #12]
    4214:	2b00      	cmp	r3, #0
    4216:	d000      	beq.n	421a <_strtoul_l.isra.0+0xfe>
    4218:	1e6a      	subs	r2, r5, #1
    421a:	9b01      	ldr	r3, [sp, #4]
    421c:	601a      	str	r2, [r3, #0]
    421e:	e7ef      	b.n	4200 <_strtoul_l.isra.0+0xe4>
    4220:	2430      	movs	r4, #48	; 0x30
    4222:	2f00      	cmp	r7, #0
    4224:	d1aa      	bne.n	417c <_strtoul_l.isra.0+0x60>
    4226:	3708      	adds	r7, #8
    4228:	e7a8      	b.n	417c <_strtoul_l.isra.0+0x60>
	...

0000422c <_strtoul_r>:
    422c:	b513      	push	{r0, r1, r4, lr}
    422e:	4c05      	ldr	r4, [pc, #20]	; (4244 <_strtoul_r+0x18>)
    4230:	6824      	ldr	r4, [r4, #0]
    4232:	6a24      	ldr	r4, [r4, #32]
    4234:	2c00      	cmp	r4, #0
    4236:	d100      	bne.n	423a <_strtoul_r+0xe>
    4238:	4c03      	ldr	r4, [pc, #12]	; (4248 <_strtoul_r+0x1c>)
    423a:	9400      	str	r4, [sp, #0]
    423c:	f7ff ff6e 	bl	411c <_strtoul_l.isra.0>
    4240:	bd16      	pop	{r1, r2, r4, pc}
    4242:	46c0      	nop			; (mov r8, r8)
    4244:	2000000c 	.word	0x2000000c
    4248:	20000070 	.word	0x20000070

0000424c <__submore>:
    424c:	000b      	movs	r3, r1
    424e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4250:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    4252:	3344      	adds	r3, #68	; 0x44
    4254:	000c      	movs	r4, r1
    4256:	429d      	cmp	r5, r3
    4258:	d11c      	bne.n	4294 <__submore+0x48>
    425a:	2680      	movs	r6, #128	; 0x80
    425c:	00f6      	lsls	r6, r6, #3
    425e:	0031      	movs	r1, r6
    4260:	f7fe ff28 	bl	30b4 <_malloc_r>
    4264:	2800      	cmp	r0, #0
    4266:	d102      	bne.n	426e <__submore+0x22>
    4268:	2001      	movs	r0, #1
    426a:	4240      	negs	r0, r0
    426c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    426e:	0023      	movs	r3, r4
    4270:	6360      	str	r0, [r4, #52]	; 0x34
    4272:	63a6      	str	r6, [r4, #56]	; 0x38
    4274:	3346      	adds	r3, #70	; 0x46
    4276:	781a      	ldrb	r2, [r3, #0]
    4278:	4b10      	ldr	r3, [pc, #64]	; (42bc <__submore+0x70>)
    427a:	54c2      	strb	r2, [r0, r3]
    427c:	0023      	movs	r3, r4
    427e:	3345      	adds	r3, #69	; 0x45
    4280:	781a      	ldrb	r2, [r3, #0]
    4282:	4b0f      	ldr	r3, [pc, #60]	; (42c0 <__submore+0x74>)
    4284:	54c2      	strb	r2, [r0, r3]
    4286:	782a      	ldrb	r2, [r5, #0]
    4288:	4b0e      	ldr	r3, [pc, #56]	; (42c4 <__submore+0x78>)
    428a:	54c2      	strb	r2, [r0, r3]
    428c:	18c0      	adds	r0, r0, r3
    428e:	6020      	str	r0, [r4, #0]
    4290:	2000      	movs	r0, #0
    4292:	e7eb      	b.n	426c <__submore+0x20>
    4294:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    4296:	0029      	movs	r1, r5
    4298:	0073      	lsls	r3, r6, #1
    429a:	001a      	movs	r2, r3
    429c:	9301      	str	r3, [sp, #4]
    429e:	f000 f914 	bl	44ca <_realloc_r>
    42a2:	1e05      	subs	r5, r0, #0
    42a4:	d0e0      	beq.n	4268 <__submore+0x1c>
    42a6:	1987      	adds	r7, r0, r6
    42a8:	0001      	movs	r1, r0
    42aa:	0032      	movs	r2, r6
    42ac:	0038      	movs	r0, r7
    42ae:	f7fe fa3e 	bl	272e <memcpy>
    42b2:	9b01      	ldr	r3, [sp, #4]
    42b4:	6027      	str	r7, [r4, #0]
    42b6:	6365      	str	r5, [r4, #52]	; 0x34
    42b8:	63a3      	str	r3, [r4, #56]	; 0x38
    42ba:	e7e9      	b.n	4290 <__submore+0x44>
    42bc:	000003ff 	.word	0x000003ff
    42c0:	000003fe 	.word	0x000003fe
    42c4:	000003fd 	.word	0x000003fd

000042c8 <_ungetc_r>:
    42c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42ca:	0005      	movs	r5, r0
    42cc:	000e      	movs	r6, r1
    42ce:	0014      	movs	r4, r2
    42d0:	1c4b      	adds	r3, r1, #1
    42d2:	d103      	bne.n	42dc <_ungetc_r+0x14>
    42d4:	2601      	movs	r6, #1
    42d6:	4276      	negs	r6, r6
    42d8:	0030      	movs	r0, r6
    42da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    42dc:	2800      	cmp	r0, #0
    42de:	d004      	beq.n	42ea <_ungetc_r+0x22>
    42e0:	6983      	ldr	r3, [r0, #24]
    42e2:	2b00      	cmp	r3, #0
    42e4:	d101      	bne.n	42ea <_ungetc_r+0x22>
    42e6:	f7fe fd73 	bl	2dd0 <__sinit>
    42ea:	4b2d      	ldr	r3, [pc, #180]	; (43a0 <_ungetc_r+0xd8>)
    42ec:	429c      	cmp	r4, r3
    42ee:	d12d      	bne.n	434c <_ungetc_r+0x84>
    42f0:	686c      	ldr	r4, [r5, #4]
    42f2:	2220      	movs	r2, #32
    42f4:	89a3      	ldrh	r3, [r4, #12]
    42f6:	4393      	bics	r3, r2
    42f8:	b21b      	sxth	r3, r3
    42fa:	81a3      	strh	r3, [r4, #12]
    42fc:	b29b      	uxth	r3, r3
    42fe:	075a      	lsls	r2, r3, #29
    4300:	d413      	bmi.n	432a <_ungetc_r+0x62>
    4302:	06da      	lsls	r2, r3, #27
    4304:	d5e6      	bpl.n	42d4 <_ungetc_r+0xc>
    4306:	2708      	movs	r7, #8
    4308:	423b      	tst	r3, r7
    430a:	d00a      	beq.n	4322 <_ungetc_r+0x5a>
    430c:	0021      	movs	r1, r4
    430e:	0028      	movs	r0, r5
    4310:	f7fe fcdc 	bl	2ccc <_fflush_r>
    4314:	2800      	cmp	r0, #0
    4316:	d1dd      	bne.n	42d4 <_ungetc_r+0xc>
    4318:	89a3      	ldrh	r3, [r4, #12]
    431a:	60a0      	str	r0, [r4, #8]
    431c:	43bb      	bics	r3, r7
    431e:	81a3      	strh	r3, [r4, #12]
    4320:	61a0      	str	r0, [r4, #24]
    4322:	2304      	movs	r3, #4
    4324:	89a2      	ldrh	r2, [r4, #12]
    4326:	4313      	orrs	r3, r2
    4328:	81a3      	strh	r3, [r4, #12]
    432a:	6b62      	ldr	r2, [r4, #52]	; 0x34
    432c:	b2f7      	uxtb	r7, r6
    432e:	6863      	ldr	r3, [r4, #4]
    4330:	b2f6      	uxtb	r6, r6
    4332:	2a00      	cmp	r2, #0
    4334:	d01b      	beq.n	436e <_ungetc_r+0xa6>
    4336:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    4338:	4293      	cmp	r3, r2
    433a:	da11      	bge.n	4360 <_ungetc_r+0x98>
    433c:	6823      	ldr	r3, [r4, #0]
    433e:	3b01      	subs	r3, #1
    4340:	6023      	str	r3, [r4, #0]
    4342:	701f      	strb	r7, [r3, #0]
    4344:	6863      	ldr	r3, [r4, #4]
    4346:	3301      	adds	r3, #1
    4348:	6063      	str	r3, [r4, #4]
    434a:	e7c5      	b.n	42d8 <_ungetc_r+0x10>
    434c:	4b15      	ldr	r3, [pc, #84]	; (43a4 <_ungetc_r+0xdc>)
    434e:	429c      	cmp	r4, r3
    4350:	d101      	bne.n	4356 <_ungetc_r+0x8e>
    4352:	68ac      	ldr	r4, [r5, #8]
    4354:	e7cd      	b.n	42f2 <_ungetc_r+0x2a>
    4356:	4b14      	ldr	r3, [pc, #80]	; (43a8 <_ungetc_r+0xe0>)
    4358:	429c      	cmp	r4, r3
    435a:	d1ca      	bne.n	42f2 <_ungetc_r+0x2a>
    435c:	68ec      	ldr	r4, [r5, #12]
    435e:	e7c8      	b.n	42f2 <_ungetc_r+0x2a>
    4360:	0021      	movs	r1, r4
    4362:	0028      	movs	r0, r5
    4364:	f7ff ff72 	bl	424c <__submore>
    4368:	2800      	cmp	r0, #0
    436a:	d0e7      	beq.n	433c <_ungetc_r+0x74>
    436c:	e7b2      	b.n	42d4 <_ungetc_r+0xc>
    436e:	6921      	ldr	r1, [r4, #16]
    4370:	6822      	ldr	r2, [r4, #0]
    4372:	2900      	cmp	r1, #0
    4374:	d007      	beq.n	4386 <_ungetc_r+0xbe>
    4376:	4291      	cmp	r1, r2
    4378:	d205      	bcs.n	4386 <_ungetc_r+0xbe>
    437a:	1e51      	subs	r1, r2, #1
    437c:	7808      	ldrb	r0, [r1, #0]
    437e:	4286      	cmp	r6, r0
    4380:	d101      	bne.n	4386 <_ungetc_r+0xbe>
    4382:	6021      	str	r1, [r4, #0]
    4384:	e7df      	b.n	4346 <_ungetc_r+0x7e>
    4386:	6423      	str	r3, [r4, #64]	; 0x40
    4388:	0023      	movs	r3, r4
    438a:	3344      	adds	r3, #68	; 0x44
    438c:	6363      	str	r3, [r4, #52]	; 0x34
    438e:	2303      	movs	r3, #3
    4390:	63a3      	str	r3, [r4, #56]	; 0x38
    4392:	0023      	movs	r3, r4
    4394:	3346      	adds	r3, #70	; 0x46
    4396:	63e2      	str	r2, [r4, #60]	; 0x3c
    4398:	701f      	strb	r7, [r3, #0]
    439a:	6023      	str	r3, [r4, #0]
    439c:	2301      	movs	r3, #1
    439e:	e7d3      	b.n	4348 <_ungetc_r+0x80>
    43a0:	00004744 	.word	0x00004744
    43a4:	00004764 	.word	0x00004764
    43a8:	00004724 	.word	0x00004724

000043ac <_write_r>:
    43ac:	b570      	push	{r4, r5, r6, lr}
    43ae:	0005      	movs	r5, r0
    43b0:	0008      	movs	r0, r1
    43b2:	0011      	movs	r1, r2
    43b4:	2200      	movs	r2, #0
    43b6:	4c06      	ldr	r4, [pc, #24]	; (43d0 <_write_r+0x24>)
    43b8:	6022      	str	r2, [r4, #0]
    43ba:	001a      	movs	r2, r3
    43bc:	f7fe f888 	bl	24d0 <_write>
    43c0:	1c43      	adds	r3, r0, #1
    43c2:	d103      	bne.n	43cc <_write_r+0x20>
    43c4:	6823      	ldr	r3, [r4, #0]
    43c6:	2b00      	cmp	r3, #0
    43c8:	d000      	beq.n	43cc <_write_r+0x20>
    43ca:	602b      	str	r3, [r5, #0]
    43cc:	bd70      	pop	{r4, r5, r6, pc}
    43ce:	46c0      	nop			; (mov r8, r8)
    43d0:	200003d0 	.word	0x200003d0

000043d4 <_close_r>:
    43d4:	2300      	movs	r3, #0
    43d6:	b570      	push	{r4, r5, r6, lr}
    43d8:	4c06      	ldr	r4, [pc, #24]	; (43f4 <_close_r+0x20>)
    43da:	0005      	movs	r5, r0
    43dc:	0008      	movs	r0, r1
    43de:	6023      	str	r3, [r4, #0]
    43e0:	f7fe f8b0 	bl	2544 <_close>
    43e4:	1c43      	adds	r3, r0, #1
    43e6:	d103      	bne.n	43f0 <_close_r+0x1c>
    43e8:	6823      	ldr	r3, [r4, #0]
    43ea:	2b00      	cmp	r3, #0
    43ec:	d000      	beq.n	43f0 <_close_r+0x1c>
    43ee:	602b      	str	r3, [r5, #0]
    43f0:	bd70      	pop	{r4, r5, r6, pc}
    43f2:	46c0      	nop			; (mov r8, r8)
    43f4:	200003d0 	.word	0x200003d0

000043f8 <_fstat_r>:
    43f8:	2300      	movs	r3, #0
    43fa:	b570      	push	{r4, r5, r6, lr}
    43fc:	4c06      	ldr	r4, [pc, #24]	; (4418 <_fstat_r+0x20>)
    43fe:	0005      	movs	r5, r0
    4400:	0008      	movs	r0, r1
    4402:	0011      	movs	r1, r2
    4404:	6023      	str	r3, [r4, #0]
    4406:	f7fe f8a0 	bl	254a <_fstat>
    440a:	1c43      	adds	r3, r0, #1
    440c:	d103      	bne.n	4416 <_fstat_r+0x1e>
    440e:	6823      	ldr	r3, [r4, #0]
    4410:	2b00      	cmp	r3, #0
    4412:	d000      	beq.n	4416 <_fstat_r+0x1e>
    4414:	602b      	str	r3, [r5, #0]
    4416:	bd70      	pop	{r4, r5, r6, pc}
    4418:	200003d0 	.word	0x200003d0

0000441c <_isatty_r>:
    441c:	2300      	movs	r3, #0
    441e:	b570      	push	{r4, r5, r6, lr}
    4420:	4c06      	ldr	r4, [pc, #24]	; (443c <_isatty_r+0x20>)
    4422:	0005      	movs	r5, r0
    4424:	0008      	movs	r0, r1
    4426:	6023      	str	r3, [r4, #0]
    4428:	f7fe f894 	bl	2554 <_isatty>
    442c:	1c43      	adds	r3, r0, #1
    442e:	d103      	bne.n	4438 <_isatty_r+0x1c>
    4430:	6823      	ldr	r3, [r4, #0]
    4432:	2b00      	cmp	r3, #0
    4434:	d000      	beq.n	4438 <_isatty_r+0x1c>
    4436:	602b      	str	r3, [r5, #0]
    4438:	bd70      	pop	{r4, r5, r6, pc}
    443a:	46c0      	nop			; (mov r8, r8)
    443c:	200003d0 	.word	0x200003d0

00004440 <__locale_ctype_ptr_l>:
    4440:	30ec      	adds	r0, #236	; 0xec
    4442:	6800      	ldr	r0, [r0, #0]
    4444:	4770      	bx	lr
	...

00004448 <__locale_ctype_ptr>:
    4448:	4b04      	ldr	r3, [pc, #16]	; (445c <__locale_ctype_ptr+0x14>)
    444a:	681b      	ldr	r3, [r3, #0]
    444c:	6a1b      	ldr	r3, [r3, #32]
    444e:	2b00      	cmp	r3, #0
    4450:	d100      	bne.n	4454 <__locale_ctype_ptr+0xc>
    4452:	4b03      	ldr	r3, [pc, #12]	; (4460 <__locale_ctype_ptr+0x18>)
    4454:	33ec      	adds	r3, #236	; 0xec
    4456:	6818      	ldr	r0, [r3, #0]
    4458:	4770      	bx	lr
    445a:	46c0      	nop			; (mov r8, r8)
    445c:	2000000c 	.word	0x2000000c
    4460:	20000070 	.word	0x20000070

00004464 <_lseek_r>:
    4464:	b570      	push	{r4, r5, r6, lr}
    4466:	0005      	movs	r5, r0
    4468:	0008      	movs	r0, r1
    446a:	0011      	movs	r1, r2
    446c:	2200      	movs	r2, #0
    446e:	4c06      	ldr	r4, [pc, #24]	; (4488 <_lseek_r+0x24>)
    4470:	6022      	str	r2, [r4, #0]
    4472:	001a      	movs	r2, r3
    4474:	f7fe f870 	bl	2558 <_lseek>
    4478:	1c43      	adds	r3, r0, #1
    447a:	d103      	bne.n	4484 <_lseek_r+0x20>
    447c:	6823      	ldr	r3, [r4, #0]
    447e:	2b00      	cmp	r3, #0
    4480:	d000      	beq.n	4484 <_lseek_r+0x20>
    4482:	602b      	str	r3, [r5, #0]
    4484:	bd70      	pop	{r4, r5, r6, pc}
    4486:	46c0      	nop			; (mov r8, r8)
    4488:	200003d0 	.word	0x200003d0

0000448c <__ascii_mbtowc>:
    448c:	b082      	sub	sp, #8
    448e:	2900      	cmp	r1, #0
    4490:	d100      	bne.n	4494 <__ascii_mbtowc+0x8>
    4492:	a901      	add	r1, sp, #4
    4494:	1e10      	subs	r0, r2, #0
    4496:	d006      	beq.n	44a6 <__ascii_mbtowc+0x1a>
    4498:	2b00      	cmp	r3, #0
    449a:	d006      	beq.n	44aa <__ascii_mbtowc+0x1e>
    449c:	7813      	ldrb	r3, [r2, #0]
    449e:	600b      	str	r3, [r1, #0]
    44a0:	7810      	ldrb	r0, [r2, #0]
    44a2:	1e43      	subs	r3, r0, #1
    44a4:	4198      	sbcs	r0, r3
    44a6:	b002      	add	sp, #8
    44a8:	4770      	bx	lr
    44aa:	2002      	movs	r0, #2
    44ac:	4240      	negs	r0, r0
    44ae:	e7fa      	b.n	44a6 <__ascii_mbtowc+0x1a>

000044b0 <memchr>:
    44b0:	b2c9      	uxtb	r1, r1
    44b2:	1882      	adds	r2, r0, r2
    44b4:	4290      	cmp	r0, r2
    44b6:	d101      	bne.n	44bc <memchr+0xc>
    44b8:	2000      	movs	r0, #0
    44ba:	4770      	bx	lr
    44bc:	7803      	ldrb	r3, [r0, #0]
    44be:	428b      	cmp	r3, r1
    44c0:	d0fb      	beq.n	44ba <memchr+0xa>
    44c2:	3001      	adds	r0, #1
    44c4:	e7f6      	b.n	44b4 <memchr+0x4>

000044c6 <__malloc_lock>:
    44c6:	4770      	bx	lr

000044c8 <__malloc_unlock>:
    44c8:	4770      	bx	lr

000044ca <_realloc_r>:
    44ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44cc:	0007      	movs	r7, r0
    44ce:	000d      	movs	r5, r1
    44d0:	0016      	movs	r6, r2
    44d2:	2900      	cmp	r1, #0
    44d4:	d105      	bne.n	44e2 <_realloc_r+0x18>
    44d6:	0011      	movs	r1, r2
    44d8:	f7fe fdec 	bl	30b4 <_malloc_r>
    44dc:	0004      	movs	r4, r0
    44de:	0020      	movs	r0, r4
    44e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    44e2:	2a00      	cmp	r2, #0
    44e4:	d103      	bne.n	44ee <_realloc_r+0x24>
    44e6:	f7fe fd9b 	bl	3020 <_free_r>
    44ea:	0034      	movs	r4, r6
    44ec:	e7f7      	b.n	44de <_realloc_r+0x14>
    44ee:	f000 f833 	bl	4558 <_malloc_usable_size_r>
    44f2:	002c      	movs	r4, r5
    44f4:	4286      	cmp	r6, r0
    44f6:	d9f2      	bls.n	44de <_realloc_r+0x14>
    44f8:	0031      	movs	r1, r6
    44fa:	0038      	movs	r0, r7
    44fc:	f7fe fdda 	bl	30b4 <_malloc_r>
    4500:	1e04      	subs	r4, r0, #0
    4502:	d0ec      	beq.n	44de <_realloc_r+0x14>
    4504:	0029      	movs	r1, r5
    4506:	0032      	movs	r2, r6
    4508:	f7fe f911 	bl	272e <memcpy>
    450c:	0029      	movs	r1, r5
    450e:	0038      	movs	r0, r7
    4510:	f7fe fd86 	bl	3020 <_free_r>
    4514:	e7e3      	b.n	44de <_realloc_r+0x14>
	...

00004518 <_read_r>:
    4518:	b570      	push	{r4, r5, r6, lr}
    451a:	0005      	movs	r5, r0
    451c:	0008      	movs	r0, r1
    451e:	0011      	movs	r1, r2
    4520:	2200      	movs	r2, #0
    4522:	4c06      	ldr	r4, [pc, #24]	; (453c <_read_r+0x24>)
    4524:	6022      	str	r2, [r4, #0]
    4526:	001a      	movs	r2, r3
    4528:	f7fd ffb0 	bl	248c <_read>
    452c:	1c43      	adds	r3, r0, #1
    452e:	d103      	bne.n	4538 <_read_r+0x20>
    4530:	6823      	ldr	r3, [r4, #0]
    4532:	2b00      	cmp	r3, #0
    4534:	d000      	beq.n	4538 <_read_r+0x20>
    4536:	602b      	str	r3, [r5, #0]
    4538:	bd70      	pop	{r4, r5, r6, pc}
    453a:	46c0      	nop			; (mov r8, r8)
    453c:	200003d0 	.word	0x200003d0

00004540 <__ascii_wctomb>:
    4540:	1e0b      	subs	r3, r1, #0
    4542:	d004      	beq.n	454e <__ascii_wctomb+0xe>
    4544:	2aff      	cmp	r2, #255	; 0xff
    4546:	d904      	bls.n	4552 <__ascii_wctomb+0x12>
    4548:	238a      	movs	r3, #138	; 0x8a
    454a:	6003      	str	r3, [r0, #0]
    454c:	3b8b      	subs	r3, #139	; 0x8b
    454e:	0018      	movs	r0, r3
    4550:	4770      	bx	lr
    4552:	700a      	strb	r2, [r1, #0]
    4554:	2301      	movs	r3, #1
    4556:	e7fa      	b.n	454e <__ascii_wctomb+0xe>

00004558 <_malloc_usable_size_r>:
    4558:	1f0b      	subs	r3, r1, #4
    455a:	681b      	ldr	r3, [r3, #0]
    455c:	1f18      	subs	r0, r3, #4
    455e:	2b00      	cmp	r3, #0
    4560:	da01      	bge.n	4566 <_malloc_usable_size_r+0xe>
    4562:	580b      	ldr	r3, [r1, r0]
    4564:	18c0      	adds	r0, r0, r3
    4566:	4770      	bx	lr
    4568:	62205854 	.word	0x62205854
    456c:	65666675 	.word	0x65666675
    4570:	203d2072 	.word	0x203d2072
    4574:	00007830 	.word	0x00007830
    4578:	62205852 	.word	0x62205852
    457c:	65666675 	.word	0x65666675
    4580:	203d2072 	.word	0x203d2072
    4584:	00007830 	.word	0x00007830
    4588:	6c696146 	.word	0x6c696146
    458c:	20216465 	.word	0x20216465
    4590:	5f746572 	.word	0x5f746572
    4594:	65646f63 	.word	0x65646f63
    4598:	30203d20 	.word	0x30203d20
    459c:	322e2578 	.word	0x322e2578
    45a0:	00000a58 	.word	0x00000a58
    45a4:	636f6c42 	.word	0x636f6c42
    45a8:	6552206b 	.word	0x6552206b
    45ac:	6d206461 	.word	0x6d206461
    45b0:	726f6d65 	.word	0x726f6d65
    45b4:	61662079 	.word	0x61662079
    45b8:	64656c69 	.word	0x64656c69
    45bc:	00000d21 	.word	0x00000d21
    45c0:	636f6c42 	.word	0x636f6c42
    45c4:	6552206b 	.word	0x6552206b
    45c8:	6d206461 	.word	0x6d206461
    45cc:	726f6d65 	.word	0x726f6d65
    45d0:	75732079 	.word	0x75732079
    45d4:	73656363 	.word	0x73656363
    45d8:	000d2173 	.word	0x000d2173
    45dc:	2a2a2a2a 	.word	0x2a2a2a2a
    45e0:	5345412a 	.word	0x5345412a
    45e4:	20323331 	.word	0x20323331
    45e8:	54534554 	.word	0x54534554
    45ec:	2a2a2a2a 	.word	0x2a2a2a2a
    45f0:	00000d2a 	.word	0x00000d2a
    45f4:	00006325 	.word	0x00006325
    45f8:	75706e49 	.word	0x75706e49
    45fc:	253a2074 	.word	0x253a2074
    4600:	00000063 	.word	0x00000063
    4604:	6f727245 	.word	0x6f727245
    4608:	75622072 	.word	0x75622072
    460c:	72656666 	.word	0x72656666
    4610:	65766f20 	.word	0x65766f20
    4614:	6f6c6672 	.word	0x6f6c6672
    4618:	00000077 	.word	0x00000077
    461c:	58322e25 	.word	0x58322e25
    4620:	00000000 	.word	0x00000000
    4624:	64616552 	.word	0x64616552
    4628:	6d656d20 	.word	0x6d656d20
    462c:	2079726f 	.word	0x2079726f
    4630:	6c696166 	.word	0x6c696166
    4634:	0d216465 	.word	0x0d216465
    4638:	00000000 	.word	0x00000000
    463c:	64616552 	.word	0x64616552
    4640:	6d656d20 	.word	0x6d656d20
    4644:	2079726f 	.word	0x2079726f
    4648:	63637573 	.word	0x63637573
    464c:	21737365 	.word	0x21737365
    4650:	0000000d 	.word	0x0000000d
    4654:	706d6f43 	.word	0x706d6f43
    4658:	20657261 	.word	0x20657261
    465c:	6f6d654d 	.word	0x6f6d654d
    4660:	6d207972 	.word	0x6d207972
    4664:	616d7369 	.word	0x616d7369
    4668:	21686374 	.word	0x21686374
    466c:	0000000d 	.word	0x0000000d
    4670:	706d6f43 	.word	0x706d6f43
    4674:	20657261 	.word	0x20657261
    4678:	6f6d654d 	.word	0x6f6d654d
    467c:	6d207972 	.word	0x6d207972
    4680:	68637461 	.word	0x68637461
    4684:	00000d21 	.word	0x00000d21
    4688:	74697257 	.word	0x74697257
    468c:	656d2065 	.word	0x656d2065
    4690:	79726f6d 	.word	0x79726f6d
    4694:	69616620 	.word	0x69616620
    4698:	2164656c 	.word	0x2164656c
    469c:	0000000d 	.word	0x0000000d
    46a0:	74697257 	.word	0x74697257
    46a4:	656d2065 	.word	0x656d2065
    46a8:	79726f6d 	.word	0x79726f6d
    46ac:	63757320 	.word	0x63757320
    46b0:	73736563 	.word	0x73736563
    46b4:	00000d21 	.word	0x00000d21
    46b8:	61746144 	.word	0x61746144
    46bc:	0000203a 	.word	0x0000203a
    46c0:	42000800 	.word	0x42000800
    46c4:	42000c00 	.word	0x42000c00
    46c8:	42001000 	.word	0x42001000
    46cc:	42001400 	.word	0x42001400
    46d0:	42001800 	.word	0x42001800
    46d4:	42001c00 	.word	0x42001c00
    46d8:	00001e2a 	.word	0x00001e2a
    46dc:	00001e26 	.word	0x00001e26
    46e0:	00001e26 	.word	0x00001e26
    46e4:	00001e88 	.word	0x00001e88
    46e8:	00001e88 	.word	0x00001e88
    46ec:	00001e3e 	.word	0x00001e3e
    46f0:	00001e30 	.word	0x00001e30
    46f4:	00001e44 	.word	0x00001e44
    46f8:	00001e76 	.word	0x00001e76
    46fc:	00001f10 	.word	0x00001f10
    4700:	00001ef0 	.word	0x00001ef0
    4704:	00001ef0 	.word	0x00001ef0
    4708:	00001f70 	.word	0x00001f70
    470c:	00001f02 	.word	0x00001f02
    4710:	00001f1e 	.word	0x00001f1e
    4714:	00001ef4 	.word	0x00001ef4
    4718:	00001f2c 	.word	0x00001f2c
    471c:	00001f60 	.word	0x00001f60

00004720 <_global_impure_ptr>:
    4720:	20000010                                ... 

00004724 <__sf_fake_stderr>:
	...

00004744 <__sf_fake_stdin>:
	...

00004764 <__sf_fake_stdout>:
	...
    4784:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    4794:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    47a4:	31300046 35343332 39383736 64636261     F.0123456789abcd
    47b4:	00006665 000047d6 000047d9 000047dc     ef...G...G...G..
    47c4:	61462d41 3938662d 33323130 37363534     A-Fa-f8901234567
    47d4:	2d2b005d 00303000 43005878 534f5000     ].+-.00.xX.C.POS
    47e4:	2e005849 20200000                                IX...

000047e9 <_ctype_>:
    47e9:	20202000 20202020 28282020 20282828     .         ((((( 
    47f9:	20202020 20202020 20202020 20202020                     
    4809:	10108820 10101010 10101010 10101010      ...............
    4819:	04040410 04040404 10040404 10101010     ................
    4829:	41411010 41414141 01010101 01010101     ..AAAAAA........
    4839:	01010101 01010101 01010101 10101010     ................
    4849:	42421010 42424242 02020202 02020202     ..BBBBBB........
    4859:	02020202 02020202 02020202 10101010     ................
    4869:	00000020 00000000 00000000 00000000      ...............
	...

000048ec <_init>:
    48ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48ee:	46c0      	nop			; (mov r8, r8)
    48f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    48f2:	bc08      	pop	{r3}
    48f4:	469e      	mov	lr, r3
    48f6:	4770      	bx	lr

000048f8 <__init_array_start>:
    48f8:	000000d9 	.word	0x000000d9

000048fc <_fini>:
    48fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48fe:	46c0      	nop			; (mov r8, r8)
    4900:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4902:	bc08      	pop	{r3}
    4904:	469e      	mov	lr, r3
    4906:	4770      	bx	lr

00004908 <__fini_array_start>:
    4908:	000000b1 	.word	0x000000b1

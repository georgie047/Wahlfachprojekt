
aes132_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004c58  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001d8  20000000  00004c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000200  200001d8  00004e30  000201d8  2**2
                  ALLOC
  3 .stack        00002000  200003d8  00005030  000201d8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
  6 .debug_info   00027d9f  00000000  00000000  00020259  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003a40  00000000  00000000  00047ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000538  00000000  00000000  0004ba38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000009c8  00000000  00000000  0004bf70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001b920  00000000  00000000  0004c938  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c271  00000000  00000000  00068258  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0008d353  00000000  00000000  000744c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001a04  00000000  00000000  0010181c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000071e4  00000000  00000000  00103220  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d8 23 00 20 31 27 00 00 2d 27 00 00 2d 27 00 00     .#. 1'..-'..-'..
	...
      2c:	2d 27 00 00 00 00 00 00 00 00 00 00 2d 27 00 00     -'..........-'..
      3c:	2d 27 00 00 2d 27 00 00 2d 27 00 00 2d 27 00 00     -'..-'..-'..-'..
      4c:	2d 27 00 00 2d 27 00 00 2d 27 00 00 2d 27 00 00     -'..-'..-'..-'..
      5c:	2d 27 00 00 2d 27 00 00 2d 27 00 00 2d 27 00 00     -'..-'..-'..-'..
      6c:	2d 27 00 00 2d 27 00 00 2d 27 00 00 2d 27 00 00     -'..-'..-'..-'..
      7c:	2d 27 00 00 2d 27 00 00 2d 27 00 00 2d 27 00 00     -'..-'..-'..-'..
      8c:	2d 27 00 00 2d 27 00 00 2d 27 00 00 2d 27 00 00     -'..-'..-'..-'..
      9c:	2d 27 00 00 2d 27 00 00 2d 27 00 00 2d 27 00 00     -'..-'..-'..-'..
      ac:	2d 27 00 00                                         -'..

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	200001d8 	.word	0x200001d8
      d0:	00000000 	.word	0x00000000
      d4:	00004c58 	.word	0x00004c58

000000d8 <frame_dummy>:
      d8:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      da:	b510      	push	{r4, lr}
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4907      	ldr	r1, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4808      	ldr	r0, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d100      	bne.n	f2 <frame_dummy+0x1a>
      f0:	bd10      	pop	{r4, pc}
      f2:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f4:	2b00      	cmp	r3, #0
      f6:	d0fb      	beq.n	f0 <frame_dummy+0x18>
      f8:	4798      	blx	r3
      fa:	e7f9      	b.n	f0 <frame_dummy+0x18>
      fc:	00000000 	.word	0x00000000
     100:	200001dc 	.word	0x200001dc
     104:	00004c58 	.word	0x00004c58
     108:	00004c58 	.word	0x00004c58
     10c:	00000000 	.word	0x00000000

00000110 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     110:	4b0c      	ldr	r3, [pc, #48]	; (144 <cpu_irq_enter_critical+0x34>)
     112:	681b      	ldr	r3, [r3, #0]
     114:	2b00      	cmp	r3, #0
     116:	d106      	bne.n	126 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     118:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     11c:	2b00      	cmp	r3, #0
     11e:	d007      	beq.n	130 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     120:	2200      	movs	r2, #0
     122:	4b09      	ldr	r3, [pc, #36]	; (148 <cpu_irq_enter_critical+0x38>)
     124:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     126:	4a07      	ldr	r2, [pc, #28]	; (144 <cpu_irq_enter_critical+0x34>)
     128:	6813      	ldr	r3, [r2, #0]
     12a:	3301      	adds	r3, #1
     12c:	6013      	str	r3, [r2, #0]
}
     12e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     130:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     132:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     136:	2200      	movs	r2, #0
     138:	4b04      	ldr	r3, [pc, #16]	; (14c <cpu_irq_enter_critical+0x3c>)
     13a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     13c:	3201      	adds	r2, #1
     13e:	4b02      	ldr	r3, [pc, #8]	; (148 <cpu_irq_enter_critical+0x38>)
     140:	701a      	strb	r2, [r3, #0]
     142:	e7f0      	b.n	126 <cpu_irq_enter_critical+0x16>
     144:	200001f4 	.word	0x200001f4
     148:	200001f8 	.word	0x200001f8
     14c:	20000000 	.word	0x20000000

00000150 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     150:	4b08      	ldr	r3, [pc, #32]	; (174 <cpu_irq_leave_critical+0x24>)
     152:	681a      	ldr	r2, [r3, #0]
     154:	3a01      	subs	r2, #1
     156:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     158:	681b      	ldr	r3, [r3, #0]
     15a:	2b00      	cmp	r3, #0
     15c:	d109      	bne.n	172 <cpu_irq_leave_critical+0x22>
     15e:	4b06      	ldr	r3, [pc, #24]	; (178 <cpu_irq_leave_critical+0x28>)
     160:	781b      	ldrb	r3, [r3, #0]
     162:	2b00      	cmp	r3, #0
     164:	d005      	beq.n	172 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     166:	2201      	movs	r2, #1
     168:	4b04      	ldr	r3, [pc, #16]	; (17c <cpu_irq_leave_critical+0x2c>)
     16a:	701a      	strb	r2, [r3, #0]
     16c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     170:	b662      	cpsie	i
	}
}
     172:	4770      	bx	lr
     174:	200001f4 	.word	0x200001f4
     178:	200001f8 	.word	0x200001f8
     17c:	20000000 	.word	0x20000000

00000180 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     180:	b500      	push	{lr}
     182:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     184:	ab01      	add	r3, sp, #4
     186:	2280      	movs	r2, #128	; 0x80
     188:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     18a:	780a      	ldrb	r2, [r1, #0]
     18c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     18e:	784a      	ldrb	r2, [r1, #1]
     190:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     192:	788a      	ldrb	r2, [r1, #2]
     194:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     196:	0019      	movs	r1, r3
     198:	4b01      	ldr	r3, [pc, #4]	; (1a0 <port_pin_set_config+0x20>)
     19a:	4798      	blx	r3
}
     19c:	b003      	add	sp, #12
     19e:	bd00      	pop	{pc}
     1a0:	0000024d 	.word	0x0000024d

000001a4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     1a4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     1a6:	78d3      	ldrb	r3, [r2, #3]
     1a8:	2b00      	cmp	r3, #0
     1aa:	d135      	bne.n	218 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     1ac:	7813      	ldrb	r3, [r2, #0]
     1ae:	2b80      	cmp	r3, #128	; 0x80
     1b0:	d029      	beq.n	206 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     1b2:	061b      	lsls	r3, r3, #24
     1b4:	2480      	movs	r4, #128	; 0x80
     1b6:	0264      	lsls	r4, r4, #9
     1b8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     1ba:	7854      	ldrb	r4, [r2, #1]
     1bc:	2502      	movs	r5, #2
     1be:	43ac      	bics	r4, r5
     1c0:	d106      	bne.n	1d0 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     1c2:	7894      	ldrb	r4, [r2, #2]
     1c4:	2c00      	cmp	r4, #0
     1c6:	d120      	bne.n	20a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
     1c8:	2480      	movs	r4, #128	; 0x80
     1ca:	02a4      	lsls	r4, r4, #10
     1cc:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     1ce:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     1d0:	7854      	ldrb	r4, [r2, #1]
     1d2:	3c01      	subs	r4, #1
     1d4:	2c01      	cmp	r4, #1
     1d6:	d91c      	bls.n	212 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     1d8:	040d      	lsls	r5, r1, #16
     1da:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     1dc:	24a0      	movs	r4, #160	; 0xa0
     1de:	05e4      	lsls	r4, r4, #23
     1e0:	432c      	orrs	r4, r5
     1e2:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     1e4:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     1e6:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     1e8:	24d0      	movs	r4, #208	; 0xd0
     1ea:	0624      	lsls	r4, r4, #24
     1ec:	432c      	orrs	r4, r5
     1ee:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     1f0:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     1f2:	78d4      	ldrb	r4, [r2, #3]
     1f4:	2c00      	cmp	r4, #0
     1f6:	d122      	bne.n	23e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
     1f8:	035b      	lsls	r3, r3, #13
     1fa:	d51c      	bpl.n	236 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     1fc:	7893      	ldrb	r3, [r2, #2]
     1fe:	2b01      	cmp	r3, #1
     200:	d01e      	beq.n	240 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
     202:	6141      	str	r1, [r0, #20]
     204:	e017      	b.n	236 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
     206:	2300      	movs	r3, #0
     208:	e7d7      	b.n	1ba <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     20a:	24c0      	movs	r4, #192	; 0xc0
     20c:	02e4      	lsls	r4, r4, #11
     20e:	4323      	orrs	r3, r4
     210:	e7dd      	b.n	1ce <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     212:	4c0d      	ldr	r4, [pc, #52]	; (248 <_system_pinmux_config+0xa4>)
     214:	4023      	ands	r3, r4
     216:	e7df      	b.n	1d8 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
     218:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     21a:	040c      	lsls	r4, r1, #16
     21c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     21e:	23a0      	movs	r3, #160	; 0xa0
     220:	05db      	lsls	r3, r3, #23
     222:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     224:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     226:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     228:	23d0      	movs	r3, #208	; 0xd0
     22a:	061b      	lsls	r3, r3, #24
     22c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     22e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
     230:	78d3      	ldrb	r3, [r2, #3]
     232:	2b00      	cmp	r3, #0
     234:	d103      	bne.n	23e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     236:	7853      	ldrb	r3, [r2, #1]
     238:	3b01      	subs	r3, #1
     23a:	2b01      	cmp	r3, #1
     23c:	d902      	bls.n	244 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
     23e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
     240:	6181      	str	r1, [r0, #24]
     242:	e7f8      	b.n	236 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
     244:	6081      	str	r1, [r0, #8]
}
     246:	e7fa      	b.n	23e <_system_pinmux_config+0x9a>
     248:	fffbffff 	.word	0xfffbffff

0000024c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
     24c:	b510      	push	{r4, lr}
     24e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     250:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     252:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     254:	2900      	cmp	r1, #0
     256:	d104      	bne.n	262 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
     258:	0943      	lsrs	r3, r0, #5
     25a:	01db      	lsls	r3, r3, #7
     25c:	4905      	ldr	r1, [pc, #20]	; (274 <system_pinmux_pin_set_config+0x28>)
     25e:	468c      	mov	ip, r1
     260:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
     262:	241f      	movs	r4, #31
     264:	4020      	ands	r0, r4
     266:	2101      	movs	r1, #1
     268:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
     26a:	0018      	movs	r0, r3
     26c:	4b02      	ldr	r3, [pc, #8]	; (278 <system_pinmux_pin_set_config+0x2c>)
     26e:	4798      	blx	r3
}
     270:	bd10      	pop	{r4, pc}
     272:	46c0      	nop			; (mov r8, r8)
     274:	41004400 	.word	0x41004400
     278:	000001a5 	.word	0x000001a5

0000027c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
     27c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
     27e:	4a06      	ldr	r2, [pc, #24]	; (298 <_sbrk+0x1c>)
     280:	6812      	ldr	r2, [r2, #0]
     282:	2a00      	cmp	r2, #0
     284:	d004      	beq.n	290 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     286:	4a04      	ldr	r2, [pc, #16]	; (298 <_sbrk+0x1c>)
     288:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     28a:	18c3      	adds	r3, r0, r3
     28c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
     28e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     290:	4902      	ldr	r1, [pc, #8]	; (29c <_sbrk+0x20>)
     292:	4a01      	ldr	r2, [pc, #4]	; (298 <_sbrk+0x1c>)
     294:	6011      	str	r1, [r2, #0]
     296:	e7f6      	b.n	286 <_sbrk+0xa>
     298:	200001fc 	.word	0x200001fc
     29c:	200023d8 	.word	0x200023d8

000002a0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
     2a0:	2001      	movs	r0, #1
     2a2:	4240      	negs	r0, r0
     2a4:	4770      	bx	lr

000002a6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
     2a6:	2380      	movs	r3, #128	; 0x80
     2a8:	019b      	lsls	r3, r3, #6
     2aa:	604b      	str	r3, [r1, #4]

	return 0;
}
     2ac:	2000      	movs	r0, #0
     2ae:	4770      	bx	lr

000002b0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
     2b0:	2001      	movs	r0, #1
     2b2:	4770      	bx	lr

000002b4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
     2b4:	2000      	movs	r0, #0
     2b6:	4770      	bx	lr

000002b8 <aes132c_calculate_crc>:
 * \param[in] length number of bytes in data buffer
 * \param[in] data pointer to data
 * \param[out] crc pointer to calculated CRC (high byte at crc[0])
 */
void aes132c_calculate_crc(uint8_t length, uint8_t *data, uint8_t *crc)
{
     2b8:	b580      	push	{r7, lr}
     2ba:	b088      	sub	sp, #32
     2bc:	af00      	add	r7, sp, #0
     2be:	60b9      	str	r1, [r7, #8]
     2c0:	607a      	str	r2, [r7, #4]
     2c2:	230f      	movs	r3, #15
     2c4:	18fb      	adds	r3, r7, r3
     2c6:	1c02      	adds	r2, r0, #0
     2c8:	701a      	strb	r2, [r3, #0]
	uint8_t counter;
	uint8_t crc_low = 0, crc_high = 0, crc_carry;
     2ca:	231e      	movs	r3, #30
     2cc:	18fb      	adds	r3, r7, r3
     2ce:	2200      	movs	r2, #0
     2d0:	701a      	strb	r2, [r3, #0]
     2d2:	231d      	movs	r3, #29
     2d4:	18fb      	adds	r3, r7, r3
     2d6:	2200      	movs	r2, #0
     2d8:	701a      	strb	r2, [r3, #0]
	uint8_t poly_low = 0x05, poly_high = 0x80;
     2da:	231b      	movs	r3, #27
     2dc:	18fb      	adds	r3, r7, r3
     2de:	2205      	movs	r2, #5
     2e0:	701a      	strb	r2, [r3, #0]
     2e2:	231a      	movs	r3, #26
     2e4:	18fb      	adds	r3, r7, r3
     2e6:	2280      	movs	r2, #128	; 0x80
     2e8:	701a      	strb	r2, [r3, #0]
	uint8_t shift_register;
	uint8_t data_bit, crc_bit;

	for (counter = 0; counter < length; counter++) {
     2ea:	231f      	movs	r3, #31
     2ec:	18fb      	adds	r3, r7, r3
     2ee:	2200      	movs	r2, #0
     2f0:	701a      	strb	r2, [r3, #0]
     2f2:	e06a      	b.n	3ca <aes132c_calculate_crc+0x112>
		for (shift_register = 0x80; shift_register > 0x00; shift_register >>= 1) {
     2f4:	231c      	movs	r3, #28
     2f6:	18fb      	adds	r3, r7, r3
     2f8:	2280      	movs	r2, #128	; 0x80
     2fa:	701a      	strb	r2, [r3, #0]
     2fc:	e059      	b.n	3b2 <aes132c_calculate_crc+0xfa>
			data_bit = (data[counter] & shift_register) ? 1 : 0;
     2fe:	231f      	movs	r3, #31
     300:	18fb      	adds	r3, r7, r3
     302:	781b      	ldrb	r3, [r3, #0]
     304:	68ba      	ldr	r2, [r7, #8]
     306:	18d3      	adds	r3, r2, r3
     308:	781b      	ldrb	r3, [r3, #0]
     30a:	221c      	movs	r2, #28
     30c:	18ba      	adds	r2, r7, r2
     30e:	7812      	ldrb	r2, [r2, #0]
     310:	4013      	ands	r3, r2
     312:	b2db      	uxtb	r3, r3
     314:	1e5a      	subs	r2, r3, #1
     316:	4193      	sbcs	r3, r2
     318:	b2da      	uxtb	r2, r3
     31a:	2319      	movs	r3, #25
     31c:	18fb      	adds	r3, r7, r3
     31e:	701a      	strb	r2, [r3, #0]
			crc_bit = crc_high >> 7;
     320:	2318      	movs	r3, #24
     322:	18fb      	adds	r3, r7, r3
     324:	221d      	movs	r2, #29
     326:	18ba      	adds	r2, r7, r2
     328:	7812      	ldrb	r2, [r2, #0]
     32a:	09d2      	lsrs	r2, r2, #7
     32c:	701a      	strb	r2, [r3, #0]

			// Shift CRC to the left by 1.
			crc_carry = crc_low >> 7;
     32e:	2317      	movs	r3, #23
     330:	18fb      	adds	r3, r7, r3
     332:	221e      	movs	r2, #30
     334:	18ba      	adds	r2, r7, r2
     336:	7812      	ldrb	r2, [r2, #0]
     338:	09d2      	lsrs	r2, r2, #7
     33a:	701a      	strb	r2, [r3, #0]
			crc_low <<= 1;
     33c:	231e      	movs	r3, #30
     33e:	18fa      	adds	r2, r7, r3
     340:	231e      	movs	r3, #30
     342:	18fb      	adds	r3, r7, r3
     344:	781b      	ldrb	r3, [r3, #0]
     346:	18db      	adds	r3, r3, r3
     348:	7013      	strb	r3, [r2, #0]
			crc_high <<= 1;
     34a:	231d      	movs	r3, #29
     34c:	18fa      	adds	r2, r7, r3
     34e:	231d      	movs	r3, #29
     350:	18fb      	adds	r3, r7, r3
     352:	781b      	ldrb	r3, [r3, #0]
     354:	18db      	adds	r3, r3, r3
     356:	7013      	strb	r3, [r2, #0]
			crc_high |= crc_carry;
     358:	231d      	movs	r3, #29
     35a:	18fb      	adds	r3, r7, r3
     35c:	221d      	movs	r2, #29
     35e:	18b9      	adds	r1, r7, r2
     360:	2217      	movs	r2, #23
     362:	18ba      	adds	r2, r7, r2
     364:	7809      	ldrb	r1, [r1, #0]
     366:	7812      	ldrb	r2, [r2, #0]
     368:	430a      	orrs	r2, r1
     36a:	701a      	strb	r2, [r3, #0]

			if ((data_bit ^ crc_bit) != 0) {
     36c:	2319      	movs	r3, #25
     36e:	18fa      	adds	r2, r7, r3
     370:	2318      	movs	r3, #24
     372:	18fb      	adds	r3, r7, r3
     374:	7812      	ldrb	r2, [r2, #0]
     376:	781b      	ldrb	r3, [r3, #0]
     378:	429a      	cmp	r2, r3
     37a:	d013      	beq.n	3a4 <aes132c_calculate_crc+0xec>
				crc_low ^= poly_low;
     37c:	231e      	movs	r3, #30
     37e:	18fb      	adds	r3, r7, r3
     380:	221e      	movs	r2, #30
     382:	18b9      	adds	r1, r7, r2
     384:	221b      	movs	r2, #27
     386:	18ba      	adds	r2, r7, r2
     388:	7809      	ldrb	r1, [r1, #0]
     38a:	7812      	ldrb	r2, [r2, #0]
     38c:	404a      	eors	r2, r1
     38e:	701a      	strb	r2, [r3, #0]
				crc_high ^= poly_high;
     390:	231d      	movs	r3, #29
     392:	18fb      	adds	r3, r7, r3
     394:	221d      	movs	r2, #29
     396:	18b9      	adds	r1, r7, r2
     398:	221a      	movs	r2, #26
     39a:	18ba      	adds	r2, r7, r2
     39c:	7809      	ldrb	r1, [r1, #0]
     39e:	7812      	ldrb	r2, [r2, #0]
     3a0:	404a      	eors	r2, r1
     3a2:	701a      	strb	r2, [r3, #0]
		for (shift_register = 0x80; shift_register > 0x00; shift_register >>= 1) {
     3a4:	231c      	movs	r3, #28
     3a6:	18fb      	adds	r3, r7, r3
     3a8:	221c      	movs	r2, #28
     3aa:	18ba      	adds	r2, r7, r2
     3ac:	7812      	ldrb	r2, [r2, #0]
     3ae:	0852      	lsrs	r2, r2, #1
     3b0:	701a      	strb	r2, [r3, #0]
     3b2:	231c      	movs	r3, #28
     3b4:	18fb      	adds	r3, r7, r3
     3b6:	781b      	ldrb	r3, [r3, #0]
     3b8:	2b00      	cmp	r3, #0
     3ba:	d1a0      	bne.n	2fe <aes132c_calculate_crc+0x46>
	for (counter = 0; counter < length; counter++) {
     3bc:	231f      	movs	r3, #31
     3be:	18fb      	adds	r3, r7, r3
     3c0:	781a      	ldrb	r2, [r3, #0]
     3c2:	231f      	movs	r3, #31
     3c4:	18fb      	adds	r3, r7, r3
     3c6:	3201      	adds	r2, #1
     3c8:	701a      	strb	r2, [r3, #0]
     3ca:	231f      	movs	r3, #31
     3cc:	18fa      	adds	r2, r7, r3
     3ce:	230f      	movs	r3, #15
     3d0:	18fb      	adds	r3, r7, r3
     3d2:	7812      	ldrb	r2, [r2, #0]
     3d4:	781b      	ldrb	r3, [r3, #0]
     3d6:	429a      	cmp	r2, r3
     3d8:	d38c      	bcc.n	2f4 <aes132c_calculate_crc+0x3c>
			}
		}
	}
	crc[0] = crc_high;
     3da:	687b      	ldr	r3, [r7, #4]
     3dc:	221d      	movs	r2, #29
     3de:	18ba      	adds	r2, r7, r2
     3e0:	7812      	ldrb	r2, [r2, #0]
     3e2:	701a      	strb	r2, [r3, #0]
	crc[1] = crc_low;
     3e4:	687b      	ldr	r3, [r7, #4]
     3e6:	3301      	adds	r3, #1
     3e8:	221e      	movs	r2, #30
     3ea:	18ba      	adds	r2, r7, r2
     3ec:	7812      	ldrb	r2, [r2, #0]
     3ee:	701a      	strb	r2, [r3, #0]
}
     3f0:	46c0      	nop			; (mov r8, r8)
     3f2:	46bd      	mov	sp, r7
     3f4:	b008      	add	sp, #32
     3f6:	bd80      	pop	{r7, pc}

000003f8 <aes132c_reset_io_address>:

/** \brief This function resets the command and response buffer address.
 * \return status of the operation
 */
uint8_t aes132c_reset_io_address(void)
{
     3f8:	b580      	push	{r7, lr}
     3fa:	af00      	add	r7, sp, #0
	return aes132p_write_memory_physical(0, AES132_RESET_ADDR, (void *) 0);
     3fc:	4b04      	ldr	r3, [pc, #16]	; (410 <aes132c_reset_io_address+0x18>)
     3fe:	2200      	movs	r2, #0
     400:	0019      	movs	r1, r3
     402:	2000      	movs	r0, #0
     404:	4b03      	ldr	r3, [pc, #12]	; (414 <aes132c_reset_io_address+0x1c>)
     406:	4798      	blx	r3
     408:	0003      	movs	r3, r0
}
     40a:	0018      	movs	r0, r3
     40c:	46bd      	mov	sp, r7
     40e:	bd80      	pop	{r7, pc}
     410:	0000ffe0 	.word	0x0000ffe0
     414:	00001121 	.word	0x00001121

00000418 <aes132c_resync>:

/** \brief This function resynchronizes communication with the device.
 * \return status of the operation
 */
uint8_t aes132c_resync()
{
     418:	b590      	push	{r4, r7, lr}
     41a:	b083      	sub	sp, #12
     41c:	af00      	add	r7, sp, #0
	uint8_t aes132_lib_return = aes132p_resync_physical();
     41e:	1dfc      	adds	r4, r7, #7
     420:	4b08      	ldr	r3, [pc, #32]	; (444 <aes132c_resync+0x2c>)
     422:	4798      	blx	r3
     424:	0003      	movs	r3, r0
     426:	7023      	strb	r3, [r4, #0]
	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS)
     428:	1dfb      	adds	r3, r7, #7
     42a:	781b      	ldrb	r3, [r3, #0]
     42c:	2b00      	cmp	r3, #0
     42e:	d002      	beq.n	436 <aes132c_resync+0x1e>
		return aes132_lib_return;
     430:	1dfb      	adds	r3, r7, #7
     432:	781b      	ldrb	r3, [r3, #0]
     434:	e002      	b.n	43c <aes132c_resync+0x24>

	return aes132c_reset_io_address();
     436:	4b04      	ldr	r3, [pc, #16]	; (448 <aes132c_resync+0x30>)
     438:	4798      	blx	r3
     43a:	0003      	movs	r3, r0
}
     43c:	0018      	movs	r0, r3
     43e:	46bd      	mov	sp, r7
     440:	b003      	add	sp, #12
     442:	bd90      	pop	{r4, r7, pc}
     444:	000011d5 	.word	0x000011d5
     448:	000003f9 	.word	0x000003f9

0000044c <aes132c_read_device_status_register>:
/** \brief This function reads the device status register.
 * \param[out] device_status_register pointer to byte where the register value is stored
 * \return status of the operation
 */
uint8_t aes132c_read_device_status_register(uint8_t *device_status_register)
{
     44c:	b590      	push	{r4, r7, lr}
     44e:	b085      	sub	sp, #20
     450:	af00      	add	r7, sp, #0
     452:	6078      	str	r0, [r7, #4]
	uint8_t aes132_lib_return;
	uint8_t n_retries = AES132_RETRY_COUNT_ERROR;
     454:	230f      	movs	r3, #15
     456:	18fb      	adds	r3, r7, r3
     458:	2202      	movs	r2, #2
     45a:	701a      	strb	r2, [r3, #0]

	do {
		aes132_lib_return = aes132p_read_memory_physical(1, AES132_STATUS_ADDR, device_status_register);
     45c:	230e      	movs	r3, #14
     45e:	18fc      	adds	r4, r7, r3
     460:	687b      	ldr	r3, [r7, #4]
     462:	490f      	ldr	r1, [pc, #60]	; (4a0 <aes132c_read_device_status_register+0x54>)
     464:	001a      	movs	r2, r3
     466:	2001      	movs	r0, #1
     468:	4b0e      	ldr	r3, [pc, #56]	; (4a4 <aes132c_read_device_status_register+0x58>)
     46a:	4798      	blx	r3
     46c:	0003      	movs	r3, r0
     46e:	7023      	strb	r3, [r4, #0]
	} while ((aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) && (--n_retries > 0));
     470:	230e      	movs	r3, #14
     472:	18fb      	adds	r3, r7, r3
     474:	781b      	ldrb	r3, [r3, #0]
     476:	2b00      	cmp	r3, #0
     478:	d00b      	beq.n	492 <aes132c_read_device_status_register+0x46>
     47a:	230f      	movs	r3, #15
     47c:	18fb      	adds	r3, r7, r3
     47e:	220f      	movs	r2, #15
     480:	18ba      	adds	r2, r7, r2
     482:	7812      	ldrb	r2, [r2, #0]
     484:	3a01      	subs	r2, #1
     486:	701a      	strb	r2, [r3, #0]
     488:	230f      	movs	r3, #15
     48a:	18fb      	adds	r3, r7, r3
     48c:	781b      	ldrb	r3, [r3, #0]
     48e:	2b00      	cmp	r3, #0
     490:	d1e4      	bne.n	45c <aes132c_read_device_status_register+0x10>

	return aes132_lib_return;
     492:	230e      	movs	r3, #14
     494:	18fb      	adds	r3, r7, r3
     496:	781b      	ldrb	r3, [r3, #0]
}
     498:	0018      	movs	r0, r3
     49a:	46bd      	mov	sp, r7
     49c:	b005      	add	sp, #20
     49e:	bd90      	pop	{r4, r7, pc}
     4a0:	0000fff0 	.word	0x0000fff0
     4a4:	00001189 	.word	0x00001189

000004a8 <aes132c_wait_for_status_register_bit>:
 * \param[in] is_set specifies whether to wait until bit is set (#AES132_BIT_SET) or reset (#AES132_BIT_SET)
 * \param[in] n_retries 16-bit number that indicates the number of retries before stopping to poll.
 * \return status of the operation
 */
uint8_t aes132c_wait_for_status_register_bit(uint8_t mask, uint8_t is_set, uint16_t n_retries)
{
     4a8:	b590      	push	{r4, r7, lr}
     4aa:	b085      	sub	sp, #20
     4ac:	af00      	add	r7, sp, #0
     4ae:	0004      	movs	r4, r0
     4b0:	0008      	movs	r0, r1
     4b2:	0011      	movs	r1, r2
     4b4:	1dfb      	adds	r3, r7, #7
     4b6:	1c22      	adds	r2, r4, #0
     4b8:	701a      	strb	r2, [r3, #0]
     4ba:	1dbb      	adds	r3, r7, #6
     4bc:	1c02      	adds	r2, r0, #0
     4be:	701a      	strb	r2, [r3, #0]
     4c0:	1d3b      	adds	r3, r7, #4
     4c2:	1c0a      	adds	r2, r1, #0
     4c4:	801a      	strh	r2, [r3, #0]
	uint8_t aes132_lib_return;
	uint8_t device_status_register;

	do {
		aes132_lib_return = aes132p_read_memory_physical(1, AES132_STATUS_ADDR, &device_status_register);
     4c6:	230f      	movs	r3, #15
     4c8:	18fc      	adds	r4, r7, r3
     4ca:	230e      	movs	r3, #14
     4cc:	18fb      	adds	r3, r7, r3
     4ce:	491c      	ldr	r1, [pc, #112]	; (540 <aes132c_wait_for_status_register_bit+0x98>)
     4d0:	001a      	movs	r2, r3
     4d2:	2001      	movs	r0, #1
     4d4:	4b1b      	ldr	r3, [pc, #108]	; (544 <aes132c_wait_for_status_register_bit+0x9c>)
     4d6:	4798      	blx	r3
     4d8:	0003      	movs	r3, r0
     4da:	7023      	strb	r3, [r4, #0]
		if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS)
     4dc:	230f      	movs	r3, #15
     4de:	18fb      	adds	r3, r7, r3
     4e0:	781b      	ldrb	r3, [r3, #0]
     4e2:	2b00      	cmp	r3, #0
     4e4:	d11f      	bne.n	526 <aes132c_wait_for_status_register_bit+0x7e>
			// The device is busy. Continue polling until "n_retries" is depleted.
			continue;

		if (is_set == AES132_BIT_SET) {
     4e6:	1dbb      	adds	r3, r7, #6
     4e8:	781b      	ldrb	r3, [r3, #0]
     4ea:	2b01      	cmp	r3, #1
     4ec:	d10e      	bne.n	50c <aes132c_wait_for_status_register_bit+0x64>
			// Wait for the mask bit(s) being set.
			if ((device_status_register & mask) == mask)
     4ee:	230e      	movs	r3, #14
     4f0:	18fb      	adds	r3, r7, r3
     4f2:	781b      	ldrb	r3, [r3, #0]
     4f4:	1dfa      	adds	r2, r7, #7
     4f6:	7812      	ldrb	r2, [r2, #0]
     4f8:	4013      	ands	r3, r2
     4fa:	b2db      	uxtb	r3, r3
     4fc:	1dfa      	adds	r2, r7, #7
     4fe:	7812      	ldrb	r2, [r2, #0]
     500:	429a      	cmp	r2, r3
     502:	d111      	bne.n	528 <aes132c_wait_for_status_register_bit+0x80>
				// Mask pattern has been found in device status register. Return success.
				return aes132_lib_return;
     504:	230f      	movs	r3, #15
     506:	18fb      	adds	r3, r7, r3
     508:	781b      	ldrb	r3, [r3, #0]
     50a:	e015      	b.n	538 <aes132c_wait_for_status_register_bit+0x90>

		} else {
			// Wait for the mask bit(s) being cleared.
			if ((device_status_register & mask) == 0)
     50c:	230e      	movs	r3, #14
     50e:	18fb      	adds	r3, r7, r3
     510:	781b      	ldrb	r3, [r3, #0]
     512:	1dfa      	adds	r2, r7, #7
     514:	7812      	ldrb	r2, [r2, #0]
     516:	4013      	ands	r3, r2
     518:	b2db      	uxtb	r3, r3
     51a:	2b00      	cmp	r3, #0
     51c:	d104      	bne.n	528 <aes132c_wait_for_status_register_bit+0x80>
				// Mask pattern has been found in device status register. Return success.
				return aes132_lib_return;
     51e:	230f      	movs	r3, #15
     520:	18fb      	adds	r3, r7, r3
     522:	781b      	ldrb	r3, [r3, #0]
     524:	e008      	b.n	538 <aes132c_wait_for_status_register_bit+0x90>
			continue;
     526:	46c0      	nop			; (mov r8, r8)
		}

		// Device is busy, or "mask" pattern does not yet match the device status register value.
		// Continue polling.
	} while (n_retries-- > 0);
     528:	1d3b      	adds	r3, r7, #4
     52a:	881b      	ldrh	r3, [r3, #0]
     52c:	1d3a      	adds	r2, r7, #4
     52e:	1e59      	subs	r1, r3, #1
     530:	8011      	strh	r1, [r2, #0]
     532:	2b00      	cmp	r3, #0
     534:	d1c7      	bne.n	4c6 <aes132c_wait_for_status_register_bit+0x1e>

	// The mask pattern was not found in the device status register after "n_retries" polling
	// iterations. Return timeout error.
	return AES132_FUNCTION_RETCODE_TIMEOUT;
     536:	23e7      	movs	r3, #231	; 0xe7
}
     538:	0018      	movs	r0, r3
     53a:	46bd      	mov	sp, r7
     53c:	b005      	add	sp, #20
     53e:	bd90      	pop	{r4, r7, pc}
     540:	0000fff0 	.word	0x0000fff0
     544:	00001189 	.word	0x00001189

00000548 <aes132c_wait_for_device_ready>:

/** \brief This function waits for the Write-In-Progress (WIP) bit in the device status register to be cleared.
 * \return status of the operation
 */
uint8_t aes132c_wait_for_device_ready(void)
{
     548:	b580      	push	{r7, lr}
     54a:	af00      	add	r7, sp, #0
	return aes132c_wait_for_status_register_bit(AES132_WIP_BIT, AES132_BIT_CLEARED, AES132_RETRY_COUNT_DEVICE_READY);
     54c:	2396      	movs	r3, #150	; 0x96
     54e:	011b      	lsls	r3, r3, #4
     550:	001a      	movs	r2, r3
     552:	2100      	movs	r1, #0
     554:	2001      	movs	r0, #1
     556:	4b03      	ldr	r3, [pc, #12]	; (564 <aes132c_wait_for_device_ready+0x1c>)
     558:	4798      	blx	r3
     55a:	0003      	movs	r3, r0
}
     55c:	0018      	movs	r0, r3
     55e:	46bd      	mov	sp, r7
     560:	bd80      	pop	{r7, pc}
     562:	46c0      	nop			; (mov r8, r8)
     564:	000004a9 	.word	0x000004a9

00000568 <aes132c_wait_for_response_ready>:

/** \brief This function waits for the Response-Ready (RRDY) bit in the device status register to be set.
 * \ return status of the operation
 */
uint8_t aes132c_wait_for_response_ready(void)
{
     568:	b580      	push	{r7, lr}
     56a:	af00      	add	r7, sp, #0
	return aes132c_wait_for_status_register_bit(AES132_RESPONSE_READY_BIT, AES132_BIT_SET, AES132_RETRY_COUNT_RESPONSE_READY);
     56c:	4b04      	ldr	r3, [pc, #16]	; (580 <aes132c_wait_for_response_ready+0x18>)
     56e:	001a      	movs	r2, r3
     570:	2101      	movs	r1, #1
     572:	2040      	movs	r0, #64	; 0x40
     574:	4b03      	ldr	r3, [pc, #12]	; (584 <aes132c_wait_for_response_ready+0x1c>)
     576:	4798      	blx	r3
     578:	0003      	movs	r3, r0
}
     57a:	0018      	movs	r0, r3
     57c:	46bd      	mov	sp, r7
     57e:	bd80      	pop	{r7, pc}
     580:	000006fc 	.word	0x000006fc
     584:	000004a9 	.word	0x000004a9

00000588 <aes132c_access_memory>:
 * \param[in, out] data pointer to tx or rx data
 * \param[in] read flag indicating whether to read (#AES132_READ) or write (#AES132_WRITE)
 * \return status of the operation or response return code
 * */
uint8_t aes132c_access_memory(uint8_t count, uint16_t word_address, uint8_t *data, uint8_t read)
{
     588:	b590      	push	{r4, r7, lr}
     58a:	b085      	sub	sp, #20
     58c:	af00      	add	r7, sp, #0
     58e:	0004      	movs	r4, r0
     590:	0008      	movs	r0, r1
     592:	603a      	str	r2, [r7, #0]
     594:	0019      	movs	r1, r3
     596:	1dfb      	adds	r3, r7, #7
     598:	1c22      	adds	r2, r4, #0
     59a:	701a      	strb	r2, [r3, #0]
     59c:	1d3b      	adds	r3, r7, #4
     59e:	1c02      	adds	r2, r0, #0
     5a0:	801a      	strh	r2, [r3, #0]
     5a2:	1dbb      	adds	r3, r7, #6
     5a4:	1c0a      	adds	r2, r1, #0
     5a6:	701a      	strb	r2, [r3, #0]

	// inner while loop
	uint8_t n_retries_memory_access;

	// outer while loop that resynchronizes communication if inner while loop got exhausted / timed out
	uint8_t n_retries_resync = AES132_RETRY_COUNT_RESYNC;
     5a8:	230d      	movs	r3, #13
     5aa:	18fb      	adds	r3, r7, r3
     5ac:	2202      	movs	r2, #2
     5ae:	701a      	strb	r2, [r3, #0]

	// used to hold the return code after writing to memory (word address < AES132_IO_ADDR)
	uint8_t response_buffer[AES132_RESPONSE_SIZE_MIN];

	do {
		n_retries_memory_access = AES132_RETRY_COUNT_ERROR;
     5b0:	230e      	movs	r3, #14
     5b2:	18fb      	adds	r3, r7, r3
     5b4:	2202      	movs	r2, #2
     5b6:	701a      	strb	r2, [r3, #0]

		do {
			aes132_lib_return = aes132c_wait_for_device_ready();
     5b8:	230f      	movs	r3, #15
     5ba:	18fc      	adds	r4, r7, r3
     5bc:	4b41      	ldr	r3, [pc, #260]	; (6c4 <aes132c_access_memory+0x13c>)
     5be:	4798      	blx	r3
     5c0:	0003      	movs	r3, r0
     5c2:	7023      	strb	r3, [r4, #0]
			if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS)
     5c4:	230f      	movs	r3, #15
     5c6:	18fb      	adds	r3, r7, r3
     5c8:	781b      	ldrb	r3, [r3, #0]
     5ca:	2b00      	cmp	r3, #0
     5cc:	d159      	bne.n	682 <aes132c_access_memory+0xfa>
				// We lost communication. Re-synchronize.
				break;

			if (read == 0) {
     5ce:	1dbb      	adds	r3, r7, #6
     5d0:	781b      	ldrb	r3, [r3, #0]
     5d2:	2b00      	cmp	r3, #0
     5d4:	d132      	bne.n	63c <aes132c_access_memory+0xb4>
				// Write to the device.
				aes132_lib_return = aes132p_write_memory_physical(count, word_address, data);
     5d6:	230f      	movs	r3, #15
     5d8:	18fc      	adds	r4, r7, r3
     5da:	683a      	ldr	r2, [r7, #0]
     5dc:	1d3b      	adds	r3, r7, #4
     5de:	8819      	ldrh	r1, [r3, #0]
     5e0:	1dfb      	adds	r3, r7, #7
     5e2:	781b      	ldrb	r3, [r3, #0]
     5e4:	0018      	movs	r0, r3
     5e6:	4b38      	ldr	r3, [pc, #224]	; (6c8 <aes132c_access_memory+0x140>)
     5e8:	4798      	blx	r3
     5ea:	0003      	movs	r3, r0
     5ec:	7023      	strb	r3, [r4, #0]
				if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS)
     5ee:	230f      	movs	r3, #15
     5f0:	18fb      	adds	r3, r7, r3
     5f2:	781b      	ldrb	r3, [r3, #0]
     5f4:	2b00      	cmp	r3, #0
     5f6:	d136      	bne.n	666 <aes132c_access_memory+0xde>
					// Communication failed. Retry.
					continue;

				// Communication succeeded.
				if	(word_address >= AES132_IO_ADDR)
     5f8:	1d3b      	adds	r3, r7, #4
     5fa:	881b      	ldrh	r3, [r3, #0]
     5fc:	4a33      	ldr	r2, [pc, #204]	; (6cc <aes132c_access_memory+0x144>)
     5fe:	4293      	cmp	r3, r2
     600:	d903      	bls.n	60a <aes132c_access_memory+0x82>
					// Return success and do not read response buffer if we wrote to the I/O buffer
					// or to the address used to reset the I/O buffer index.
					return aes132_lib_return;
     602:	230f      	movs	r3, #15
     604:	18fb      	adds	r3, r7, r3
     606:	781b      	ldrb	r3, [r3, #0]
     608:	e057      	b.n	6ba <aes132c_access_memory+0x132>

				// Read response buffer when writing to device memory to check for write success.
				aes132c_wait_for_response_ready();
     60a:	4b31      	ldr	r3, [pc, #196]	; (6d0 <aes132c_access_memory+0x148>)
     60c:	4798      	blx	r3

				aes132_lib_return = aes132c_receive_response(sizeof(response_buffer), response_buffer);
     60e:	230f      	movs	r3, #15
     610:	18fc      	adds	r4, r7, r3
     612:	2308      	movs	r3, #8
     614:	18fb      	adds	r3, r7, r3
     616:	0019      	movs	r1, r3
     618:	2004      	movs	r0, #4
     61a:	4b2e      	ldr	r3, [pc, #184]	; (6d4 <aes132c_access_memory+0x14c>)
     61c:	4798      	blx	r3
     61e:	0003      	movs	r3, r0
     620:	7023      	strb	r3, [r4, #0]
				if (aes132_lib_return == AES132_FUNCTION_RETCODE_SUCCESS)
     622:	230f      	movs	r3, #15
     624:	18fb      	adds	r3, r7, r3
     626:	781b      	ldrb	r3, [r3, #0]
     628:	2b00      	cmp	r3, #0
     62a:	d103      	bne.n	634 <aes132c_access_memory+0xac>
					// Reading the return code from the I/O buffer succeeded. Return the code byte.
					return response_buffer[AES132_RESPONSE_INDEX_RETURN_CODE];
     62c:	2308      	movs	r3, #8
     62e:	18fb      	adds	r3, r7, r3
     630:	785b      	ldrb	r3, [r3, #1]
     632:	e042      	b.n	6ba <aes132c_access_memory+0x132>
				else
					// Reading the return code from the I/O buffer failed. Return the error code that
					// aes132c_receive_response returned.
					return aes132_lib_return;
     634:	230f      	movs	r3, #15
     636:	18fb      	adds	r3, r7, r3
     638:	781b      	ldrb	r3, [r3, #0]
     63a:	e03e      	b.n	6ba <aes132c_access_memory+0x132>
			}
			else {
				// Read from the device.
				aes132_lib_return = aes132p_read_memory_physical(count, word_address, data);
     63c:	230f      	movs	r3, #15
     63e:	18fc      	adds	r4, r7, r3
     640:	683a      	ldr	r2, [r7, #0]
     642:	1d3b      	adds	r3, r7, #4
     644:	8819      	ldrh	r1, [r3, #0]
     646:	1dfb      	adds	r3, r7, #7
     648:	781b      	ldrb	r3, [r3, #0]
     64a:	0018      	movs	r0, r3
     64c:	4b22      	ldr	r3, [pc, #136]	; (6d8 <aes132c_access_memory+0x150>)
     64e:	4798      	blx	r3
     650:	0003      	movs	r3, r0
     652:	7023      	strb	r3, [r4, #0]
				if (aes132_lib_return == AES132_FUNCTION_RETCODE_SUCCESS)
     654:	230f      	movs	r3, #15
     656:	18fb      	adds	r3, r7, r3
     658:	781b      	ldrb	r3, [r3, #0]
     65a:	2b00      	cmp	r3, #0
     65c:	d104      	bne.n	668 <aes132c_access_memory+0xe0>
					return aes132_lib_return;
     65e:	230f      	movs	r3, #15
     660:	18fb      	adds	r3, r7, r3
     662:	781b      	ldrb	r3, [r3, #0]
     664:	e029      	b.n	6ba <aes132c_access_memory+0x132>
					continue;
     666:	46c0      	nop			; (mov r8, r8)
			}
			// Accessing the device failed. Retry until "n_retries_memory_access" is depleted.
		} while (--n_retries_memory_access > 0);
     668:	230e      	movs	r3, #14
     66a:	18fb      	adds	r3, r7, r3
     66c:	220e      	movs	r2, #14
     66e:	18ba      	adds	r2, r7, r2
     670:	7812      	ldrb	r2, [r2, #0]
     672:	3a01      	subs	r2, #1
     674:	701a      	strb	r2, [r3, #0]
     676:	230e      	movs	r3, #14
     678:	18fb      	adds	r3, r7, r3
     67a:	781b      	ldrb	r3, [r3, #0]
     67c:	2b00      	cmp	r3, #0
     67e:	d19b      	bne.n	5b8 <aes132c_access_memory+0x30>
     680:	e000      	b.n	684 <aes132c_access_memory+0xfc>
				break;
     682:	46c0      	nop			; (mov r8, r8)

		// We failed to communicate with the device even after retrying.
		if (--n_retries_resync == 0)
     684:	230d      	movs	r3, #13
     686:	18fb      	adds	r3, r7, r3
     688:	220d      	movs	r2, #13
     68a:	18ba      	adds	r2, r7, r2
     68c:	7812      	ldrb	r2, [r2, #0]
     68e:	3a01      	subs	r2, #1
     690:	701a      	strb	r2, [r3, #0]
     692:	230d      	movs	r3, #13
     694:	18fb      	adds	r3, r7, r3
     696:	781b      	ldrb	r3, [r3, #0]
     698:	2b00      	cmp	r3, #0
     69a:	d103      	bne.n	6a4 <aes132c_access_memory+0x11c>
			// We failed to communicate with the device even after re-synchronizing. Return.
			return aes132_lib_return;
     69c:	230f      	movs	r3, #15
     69e:	18fb      	adds	r3, r7, r3
     6a0:	781b      	ldrb	r3, [r3, #0]
     6a2:	e00a      	b.n	6ba <aes132c_access_memory+0x132>

		// Re-synchronize communication.
		// Do not override return value from previous call to communication function.
		(void) aes132c_resync();
     6a4:	4b0d      	ldr	r3, [pc, #52]	; (6dc <aes132c_access_memory+0x154>)
     6a6:	4798      	blx	r3

		// Communication failed. Retry accessing device after having re-synchronized communication.
	} while (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS);
     6a8:	230f      	movs	r3, #15
     6aa:	18fb      	adds	r3, r7, r3
     6ac:	781b      	ldrb	r3, [r3, #0]
     6ae:	2b00      	cmp	r3, #0
     6b0:	d000      	beq.n	6b4 <aes132c_access_memory+0x12c>
     6b2:	e77d      	b.n	5b0 <aes132c_access_memory+0x28>

	return aes132_lib_return;
     6b4:	230f      	movs	r3, #15
     6b6:	18fb      	adds	r3, r7, r3
     6b8:	781b      	ldrb	r3, [r3, #0]
}
     6ba:	0018      	movs	r0, r3
     6bc:	46bd      	mov	sp, r7
     6be:	b005      	add	sp, #20
     6c0:	bd90      	pop	{r4, r7, pc}
     6c2:	46c0      	nop			; (mov r8, r8)
     6c4:	00000549 	.word	0x00000549
     6c8:	00001121 	.word	0x00001121
     6cc:	0000fdff 	.word	0x0000fdff
     6d0:	00000569 	.word	0x00000569
     6d4:	000007f1 	.word	0x000007f1
     6d8:	00001189 	.word	0x00001189
     6dc:	00000419 	.word	0x00000419

000006e0 <aes132c_send_command>:
 * \param[in] command pointer to command buffer
 * \param[in] options flags for communication behavior
 * \return status of the operation
 */
uint8_t aes132c_send_command(uint8_t *command, uint8_t options)
{
     6e0:	b5b0      	push	{r4, r5, r7, lr}
     6e2:	b084      	sub	sp, #16
     6e4:	af00      	add	r7, sp, #0
     6e6:	6078      	str	r0, [r7, #4]
     6e8:	000a      	movs	r2, r1
     6ea:	1cfb      	adds	r3, r7, #3
     6ec:	701a      	strb	r2, [r3, #0]
	uint8_t aes132_lib_return;
	uint8_t n_retries = AES132_RETRY_COUNT_ERROR;
     6ee:	230e      	movs	r3, #14
     6f0:	18fb      	adds	r3, r7, r3
     6f2:	2202      	movs	r2, #2
     6f4:	701a      	strb	r2, [r3, #0]
	uint8_t device_status_register;
	uint8_t count = command[AES132_COMMAND_INDEX_COUNT];
     6f6:	230d      	movs	r3, #13
     6f8:	18fb      	adds	r3, r7, r3
     6fa:	687a      	ldr	r2, [r7, #4]
     6fc:	7812      	ldrb	r2, [r2, #0]
     6fe:	701a      	strb	r2, [r3, #0]

	if ((options & AES132_OPTION_NO_APPEND_CRC) == 0)
     700:	1cfb      	adds	r3, r7, #3
     702:	781b      	ldrb	r3, [r3, #0]
     704:	2201      	movs	r2, #1
     706:	4013      	ands	r3, r2
     708:	d10e      	bne.n	728 <aes132c_send_command+0x48>
		// Append two-byte CRC to command.
		aes132c_calculate_crc(count - AES132_CRC_SIZE, command, &command[count - AES132_CRC_SIZE]);
     70a:	230d      	movs	r3, #13
     70c:	18fb      	adds	r3, r7, r3
     70e:	781b      	ldrb	r3, [r3, #0]
     710:	3b02      	subs	r3, #2
     712:	b2d8      	uxtb	r0, r3
     714:	230d      	movs	r3, #13
     716:	18fb      	adds	r3, r7, r3
     718:	781b      	ldrb	r3, [r3, #0]
     71a:	3b02      	subs	r3, #2
     71c:	687a      	ldr	r2, [r7, #4]
     71e:	18d2      	adds	r2, r2, r3
     720:	687b      	ldr	r3, [r7, #4]
     722:	0019      	movs	r1, r3
     724:	4b2e      	ldr	r3, [pc, #184]	; (7e0 <aes132c_send_command+0x100>)
     726:	4798      	blx	r3

	do {
		aes132_lib_return = aes132c_access_memory(count, AES132_IO_ADDR, command,  AES132_WRITE);
     728:	230f      	movs	r3, #15
     72a:	18fc      	adds	r4, r7, r3
     72c:	687a      	ldr	r2, [r7, #4]
     72e:	23fe      	movs	r3, #254	; 0xfe
     730:	0219      	lsls	r1, r3, #8
     732:	230d      	movs	r3, #13
     734:	18fb      	adds	r3, r7, r3
     736:	7818      	ldrb	r0, [r3, #0]
     738:	2300      	movs	r3, #0
     73a:	4d2a      	ldr	r5, [pc, #168]	; (7e4 <aes132c_send_command+0x104>)
     73c:	47a8      	blx	r5
     73e:	0003      	movs	r3, r0
     740:	7023      	strb	r3, [r4, #0]
		if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS)
     742:	230f      	movs	r3, #15
     744:	18fb      	adds	r3, r7, r3
     746:	781b      	ldrb	r3, [r3, #0]
     748:	2b00      	cmp	r3, #0
     74a:	d12f      	bne.n	7ac <aes132c_send_command+0xcc>
			// Writing to the I/O buffer failed. Retry.
			continue;

		if ((options & AES132_OPTION_NO_STATUS_READ) != 0)
     74c:	1cfb      	adds	r3, r7, #3
     74e:	781b      	ldrb	r3, [r3, #0]
     750:	2202      	movs	r2, #2
     752:	4013      	ands	r3, r2
     754:	d003      	beq.n	75e <aes132c_send_command+0x7e>
			// We don't read device status register when sending a Sleep command.
			return aes132_lib_return;
     756:	230f      	movs	r3, #15
     758:	18fb      	adds	r3, r7, r3
     75a:	781b      	ldrb	r3, [r3, #0]
     75c:	e03b      	b.n	7d6 <aes132c_send_command+0xf6>

		// Try to read the device status register. If it fails with an I2C nack of the I2C write address,
		// we know that the device is busy.
		aes132_lib_return = aes132c_read_device_status_register(&device_status_register);
     75e:	230f      	movs	r3, #15
     760:	18fc      	adds	r4, r7, r3
     762:	230c      	movs	r3, #12
     764:	18fb      	adds	r3, r7, r3
     766:	0018      	movs	r0, r3
     768:	4b1f      	ldr	r3, [pc, #124]	; (7e8 <aes132c_send_command+0x108>)
     76a:	4798      	blx	r3
     76c:	0003      	movs	r3, r0
     76e:	7023      	strb	r3, [r4, #0]
		//aes132_lib_return = aes132p_read_memory_physical(1, AES132_STATUS_ADDR, &device_status_register);
		if (aes132_lib_return == AES132_FUNCTION_RETCODE_SUCCESS) {
     770:	230f      	movs	r3, #15
     772:	18fb      	adds	r3, r7, r3
     774:	781b      	ldrb	r3, [r3, #0]
     776:	2b00      	cmp	r3, #0
     778:	d10b      	bne.n	792 <aes132c_send_command+0xb2>
			// We were able to read the device status register. Check the CRC bit.
			if ((device_status_register & AES132_CRC_ERROR_BIT) != 0)
     77a:	230c      	movs	r3, #12
     77c:	18fb      	adds	r3, r7, r3
     77e:	781b      	ldrb	r3, [r3, #0]
     780:	001a      	movs	r2, r3
     782:	2310      	movs	r3, #16
     784:	4013      	ands	r3, r2
     786:	d012      	beq.n	7ae <aes132c_send_command+0xce>
				// The device has calculated a not-matching CRC, which indicates a flawed communication.
				// Retry sending the command.
				aes132_lib_return = AES132_FUNCTION_RETCODE_BAD_CRC_TX;
     788:	230f      	movs	r3, #15
     78a:	18fb      	adds	r3, r7, r3
     78c:	22d4      	movs	r2, #212	; 0xd4
     78e:	701a      	strb	r2, [r3, #0]
     790:	e00d      	b.n	7ae <aes132c_send_command+0xce>
		}
		else if (aes132_lib_return == AES132_FUNCTION_RETCODE_COMM_FAIL){
     792:	230f      	movs	r3, #15
     794:	18fb      	adds	r3, r7, r3
     796:	781b      	ldrb	r3, [r3, #0]
     798:	2bf0      	cmp	r3, #240	; 0xf0
     79a:	d101      	bne.n	7a0 <aes132c_send_command+0xc0>
			// This code block applies to I2C only. Receiving a nack to a I2C address write
			// indicates that the device is busy executing the command. We therefore return success.
			return AES132_FUNCTION_RETCODE_SUCCESS;
     79c:	2300      	movs	r3, #0
     79e:	e01a      	b.n	7d6 <aes132c_send_command+0xf6>

		// In case of read-device-status-register failure, we do not send the command again but only
		// re-synchronize, because we do not want certain commands being repeated, e.g. the Counter command.
		}else {
			// Do not override the return value from the call to aes132p_read_memory_physical.
			(void) aes132c_resync();
     7a0:	4b12      	ldr	r3, [pc, #72]	; (7ec <aes132c_send_command+0x10c>)
     7a2:	4798      	blx	r3
			return aes132_lib_return;
     7a4:	230f      	movs	r3, #15
     7a6:	18fb      	adds	r3, r7, r3
     7a8:	781b      	ldrb	r3, [r3, #0]
     7aa:	e014      	b.n	7d6 <aes132c_send_command+0xf6>
			continue;
     7ac:	46c0      	nop			; (mov r8, r8)
		}

		// Retry sending the command if an error occurred sending the command, or the device status register
		// indicates a CRC error after having sent the command.
	} while ((aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) && (--n_retries > 0));
     7ae:	230f      	movs	r3, #15
     7b0:	18fb      	adds	r3, r7, r3
     7b2:	781b      	ldrb	r3, [r3, #0]
     7b4:	2b00      	cmp	r3, #0
     7b6:	d00b      	beq.n	7d0 <aes132c_send_command+0xf0>
     7b8:	230e      	movs	r3, #14
     7ba:	18fb      	adds	r3, r7, r3
     7bc:	220e      	movs	r2, #14
     7be:	18ba      	adds	r2, r7, r2
     7c0:	7812      	ldrb	r2, [r2, #0]
     7c2:	3a01      	subs	r2, #1
     7c4:	701a      	strb	r2, [r3, #0]
     7c6:	230e      	movs	r3, #14
     7c8:	18fb      	adds	r3, r7, r3
     7ca:	781b      	ldrb	r3, [r3, #0]
     7cc:	2b00      	cmp	r3, #0
     7ce:	d1ab      	bne.n	728 <aes132c_send_command+0x48>

	// We did not succeed sending a command. Return the error from aes132p_read_memory_physical or
	// AES132_FUNCTION_RETCODE_BAD_CRC_TX.
	return aes132_lib_return;
     7d0:	230f      	movs	r3, #15
     7d2:	18fb      	adds	r3, r7, r3
     7d4:	781b      	ldrb	r3, [r3, #0]
}
     7d6:	0018      	movs	r0, r3
     7d8:	46bd      	mov	sp, r7
     7da:	b004      	add	sp, #16
     7dc:	bdb0      	pop	{r4, r5, r7, pc}
     7de:	46c0      	nop			; (mov r8, r8)
     7e0:	000002b9 	.word	0x000002b9
     7e4:	00000589 	.word	0x00000589
     7e8:	0000044d 	.word	0x0000044d
     7ec:	00000419 	.word	0x00000419

000007f0 <aes132c_receive_response>:
 * \param[in] size number of bytes to retrieve (<= response buffer size allocated by caller)
 * \param[out] response pointer to retrieved response
 * \return status of the operation
 */
uint8_t aes132c_receive_response(uint8_t size, uint8_t *response)
{
     7f0:	b590      	push	{r4, r7, lr}
     7f2:	b085      	sub	sp, #20
     7f4:	af00      	add	r7, sp, #0
     7f6:	0002      	movs	r2, r0
     7f8:	6039      	str	r1, [r7, #0]
     7fa:	1dfb      	adds	r3, r7, #7
     7fc:	701a      	strb	r2, [r3, #0]
	uint8_t aes132_lib_return;
	uint8_t n_retries = AES132_RETRY_COUNT_ERROR;
     7fe:	230e      	movs	r3, #14
     800:	18fb      	adds	r3, r7, r3
     802:	2202      	movs	r2, #2
     804:	701a      	strb	r2, [r3, #0]
	uint8_t crc[AES132_CRC_SIZE];
	uint8_t crc_index;
	uint8_t count_byte;

	do {
		aes132_lib_return = aes132c_wait_for_response_ready();
     806:	230f      	movs	r3, #15
     808:	18fc      	adds	r4, r7, r3
     80a:	4b52      	ldr	r3, [pc, #328]	; (954 <aes132c_receive_response+0x164>)
     80c:	4798      	blx	r3
     80e:	0003      	movs	r3, r0
     810:	7023      	strb	r3, [r4, #0]
		if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
     812:	230f      	movs	r3, #15
     814:	18fb      	adds	r3, r7, r3
     816:	781b      	ldrb	r3, [r3, #0]
     818:	2b00      	cmp	r3, #0
     81a:	d002      	beq.n	822 <aes132c_receive_response+0x32>
			// Waiting for the Response-Ready bit timed out. We might have lost communication.
			// Re-synchronize and retry.
			// Do not override the return value from the call to aes132c_wait_for_response_ready.
			(void) aes132c_resync();
     81c:	4b4e      	ldr	r3, [pc, #312]	; (958 <aes132c_receive_response+0x168>)
     81e:	4798      	blx	r3
			continue;
     820:	e07e      	b.n	920 <aes132c_receive_response+0x130>
		}

		// Read count byte from response buffer.
		aes132_lib_return = aes132p_read_memory_physical(1, AES132_IO_ADDR, &response[AES132_COMMAND_INDEX_COUNT]);
     822:	230f      	movs	r3, #15
     824:	18fc      	adds	r4, r7, r3
     826:	683a      	ldr	r2, [r7, #0]
     828:	23fe      	movs	r3, #254	; 0xfe
     82a:	021b      	lsls	r3, r3, #8
     82c:	0019      	movs	r1, r3
     82e:	2001      	movs	r0, #1
     830:	4b4a      	ldr	r3, [pc, #296]	; (95c <aes132c_receive_response+0x16c>)
     832:	4798      	blx	r3
     834:	0003      	movs	r3, r0
     836:	7023      	strb	r3, [r4, #0]
		if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
     838:	230f      	movs	r3, #15
     83a:	18fb      	adds	r3, r7, r3
     83c:	781b      	ldrb	r3, [r3, #0]
     83e:	2b00      	cmp	r3, #0
     840:	d002      	beq.n	848 <aes132c_receive_response+0x58>
			// Reading the count byte failed. We might have lost communication.
			// Re-synchronize and retry.
			// Do not override the return value from the call to aes132p_read_memory_physical.
			(void) aes132c_resync();
     842:	4b45      	ldr	r3, [pc, #276]	; (958 <aes132c_receive_response+0x168>)
     844:	4798      	blx	r3
			continue;
     846:	e06b      	b.n	920 <aes132c_receive_response+0x130>
		}

		count_byte = response[AES132_RESPONSE_INDEX_COUNT];
     848:	230d      	movs	r3, #13
     84a:	18fb      	adds	r3, r7, r3
     84c:	683a      	ldr	r2, [r7, #0]
     84e:	7812      	ldrb	r2, [r2, #0]
     850:	701a      	strb	r2, [r3, #0]
		if (count_byte > size) {
     852:	230d      	movs	r3, #13
     854:	18fa      	adds	r2, r7, r3
     856:	1dfb      	adds	r3, r7, #7
     858:	7812      	ldrb	r2, [r2, #0]
     85a:	781b      	ldrb	r3, [r3, #0]
     85c:	429a      	cmp	r2, r3
     85e:	d906      	bls.n	86e <aes132c_receive_response+0x7e>
			// The buffer provided by the caller is not big enough to store the entire response,
			// or the count value got corrupted due to a bad communication channel.
			// Re-synchronize and retry.
			aes132_lib_return = AES132_FUNCTION_RETCODE_SIZE_TOO_SMALL;
     860:	230f      	movs	r3, #15
     862:	18fb      	adds	r3, r7, r3
     864:	22a2      	movs	r2, #162	; 0xa2
     866:	701a      	strb	r2, [r3, #0]
			// Do not override aes132_lib_return.
			(void) aes132c_resync();
     868:	4b3b      	ldr	r3, [pc, #236]	; (958 <aes132c_receive_response+0x168>)
     86a:	4798      	blx	r3
			continue;
     86c:	e058      	b.n	920 <aes132c_receive_response+0x130>
		}

		if ((count_byte < AES132_RESPONSE_SIZE_MIN) || (count_byte > AES132_RESPONSE_SIZE_MAX)) {
     86e:	230d      	movs	r3, #13
     870:	18fb      	adds	r3, r7, r3
     872:	781b      	ldrb	r3, [r3, #0]
     874:	2b03      	cmp	r3, #3
     876:	d904      	bls.n	882 <aes132c_receive_response+0x92>
     878:	230d      	movs	r3, #13
     87a:	18fb      	adds	r3, r7, r3
     87c:	781b      	ldrb	r3, [r3, #0]
     87e:	2b34      	cmp	r3, #52	; 0x34
     880:	d906      	bls.n	890 <aes132c_receive_response+0xa0>
			// A response has to be between #AES132_RESPONSE_SIZE_MIN and #AES132_RESPONSE_SIZE_MAX bytes long to be valid.
			// Re-synchronize and retry.
			aes132_lib_return = AES132_FUNCTION_RETCODE_COUNT_INVALID;
     882:	230f      	movs	r3, #15
     884:	18fb      	adds	r3, r7, r3
     886:	22e4      	movs	r2, #228	; 0xe4
     888:	701a      	strb	r2, [r3, #0]
			// Do not override aes132_lib_return.
			(void) aes132c_resync();
     88a:	4b33      	ldr	r3, [pc, #204]	; (958 <aes132c_receive_response+0x168>)
     88c:	4798      	blx	r3
			continue;
     88e:	e047      	b.n	920 <aes132c_receive_response+0x130>
		}

		// Read remainder of response.
		aes132_lib_return = aes132p_read_memory_physical(count_byte - 1, AES132_IO_ADDR, &response[AES132_RESPONSE_INDEX_RETURN_CODE]);
     890:	230d      	movs	r3, #13
     892:	18fb      	adds	r3, r7, r3
     894:	781b      	ldrb	r3, [r3, #0]
     896:	3b01      	subs	r3, #1
     898:	b2d8      	uxtb	r0, r3
     89a:	683b      	ldr	r3, [r7, #0]
     89c:	1c5a      	adds	r2, r3, #1
     89e:	230f      	movs	r3, #15
     8a0:	18fc      	adds	r4, r7, r3
     8a2:	23fe      	movs	r3, #254	; 0xfe
     8a4:	021b      	lsls	r3, r3, #8
     8a6:	0019      	movs	r1, r3
     8a8:	4b2c      	ldr	r3, [pc, #176]	; (95c <aes132c_receive_response+0x16c>)
     8aa:	4798      	blx	r3
     8ac:	0003      	movs	r3, r0
     8ae:	7023      	strb	r3, [r4, #0]
		if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
     8b0:	230f      	movs	r3, #15
     8b2:	18fb      	adds	r3, r7, r3
     8b4:	781b      	ldrb	r3, [r3, #0]
     8b6:	2b00      	cmp	r3, #0
     8b8:	d002      	beq.n	8c0 <aes132c_receive_response+0xd0>
			// Reading the remainder of the response failed. We might have lost communication.
			// Re-synchronize and retry.
			// Do not override the return value from the call to aes132p_read_memory_physical.
			(void) aes132c_resync();
     8ba:	4b27      	ldr	r3, [pc, #156]	; (958 <aes132c_receive_response+0x168>)
     8bc:	4798      	blx	r3
			continue;
     8be:	e02f      	b.n	920 <aes132c_receive_response+0x130>
		}

		// Check CRC.
		crc_index = count_byte - AES132_CRC_SIZE;
     8c0:	230c      	movs	r3, #12
     8c2:	18fb      	adds	r3, r7, r3
     8c4:	220d      	movs	r2, #13
     8c6:	18ba      	adds	r2, r7, r2
     8c8:	7812      	ldrb	r2, [r2, #0]
     8ca:	3a02      	subs	r2, #2
     8cc:	701a      	strb	r2, [r3, #0]
		aes132c_calculate_crc(crc_index, response, crc);
     8ce:	2308      	movs	r3, #8
     8d0:	18fa      	adds	r2, r7, r3
     8d2:	6839      	ldr	r1, [r7, #0]
     8d4:	230c      	movs	r3, #12
     8d6:	18fb      	adds	r3, r7, r3
     8d8:	781b      	ldrb	r3, [r3, #0]
     8da:	0018      	movs	r0, r3
     8dc:	4b20      	ldr	r3, [pc, #128]	; (960 <aes132c_receive_response+0x170>)
     8de:	4798      	blx	r3
		if ((crc[0] == response[crc_index]) && (crc[1] == response[crc_index + 1]))
     8e0:	2308      	movs	r3, #8
     8e2:	18fb      	adds	r3, r7, r3
     8e4:	781a      	ldrb	r2, [r3, #0]
     8e6:	230c      	movs	r3, #12
     8e8:	18fb      	adds	r3, r7, r3
     8ea:	781b      	ldrb	r3, [r3, #0]
     8ec:	6839      	ldr	r1, [r7, #0]
     8ee:	18cb      	adds	r3, r1, r3
     8f0:	781b      	ldrb	r3, [r3, #0]
     8f2:	429a      	cmp	r2, r3
     8f4:	d10e      	bne.n	914 <aes132c_receive_response+0x124>
     8f6:	2308      	movs	r3, #8
     8f8:	18fb      	adds	r3, r7, r3
     8fa:	785a      	ldrb	r2, [r3, #1]
     8fc:	230c      	movs	r3, #12
     8fe:	18fb      	adds	r3, r7, r3
     900:	781b      	ldrb	r3, [r3, #0]
     902:	3301      	adds	r3, #1
     904:	6839      	ldr	r1, [r7, #0]
     906:	18cb      	adds	r3, r1, r3
     908:	781b      	ldrb	r3, [r3, #0]
     90a:	429a      	cmp	r2, r3
     90c:	d102      	bne.n	914 <aes132c_receive_response+0x124>
			// We received a consistent response packet. Return the response return code.
			return response[AES132_RESPONSE_INDEX_RETURN_CODE];
     90e:	683b      	ldr	r3, [r7, #0]
     910:	785b      	ldrb	r3, [r3, #1]
     912:	e01a      	b.n	94a <aes132c_receive_response+0x15a>

		// Received and calculated CRC do not match. Retry reading the response buffer.
		aes132_lib_return = AES132_FUNCTION_RETCODE_BAD_CRC_RX;
     914:	230f      	movs	r3, #15
     916:	18fb      	adds	r3, r7, r3
     918:	22e5      	movs	r2, #229	; 0xe5
     91a:	701a      	strb	r2, [r3, #0]

		// Do not override aes132_lib_return.
		(void) aes132c_resync();
     91c:	4b0e      	ldr	r3, [pc, #56]	; (958 <aes132c_receive_response+0x168>)
     91e:	4798      	blx	r3

		// Retry if communication failed, or CRC did not match.
	} while ((aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) && (--n_retries > 0));
     920:	230f      	movs	r3, #15
     922:	18fb      	adds	r3, r7, r3
     924:	781b      	ldrb	r3, [r3, #0]
     926:	2b00      	cmp	r3, #0
     928:	d00c      	beq.n	944 <aes132c_receive_response+0x154>
     92a:	230e      	movs	r3, #14
     92c:	18fb      	adds	r3, r7, r3
     92e:	220e      	movs	r2, #14
     930:	18ba      	adds	r2, r7, r2
     932:	7812      	ldrb	r2, [r2, #0]
     934:	3a01      	subs	r2, #1
     936:	701a      	strb	r2, [r3, #0]
     938:	230e      	movs	r3, #14
     93a:	18fb      	adds	r3, r7, r3
     93c:	781b      	ldrb	r3, [r3, #0]
     93e:	2b00      	cmp	r3, #0
     940:	d000      	beq.n	944 <aes132c_receive_response+0x154>
     942:	e760      	b.n	806 <aes132c_receive_response+0x16>

	// Even after re-synchronizing and retrying, we could not receive a consistent response packet.
	return aes132_lib_return;
     944:	230f      	movs	r3, #15
     946:	18fb      	adds	r3, r7, r3
     948:	781b      	ldrb	r3, [r3, #0]
}
     94a:	0018      	movs	r0, r3
     94c:	46bd      	mov	sp, r7
     94e:	b005      	add	sp, #20
     950:	bd90      	pop	{r4, r7, pc}
     952:	46c0      	nop			; (mov r8, r8)
     954:	00000569 	.word	0x00000569
     958:	00000419 	.word	0x00000419
     95c:	00001189 	.word	0x00001189
     960:	000002b9 	.word	0x000002b9

00000964 <aes132c_send_and_receive>:
 * \param[out] response pointer to response buffer
 * \param[in] options flags for communication behavior
 * \return status of the operation
 */
uint8_t aes132c_send_and_receive(uint8_t *command, uint8_t size, uint8_t *response, uint8_t options)
{
     964:	b590      	push	{r4, r7, lr}
     966:	b087      	sub	sp, #28
     968:	af00      	add	r7, sp, #0
     96a:	60f8      	str	r0, [r7, #12]
     96c:	0008      	movs	r0, r1
     96e:	607a      	str	r2, [r7, #4]
     970:	0019      	movs	r1, r3
     972:	230b      	movs	r3, #11
     974:	18fb      	adds	r3, r7, r3
     976:	1c02      	adds	r2, r0, #0
     978:	701a      	strb	r2, [r3, #0]
     97a:	230a      	movs	r3, #10
     97c:	18fb      	adds	r3, r7, r3
     97e:	1c0a      	adds	r2, r1, #0
     980:	701a      	strb	r2, [r3, #0]
	uint8_t aes132_lib_return = aes132c_send_command(command, options);
     982:	2317      	movs	r3, #23
     984:	18fc      	adds	r4, r7, r3
     986:	230a      	movs	r3, #10
     988:	18fb      	adds	r3, r7, r3
     98a:	781a      	ldrb	r2, [r3, #0]
     98c:	68fb      	ldr	r3, [r7, #12]
     98e:	0011      	movs	r1, r2
     990:	0018      	movs	r0, r3
     992:	4b0d      	ldr	r3, [pc, #52]	; (9c8 <aes132c_send_and_receive+0x64>)
     994:	4798      	blx	r3
     996:	0003      	movs	r3, r0
     998:	7023      	strb	r3, [r4, #0]
	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS)
     99a:	2317      	movs	r3, #23
     99c:	18fb      	adds	r3, r7, r3
     99e:	781b      	ldrb	r3, [r3, #0]
     9a0:	2b00      	cmp	r3, #0
     9a2:	d003      	beq.n	9ac <aes132c_send_and_receive+0x48>
		return aes132_lib_return;
     9a4:	2317      	movs	r3, #23
     9a6:	18fb      	adds	r3, r7, r3
     9a8:	781b      	ldrb	r3, [r3, #0]
     9aa:	e008      	b.n	9be <aes132c_send_and_receive+0x5a>

	return aes132c_receive_response(size, response);
     9ac:	687a      	ldr	r2, [r7, #4]
     9ae:	230b      	movs	r3, #11
     9b0:	18fb      	adds	r3, r7, r3
     9b2:	781b      	ldrb	r3, [r3, #0]
     9b4:	0011      	movs	r1, r2
     9b6:	0018      	movs	r0, r3
     9b8:	4b04      	ldr	r3, [pc, #16]	; (9cc <aes132c_send_and_receive+0x68>)
     9ba:	4798      	blx	r3
     9bc:	0003      	movs	r3, r0
}
     9be:	0018      	movs	r0, r3
     9c0:	46bd      	mov	sp, r7
     9c2:	b007      	add	sp, #28
     9c4:	bd90      	pop	{r4, r7, pc}
     9c6:	46c0      	nop			; (mov r8, r8)
     9c8:	000006e1 	.word	0x000006e1
     9cc:	000007f1 	.word	0x000007f1

000009d0 <aes132m_write_memory>:
 * \param[in] word_address word address
 * \param[in] data pointer to tx data
 * \return status of the operation
 */
uint8_t aes132m_write_memory(uint8_t count, uint16_t word_address, uint8_t *data)
{
     9d0:	b590      	push	{r4, r7, lr}
     9d2:	b083      	sub	sp, #12
     9d4:	af00      	add	r7, sp, #0
     9d6:	603a      	str	r2, [r7, #0]
     9d8:	1dfb      	adds	r3, r7, #7
     9da:	1c02      	adds	r2, r0, #0
     9dc:	701a      	strb	r2, [r3, #0]
     9de:	1d3b      	adds	r3, r7, #4
     9e0:	1c0a      	adds	r2, r1, #0
     9e2:	801a      	strh	r2, [r3, #0]
	return aes132c_access_memory(count, word_address, data,  AES132_WRITE);
     9e4:	683a      	ldr	r2, [r7, #0]
     9e6:	1d3b      	adds	r3, r7, #4
     9e8:	8819      	ldrh	r1, [r3, #0]
     9ea:	1dfb      	adds	r3, r7, #7
     9ec:	7818      	ldrb	r0, [r3, #0]
     9ee:	2300      	movs	r3, #0
     9f0:	4c03      	ldr	r4, [pc, #12]	; (a00 <aes132m_write_memory+0x30>)
     9f2:	47a0      	blx	r4
     9f4:	0003      	movs	r3, r0
}
     9f6:	0018      	movs	r0, r3
     9f8:	46bd      	mov	sp, r7
     9fa:	b003      	add	sp, #12
     9fc:	bd90      	pop	{r4, r7, pc}
     9fe:	46c0      	nop			; (mov r8, r8)
     a00:	00000589 	.word	0x00000589

00000a04 <aes132m_read_memory>:
 * \param[in] word_address pointer to word address
 * \param[out] data pointer to rx data
 * \return status of the operation
*/
uint8_t aes132m_read_memory(uint8_t size, uint16_t word_address, uint8_t *data)
{
     a04:	b590      	push	{r4, r7, lr}
     a06:	b083      	sub	sp, #12
     a08:	af00      	add	r7, sp, #0
     a0a:	603a      	str	r2, [r7, #0]
     a0c:	1dfb      	adds	r3, r7, #7
     a0e:	1c02      	adds	r2, r0, #0
     a10:	701a      	strb	r2, [r3, #0]
     a12:	1d3b      	adds	r3, r7, #4
     a14:	1c0a      	adds	r2, r1, #0
     a16:	801a      	strh	r2, [r3, #0]
	return aes132c_access_memory(size, word_address, data, AES132_READ);
     a18:	683a      	ldr	r2, [r7, #0]
     a1a:	1d3b      	adds	r3, r7, #4
     a1c:	8819      	ldrh	r1, [r3, #0]
     a1e:	1dfb      	adds	r3, r7, #7
     a20:	7818      	ldrb	r0, [r3, #0]
     a22:	2301      	movs	r3, #1
     a24:	4c03      	ldr	r4, [pc, #12]	; (a34 <aes132m_read_memory+0x30>)
     a26:	47a0      	blx	r4
     a28:	0003      	movs	r3, r0
}
     a2a:	0018      	movs	r0, r3
     a2c:	46bd      	mov	sp, r7
     a2e:	b003      	add	sp, #12
     a30:	bd90      	pop	{r4, r7, pc}
     a32:	46c0      	nop			; (mov r8, r8)
     a34:	00000589 	.word	0x00000589

00000a38 <aes132m_execute>:
 */
uint8_t aes132m_execute(uint8_t op_code, uint8_t mode, uint16_t param1, uint16_t param2,
			uint8_t datalen1, uint8_t *data1, uint8_t datalen2, uint8_t *data2,
			uint8_t datalen3, uint8_t *data3, uint8_t datalen4, uint8_t *data4,
			uint8_t *tx_buffer, uint8_t *rx_buffer)
{
     a38:	b5b0      	push	{r4, r5, r7, lr}
     a3a:	b084      	sub	sp, #16
     a3c:	af00      	add	r7, sp, #0
     a3e:	0005      	movs	r5, r0
     a40:	000c      	movs	r4, r1
     a42:	0010      	movs	r0, r2
     a44:	0019      	movs	r1, r3
     a46:	1dfb      	adds	r3, r7, #7
     a48:	1c2a      	adds	r2, r5, #0
     a4a:	701a      	strb	r2, [r3, #0]
     a4c:	1dbb      	adds	r3, r7, #6
     a4e:	1c22      	adds	r2, r4, #0
     a50:	701a      	strb	r2, [r3, #0]
     a52:	1d3b      	adds	r3, r7, #4
     a54:	1c02      	adds	r2, r0, #0
     a56:	801a      	strh	r2, [r3, #0]
     a58:	1cbb      	adds	r3, r7, #2
     a5a:	1c0a      	adds	r2, r1, #0
     a5c:	801a      	strh	r2, [r3, #0]
	uint8_t *p_buffer;
	uint8_t len;

	// Assemble command.
	len = datalen1 + datalen2 + datalen3 + datalen4 + AES132_COMMAND_SIZE_MIN;
     a5e:	2320      	movs	r3, #32
     a60:	18fa      	adds	r2, r7, r3
     a62:	2328      	movs	r3, #40	; 0x28
     a64:	18fb      	adds	r3, r7, r3
     a66:	7812      	ldrb	r2, [r2, #0]
     a68:	781b      	ldrb	r3, [r3, #0]
     a6a:	18d3      	adds	r3, r2, r3
     a6c:	b2da      	uxtb	r2, r3
     a6e:	2330      	movs	r3, #48	; 0x30
     a70:	18fb      	adds	r3, r7, r3
     a72:	781b      	ldrb	r3, [r3, #0]
     a74:	18d3      	adds	r3, r2, r3
     a76:	b2da      	uxtb	r2, r3
     a78:	2338      	movs	r3, #56	; 0x38
     a7a:	18fb      	adds	r3, r7, r3
     a7c:	781b      	ldrb	r3, [r3, #0]
     a7e:	18d3      	adds	r3, r2, r3
     a80:	b2da      	uxtb	r2, r3
     a82:	230b      	movs	r3, #11
     a84:	18fb      	adds	r3, r7, r3
     a86:	3209      	adds	r2, #9
     a88:	701a      	strb	r2, [r3, #0]
	p_buffer = tx_buffer;
     a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     a8c:	60fb      	str	r3, [r7, #12]
	*p_buffer++ = len;
     a8e:	68fb      	ldr	r3, [r7, #12]
     a90:	1c5a      	adds	r2, r3, #1
     a92:	60fa      	str	r2, [r7, #12]
     a94:	220b      	movs	r2, #11
     a96:	18ba      	adds	r2, r7, r2
     a98:	7812      	ldrb	r2, [r2, #0]
     a9a:	701a      	strb	r2, [r3, #0]
	*p_buffer++ = op_code;
     a9c:	68fb      	ldr	r3, [r7, #12]
     a9e:	1c5a      	adds	r2, r3, #1
     aa0:	60fa      	str	r2, [r7, #12]
     aa2:	1dfa      	adds	r2, r7, #7
     aa4:	7812      	ldrb	r2, [r2, #0]
     aa6:	701a      	strb	r2, [r3, #0]
	*p_buffer++ = mode;
     aa8:	68fb      	ldr	r3, [r7, #12]
     aaa:	1c5a      	adds	r2, r3, #1
     aac:	60fa      	str	r2, [r7, #12]
     aae:	1dba      	adds	r2, r7, #6
     ab0:	7812      	ldrb	r2, [r2, #0]
     ab2:	701a      	strb	r2, [r3, #0]
	*p_buffer++ = param1 >> 8;
     ab4:	68fb      	ldr	r3, [r7, #12]
     ab6:	1c5a      	adds	r2, r3, #1
     ab8:	60fa      	str	r2, [r7, #12]
     aba:	1d3a      	adds	r2, r7, #4
     abc:	8812      	ldrh	r2, [r2, #0]
     abe:	0a12      	lsrs	r2, r2, #8
     ac0:	b292      	uxth	r2, r2
     ac2:	b2d2      	uxtb	r2, r2
     ac4:	701a      	strb	r2, [r3, #0]
	*p_buffer++ = param1 & 0xFF;
     ac6:	68fb      	ldr	r3, [r7, #12]
     ac8:	1c5a      	adds	r2, r3, #1
     aca:	60fa      	str	r2, [r7, #12]
     acc:	1d3a      	adds	r2, r7, #4
     ace:	8812      	ldrh	r2, [r2, #0]
     ad0:	b2d2      	uxtb	r2, r2
     ad2:	701a      	strb	r2, [r3, #0]
	*p_buffer++ = param2 >> 8;
     ad4:	68fb      	ldr	r3, [r7, #12]
     ad6:	1c5a      	adds	r2, r3, #1
     ad8:	60fa      	str	r2, [r7, #12]
     ada:	1cba      	adds	r2, r7, #2
     adc:	8812      	ldrh	r2, [r2, #0]
     ade:	0a12      	lsrs	r2, r2, #8
     ae0:	b292      	uxth	r2, r2
     ae2:	b2d2      	uxtb	r2, r2
     ae4:	701a      	strb	r2, [r3, #0]
	*p_buffer++ = param2 & 0xFF;
     ae6:	68fb      	ldr	r3, [r7, #12]
     ae8:	1c5a      	adds	r2, r3, #1
     aea:	60fa      	str	r2, [r7, #12]
     aec:	1cba      	adds	r2, r7, #2
     aee:	8812      	ldrh	r2, [r2, #0]
     af0:	b2d2      	uxtb	r2, r2
     af2:	701a      	strb	r2, [r3, #0]

	if (datalen1 > 0) {
     af4:	2320      	movs	r3, #32
     af6:	18fb      	adds	r3, r7, r3
     af8:	781b      	ldrb	r3, [r3, #0]
     afa:	2b00      	cmp	r3, #0
     afc:	d00d      	beq.n	b1a <aes132m_execute+0xe2>
		memcpy(p_buffer, data1, datalen1);
     afe:	2320      	movs	r3, #32
     b00:	18fb      	adds	r3, r7, r3
     b02:	781a      	ldrb	r2, [r3, #0]
     b04:	6a79      	ldr	r1, [r7, #36]	; 0x24
     b06:	68fb      	ldr	r3, [r7, #12]
     b08:	0018      	movs	r0, r3
     b0a:	4b26      	ldr	r3, [pc, #152]	; (ba4 <aes132m_execute+0x16c>)
     b0c:	4798      	blx	r3
		p_buffer += datalen1;
     b0e:	2320      	movs	r3, #32
     b10:	18fb      	adds	r3, r7, r3
     b12:	781b      	ldrb	r3, [r3, #0]
     b14:	68fa      	ldr	r2, [r7, #12]
     b16:	18d3      	adds	r3, r2, r3
     b18:	60fb      	str	r3, [r7, #12]
	}
	if (datalen2 > 0) {
     b1a:	2328      	movs	r3, #40	; 0x28
     b1c:	18fb      	adds	r3, r7, r3
     b1e:	781b      	ldrb	r3, [r3, #0]
     b20:	2b00      	cmp	r3, #0
     b22:	d00d      	beq.n	b40 <aes132m_execute+0x108>
		memcpy(p_buffer, data2, datalen2);
     b24:	2328      	movs	r3, #40	; 0x28
     b26:	18fb      	adds	r3, r7, r3
     b28:	781a      	ldrb	r2, [r3, #0]
     b2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
     b2c:	68fb      	ldr	r3, [r7, #12]
     b2e:	0018      	movs	r0, r3
     b30:	4b1c      	ldr	r3, [pc, #112]	; (ba4 <aes132m_execute+0x16c>)
     b32:	4798      	blx	r3
		p_buffer += datalen2;
     b34:	2328      	movs	r3, #40	; 0x28
     b36:	18fb      	adds	r3, r7, r3
     b38:	781b      	ldrb	r3, [r3, #0]
     b3a:	68fa      	ldr	r2, [r7, #12]
     b3c:	18d3      	adds	r3, r2, r3
     b3e:	60fb      	str	r3, [r7, #12]
	}
	if (datalen3 > 0) {
     b40:	2330      	movs	r3, #48	; 0x30
     b42:	18fb      	adds	r3, r7, r3
     b44:	781b      	ldrb	r3, [r3, #0]
     b46:	2b00      	cmp	r3, #0
     b48:	d00d      	beq.n	b66 <aes132m_execute+0x12e>
		memcpy(p_buffer, data3, datalen3);
     b4a:	2330      	movs	r3, #48	; 0x30
     b4c:	18fb      	adds	r3, r7, r3
     b4e:	781a      	ldrb	r2, [r3, #0]
     b50:	6b79      	ldr	r1, [r7, #52]	; 0x34
     b52:	68fb      	ldr	r3, [r7, #12]
     b54:	0018      	movs	r0, r3
     b56:	4b13      	ldr	r3, [pc, #76]	; (ba4 <aes132m_execute+0x16c>)
     b58:	4798      	blx	r3
		p_buffer += datalen3;
     b5a:	2330      	movs	r3, #48	; 0x30
     b5c:	18fb      	adds	r3, r7, r3
     b5e:	781b      	ldrb	r3, [r3, #0]
     b60:	68fa      	ldr	r2, [r7, #12]
     b62:	18d3      	adds	r3, r2, r3
     b64:	60fb      	str	r3, [r7, #12]
	}
	if (datalen4 > 0) {
     b66:	2338      	movs	r3, #56	; 0x38
     b68:	18fb      	adds	r3, r7, r3
     b6a:	781b      	ldrb	r3, [r3, #0]
     b6c:	2b00      	cmp	r3, #0
     b6e:	d00d      	beq.n	b8c <aes132m_execute+0x154>
		memcpy(p_buffer, data4, datalen4);
     b70:	2338      	movs	r3, #56	; 0x38
     b72:	18fb      	adds	r3, r7, r3
     b74:	781a      	ldrb	r2, [r3, #0]
     b76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
     b78:	68fb      	ldr	r3, [r7, #12]
     b7a:	0018      	movs	r0, r3
     b7c:	4b09      	ldr	r3, [pc, #36]	; (ba4 <aes132m_execute+0x16c>)
     b7e:	4798      	blx	r3
		p_buffer += datalen4;
     b80:	2338      	movs	r3, #56	; 0x38
     b82:	18fb      	adds	r3, r7, r3
     b84:	781b      	ldrb	r3, [r3, #0]
     b86:	68fa      	ldr	r2, [r7, #12]
     b88:	18d3      	adds	r3, r2, r3
     b8a:	60fb      	str	r3, [r7, #12]
	}

	// Send command and receive response.
	return aes132c_send_and_receive(&tx_buffer[0], AES132_RESPONSE_SIZE_MAX,
     b8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
     b8e:	6c38      	ldr	r0, [r7, #64]	; 0x40
     b90:	2300      	movs	r3, #0
     b92:	2134      	movs	r1, #52	; 0x34
     b94:	4c04      	ldr	r4, [pc, #16]	; (ba8 <aes132m_execute+0x170>)
     b96:	47a0      	blx	r4
     b98:	0003      	movs	r3, r0
				&rx_buffer[0], AES132_OPTION_DEFAULT);
     b9a:	0018      	movs	r0, r3
     b9c:	46bd      	mov	sp, r7
     b9e:	b004      	add	sp, #16
     ba0:	bdb0      	pop	{r4, r5, r7, pc}
     ba2:	46c0      	nop			; (mov r8, r8)
     ba4:	00002a7b 	.word	0x00002a7b
     ba8:	00000965 	.word	0x00000965

00000bac <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     bac:	b570      	push	{r4, r5, r6, lr}
     bae:	b082      	sub	sp, #8
     bb0:	0005      	movs	r5, r0
     bb2:	000e      	movs	r6, r1
	uint16_t temp = 0;
     bb4:	2200      	movs	r2, #0
     bb6:	466b      	mov	r3, sp
     bb8:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     bba:	4c06      	ldr	r4, [pc, #24]	; (bd4 <usart_serial_getchar+0x28>)
     bbc:	466b      	mov	r3, sp
     bbe:	1d99      	adds	r1, r3, #6
     bc0:	0028      	movs	r0, r5
     bc2:	47a0      	blx	r4
     bc4:	2800      	cmp	r0, #0
     bc6:	d1f9      	bne.n	bbc <usart_serial_getchar+0x10>

	*c = temp;
     bc8:	466b      	mov	r3, sp
     bca:	3306      	adds	r3, #6
     bcc:	881b      	ldrh	r3, [r3, #0]
     bce:	7033      	strb	r3, [r6, #0]
}
     bd0:	b002      	add	sp, #8
     bd2:	bd70      	pop	{r4, r5, r6, pc}
     bd4:	00002207 	.word	0x00002207

00000bd8 <usart_serial_putchar>:
{
     bd8:	b570      	push	{r4, r5, r6, lr}
     bda:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     bdc:	b28c      	uxth	r4, r1
     bde:	4e03      	ldr	r6, [pc, #12]	; (bec <usart_serial_putchar+0x14>)
     be0:	0021      	movs	r1, r4
     be2:	0028      	movs	r0, r5
     be4:	47b0      	blx	r6
     be6:	2800      	cmp	r0, #0
     be8:	d1fa      	bne.n	be0 <usart_serial_putchar+0x8>
}
     bea:	bd70      	pop	{r4, r5, r6, pc}
     bec:	000021dd 	.word	0x000021dd

00000bf0 <hex_to_nibble>:
 * \param data is the ASCII hex value to be converted
 *
 * \return data is the nibble value
**/
uint8_t hex_to_nibble(uint8_t data)
{
     bf0:	0002      	movs	r2, r0
	if ((data >= '0') && (data <= '9' )) {
     bf2:	3830      	subs	r0, #48	; 0x30
     bf4:	b2c0      	uxtb	r0, r0
     bf6:	2809      	cmp	r0, #9
     bf8:	d90d      	bls.n	c16 <hex_to_nibble+0x26>
		// Numbers (0-9)
		data -= '0';
	} else if ((data >= 'A') && (data <= 'F' )) {
     bfa:	0013      	movs	r3, r2
     bfc:	3b41      	subs	r3, #65	; 0x41
     bfe:	2b05      	cmp	r3, #5
     c00:	d907      	bls.n	c12 <hex_to_nibble+0x22>
	} else if ((data >= 'a') && (data <= 'f' )) {
		// Lowercase (a-f)
		data = data -'a' + 10;
	} else {
		// Illegal
		data = 0;
     c02:	2000      	movs	r0, #0
	} else if ((data >= 'a') && (data <= 'f' )) {
     c04:	0013      	movs	r3, r2
     c06:	3b61      	subs	r3, #97	; 0x61
     c08:	2b05      	cmp	r3, #5
     c0a:	d804      	bhi.n	c16 <hex_to_nibble+0x26>
		data = data -'a' + 10;
     c0c:	3a57      	subs	r2, #87	; 0x57
     c0e:	b2d0      	uxtb	r0, r2
     c10:	e001      	b.n	c16 <hex_to_nibble+0x26>
		data = data -'A' + 10;
     c12:	3a37      	subs	r2, #55	; 0x37
     c14:	b2d0      	uxtb	r0, r2
	}
	
	return data;
}
     c16:	4770      	bx	lr

00000c18 <printf_puthex_array>:
 * \param buffer is array which will be printed to UART
 *
 * \param ucLength is array size
**/
void printf_puthex_array(uint8_t* data_buffer, uint8_t length)
{
     c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t i_data;
	
	for (i_data = 0; i_data < length; i_data++) {
     c1a:	2900      	cmp	r1, #0
     c1c:	d00e      	beq.n	c3c <printf_puthex_array+0x24>
     c1e:	0004      	movs	r4, r0
     c20:	3901      	subs	r1, #1
     c22:	b2cd      	uxtb	r5, r1
     c24:	3501      	adds	r5, #1
     c26:	1945      	adds	r5, r0, r5
		printf("%.2X",*data_buffer++);
     c28:	4e05      	ldr	r6, [pc, #20]	; (c40 <printf_puthex_array+0x28>)
		printf(" ");
     c2a:	4f06      	ldr	r7, [pc, #24]	; (c44 <printf_puthex_array+0x2c>)
		printf("%.2X",*data_buffer++);
     c2c:	7821      	ldrb	r1, [r4, #0]
     c2e:	4806      	ldr	r0, [pc, #24]	; (c48 <printf_puthex_array+0x30>)
     c30:	47b0      	blx	r6
		printf(" ");
     c32:	2020      	movs	r0, #32
     c34:	47b8      	blx	r7
     c36:	3401      	adds	r4, #1
	for (i_data = 0; i_data < length; i_data++) {
     c38:	42ac      	cmp	r4, r5
     c3a:	d1f7      	bne.n	c2c <printf_puthex_array+0x14>
	}
}
     c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c3e:	46c0      	nop			; (mov r8, r8)
     c40:	00002a9d 	.word	0x00002a9d
     c44:	00002ad1 	.word	0x00002ad1
     c48:	00004968 	.word	0x00004968

00000c4c <parse_command>:
 *
 *  \param serial_data Data input
 *  \return 1 on complete parsing, 0 otherwise
 */
uint8_t parse_command(uint8_t serial_data)
{
     c4c:	b510      	push	{r4, lr}
	static unsigned char parser_state, nibble_value;
	
	switch (parser_state) {
     c4e:	4b2b      	ldr	r3, [pc, #172]	; (cfc <parse_command+0xb0>)
     c50:	781b      	ldrb	r3, [r3, #0]
     c52:	2b01      	cmp	r3, #1
     c54:	d01a      	beq.n	c8c <parse_command+0x40>
     c56:	2b00      	cmp	r3, #0
     c58:	d008      	beq.n	c6c <parse_command+0x20>
     c5a:	2b02      	cmp	r3, #2
     c5c:	d01f      	beq.n	c9e <parse_command+0x52>
     c5e:	2b03      	cmp	r3, #3
     c60:	d035      	beq.n	cce <parse_command+0x82>
			} else {
				parser_state = 0;
			}
			break;
		default:
			parser_state = 0;
     c62:	2200      	movs	r2, #0
     c64:	4b25      	ldr	r3, [pc, #148]	; (cfc <parse_command+0xb0>)
     c66:	701a      	strb	r2, [r3, #0]
	} // switch (parser_state)
	
	return 0;
     c68:	2000      	movs	r0, #0
     c6a:	e017      	b.n	c9c <parse_command+0x50>
			g_packet_block_index = 0;
     c6c:	2200      	movs	r2, #0
     c6e:	4b24      	ldr	r3, [pc, #144]	; (d00 <parse_command+0xb4>)
     c70:	801a      	strh	r2, [r3, #0]
			if (serial_data == '(') {
     c72:	2828      	cmp	r0, #40	; 0x28
     c74:	d005      	beq.n	c82 <parse_command+0x36>
				printf("Input :%c",serial_data);
     c76:	0001      	movs	r1, r0
     c78:	4822      	ldr	r0, [pc, #136]	; (d04 <parse_command+0xb8>)
     c7a:	4b23      	ldr	r3, [pc, #140]	; (d08 <parse_command+0xbc>)
     c7c:	4798      	blx	r3
	return 0;
     c7e:	2000      	movs	r0, #0
     c80:	e00c      	b.n	c9c <parse_command+0x50>
				parser_state = 1;
     c82:	3201      	adds	r2, #1
     c84:	4b1d      	ldr	r3, [pc, #116]	; (cfc <parse_command+0xb0>)
     c86:	701a      	strb	r2, [r3, #0]
	return 0;
     c88:	2000      	movs	r0, #0
     c8a:	e007      	b.n	c9c <parse_command+0x50>
			nibble_value = hex_to_nibble(serial_data);
     c8c:	4b1f      	ldr	r3, [pc, #124]	; (d0c <parse_command+0xc0>)
     c8e:	4798      	blx	r3
     c90:	4b1f      	ldr	r3, [pc, #124]	; (d10 <parse_command+0xc4>)
     c92:	7018      	strb	r0, [r3, #0]
			parser_state = 2;
     c94:	2202      	movs	r2, #2
     c96:	4b19      	ldr	r3, [pc, #100]	; (cfc <parse_command+0xb0>)
     c98:	701a      	strb	r2, [r3, #0]
	return 0;
     c9a:	2000      	movs	r0, #0
}
     c9c:	bd10      	pop	{r4, pc}
			g_packet_block[g_packet_block_index] = (nibble_value << 4) + hex_to_nibble(serial_data);
     c9e:	4b18      	ldr	r3, [pc, #96]	; (d00 <parse_command+0xb4>)
     ca0:	881c      	ldrh	r4, [r3, #0]
     ca2:	4b1a      	ldr	r3, [pc, #104]	; (d0c <parse_command+0xc0>)
     ca4:	4798      	blx	r3
     ca6:	4b1a      	ldr	r3, [pc, #104]	; (d10 <parse_command+0xc4>)
     ca8:	781b      	ldrb	r3, [r3, #0]
     caa:	011b      	lsls	r3, r3, #4
     cac:	18c0      	adds	r0, r0, r3
     cae:	4b19      	ldr	r3, [pc, #100]	; (d14 <parse_command+0xc8>)
     cb0:	5518      	strb	r0, [r3, r4]
			if (g_packet_block_index < PACKET_BLOCK_SIZE_MAX - 1) {
     cb2:	2cfe      	cmp	r4, #254	; 0xfe
     cb4:	d807      	bhi.n	cc6 <parse_command+0x7a>
				g_packet_block_index++;
     cb6:	3401      	adds	r4, #1
     cb8:	4b11      	ldr	r3, [pc, #68]	; (d00 <parse_command+0xb4>)
     cba:	801c      	strh	r4, [r3, #0]
			parser_state = 3;
     cbc:	2203      	movs	r2, #3
     cbe:	4b0f      	ldr	r3, [pc, #60]	; (cfc <parse_command+0xb0>)
     cc0:	701a      	strb	r2, [r3, #0]
	return 0;
     cc2:	2000      	movs	r0, #0
			break;
     cc4:	e7ea      	b.n	c9c <parse_command+0x50>
				printf("Error buffer overflow");
     cc6:	4814      	ldr	r0, [pc, #80]	; (d18 <parse_command+0xcc>)
     cc8:	4b0f      	ldr	r3, [pc, #60]	; (d08 <parse_command+0xbc>)
     cca:	4798      	blx	r3
     ccc:	e7f6      	b.n	cbc <parse_command+0x70>
			if (serial_data == ' ') {
     cce:	2820      	cmp	r0, #32
     cd0:	d006      	beq.n	ce0 <parse_command+0x94>
			} else if (serial_data == ')') {
     cd2:	2829      	cmp	r0, #41	; 0x29
     cd4:	d009      	beq.n	cea <parse_command+0x9e>
				parser_state = 0;
     cd6:	2200      	movs	r2, #0
     cd8:	4b08      	ldr	r3, [pc, #32]	; (cfc <parse_command+0xb0>)
     cda:	701a      	strb	r2, [r3, #0]
	return 0;
     cdc:	2000      	movs	r0, #0
     cde:	e7dd      	b.n	c9c <parse_command+0x50>
				parser_state = 1;
     ce0:	2201      	movs	r2, #1
     ce2:	4b06      	ldr	r3, [pc, #24]	; (cfc <parse_command+0xb0>)
     ce4:	701a      	strb	r2, [r3, #0]
	return 0;
     ce6:	2000      	movs	r0, #0
     ce8:	e7d8      	b.n	c9c <parse_command+0x50>
				parser_state = 0;
     cea:	2200      	movs	r2, #0
     cec:	4b03      	ldr	r3, [pc, #12]	; (cfc <parse_command+0xb0>)
     cee:	701a      	strb	r2, [r3, #0]
				printf("\n");
     cf0:	381f      	subs	r0, #31
     cf2:	4b0a      	ldr	r3, [pc, #40]	; (d1c <parse_command+0xd0>)
     cf4:	4798      	blx	r3
				return 1;
     cf6:	2001      	movs	r0, #1
     cf8:	e7d0      	b.n	c9c <parse_command+0x50>
     cfa:	46c0      	nop			; (mov r8, r8)
     cfc:	2000020d 	.word	0x2000020d
     d00:	20000338 	.word	0x20000338
     d04:	00004944 	.word	0x00004944
     d08:	00002a9d 	.word	0x00002a9d
     d0c:	00000bf1 	.word	0x00000bf1
     d10:	2000020c 	.word	0x2000020c
     d14:	20000238 	.word	0x20000238
     d18:	00004950 	.word	0x00004950
     d1c:	00002ad1 	.word	0x00002ad1

00000d20 <write_memory_test>:



// Write memory test
uint8_t write_memory_test(void)
{
     d20:	b510      	push	{r4, lr}
	// -------------------- Write memory. -----------------------------------
	// Don't put this in an infinite loop. Otherwise the non-volatile memory will wear out.
	aes132_lib_return = aes132m_write_memory(sizeof(tx_buffer_write), word_address, tx_buffer_write);
     d22:	4b0e      	ldr	r3, [pc, #56]	; (d5c <write_memory_test+0x3c>)
     d24:	8819      	ldrh	r1, [r3, #0]
     d26:	4a0e      	ldr	r2, [pc, #56]	; (d60 <write_memory_test+0x40>)
     d28:	2004      	movs	r0, #4
     d2a:	4b0e      	ldr	r3, [pc, #56]	; (d64 <write_memory_test+0x44>)
     d2c:	4798      	blx	r3
     d2e:	4b0e      	ldr	r3, [pc, #56]	; (d68 <write_memory_test+0x48>)
     d30:	7018      	strb	r0, [r3, #0]
	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
     d32:	2800      	cmp	r0, #0
     d34:	d005      	beq.n	d42 <write_memory_test+0x22>
		printf("Write memory failed!\r\n");
     d36:	480d      	ldr	r0, [pc, #52]	; (d6c <write_memory_test+0x4c>)
     d38:	4b0d      	ldr	r3, [pc, #52]	; (d70 <write_memory_test+0x50>)
     d3a:	4798      	blx	r3
		return aes132_lib_return;
     d3c:	4b0a      	ldr	r3, [pc, #40]	; (d68 <write_memory_test+0x48>)
     d3e:	7818      	ldrb	r0, [r3, #0]
	}
	printf("Write memory success!\r\n");
	printf("Data: ");
	printf_puthex_array(tx_buffer_write,sizeof(tx_buffer_write));
	printf("\r\n");
}
     d40:	bd10      	pop	{r4, pc}
	printf("Write memory success!\r\n");
     d42:	480c      	ldr	r0, [pc, #48]	; (d74 <write_memory_test+0x54>)
     d44:	4c0a      	ldr	r4, [pc, #40]	; (d70 <write_memory_test+0x50>)
     d46:	47a0      	blx	r4
	printf("Data: ");
     d48:	480b      	ldr	r0, [pc, #44]	; (d78 <write_memory_test+0x58>)
     d4a:	4b0c      	ldr	r3, [pc, #48]	; (d7c <write_memory_test+0x5c>)
     d4c:	4798      	blx	r3
	printf_puthex_array(tx_buffer_write,sizeof(tx_buffer_write));
     d4e:	2104      	movs	r1, #4
     d50:	4803      	ldr	r0, [pc, #12]	; (d60 <write_memory_test+0x40>)
     d52:	4b0b      	ldr	r3, [pc, #44]	; (d80 <write_memory_test+0x60>)
     d54:	4798      	blx	r3
	printf("\r\n");
     d56:	480b      	ldr	r0, [pc, #44]	; (d84 <write_memory_test+0x64>)
     d58:	47a0      	blx	r4
}
     d5a:	e7f1      	b.n	d40 <write_memory_test+0x20>
     d5c:	2000020e 	.word	0x2000020e
     d60:	20000004 	.word	0x20000004
     d64:	000009d1 	.word	0x000009d1
     d68:	200003b5 	.word	0x200003b5
     d6c:	000049d4 	.word	0x000049d4
     d70:	00002bb9 	.word	0x00002bb9
     d74:	000049ec 	.word	0x000049ec
     d78:	00004a04 	.word	0x00004a04
     d7c:	00002a9d 	.word	0x00002a9d
     d80:	00000c19 	.word	0x00000c19
     d84:	000049e8 	.word	0x000049e8

00000d88 <read_memory_test>:

// Read memory test
uint8_t read_memory_test(void)
{
     d88:	b570      	push	{r4, r5, r6, lr}
	// -------------------- Read memory. -----------------------------------
	aes132_lib_return = aes132m_read_memory(rx_byte_count, word_address, rx_buffer);
     d8a:	4b19      	ldr	r3, [pc, #100]	; (df0 <read_memory_test+0x68>)
     d8c:	8819      	ldrh	r1, [r3, #0]
     d8e:	4b19      	ldr	r3, [pc, #100]	; (df4 <read_memory_test+0x6c>)
     d90:	7818      	ldrb	r0, [r3, #0]
     d92:	4a19      	ldr	r2, [pc, #100]	; (df8 <read_memory_test+0x70>)
     d94:	4b19      	ldr	r3, [pc, #100]	; (dfc <read_memory_test+0x74>)
     d96:	4798      	blx	r3
     d98:	4b19      	ldr	r3, [pc, #100]	; (e00 <read_memory_test+0x78>)
     d9a:	7018      	strb	r0, [r3, #0]
	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
     d9c:	2800      	cmp	r0, #0
     d9e:	d11c      	bne.n	dda <read_memory_test+0x52>
		printf("Read memory failed!\r\n");
		return aes132_lib_return;
	}
	printf("Read memory success!\r\n");
     da0:	4818      	ldr	r0, [pc, #96]	; (e04 <read_memory_test+0x7c>)
     da2:	4d19      	ldr	r5, [pc, #100]	; (e08 <read_memory_test+0x80>)
     da4:	47a8      	blx	r5
	printf("Data: ");
     da6:	4819      	ldr	r0, [pc, #100]	; (e0c <read_memory_test+0x84>)
     da8:	4b19      	ldr	r3, [pc, #100]	; (e10 <read_memory_test+0x88>)
     daa:	4798      	blx	r3
	printf_puthex_array(rx_buffer,sizeof(tx_buffer_write));
     dac:	4c12      	ldr	r4, [pc, #72]	; (df8 <read_memory_test+0x70>)
     dae:	2104      	movs	r1, #4
     db0:	0020      	movs	r0, r4
     db2:	4b18      	ldr	r3, [pc, #96]	; (e14 <read_memory_test+0x8c>)
     db4:	4798      	blx	r3
	printf("\r\n");
     db6:	4818      	ldr	r0, [pc, #96]	; (e18 <read_memory_test+0x90>)
     db8:	47a8      	blx	r5
	// -------------------- Compare written with read data. -----------------------------------
	aes132_lib_return =  memcmp(tx_buffer_write, rx_buffer, sizeof(tx_buffer_write));
     dba:	2204      	movs	r2, #4
     dbc:	0021      	movs	r1, r4
     dbe:	4817      	ldr	r0, [pc, #92]	; (e1c <read_memory_test+0x94>)
     dc0:	4b17      	ldr	r3, [pc, #92]	; (e20 <read_memory_test+0x98>)
     dc2:	4798      	blx	r3
     dc4:	b2c0      	uxtb	r0, r0
     dc6:	4b0e      	ldr	r3, [pc, #56]	; (e00 <read_memory_test+0x78>)
     dc8:	7018      	strb	r0, [r3, #0]
	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
     dca:	2800      	cmp	r0, #0
     dcc:	d00b      	beq.n	de6 <read_memory_test+0x5e>
		printf("Compare Memory mismatch!\r\n");
     dce:	4815      	ldr	r0, [pc, #84]	; (e24 <read_memory_test+0x9c>)
     dd0:	4b0d      	ldr	r3, [pc, #52]	; (e08 <read_memory_test+0x80>)
     dd2:	4798      	blx	r3
		return aes132_lib_return;
     dd4:	4b0a      	ldr	r3, [pc, #40]	; (e00 <read_memory_test+0x78>)
     dd6:	7818      	ldrb	r0, [r3, #0]
     dd8:	e004      	b.n	de4 <read_memory_test+0x5c>
		printf("Read memory failed!\r\n");
     dda:	4813      	ldr	r0, [pc, #76]	; (e28 <read_memory_test+0xa0>)
     ddc:	4b0a      	ldr	r3, [pc, #40]	; (e08 <read_memory_test+0x80>)
     dde:	4798      	blx	r3
		return aes132_lib_return;
     de0:	4b07      	ldr	r3, [pc, #28]	; (e00 <read_memory_test+0x78>)
     de2:	7818      	ldrb	r0, [r3, #0]
	}
	printf("Compare Memory match!\r\n");
}
     de4:	bd70      	pop	{r4, r5, r6, pc}
	printf("Compare Memory match!\r\n");
     de6:	4811      	ldr	r0, [pc, #68]	; (e2c <read_memory_test+0xa4>)
     de8:	4b07      	ldr	r3, [pc, #28]	; (e08 <read_memory_test+0x80>)
     dea:	4798      	blx	r3
}
     dec:	e7fa      	b.n	de4 <read_memory_test+0x5c>
     dee:	46c0      	nop			; (mov r8, r8)
     df0:	2000020e 	.word	0x2000020e
     df4:	20000002 	.word	0x20000002
     df8:	2000033c 	.word	0x2000033c
     dfc:	00000a05 	.word	0x00000a05
     e00:	200003b5 	.word	0x200003b5
     e04:	00004988 	.word	0x00004988
     e08:	00002bb9 	.word	0x00002bb9
     e0c:	00004a04 	.word	0x00004a04
     e10:	00002a9d 	.word	0x00002a9d
     e14:	00000c19 	.word	0x00000c19
     e18:	000049e8 	.word	0x000049e8
     e1c:	20000004 	.word	0x20000004
     e20:	00002a5d 	.word	0x00002a5d
     e24:	000049a0 	.word	0x000049a0
     e28:	00004970 	.word	0x00004970
     e2c:	000049bc 	.word	0x000049bc

00000e30 <block_read_test>:

// Send a BlockRead command
uint8_t block_read_test(void)
{
     e30:	b510      	push	{r4, lr}
     e32:	b08a      	sub	sp, #40	; 0x28
	// ------- Send a BlockRead command and receive its response. -----------------------------
	aes132_lib_return = aes132m_execute(AES132_BLOCK_READ, 0, word_address, rx_byte_count,
     e34:	4b1f      	ldr	r3, [pc, #124]	; (eb4 <block_read_test+0x84>)
     e36:	881b      	ldrh	r3, [r3, #0]
     e38:	4a1f      	ldr	r2, [pc, #124]	; (eb8 <block_read_test+0x88>)
     e3a:	8812      	ldrh	r2, [r2, #0]
     e3c:	491f      	ldr	r1, [pc, #124]	; (ebc <block_read_test+0x8c>)
     e3e:	9109      	str	r1, [sp, #36]	; 0x24
     e40:	491f      	ldr	r1, [pc, #124]	; (ec0 <block_read_test+0x90>)
     e42:	9108      	str	r1, [sp, #32]
     e44:	2100      	movs	r1, #0
     e46:	9107      	str	r1, [sp, #28]
     e48:	9106      	str	r1, [sp, #24]
     e4a:	9105      	str	r1, [sp, #20]
     e4c:	9104      	str	r1, [sp, #16]
     e4e:	9103      	str	r1, [sp, #12]
     e50:	9102      	str	r1, [sp, #8]
     e52:	9101      	str	r1, [sp, #4]
     e54:	9100      	str	r1, [sp, #0]
     e56:	2010      	movs	r0, #16
     e58:	4c1a      	ldr	r4, [pc, #104]	; (ec4 <block_read_test+0x94>)
     e5a:	47a0      	blx	r4
     e5c:	4b1a      	ldr	r3, [pc, #104]	; (ec8 <block_read_test+0x98>)
     e5e:	7018      	strb	r0, [r3, #0]
	0, NULL, 0, NULL, 0, NULL, 0, NULL, tx_buffer, rx_buffer);
	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
     e60:	2800      	cmp	r0, #0
     e62:	d11b      	bne.n	e9c <block_read_test+0x6c>
		printf("Block Read memory failed!\r\n");
		return aes132_lib_return;
	}
	printf("Block Read memory success!\r\n");
     e64:	4819      	ldr	r0, [pc, #100]	; (ecc <block_read_test+0x9c>)
     e66:	4b1a      	ldr	r3, [pc, #104]	; (ed0 <block_read_test+0xa0>)
     e68:	4798      	blx	r3
	printf("Data: ");
     e6a:	481a      	ldr	r0, [pc, #104]	; (ed4 <block_read_test+0xa4>)
     e6c:	4b1a      	ldr	r3, [pc, #104]	; (ed8 <block_read_test+0xa8>)
     e6e:	4798      	blx	r3
	printf_puthex_array(&rx_buffer[AES132_RESPONSE_INDEX_DATA],rx_byte_count);
     e70:	4b10      	ldr	r3, [pc, #64]	; (eb4 <block_read_test+0x84>)
     e72:	7819      	ldrb	r1, [r3, #0]
     e74:	4c19      	ldr	r4, [pc, #100]	; (edc <block_read_test+0xac>)
     e76:	0020      	movs	r0, r4
     e78:	4b19      	ldr	r3, [pc, #100]	; (ee0 <block_read_test+0xb0>)
     e7a:	4798      	blx	r3
	
	// -------------------- Compare written with read data. -----------------------------------
	aes132_lib_return =  memcmp(tx_buffer_write, &rx_buffer[AES132_RESPONSE_INDEX_DATA], sizeof(tx_buffer_write));
     e7c:	2204      	movs	r2, #4
     e7e:	0021      	movs	r1, r4
     e80:	4818      	ldr	r0, [pc, #96]	; (ee4 <block_read_test+0xb4>)
     e82:	4b19      	ldr	r3, [pc, #100]	; (ee8 <block_read_test+0xb8>)
     e84:	4798      	blx	r3
     e86:	b2c0      	uxtb	r0, r0
     e88:	4b0f      	ldr	r3, [pc, #60]	; (ec8 <block_read_test+0x98>)
     e8a:	7018      	strb	r0, [r3, #0]
	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS) {
     e8c:	2800      	cmp	r0, #0
     e8e:	d00c      	beq.n	eaa <block_read_test+0x7a>
		printf("Compare Memory mismatch!\r\n");
     e90:	4816      	ldr	r0, [pc, #88]	; (eec <block_read_test+0xbc>)
     e92:	4b0f      	ldr	r3, [pc, #60]	; (ed0 <block_read_test+0xa0>)
     e94:	4798      	blx	r3
		return aes132_lib_return;
     e96:	4b0c      	ldr	r3, [pc, #48]	; (ec8 <block_read_test+0x98>)
     e98:	7818      	ldrb	r0, [r3, #0]
     e9a:	e004      	b.n	ea6 <block_read_test+0x76>
		printf("Block Read memory failed!\r\n");
     e9c:	4814      	ldr	r0, [pc, #80]	; (ef0 <block_read_test+0xc0>)
     e9e:	4b0c      	ldr	r3, [pc, #48]	; (ed0 <block_read_test+0xa0>)
     ea0:	4798      	blx	r3
		return aes132_lib_return;
     ea2:	4b09      	ldr	r3, [pc, #36]	; (ec8 <block_read_test+0x98>)
     ea4:	7818      	ldrb	r0, [r3, #0]
	}
	printf("Compare Memory match!\r\n");
}
     ea6:	b00a      	add	sp, #40	; 0x28
     ea8:	bd10      	pop	{r4, pc}
	printf("Compare Memory match!\r\n");
     eaa:	4812      	ldr	r0, [pc, #72]	; (ef4 <block_read_test+0xc4>)
     eac:	4b08      	ldr	r3, [pc, #32]	; (ed0 <block_read_test+0xa0>)
     eae:	4798      	blx	r3
}
     eb0:	e7f9      	b.n	ea6 <block_read_test+0x76>
     eb2:	46c0      	nop			; (mov r8, r8)
     eb4:	20000002 	.word	0x20000002
     eb8:	2000020e 	.word	0x2000020e
     ebc:	2000033c 	.word	0x2000033c
     ec0:	20000360 	.word	0x20000360
     ec4:	00000a39 	.word	0x00000a39
     ec8:	200003b5 	.word	0x200003b5
     ecc:	0000490c 	.word	0x0000490c
     ed0:	00002bb9 	.word	0x00002bb9
     ed4:	00004a04 	.word	0x00004a04
     ed8:	00002a9d 	.word	0x00002a9d
     edc:	2000033e 	.word	0x2000033e
     ee0:	00000c19 	.word	0x00000c19
     ee4:	20000004 	.word	0x20000004
     ee8:	00002a5d 	.word	0x00002a5d
     eec:	000049a0 	.word	0x000049a0
     ef0:	000048f0 	.word	0x000048f0
     ef4:	000049bc 	.word	0x000049bc

00000ef8 <aes132app_single_execute>:


void aes132app_single_execute(void)
{
     ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
     efa:	b08b      	sub	sp, #44	; 0x2c
	uint8_t  ret_code = 0xFF;

	// 4 bytes Opcode, Param1, Param2
	op_code  =  *p_packet_block++;
	mode	 =	*p_packet_block++;
	param1   = (*p_packet_block++ << 8);
     efc:	4c1f      	ldr	r4, [pc, #124]	; (f7c <aes132app_single_execute+0x84>)
     efe:	78a2      	ldrb	r2, [r4, #2]
     f00:	0212      	lsls	r2, r2, #8
	param1  |= (*p_packet_block++);
	param2   = (*p_packet_block++ << 8);
     f02:	7923      	ldrb	r3, [r4, #4]
     f04:	021b      	lsls	r3, r3, #8
	param2  |= (*p_packet_block++);
     f06:	7961      	ldrb	r1, [r4, #5]
	// The rest is included as Data1
	datalen1 = g_packet_block_index - 6;
	data1    = p_packet_block;
	
	// Execute
	ret_code = aes132m_execute(op_code,mode, param1, param2,
     f08:	430b      	orrs	r3, r1
	param1  |= (*p_packet_block++);
     f0a:	78e1      	ldrb	r1, [r4, #3]
	ret_code = aes132m_execute(op_code,mode, param1, param2,
     f0c:	430a      	orrs	r2, r1
     f0e:	7861      	ldrb	r1, [r4, #1]
     f10:	7820      	ldrb	r0, [r4, #0]
     f12:	4d1b      	ldr	r5, [pc, #108]	; (f80 <aes132app_single_execute+0x88>)
     f14:	9509      	str	r5, [sp, #36]	; 0x24
     f16:	4e1b      	ldr	r6, [pc, #108]	; (f84 <aes132app_single_execute+0x8c>)
     f18:	9608      	str	r6, [sp, #32]
     f1a:	2500      	movs	r5, #0
     f1c:	9507      	str	r5, [sp, #28]
     f1e:	9506      	str	r5, [sp, #24]
     f20:	9505      	str	r5, [sp, #20]
     f22:	9504      	str	r5, [sp, #16]
     f24:	9503      	str	r5, [sp, #12]
     f26:	9502      	str	r5, [sp, #8]
     f28:	3406      	adds	r4, #6
     f2a:	9401      	str	r4, [sp, #4]
	datalen1 = g_packet_block_index - 6;
     f2c:	4c16      	ldr	r4, [pc, #88]	; (f88 <aes132app_single_execute+0x90>)
     f2e:	8824      	ldrh	r4, [r4, #0]
     f30:	3c06      	subs	r4, #6
	ret_code = aes132m_execute(op_code,mode, param1, param2,
     f32:	b2e4      	uxtb	r4, r4
     f34:	9400      	str	r4, [sp, #0]
     f36:	4c15      	ldr	r4, [pc, #84]	; (f8c <aes132app_single_execute+0x94>)
     f38:	47a0      	blx	r4
     f3a:	0005      	movs	r5, r0
	datalen1, data1, datalen2, data2, datalen3, data3,
	datalen4, data4, tx_buffer, rx_buffer);
	printf("\n");
     f3c:	200a      	movs	r0, #10
     f3e:	4c14      	ldr	r4, [pc, #80]	; (f90 <aes132app_single_execute+0x98>)
     f40:	47a0      	blx	r4
	printf("TX buffer = 0x");
     f42:	4814      	ldr	r0, [pc, #80]	; (f94 <aes132app_single_execute+0x9c>)
     f44:	4b14      	ldr	r3, [pc, #80]	; (f98 <aes132app_single_execute+0xa0>)
     f46:	4798      	blx	r3
	printf_puthex_array(tx_buffer, tx_buffer[0]);
     f48:	7831      	ldrb	r1, [r6, #0]
     f4a:	0030      	movs	r0, r6
     f4c:	4b13      	ldr	r3, [pc, #76]	; (f9c <aes132app_single_execute+0xa4>)
     f4e:	4798      	blx	r3
	printf("\n");
     f50:	200a      	movs	r0, #10
     f52:	47a0      	blx	r4
	if(ret_code == AES132_FUNCTION_RETCODE_SUCCESS){
     f54:	2d00      	cmp	r5, #0
     f56:	d005      	beq.n	f64 <aes132app_single_execute+0x6c>
		printf("RX buffer = 0x");
		printf_puthex_array(rx_buffer, rx_buffer[0]);
		printf("\n");
	}else
		printf("Failed! ret_code = 0x%.2X\n", ret_code);
     f58:	0029      	movs	r1, r5
     f5a:	4811      	ldr	r0, [pc, #68]	; (fa0 <aes132app_single_execute+0xa8>)
     f5c:	4b0e      	ldr	r3, [pc, #56]	; (f98 <aes132app_single_execute+0xa0>)
     f5e:	4798      	blx	r3
	
}
     f60:	b00b      	add	sp, #44	; 0x2c
     f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("RX buffer = 0x");
     f64:	480f      	ldr	r0, [pc, #60]	; (fa4 <aes132app_single_execute+0xac>)
     f66:	4b0c      	ldr	r3, [pc, #48]	; (f98 <aes132app_single_execute+0xa0>)
     f68:	4798      	blx	r3
		printf_puthex_array(rx_buffer, rx_buffer[0]);
     f6a:	4805      	ldr	r0, [pc, #20]	; (f80 <aes132app_single_execute+0x88>)
     f6c:	7801      	ldrb	r1, [r0, #0]
     f6e:	4b0b      	ldr	r3, [pc, #44]	; (f9c <aes132app_single_execute+0xa4>)
     f70:	4798      	blx	r3
		printf("\n");
     f72:	200a      	movs	r0, #10
     f74:	4b06      	ldr	r3, [pc, #24]	; (f90 <aes132app_single_execute+0x98>)
     f76:	4798      	blx	r3
     f78:	e7f2      	b.n	f60 <aes132app_single_execute+0x68>
     f7a:	46c0      	nop			; (mov r8, r8)
     f7c:	20000238 	.word	0x20000238
     f80:	2000033c 	.word	0x2000033c
     f84:	20000360 	.word	0x20000360
     f88:	20000338 	.word	0x20000338
     f8c:	00000a39 	.word	0x00000a39
     f90:	00002ad1 	.word	0x00002ad1
     f94:	000048b4 	.word	0x000048b4
     f98:	00002a9d 	.word	0x00002a9d
     f9c:	00000c19 	.word	0x00000c19
     fa0:	000048d4 	.word	0x000048d4
     fa4:	000048c4 	.word	0x000048c4

00000fa8 <aes132app_command_dispatch>:


void aes132app_command_dispatch(void)
{
     fa8:	b510      	push	{r4, lr}
	// Dispatch appropriate function, deduce from the opcode (packet block byte #0)
	// Use dummy opcodes for specific cases
	switch (g_packet_block[0]) {
     faa:	4b0a      	ldr	r3, [pc, #40]	; (fd4 <aes132app_command_dispatch+0x2c>)
     fac:	781b      	ldrb	r3, [r3, #0]
     fae:	b2da      	uxtb	r2, r3
     fb0:	2a81      	cmp	r2, #129	; 0x81
     fb2:	d009      	beq.n	fc8 <aes132app_command_dispatch+0x20>
     fb4:	2a82      	cmp	r2, #130	; 0x82
     fb6:	d00a      	beq.n	fce <aes132app_command_dispatch+0x26>
     fb8:	2a80      	cmp	r2, #128	; 0x80
     fba:	d002      	beq.n	fc2 <aes132app_command_dispatch+0x1a>
		break;
		case 0x82:
			block_read_test();
		break;
		default:
			aes132app_single_execute();
     fbc:	4b06      	ldr	r3, [pc, #24]	; (fd8 <aes132app_command_dispatch+0x30>)
     fbe:	4798      	blx	r3
		break;
	}
}
     fc0:	e001      	b.n	fc6 <aes132app_command_dispatch+0x1e>
			write_memory_test();
     fc2:	4b06      	ldr	r3, [pc, #24]	; (fdc <aes132app_command_dispatch+0x34>)
     fc4:	4798      	blx	r3
}
     fc6:	bd10      	pop	{r4, pc}
			read_memory_test();
     fc8:	4b05      	ldr	r3, [pc, #20]	; (fe0 <aes132app_command_dispatch+0x38>)
     fca:	4798      	blx	r3
		break;
     fcc:	e7fb      	b.n	fc6 <aes132app_command_dispatch+0x1e>
			block_read_test();
     fce:	4b05      	ldr	r3, [pc, #20]	; (fe4 <aes132app_command_dispatch+0x3c>)
     fd0:	4798      	blx	r3
		break;
     fd2:	e7f8      	b.n	fc6 <aes132app_command_dispatch+0x1e>
     fd4:	20000238 	.word	0x20000238
     fd8:	00000ef9 	.word	0x00000ef9
     fdc:	00000d21 	.word	0x00000d21
     fe0:	00000d89 	.word	0x00000d89
     fe4:	00000e31 	.word	0x00000e31

00000fe8 <main>:
/** \brief This function is the entry function for an example application that
           uses the AES132 library.
 * \return result (0: success, otherwise failure)
 */
int main(void)
{
     fe8:	b570      	push	{r4, r5, r6, lr}
     fea:	b090      	sub	sp, #64	; 0x40
	//! [system_init]
	system_init();
     fec:	4b34      	ldr	r3, [pc, #208]	; (10c0 <main+0xd8>)
     fee:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     ff0:	2380      	movs	r3, #128	; 0x80
     ff2:	05db      	lsls	r3, r3, #23
     ff4:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     ff6:	2300      	movs	r3, #0
     ff8:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     ffa:	22ff      	movs	r2, #255	; 0xff
     ffc:	4669      	mov	r1, sp
     ffe:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1000:	2200      	movs	r2, #0
    1002:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1004:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    1006:	2101      	movs	r1, #1
    1008:	2024      	movs	r0, #36	; 0x24
    100a:	466c      	mov	r4, sp
    100c:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    100e:	3001      	adds	r0, #1
    1010:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    1012:	3125      	adds	r1, #37	; 0x25
    1014:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    1016:	3101      	adds	r1, #1
    1018:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    101a:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    101c:	3105      	adds	r1, #5
    101e:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1020:	3101      	adds	r1, #1
    1022:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1024:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1026:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1028:	76e3      	strb	r3, [r4, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    102a:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    102c:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    102e:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                        = 19;
    1030:	2313      	movs	r3, #19
    1032:	76a3      	strb	r3, [r4, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    1034:	7762      	strb	r2, [r4, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    1036:	2380      	movs	r3, #128	; 0x80
    1038:	035b      	lsls	r3, r3, #13
    103a:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    103c:	4b21      	ldr	r3, [pc, #132]	; (10c4 <main+0xdc>)
    103e:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    1040:	4b21      	ldr	r3, [pc, #132]	; (10c8 <main+0xe0>)
    1042:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    1044:	2301      	movs	r3, #1
    1046:	425b      	negs	r3, r3
    1048:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    104a:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    104c:	23e1      	movs	r3, #225	; 0xe1
    104e:	025b      	lsls	r3, r3, #9
    1050:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    1052:	4c1e      	ldr	r4, [pc, #120]	; (10cc <main+0xe4>)
    1054:	4b1e      	ldr	r3, [pc, #120]	; (10d0 <main+0xe8>)
    1056:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1058:	4a1e      	ldr	r2, [pc, #120]	; (10d4 <main+0xec>)
    105a:	4b1f      	ldr	r3, [pc, #124]	; (10d8 <main+0xf0>)
    105c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    105e:	4a1f      	ldr	r2, [pc, #124]	; (10dc <main+0xf4>)
    1060:	4b1f      	ldr	r3, [pc, #124]	; (10e0 <main+0xf8>)
    1062:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    1064:	466a      	mov	r2, sp
    1066:	491f      	ldr	r1, [pc, #124]	; (10e4 <main+0xfc>)
    1068:	0020      	movs	r0, r4
    106a:	4b1f      	ldr	r3, [pc, #124]	; (10e8 <main+0x100>)
    106c:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    106e:	4e1f      	ldr	r6, [pc, #124]	; (10ec <main+0x104>)
    1070:	6833      	ldr	r3, [r6, #0]
    1072:	6898      	ldr	r0, [r3, #8]
    1074:	2100      	movs	r1, #0
    1076:	4d1e      	ldr	r5, [pc, #120]	; (10f0 <main+0x108>)
    1078:	47a8      	blx	r5
	setbuf(stdin, NULL);
    107a:	6833      	ldr	r3, [r6, #0]
    107c:	6858      	ldr	r0, [r3, #4]
    107e:	2100      	movs	r1, #0
    1080:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1082:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    1084:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1086:	2a00      	cmp	r2, #0
    1088:	d1fc      	bne.n	1084 <main+0x9c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    108a:	681a      	ldr	r2, [r3, #0]
    108c:	2102      	movs	r1, #2
    108e:	430a      	orrs	r2, r1
    1090:	601a      	str	r2, [r3, #0]
	//! [configure_console]
	configure_console();
	//! [configure_console]
	
	//! [aes132p_enable_interface]
	aes132p_enable_interface();
    1092:	4b18      	ldr	r3, [pc, #96]	; (10f4 <main+0x10c>)
    1094:	4798      	blx	r3
	//! [aes132p_enable_interface]
	printf("*****AES132 TEST*****\r\n");
    1096:	4818      	ldr	r0, [pc, #96]	; (10f8 <main+0x110>)
    1098:	4b18      	ldr	r3, [pc, #96]	; (10fc <main+0x114>)
    109a:	4798      	blx	r3
	while(1){
		if (scanf("%c",&serial_data)>0){
    109c:	4e18      	ldr	r6, [pc, #96]	; (1100 <main+0x118>)
    109e:	4d19      	ldr	r5, [pc, #100]	; (1104 <main+0x11c>)
    10a0:	4c19      	ldr	r4, [pc, #100]	; (1108 <main+0x120>)
    10a2:	0031      	movs	r1, r6
    10a4:	0028      	movs	r0, r5
    10a6:	47a0      	blx	r4
    10a8:	2800      	cmp	r0, #0
    10aa:	ddfa      	ble.n	10a2 <main+0xba>
			if (parse_command(serial_data))
    10ac:	4b14      	ldr	r3, [pc, #80]	; (1100 <main+0x118>)
    10ae:	7818      	ldrb	r0, [r3, #0]
    10b0:	4b16      	ldr	r3, [pc, #88]	; (110c <main+0x124>)
    10b2:	4798      	blx	r3
    10b4:	2800      	cmp	r0, #0
    10b6:	d0f4      	beq.n	10a2 <main+0xba>
				aes132app_command_dispatch();
    10b8:	4b15      	ldr	r3, [pc, #84]	; (1110 <main+0x128>)
    10ba:	4798      	blx	r3
    10bc:	e7f1      	b.n	10a2 <main+0xba>
    10be:	46c0      	nop			; (mov r8, r8)
    10c0:	00002709 	.word	0x00002709
    10c4:	00160002 	.word	0x00160002
    10c8:	00170002 	.word	0x00170002
    10cc:	20000200 	.word	0x20000200
    10d0:	200003d0 	.word	0x200003d0
    10d4:	00000bd9 	.word	0x00000bd9
    10d8:	200003cc 	.word	0x200003cc
    10dc:	00000bad 	.word	0x00000bad
    10e0:	200003c8 	.word	0x200003c8
    10e4:	42001400 	.word	0x42001400
    10e8:	00001ed5 	.word	0x00001ed5
    10ec:	20000008 	.word	0x20000008
    10f0:	00002c01 	.word	0x00002c01
    10f4:	00001115 	.word	0x00001115
    10f8:	00004928 	.word	0x00004928
    10fc:	00002bb9 	.word	0x00002bb9
    1100:	200003b4 	.word	0x200003b4
    1104:	00004940 	.word	0x00004940
    1108:	00002bcd 	.word	0x00002bcd
    110c:	00000c4d 	.word	0x00000c4d
    1110:	00000fa9 	.word	0x00000fa9

00001114 <aes132p_enable_interface>:
#define AES132_SPI_PREFACE_SIZE ((uint8_t) 3)


/** \brief This function initializes and enables the SPI peripheral. */
void aes132p_enable_interface(void)
{
    1114:	b510      	push	{r4, lr}
	spi_enable_phys();
    1116:	4b01      	ldr	r3, [pc, #4]	; (111c <aes132p_enable_interface+0x8>)
    1118:	4798      	blx	r3
}
    111a:	bd10      	pop	{r4, pc}
    111c:	00001229 	.word	0x00001229

00001120 <aes132p_write_memory_physical>:
 * \param[in] word_address word address to write to
 * \param[in] data pointer to tx buffer
 * \return status of the operation
 */
uint8_t aes132p_write_memory_physical(uint8_t count, uint16_t word_address, uint8_t *data)
{
    1120:	b570      	push	{r4, r5, r6, lr}
    1122:	b082      	sub	sp, #8
    1124:	0005      	movs	r5, r0
    1126:	0016      	movs	r6, r2
	uint8_t aes132_lib_return;
	uint8_t writeEnable = AES132_SPI_ENABLE_WRITE;
    1128:	466b      	mov	r3, sp
    112a:	1ddc      	adds	r4, r3, #7
    112c:	2306      	movs	r3, #6
    112e:	7023      	strb	r3, [r4, #0]
	uint8_t preface[] =
    1130:	ab01      	add	r3, sp, #4
    1132:	2202      	movs	r2, #2
    1134:	701a      	strb	r2, [r3, #0]
		{AES132_SPI_WRITE, (uint8_t) (word_address >> 8), (uint8_t) (word_address & 0xFF)};
    1136:	0a0a      	lsrs	r2, r1, #8
	uint8_t preface[] =
    1138:	705a      	strb	r2, [r3, #1]
    113a:	7099      	strb	r1, [r3, #2]

	// We don't need to enable write when writing to I/O address,
	// but an "if" condition would increase code space.
	spi_select_slave_phys();
    113c:	4b0f      	ldr	r3, [pc, #60]	; (117c <aes132p_write_memory_physical+0x5c>)
    113e:	4798      	blx	r3
	aes132_lib_return = spi_send_bytes(1, &writeEnable);
    1140:	0021      	movs	r1, r4
    1142:	2001      	movs	r0, #1
    1144:	4b0e      	ldr	r3, [pc, #56]	; (1180 <aes132p_write_memory_physical+0x60>)
    1146:	4798      	blx	r3
    1148:	0004      	movs	r4, r0
	spi_deselect_slave_phys();
    114a:	4b0e      	ldr	r3, [pc, #56]	; (1184 <aes132p_write_memory_physical+0x64>)
    114c:	4798      	blx	r3

	if (aes132_lib_return != AES132_FUNCTION_RETCODE_SUCCESS)
    114e:	2c00      	cmp	r4, #0
    1150:	d002      	beq.n	1158 <aes132p_write_memory_physical+0x38>
		aes132_lib_return = spi_send_bytes(count, data);

	spi_deselect_slave_phys();

	return aes132_lib_return;
}
    1152:	0020      	movs	r0, r4
    1154:	b002      	add	sp, #8
    1156:	bd70      	pop	{r4, r5, r6, pc}
	spi_select_slave_phys();
    1158:	4b08      	ldr	r3, [pc, #32]	; (117c <aes132p_write_memory_physical+0x5c>)
    115a:	4798      	blx	r3
	aes132_lib_return = spi_send_bytes(AES132_SPI_PREFACE_SIZE, preface);
    115c:	a901      	add	r1, sp, #4
    115e:	2003      	movs	r0, #3
    1160:	4b07      	ldr	r3, [pc, #28]	; (1180 <aes132p_write_memory_physical+0x60>)
    1162:	4798      	blx	r3
    1164:	1e04      	subs	r4, r0, #0
	if (aes132_lib_return == AES132_FUNCTION_RETCODE_SUCCESS)
    1166:	d002      	beq.n	116e <aes132p_write_memory_physical+0x4e>
	spi_deselect_slave_phys();
    1168:	4b06      	ldr	r3, [pc, #24]	; (1184 <aes132p_write_memory_physical+0x64>)
    116a:	4798      	blx	r3
	return aes132_lib_return;
    116c:	e7f1      	b.n	1152 <aes132p_write_memory_physical+0x32>
		aes132_lib_return = spi_send_bytes(count, data);
    116e:	0031      	movs	r1, r6
    1170:	0028      	movs	r0, r5
    1172:	4b03      	ldr	r3, [pc, #12]	; (1180 <aes132p_write_memory_physical+0x60>)
    1174:	4798      	blx	r3
    1176:	0004      	movs	r4, r0
    1178:	e7f6      	b.n	1168 <aes132p_write_memory_physical+0x48>
    117a:	46c0      	nop			; (mov r8, r8)
    117c:	000011d9 	.word	0x000011d9
    1180:	00001301 	.word	0x00001301
    1184:	00001201 	.word	0x00001201

00001188 <aes132p_read_memory_physical>:
 * \param[in] word_address word address to read from
 * \param[out] data pointer to rx buffer
 * \return status of the operation
 */
uint8_t aes132p_read_memory_physical(uint8_t size, uint16_t word_address, uint8_t *data)
{
    1188:	b570      	push	{r4, r5, r6, lr}
    118a:	b082      	sub	sp, #8
    118c:	0005      	movs	r5, r0
    118e:	0016      	movs	r6, r2
	uint8_t aes132_lib_return;
	uint8_t preface[] =
    1190:	ac01      	add	r4, sp, #4
    1192:	2303      	movs	r3, #3
    1194:	7023      	strb	r3, [r4, #0]
		{AES132_SPI_READ, (uint8_t) (word_address >> 8), (uint8_t) (word_address & 0xFF)};
    1196:	0a0b      	lsrs	r3, r1, #8
	uint8_t preface[] =
    1198:	7063      	strb	r3, [r4, #1]
    119a:	70a1      	strb	r1, [r4, #2]

	spi_select_slave_phys();
    119c:	4b09      	ldr	r3, [pc, #36]	; (11c4 <aes132p_read_memory_physical+0x3c>)
    119e:	4798      	blx	r3
	aes132_lib_return = spi_send_bytes(AES132_SPI_PREFACE_SIZE, preface);
    11a0:	0021      	movs	r1, r4
    11a2:	2003      	movs	r0, #3
    11a4:	4b08      	ldr	r3, [pc, #32]	; (11c8 <aes132p_read_memory_physical+0x40>)
    11a6:	4798      	blx	r3
    11a8:	1e04      	subs	r4, r0, #0
	if (aes132_lib_return == AES132_FUNCTION_RETCODE_SUCCESS)
    11aa:	d004      	beq.n	11b6 <aes132p_read_memory_physical+0x2e>
		aes132_lib_return = spi_receive_bytes(size, data);

	spi_deselect_slave_phys();
    11ac:	4b07      	ldr	r3, [pc, #28]	; (11cc <aes132p_read_memory_physical+0x44>)
    11ae:	4798      	blx	r3

	return aes132_lib_return;
}
    11b0:	0020      	movs	r0, r4
    11b2:	b002      	add	sp, #8
    11b4:	bd70      	pop	{r4, r5, r6, pc}
		aes132_lib_return = spi_receive_bytes(size, data);
    11b6:	0031      	movs	r1, r6
    11b8:	0028      	movs	r0, r5
    11ba:	4b05      	ldr	r3, [pc, #20]	; (11d0 <aes132p_read_memory_physical+0x48>)
    11bc:	4798      	blx	r3
    11be:	0004      	movs	r4, r0
    11c0:	e7f4      	b.n	11ac <aes132p_read_memory_physical+0x24>
    11c2:	46c0      	nop			; (mov r8, r8)
    11c4:	000011d9 	.word	0x000011d9
    11c8:	00001301 	.word	0x00001301
    11cc:	00001201 	.word	0x00001201
    11d0:	00001325 	.word	0x00001325

000011d4 <aes132p_resync_physical>:
 * \return always success
 */
uint8_t aes132p_resync_physical(void)
{
	return AES132_FUNCTION_RETCODE_SUCCESS;
}
    11d4:	2000      	movs	r0, #0
    11d6:	4770      	bx	lr

000011d8 <spi_select_slave_phys>:
}


/** This function selects the SPI slave. */
void spi_select_slave_phys(void)
{
    11d8:	b510      	push	{r4, lr}
	//! [select_slave]
		spi_select_slave(&spi_master_instance, &slave[spi_current_index], true);
    11da:	4b05      	ldr	r3, [pc, #20]	; (11f0 <spi_select_slave_phys+0x18>)
    11dc:	781b      	ldrb	r3, [r3, #0]
    11de:	0059      	lsls	r1, r3, #1
    11e0:	18c9      	adds	r1, r1, r3
    11e2:	4b04      	ldr	r3, [pc, #16]	; (11f4 <spi_select_slave_phys+0x1c>)
    11e4:	18c9      	adds	r1, r1, r3
    11e6:	2201      	movs	r2, #1
    11e8:	4803      	ldr	r0, [pc, #12]	; (11f8 <spi_select_slave_phys+0x20>)
    11ea:	4b04      	ldr	r3, [pc, #16]	; (11fc <spi_select_slave_phys+0x24>)
    11ec:	4798      	blx	r3
	//! [select_slave]
}
    11ee:	bd10      	pop	{r4, pc}
    11f0:	20000210 	.word	0x20000210
    11f4:	200003c4 	.word	0x200003c4
    11f8:	200003b8 	.word	0x200003b8
    11fc:	00001bc9 	.word	0x00001bc9

00001200 <spi_deselect_slave_phys>:


/** This function deselects the SPI slave. */
void spi_deselect_slave_phys(void)
{
    1200:	b510      	push	{r4, lr}
	//! [select_slave]
		spi_select_slave(&spi_master_instance, &slave[spi_current_index], false);
    1202:	4b05      	ldr	r3, [pc, #20]	; (1218 <spi_deselect_slave_phys+0x18>)
    1204:	781b      	ldrb	r3, [r3, #0]
    1206:	0059      	lsls	r1, r3, #1
    1208:	18c9      	adds	r1, r1, r3
    120a:	4b04      	ldr	r3, [pc, #16]	; (121c <spi_deselect_slave_phys+0x1c>)
    120c:	18c9      	adds	r1, r1, r3
    120e:	2200      	movs	r2, #0
    1210:	4803      	ldr	r0, [pc, #12]	; (1220 <spi_deselect_slave_phys+0x20>)
    1212:	4b04      	ldr	r3, [pc, #16]	; (1224 <spi_deselect_slave_phys+0x24>)
    1214:	4798      	blx	r3
	//! [select_slave]
}
    1216:	bd10      	pop	{r4, pc}
    1218:	20000210 	.word	0x20000210
    121c:	200003c4 	.word	0x200003c4
    1220:	200003b8 	.word	0x200003b8
    1224:	00001bc9 	.word	0x00001bc9

00001228 <spi_enable_phys>:


/** \brief This function initializes and enables the SPI peripheral. */
void spi_enable_phys(void)
{
    1228:	b530      	push	{r4, r5, lr}
    122a:	b091      	sub	sp, #68	; 0x44
	/* Configure and initialize software device instance of peripheral slave */
	//! [slave_conf_defaults]
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	//! [slave_conf_defaults]
	//! [ss_pin]
	slave_dev_config.ss_pin = spi_select[spi_current_index];
    122c:	4b28      	ldr	r3, [pc, #160]	; (12d0 <spi_enable_phys+0xa8>)
    122e:	781b      	ldrb	r3, [r3, #0]
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    1230:	4d28      	ldr	r5, [pc, #160]	; (12d4 <spi_enable_phys+0xac>)
    1232:	005c      	lsls	r4, r3, #1
    1234:	18e4      	adds	r4, r4, r3
    1236:	231b      	movs	r3, #27
    1238:	5563      	strb	r3, [r4, r5]
	slave->address_enabled = config->address_enabled;
    123a:	192a      	adds	r2, r5, r4
    123c:	2300      	movs	r3, #0
    123e:	7053      	strb	r3, [r2, #1]
	slave->address         = config->address;
    1240:	7093      	strb	r3, [r2, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1242:	a901      	add	r1, sp, #4
    1244:	2201      	movs	r2, #1
    1246:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    1248:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    124a:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    124c:	201b      	movs	r0, #27
    124e:	4b22      	ldr	r3, [pc, #136]	; (12d8 <spi_enable_phys+0xb0>)
    1250:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    1252:	5d62      	ldrb	r2, [r4, r5]
	if (port_index < PORT_INST_NUM) {
    1254:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1256:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1258:	2900      	cmp	r1, #0
    125a:	d104      	bne.n	1266 <spi_enable_phys+0x3e>
		return &(ports[port_index]->Group[group_index]);
    125c:	0953      	lsrs	r3, r2, #5
    125e:	01db      	lsls	r3, r3, #7
    1260:	491e      	ldr	r1, [pc, #120]	; (12dc <spi_enable_phys+0xb4>)
    1262:	468c      	mov	ip, r1
    1264:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1266:	211f      	movs	r1, #31
    1268:	4011      	ands	r1, r2
    126a:	2201      	movs	r2, #1
    126c:	0010      	movs	r0, r2
    126e:	4088      	lsls	r0, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1270:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    1272:	ac02      	add	r4, sp, #8
    1274:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    1276:	2300      	movs	r3, #0
    1278:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    127a:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    127c:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    127e:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    1280:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    1282:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    1284:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    1286:	3223      	adds	r2, #35	; 0x23
    1288:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    128a:	3a18      	subs	r2, #24
    128c:	2100      	movs	r1, #0
    128e:	a808      	add	r0, sp, #32
    1290:	4b13      	ldr	r3, [pc, #76]	; (12e0 <spi_enable_phys+0xb8>)
    1292:	4798      	blx	r3
	/* Configure, initialize and enable SERCOM SPI module */
	//! [conf_defaults]
	spi_get_config_defaults(&config_spi_master);
	//! [conf_defaults]
	//! [set_baudrate]
	config_spi_master.mode_specific.master.baudrate = 4000000;
    1294:	4b13      	ldr	r3, [pc, #76]	; (12e4 <spi_enable_phys+0xbc>)
    1296:	61a3      	str	r3, [r4, #24]
	//! [set_baudrate]
	//! [mux_setting]
	config_spi_master.mux_setting = EXT3_SPI_SERCOM_MUX_SETTING;
    1298:	2380      	movs	r3, #128	; 0x80
    129a:	025b      	lsls	r3, r3, #9
    129c:	60e3      	str	r3, [r4, #12]
	//! [mux_setting]
	/* Configure pad 0 for data in */
	//! [di]
	config_spi_master.pinmux_pad0 = EXT3_SPI_SERCOM_PINMUX_PAD0;
    129e:	4b12      	ldr	r3, [pc, #72]	; (12e8 <spi_enable_phys+0xc0>)
    12a0:	62a3      	str	r3, [r4, #40]	; 0x28
	//! [di]
	/* Configure pad 1 as unused */
	//! [ss]
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    12a2:	2301      	movs	r3, #1
    12a4:	425b      	negs	r3, r3
    12a6:	62e3      	str	r3, [r4, #44]	; 0x2c
	//! [ss]
	/* Configure pad 2 for data out */
	//! [do]
	config_spi_master.pinmux_pad2 = EXT3_SPI_SERCOM_PINMUX_PAD2;
    12a8:	4b10      	ldr	r3, [pc, #64]	; (12ec <spi_enable_phys+0xc4>)
    12aa:	6323      	str	r3, [r4, #48]	; 0x30
	//! [do]
	/* Configure pad 3 for SCK */
	//! [sck]
	config_spi_master.pinmux_pad3 = EXT3_SPI_SERCOM_PINMUX_PAD3;
    12ac:	4b10      	ldr	r3, [pc, #64]	; (12f0 <spi_enable_phys+0xc8>)
    12ae:	6363      	str	r3, [r4, #52]	; 0x34
	//! [sck]
	//! [init]
	spi_init(&spi_master_instance, EXT3_SPI_MODULE, &config_spi_master);
    12b0:	4d10      	ldr	r5, [pc, #64]	; (12f4 <spi_enable_phys+0xcc>)
    12b2:	0022      	movs	r2, r4
    12b4:	4910      	ldr	r1, [pc, #64]	; (12f8 <spi_enable_phys+0xd0>)
    12b6:	0028      	movs	r0, r5
    12b8:	4b10      	ldr	r3, [pc, #64]	; (12fc <spi_enable_phys+0xd4>)
    12ba:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    12bc:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    12be:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    12c0:	2b00      	cmp	r3, #0
    12c2:	d1fc      	bne.n	12be <spi_enable_phys+0x96>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    12c4:	6813      	ldr	r3, [r2, #0]
    12c6:	2102      	movs	r1, #2
    12c8:	430b      	orrs	r3, r1
    12ca:	6013      	str	r3, [r2, #0]
	//! [init]

	//! [enable]
	spi_enable(&spi_master_instance);
	//! [enable]
}
    12cc:	b011      	add	sp, #68	; 0x44
    12ce:	bd30      	pop	{r4, r5, pc}
    12d0:	20000210 	.word	0x20000210
    12d4:	200003c4 	.word	0x200003c4
    12d8:	00000181 	.word	0x00000181
    12dc:	41004400 	.word	0x41004400
    12e0:	00002a8d 	.word	0x00002a8d
    12e4:	003d0900 	.word	0x003d0900
    12e8:	00300002 	.word	0x00300002
    12ec:	00360003 	.word	0x00360003
    12f0:	00370003 	.word	0x00370003
    12f4:	200003b8 	.word	0x200003b8
    12f8:	42001c00 	.word	0x42001c00
    12fc:	00001775 	.word	0x00001775

00001300 <spi_send_bytes>:
 * \param[in] count number of bytes to send
 * \param[in] data pointer to tx buffer
 * \return status of the operation
 */
uint8_t spi_send_bytes(uint8_t count, uint8_t *data)
{
    1300:	b510      	push	{r4, lr}
	uint8_t ret_code = SPI_FUNCTION_RETCODE_SUCCESS;


	ret_code = spi_write_buffer_wait(&spi_master_instance, data, count);
    1302:	b282      	uxth	r2, r0
    1304:	4805      	ldr	r0, [pc, #20]	; (131c <spi_send_bytes+0x1c>)
    1306:	4b06      	ldr	r3, [pc, #24]	; (1320 <spi_send_bytes+0x20>)
    1308:	4798      	blx	r3
		
	if (ret_code == STATUS_ERR_TIMEOUT)
    130a:	2812      	cmp	r0, #18
    130c:	d003      	beq.n	1316 <spi_send_bytes+0x16>
	{
		return SPI_FUNCTION_RETCODE_TIMEOUT;
	}
	else if (ret_code != STATUS_OK)
    130e:	2800      	cmp	r0, #0
    1310:	d002      	beq.n	1318 <spi_send_bytes+0x18>
	{
		return SPI_FUNCTION_RETCODE_COMM_FAIL;
    1312:	20f0      	movs	r0, #240	; 0xf0
    1314:	e000      	b.n	1318 <spi_send_bytes+0x18>
		return SPI_FUNCTION_RETCODE_TIMEOUT;
    1316:	20f1      	movs	r0, #241	; 0xf1
	}
	else
	{
		return SPI_FUNCTION_RETCODE_SUCCESS;	
	}
}
    1318:	bd10      	pop	{r4, pc}
    131a:	46c0      	nop			; (mov r8, r8)
    131c:	200003b8 	.word	0x200003b8
    1320:	00001cc1 	.word	0x00001cc1

00001324 <spi_receive_bytes>:
 * \param[in] count number of bytes to receive
 * \param[in] data pointer to rx buffer
 * \return status of the operation
 */
uint8_t spi_receive_bytes(uint8_t count, uint8_t *data)
{
    1324:	b510      	push	{r4, lr}
	uint8_t ret_code = SPI_FUNCTION_RETCODE_SUCCESS;


	ret_code = spi_read_buffer_wait(&spi_master_instance, data, count,0xFF);
    1326:	b282      	uxth	r2, r0
    1328:	23ff      	movs	r3, #255	; 0xff
    132a:	4805      	ldr	r0, [pc, #20]	; (1340 <spi_receive_bytes+0x1c>)
    132c:	4c05      	ldr	r4, [pc, #20]	; (1344 <spi_receive_bytes+0x20>)
    132e:	47a0      	blx	r4
	
	if (ret_code == STATUS_ERR_TIMEOUT)
    1330:	2812      	cmp	r0, #18
    1332:	d003      	beq.n	133c <spi_receive_bytes+0x18>
	{
		return SPI_FUNCTION_RETCODE_TIMEOUT;
	}
	else if (ret_code != STATUS_OK)
    1334:	2800      	cmp	r0, #0
    1336:	d002      	beq.n	133e <spi_receive_bytes+0x1a>
	{
		return SPI_FUNCTION_RETCODE_COMM_FAIL;
    1338:	20f0      	movs	r0, #240	; 0xf0
    133a:	e000      	b.n	133e <spi_receive_bytes+0x1a>
		return SPI_FUNCTION_RETCODE_TIMEOUT;
    133c:	20f1      	movs	r0, #241	; 0xf1
	}
	else
	{
		return SPI_FUNCTION_RETCODE_SUCCESS;
	}
    133e:	bd10      	pop	{r4, pc}
    1340:	200003b8 	.word	0x200003b8
    1344:	00001aa9 	.word	0x00001aa9

00001348 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1348:	b5f0      	push	{r4, r5, r6, r7, lr}
    134a:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    134c:	ac01      	add	r4, sp, #4
    134e:	2501      	movs	r5, #1
    1350:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1352:	2700      	movs	r7, #0
    1354:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1356:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1358:	0021      	movs	r1, r4
    135a:	203e      	movs	r0, #62	; 0x3e
    135c:	4e06      	ldr	r6, [pc, #24]	; (1378 <system_board_init+0x30>)
    135e:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    1360:	2280      	movs	r2, #128	; 0x80
    1362:	05d2      	lsls	r2, r2, #23
    1364:	4b05      	ldr	r3, [pc, #20]	; (137c <system_board_init+0x34>)
    1366:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1368:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    136a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    136c:	0021      	movs	r1, r4
    136e:	200f      	movs	r0, #15
    1370:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    1372:	b003      	add	sp, #12
    1374:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1376:	46c0      	nop			; (mov r8, r8)
    1378:	00000181 	.word	0x00000181
    137c:	41004480 	.word	0x41004480

00001380 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1380:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
    1382:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1384:	2340      	movs	r3, #64	; 0x40
    1386:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1388:	4281      	cmp	r1, r0
    138a:	d202      	bcs.n	1392 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    138c:	0018      	movs	r0, r3
    138e:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1390:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1392:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1394:	1c63      	adds	r3, r4, #1
    1396:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1398:	4288      	cmp	r0, r1
    139a:	d9f9      	bls.n	1390 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    139c:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    139e:	2cff      	cmp	r4, #255	; 0xff
    13a0:	d8f4      	bhi.n	138c <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    13a2:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    13a4:	2300      	movs	r3, #0
    13a6:	e7f1      	b.n	138c <_sercom_get_sync_baud_val+0xc>

000013a8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    13a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    13aa:	46de      	mov	lr, fp
    13ac:	4657      	mov	r7, sl
    13ae:	464e      	mov	r6, r9
    13b0:	4645      	mov	r5, r8
    13b2:	b5e0      	push	{r5, r6, r7, lr}
    13b4:	b089      	sub	sp, #36	; 0x24
    13b6:	000c      	movs	r4, r1
    13b8:	9205      	str	r2, [sp, #20]
    13ba:	aa12      	add	r2, sp, #72	; 0x48
    13bc:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    13be:	0005      	movs	r5, r0
    13c0:	434d      	muls	r5, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    13c2:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    13c4:	42a5      	cmp	r5, r4
    13c6:	d907      	bls.n	13d8 <_sercom_get_async_baud_val+0x30>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    13c8:	0010      	movs	r0, r2
    13ca:	b009      	add	sp, #36	; 0x24
    13cc:	bc3c      	pop	{r2, r3, r4, r5}
    13ce:	4690      	mov	r8, r2
    13d0:	4699      	mov	r9, r3
    13d2:	46a2      	mov	sl, r4
    13d4:	46ab      	mov	fp, r5
    13d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    13d8:	2b00      	cmp	r3, #0
    13da:	d155      	bne.n	1488 <_sercom_get_async_baud_val+0xe0>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    13dc:	0002      	movs	r2, r0
    13de:	0008      	movs	r0, r1
    13e0:	2100      	movs	r1, #0
    13e2:	4d63      	ldr	r5, [pc, #396]	; (1570 <_sercom_get_async_baud_val+0x1c8>)
    13e4:	47a8      	blx	r5
    13e6:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
    13e8:	0026      	movs	r6, r4
    13ea:	2700      	movs	r7, #0
	uint64_t q = 0, r = 0, bit_shift;
    13ec:	2300      	movs	r3, #0
    13ee:	2400      	movs	r4, #0
    13f0:	9300      	str	r3, [sp, #0]
    13f2:	9401      	str	r4, [sp, #4]
    13f4:	2200      	movs	r2, #0
    13f6:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    13f8:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    13fa:	2120      	movs	r1, #32
    13fc:	468c      	mov	ip, r1
    13fe:	391f      	subs	r1, #31
    1400:	9602      	str	r6, [sp, #8]
    1402:	9703      	str	r7, [sp, #12]
    1404:	e014      	b.n	1430 <_sercom_get_async_baud_val+0x88>
    1406:	4664      	mov	r4, ip
    1408:	1a24      	subs	r4, r4, r0
    140a:	000d      	movs	r5, r1
    140c:	40e5      	lsrs	r5, r4
    140e:	46a8      	mov	r8, r5
    1410:	e015      	b.n	143e <_sercom_get_async_baud_val+0x96>
			r = r - d;
    1412:	9c02      	ldr	r4, [sp, #8]
    1414:	9d03      	ldr	r5, [sp, #12]
    1416:	1b12      	subs	r2, r2, r4
    1418:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    141a:	464d      	mov	r5, r9
    141c:	9e00      	ldr	r6, [sp, #0]
    141e:	9f01      	ldr	r7, [sp, #4]
    1420:	4335      	orrs	r5, r6
    1422:	003c      	movs	r4, r7
    1424:	4646      	mov	r6, r8
    1426:	4334      	orrs	r4, r6
    1428:	9500      	str	r5, [sp, #0]
    142a:	9401      	str	r4, [sp, #4]
	for (i = 63; i >= 0; i--) {
    142c:	3801      	subs	r0, #1
    142e:	d31d      	bcc.n	146c <_sercom_get_async_baud_val+0xc4>
		bit_shift = (uint64_t)1 << i;
    1430:	2420      	movs	r4, #32
    1432:	4264      	negs	r4, r4
    1434:	1904      	adds	r4, r0, r4
    1436:	d4e6      	bmi.n	1406 <_sercom_get_async_baud_val+0x5e>
    1438:	000d      	movs	r5, r1
    143a:	40a5      	lsls	r5, r4
    143c:	46a8      	mov	r8, r5
    143e:	000c      	movs	r4, r1
    1440:	4084      	lsls	r4, r0
    1442:	46a1      	mov	r9, r4
		r = r << 1;
    1444:	1892      	adds	r2, r2, r2
    1446:	415b      	adcs	r3, r3
    1448:	0014      	movs	r4, r2
    144a:	001d      	movs	r5, r3
		if (n & bit_shift) {
    144c:	4646      	mov	r6, r8
    144e:	465f      	mov	r7, fp
    1450:	423e      	tst	r6, r7
    1452:	d003      	beq.n	145c <_sercom_get_async_baud_val+0xb4>
			r |= 0x01;
    1454:	000e      	movs	r6, r1
    1456:	4326      	orrs	r6, r4
    1458:	0032      	movs	r2, r6
    145a:	002b      	movs	r3, r5
		if (r >= d) {
    145c:	9c02      	ldr	r4, [sp, #8]
    145e:	9d03      	ldr	r5, [sp, #12]
    1460:	429d      	cmp	r5, r3
    1462:	d8e3      	bhi.n	142c <_sercom_get_async_baud_val+0x84>
    1464:	d1d5      	bne.n	1412 <_sercom_get_async_baud_val+0x6a>
    1466:	4294      	cmp	r4, r2
    1468:	d8e0      	bhi.n	142c <_sercom_get_async_baud_val+0x84>
    146a:	e7d2      	b.n	1412 <_sercom_get_async_baud_val+0x6a>
		scale = ((uint64_t)1 << SHIFT) - ratio;
    146c:	2200      	movs	r2, #0
    146e:	2301      	movs	r3, #1
    1470:	9800      	ldr	r0, [sp, #0]
    1472:	9901      	ldr	r1, [sp, #4]
    1474:	1a12      	subs	r2, r2, r0
    1476:	418b      	sbcs	r3, r1
    1478:	0019      	movs	r1, r3
		baud_calculated = (65536 * scale) >> SHIFT;
    147a:	0c13      	lsrs	r3, r2, #16
    147c:	040a      	lsls	r2, r1, #16
    147e:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1480:	9b05      	ldr	r3, [sp, #20]
    1482:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    1484:	2200      	movs	r2, #0
    1486:	e79f      	b.n	13c8 <_sercom_get_async_baud_val+0x20>
	uint64_t baud_calculated = 0;
    1488:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    148a:	2b01      	cmp	r3, #1
    148c:	d1f8      	bne.n	1480 <_sercom_get_async_baud_val+0xd8>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    148e:	0f63      	lsrs	r3, r4, #29
    1490:	9304      	str	r3, [sp, #16]
    1492:	00e3      	lsls	r3, r4, #3
    1494:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
    1496:	000a      	movs	r2, r1
    1498:	2300      	movs	r3, #0
    149a:	2100      	movs	r1, #0
    149c:	4c34      	ldr	r4, [pc, #208]	; (1570 <_sercom_get_async_baud_val+0x1c8>)
    149e:	47a0      	blx	r4
    14a0:	0004      	movs	r4, r0
    14a2:	000d      	movs	r5, r1
    14a4:	2300      	movs	r3, #0
    14a6:	469c      	mov	ip, r3
    14a8:	9306      	str	r3, [sp, #24]
		bit_shift = (uint64_t)1 << i;
    14aa:	3320      	adds	r3, #32
    14ac:	469b      	mov	fp, r3
    14ae:	2601      	movs	r6, #1
			if(baud_int < BAUD_INT_MAX) {
    14b0:	4663      	mov	r3, ip
    14b2:	9307      	str	r3, [sp, #28]
    14b4:	e048      	b.n	1548 <_sercom_get_async_baud_val+0x1a0>
		bit_shift = (uint64_t)1 << i;
    14b6:	4659      	mov	r1, fp
    14b8:	1bc9      	subs	r1, r1, r7
    14ba:	0030      	movs	r0, r6
    14bc:	40c8      	lsrs	r0, r1
    14be:	4682      	mov	sl, r0
    14c0:	e010      	b.n	14e4 <_sercom_get_async_baud_val+0x13c>
			r = r - d;
    14c2:	9800      	ldr	r0, [sp, #0]
    14c4:	9901      	ldr	r1, [sp, #4]
    14c6:	1a12      	subs	r2, r2, r0
    14c8:	418b      	sbcs	r3, r1
			q |= bit_shift;
    14ca:	9902      	ldr	r1, [sp, #8]
    14cc:	4648      	mov	r0, r9
    14ce:	4301      	orrs	r1, r0
    14d0:	9102      	str	r1, [sp, #8]
	for (i = 63; i >= 0; i--) {
    14d2:	3f01      	subs	r7, #1
    14d4:	d325      	bcc.n	1522 <_sercom_get_async_baud_val+0x17a>
		bit_shift = (uint64_t)1 << i;
    14d6:	2120      	movs	r1, #32
    14d8:	4249      	negs	r1, r1
    14da:	1879      	adds	r1, r7, r1
    14dc:	d4eb      	bmi.n	14b6 <_sercom_get_async_baud_val+0x10e>
    14de:	0030      	movs	r0, r6
    14e0:	4088      	lsls	r0, r1
    14e2:	4682      	mov	sl, r0
    14e4:	0031      	movs	r1, r6
    14e6:	40b9      	lsls	r1, r7
    14e8:	4689      	mov	r9, r1
		r = r << 1;
    14ea:	1892      	adds	r2, r2, r2
    14ec:	415b      	adcs	r3, r3
    14ee:	0010      	movs	r0, r2
    14f0:	0019      	movs	r1, r3
		if (n & bit_shift) {
    14f2:	4644      	mov	r4, r8
    14f4:	464d      	mov	r5, r9
    14f6:	402c      	ands	r4, r5
    14f8:	46a4      	mov	ip, r4
    14fa:	4654      	mov	r4, sl
    14fc:	9d04      	ldr	r5, [sp, #16]
    14fe:	402c      	ands	r4, r5
    1500:	46a2      	mov	sl, r4
    1502:	4664      	mov	r4, ip
    1504:	4655      	mov	r5, sl
    1506:	432c      	orrs	r4, r5
    1508:	d003      	beq.n	1512 <_sercom_get_async_baud_val+0x16a>
			r |= 0x01;
    150a:	0034      	movs	r4, r6
    150c:	4304      	orrs	r4, r0
    150e:	0022      	movs	r2, r4
    1510:	000b      	movs	r3, r1
		if (r >= d) {
    1512:	9800      	ldr	r0, [sp, #0]
    1514:	9901      	ldr	r1, [sp, #4]
    1516:	4299      	cmp	r1, r3
    1518:	d8db      	bhi.n	14d2 <_sercom_get_async_baud_val+0x12a>
    151a:	d1d2      	bne.n	14c2 <_sercom_get_async_baud_val+0x11a>
    151c:	4290      	cmp	r0, r2
    151e:	d8d8      	bhi.n	14d2 <_sercom_get_async_baud_val+0x12a>
    1520:	e7cf      	b.n	14c2 <_sercom_get_async_baud_val+0x11a>
    1522:	9c00      	ldr	r4, [sp, #0]
    1524:	9d01      	ldr	r5, [sp, #4]
			baud_int -= baud_fp;
    1526:	9902      	ldr	r1, [sp, #8]
    1528:	9a07      	ldr	r2, [sp, #28]
    152a:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
    152c:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
    152e:	4911      	ldr	r1, [pc, #68]	; (1574 <_sercom_get_async_baud_val+0x1cc>)
    1530:	428b      	cmp	r3, r1
    1532:	d914      	bls.n	155e <_sercom_get_async_baud_val+0x1b6>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    1534:	9b06      	ldr	r3, [sp, #24]
    1536:	3301      	adds	r3, #1
    1538:	b2db      	uxtb	r3, r3
    153a:	0019      	movs	r1, r3
    153c:	9306      	str	r3, [sp, #24]
    153e:	0013      	movs	r3, r2
    1540:	3301      	adds	r3, #1
    1542:	9307      	str	r3, [sp, #28]
    1544:	2908      	cmp	r1, #8
    1546:	d008      	beq.n	155a <_sercom_get_async_baud_val+0x1b2>
	uint64_t q = 0, r = 0, bit_shift;
    1548:	2300      	movs	r3, #0
    154a:	9302      	str	r3, [sp, #8]
    154c:	2200      	movs	r2, #0
    154e:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    1550:	213f      	movs	r1, #63	; 0x3f
    1552:	9400      	str	r4, [sp, #0]
    1554:	9501      	str	r5, [sp, #4]
    1556:	000f      	movs	r7, r1
    1558:	e7bd      	b.n	14d6 <_sercom_get_async_baud_val+0x12e>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    155a:	2240      	movs	r2, #64	; 0x40
    155c:	e734      	b.n	13c8 <_sercom_get_async_baud_val+0x20>
    155e:	2240      	movs	r2, #64	; 0x40
		if(baud_fp == BAUD_FP_MAX) {
    1560:	9906      	ldr	r1, [sp, #24]
    1562:	2908      	cmp	r1, #8
    1564:	d100      	bne.n	1568 <_sercom_get_async_baud_val+0x1c0>
    1566:	e72f      	b.n	13c8 <_sercom_get_async_baud_val+0x20>
		baud_calculated = baud_int | (baud_fp << 13);
    1568:	034a      	lsls	r2, r1, #13
    156a:	431a      	orrs	r2, r3
    156c:	e788      	b.n	1480 <_sercom_get_async_baud_val+0xd8>
    156e:	46c0      	nop			; (mov r8, r8)
    1570:	000029c1 	.word	0x000029c1
    1574:	00001fff 	.word	0x00001fff

00001578 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1578:	b510      	push	{r4, lr}
    157a:	b082      	sub	sp, #8
    157c:	0004      	movs	r4, r0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
    157e:	4b0e      	ldr	r3, [pc, #56]	; (15b8 <sercom_set_gclk_generator+0x40>)
    1580:	781b      	ldrb	r3, [r3, #0]
    1582:	2b00      	cmp	r3, #0
    1584:	d007      	beq.n	1596 <sercom_set_gclk_generator+0x1e>
    1586:	2900      	cmp	r1, #0
    1588:	d105      	bne.n	1596 <sercom_set_gclk_generator+0x1e>
		/* Save config. */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    158a:	4b0b      	ldr	r3, [pc, #44]	; (15b8 <sercom_set_gclk_generator+0x40>)
    158c:	785b      	ldrb	r3, [r3, #1]
    158e:	4283      	cmp	r3, r0
    1590:	d010      	beq.n	15b4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1592:	201d      	movs	r0, #29
    1594:	e00c      	b.n	15b0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1596:	a901      	add	r1, sp, #4
    1598:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    159a:	2013      	movs	r0, #19
    159c:	4b07      	ldr	r3, [pc, #28]	; (15bc <sercom_set_gclk_generator+0x44>)
    159e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    15a0:	2013      	movs	r0, #19
    15a2:	4b07      	ldr	r3, [pc, #28]	; (15c0 <sercom_set_gclk_generator+0x48>)
    15a4:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    15a6:	4b04      	ldr	r3, [pc, #16]	; (15b8 <sercom_set_gclk_generator+0x40>)
    15a8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    15aa:	2201      	movs	r2, #1
    15ac:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    15ae:	2000      	movs	r0, #0
}
    15b0:	b002      	add	sp, #8
    15b2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    15b4:	2000      	movs	r0, #0
    15b6:	e7fb      	b.n	15b0 <sercom_set_gclk_generator+0x38>
    15b8:	20000214 	.word	0x20000214
    15bc:	000026b5 	.word	0x000026b5
    15c0:	00002629 	.word	0x00002629

000015c4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    15c4:	4b40      	ldr	r3, [pc, #256]	; (16c8 <_sercom_get_default_pad+0x104>)
    15c6:	4298      	cmp	r0, r3
    15c8:	d031      	beq.n	162e <_sercom_get_default_pad+0x6a>
    15ca:	d90a      	bls.n	15e2 <_sercom_get_default_pad+0x1e>
    15cc:	4b3f      	ldr	r3, [pc, #252]	; (16cc <_sercom_get_default_pad+0x108>)
    15ce:	4298      	cmp	r0, r3
    15d0:	d04d      	beq.n	166e <_sercom_get_default_pad+0xaa>
    15d2:	4b3f      	ldr	r3, [pc, #252]	; (16d0 <_sercom_get_default_pad+0x10c>)
    15d4:	4298      	cmp	r0, r3
    15d6:	d05a      	beq.n	168e <_sercom_get_default_pad+0xca>
    15d8:	4b3e      	ldr	r3, [pc, #248]	; (16d4 <_sercom_get_default_pad+0x110>)
    15da:	4298      	cmp	r0, r3
    15dc:	d037      	beq.n	164e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    15de:	2000      	movs	r0, #0
}
    15e0:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    15e2:	4b3d      	ldr	r3, [pc, #244]	; (16d8 <_sercom_get_default_pad+0x114>)
    15e4:	4298      	cmp	r0, r3
    15e6:	d00c      	beq.n	1602 <_sercom_get_default_pad+0x3e>
    15e8:	4b3c      	ldr	r3, [pc, #240]	; (16dc <_sercom_get_default_pad+0x118>)
    15ea:	4298      	cmp	r0, r3
    15ec:	d1f7      	bne.n	15de <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    15ee:	2901      	cmp	r1, #1
    15f0:	d017      	beq.n	1622 <_sercom_get_default_pad+0x5e>
    15f2:	2900      	cmp	r1, #0
    15f4:	d05d      	beq.n	16b2 <_sercom_get_default_pad+0xee>
    15f6:	2902      	cmp	r1, #2
    15f8:	d015      	beq.n	1626 <_sercom_get_default_pad+0x62>
    15fa:	2903      	cmp	r1, #3
    15fc:	d015      	beq.n	162a <_sercom_get_default_pad+0x66>
	return 0;
    15fe:	2000      	movs	r0, #0
    1600:	e7ee      	b.n	15e0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1602:	2901      	cmp	r1, #1
    1604:	d007      	beq.n	1616 <_sercom_get_default_pad+0x52>
    1606:	2900      	cmp	r1, #0
    1608:	d051      	beq.n	16ae <_sercom_get_default_pad+0xea>
    160a:	2902      	cmp	r1, #2
    160c:	d005      	beq.n	161a <_sercom_get_default_pad+0x56>
    160e:	2903      	cmp	r1, #3
    1610:	d005      	beq.n	161e <_sercom_get_default_pad+0x5a>
	return 0;
    1612:	2000      	movs	r0, #0
    1614:	e7e4      	b.n	15e0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1616:	4832      	ldr	r0, [pc, #200]	; (16e0 <_sercom_get_default_pad+0x11c>)
    1618:	e7e2      	b.n	15e0 <_sercom_get_default_pad+0x1c>
    161a:	4832      	ldr	r0, [pc, #200]	; (16e4 <_sercom_get_default_pad+0x120>)
    161c:	e7e0      	b.n	15e0 <_sercom_get_default_pad+0x1c>
    161e:	4832      	ldr	r0, [pc, #200]	; (16e8 <_sercom_get_default_pad+0x124>)
    1620:	e7de      	b.n	15e0 <_sercom_get_default_pad+0x1c>
    1622:	4832      	ldr	r0, [pc, #200]	; (16ec <_sercom_get_default_pad+0x128>)
    1624:	e7dc      	b.n	15e0 <_sercom_get_default_pad+0x1c>
    1626:	4832      	ldr	r0, [pc, #200]	; (16f0 <_sercom_get_default_pad+0x12c>)
    1628:	e7da      	b.n	15e0 <_sercom_get_default_pad+0x1c>
    162a:	4832      	ldr	r0, [pc, #200]	; (16f4 <_sercom_get_default_pad+0x130>)
    162c:	e7d8      	b.n	15e0 <_sercom_get_default_pad+0x1c>
    162e:	2901      	cmp	r1, #1
    1630:	d007      	beq.n	1642 <_sercom_get_default_pad+0x7e>
    1632:	2900      	cmp	r1, #0
    1634:	d03f      	beq.n	16b6 <_sercom_get_default_pad+0xf2>
    1636:	2902      	cmp	r1, #2
    1638:	d005      	beq.n	1646 <_sercom_get_default_pad+0x82>
    163a:	2903      	cmp	r1, #3
    163c:	d005      	beq.n	164a <_sercom_get_default_pad+0x86>
	return 0;
    163e:	2000      	movs	r0, #0
    1640:	e7ce      	b.n	15e0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1642:	482d      	ldr	r0, [pc, #180]	; (16f8 <_sercom_get_default_pad+0x134>)
    1644:	e7cc      	b.n	15e0 <_sercom_get_default_pad+0x1c>
    1646:	482d      	ldr	r0, [pc, #180]	; (16fc <_sercom_get_default_pad+0x138>)
    1648:	e7ca      	b.n	15e0 <_sercom_get_default_pad+0x1c>
    164a:	482d      	ldr	r0, [pc, #180]	; (1700 <_sercom_get_default_pad+0x13c>)
    164c:	e7c8      	b.n	15e0 <_sercom_get_default_pad+0x1c>
    164e:	2901      	cmp	r1, #1
    1650:	d007      	beq.n	1662 <_sercom_get_default_pad+0x9e>
    1652:	2900      	cmp	r1, #0
    1654:	d031      	beq.n	16ba <_sercom_get_default_pad+0xf6>
    1656:	2902      	cmp	r1, #2
    1658:	d005      	beq.n	1666 <_sercom_get_default_pad+0xa2>
    165a:	2903      	cmp	r1, #3
    165c:	d005      	beq.n	166a <_sercom_get_default_pad+0xa6>
	return 0;
    165e:	2000      	movs	r0, #0
    1660:	e7be      	b.n	15e0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1662:	4828      	ldr	r0, [pc, #160]	; (1704 <_sercom_get_default_pad+0x140>)
    1664:	e7bc      	b.n	15e0 <_sercom_get_default_pad+0x1c>
    1666:	4828      	ldr	r0, [pc, #160]	; (1708 <_sercom_get_default_pad+0x144>)
    1668:	e7ba      	b.n	15e0 <_sercom_get_default_pad+0x1c>
    166a:	4828      	ldr	r0, [pc, #160]	; (170c <_sercom_get_default_pad+0x148>)
    166c:	e7b8      	b.n	15e0 <_sercom_get_default_pad+0x1c>
    166e:	2901      	cmp	r1, #1
    1670:	d007      	beq.n	1682 <_sercom_get_default_pad+0xbe>
    1672:	2900      	cmp	r1, #0
    1674:	d023      	beq.n	16be <_sercom_get_default_pad+0xfa>
    1676:	2902      	cmp	r1, #2
    1678:	d005      	beq.n	1686 <_sercom_get_default_pad+0xc2>
    167a:	2903      	cmp	r1, #3
    167c:	d005      	beq.n	168a <_sercom_get_default_pad+0xc6>
	return 0;
    167e:	2000      	movs	r0, #0
    1680:	e7ae      	b.n	15e0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1682:	4823      	ldr	r0, [pc, #140]	; (1710 <_sercom_get_default_pad+0x14c>)
    1684:	e7ac      	b.n	15e0 <_sercom_get_default_pad+0x1c>
    1686:	4823      	ldr	r0, [pc, #140]	; (1714 <_sercom_get_default_pad+0x150>)
    1688:	e7aa      	b.n	15e0 <_sercom_get_default_pad+0x1c>
    168a:	4823      	ldr	r0, [pc, #140]	; (1718 <_sercom_get_default_pad+0x154>)
    168c:	e7a8      	b.n	15e0 <_sercom_get_default_pad+0x1c>
    168e:	2901      	cmp	r1, #1
    1690:	d007      	beq.n	16a2 <_sercom_get_default_pad+0xde>
    1692:	2900      	cmp	r1, #0
    1694:	d015      	beq.n	16c2 <_sercom_get_default_pad+0xfe>
    1696:	2902      	cmp	r1, #2
    1698:	d005      	beq.n	16a6 <_sercom_get_default_pad+0xe2>
    169a:	2903      	cmp	r1, #3
    169c:	d005      	beq.n	16aa <_sercom_get_default_pad+0xe6>
	return 0;
    169e:	2000      	movs	r0, #0
    16a0:	e79e      	b.n	15e0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    16a2:	481e      	ldr	r0, [pc, #120]	; (171c <_sercom_get_default_pad+0x158>)
    16a4:	e79c      	b.n	15e0 <_sercom_get_default_pad+0x1c>
    16a6:	481e      	ldr	r0, [pc, #120]	; (1720 <_sercom_get_default_pad+0x15c>)
    16a8:	e79a      	b.n	15e0 <_sercom_get_default_pad+0x1c>
    16aa:	481e      	ldr	r0, [pc, #120]	; (1724 <_sercom_get_default_pad+0x160>)
    16ac:	e798      	b.n	15e0 <_sercom_get_default_pad+0x1c>
    16ae:	481e      	ldr	r0, [pc, #120]	; (1728 <_sercom_get_default_pad+0x164>)
    16b0:	e796      	b.n	15e0 <_sercom_get_default_pad+0x1c>
    16b2:	2003      	movs	r0, #3
    16b4:	e794      	b.n	15e0 <_sercom_get_default_pad+0x1c>
    16b6:	481d      	ldr	r0, [pc, #116]	; (172c <_sercom_get_default_pad+0x168>)
    16b8:	e792      	b.n	15e0 <_sercom_get_default_pad+0x1c>
    16ba:	481d      	ldr	r0, [pc, #116]	; (1730 <_sercom_get_default_pad+0x16c>)
    16bc:	e790      	b.n	15e0 <_sercom_get_default_pad+0x1c>
    16be:	481d      	ldr	r0, [pc, #116]	; (1734 <_sercom_get_default_pad+0x170>)
    16c0:	e78e      	b.n	15e0 <_sercom_get_default_pad+0x1c>
    16c2:	481d      	ldr	r0, [pc, #116]	; (1738 <_sercom_get_default_pad+0x174>)
    16c4:	e78c      	b.n	15e0 <_sercom_get_default_pad+0x1c>
    16c6:	46c0      	nop			; (mov r8, r8)
    16c8:	42001000 	.word	0x42001000
    16cc:	42001800 	.word	0x42001800
    16d0:	42001c00 	.word	0x42001c00
    16d4:	42001400 	.word	0x42001400
    16d8:	42000800 	.word	0x42000800
    16dc:	42000c00 	.word	0x42000c00
    16e0:	00050003 	.word	0x00050003
    16e4:	00060003 	.word	0x00060003
    16e8:	00070003 	.word	0x00070003
    16ec:	00010003 	.word	0x00010003
    16f0:	001e0003 	.word	0x001e0003
    16f4:	001f0003 	.word	0x001f0003
    16f8:	00090003 	.word	0x00090003
    16fc:	000a0003 	.word	0x000a0003
    1700:	000b0003 	.word	0x000b0003
    1704:	00110003 	.word	0x00110003
    1708:	00120003 	.word	0x00120003
    170c:	00130003 	.word	0x00130003
    1710:	000d0003 	.word	0x000d0003
    1714:	000e0003 	.word	0x000e0003
    1718:	000f0003 	.word	0x000f0003
    171c:	00170003 	.word	0x00170003
    1720:	00180003 	.word	0x00180003
    1724:	00190003 	.word	0x00190003
    1728:	00040003 	.word	0x00040003
    172c:	00080003 	.word	0x00080003
    1730:	00100003 	.word	0x00100003
    1734:	000c0003 	.word	0x000c0003
    1738:	00160003 	.word	0x00160003

0000173c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    173c:	b530      	push	{r4, r5, lr}
    173e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1740:	4b0b      	ldr	r3, [pc, #44]	; (1770 <_sercom_get_sercom_inst_index+0x34>)
    1742:	466a      	mov	r2, sp
    1744:	cb32      	ldmia	r3!, {r1, r4, r5}
    1746:	c232      	stmia	r2!, {r1, r4, r5}
    1748:	cb32      	ldmia	r3!, {r1, r4, r5}
    174a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    174c:	9b00      	ldr	r3, [sp, #0]
    174e:	4283      	cmp	r3, r0
    1750:	d00b      	beq.n	176a <_sercom_get_sercom_inst_index+0x2e>
    1752:	2301      	movs	r3, #1
    1754:	009a      	lsls	r2, r3, #2
    1756:	4669      	mov	r1, sp
    1758:	5852      	ldr	r2, [r2, r1]
    175a:	4282      	cmp	r2, r0
    175c:	d006      	beq.n	176c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    175e:	3301      	adds	r3, #1
    1760:	2b06      	cmp	r3, #6
    1762:	d1f7      	bne.n	1754 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1764:	2000      	movs	r0, #0
}
    1766:	b007      	add	sp, #28
    1768:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    176a:	2300      	movs	r3, #0
			return i;
    176c:	b2d8      	uxtb	r0, r3
    176e:	e7fa      	b.n	1766 <_sercom_get_sercom_inst_index+0x2a>
    1770:	00004a0c 	.word	0x00004a0c

00001774 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1774:	b5f0      	push	{r4, r5, r6, r7, lr}
    1776:	46d6      	mov	lr, sl
    1778:	464f      	mov	r7, r9
    177a:	b580      	push	{r7, lr}
    177c:	b08b      	sub	sp, #44	; 0x2c
    177e:	4681      	mov	r9, r0
    1780:	000f      	movs	r7, r1
    1782:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1784:	0003      	movs	r3, r0
    1786:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1788:	680b      	ldr	r3, [r1, #0]
    178a:	079b      	lsls	r3, r3, #30
    178c:	d409      	bmi.n	17a2 <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    178e:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    1790:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1792:	07db      	lsls	r3, r3, #31
    1794:	d400      	bmi.n	1798 <spi_init+0x24>
    1796:	e0b1      	b.n	18fc <spi_init+0x188>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    1798:	b00b      	add	sp, #44	; 0x2c
    179a:	bc0c      	pop	{r2, r3}
    179c:	4691      	mov	r9, r2
    179e:	469a      	mov	sl, r3
    17a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    17a2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    17a4:	9305      	str	r3, [sp, #20]
    17a6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    17a8:	9306      	str	r3, [sp, #24]
    17aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
    17ac:	9307      	str	r3, [sp, #28]
    17ae:	6b53      	ldr	r3, [r2, #52]	; 0x34
    17b0:	9308      	str	r3, [sp, #32]
    17b2:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    17b4:	ab05      	add	r3, sp, #20
    17b6:	9301      	str	r3, [sp, #4]
    17b8:	e00a      	b.n	17d0 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    17ba:	0038      	movs	r0, r7
    17bc:	4baf      	ldr	r3, [pc, #700]	; (1a7c <spi_init+0x308>)
    17be:	4798      	blx	r3
    17c0:	e00c      	b.n	17dc <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    17c2:	230f      	movs	r3, #15
    17c4:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    17c6:	4281      	cmp	r1, r0
    17c8:	d12d      	bne.n	1826 <spi_init+0xb2>
    17ca:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    17cc:	2e04      	cmp	r6, #4
    17ce:	d02f      	beq.n	1830 <spi_init+0xbc>
    17d0:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
    17d2:	00b3      	lsls	r3, r6, #2
    17d4:	9a01      	ldr	r2, [sp, #4]
    17d6:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    17d8:	2800      	cmp	r0, #0
    17da:	d0ee      	beq.n	17ba <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
    17dc:	1c43      	adds	r3, r0, #1
    17de:	d0f4      	beq.n	17ca <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
    17e0:	0401      	lsls	r1, r0, #16
    17e2:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    17e4:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    17e6:	b2c3      	uxtb	r3, r0
    17e8:	469c      	mov	ip, r3
		return NULL;
    17ea:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    17ec:	0602      	lsls	r2, r0, #24
    17ee:	d405      	bmi.n	17fc <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
    17f0:	4663      	mov	r3, ip
    17f2:	095b      	lsrs	r3, r3, #5
    17f4:	01db      	lsls	r3, r3, #7
    17f6:	4aa2      	ldr	r2, [pc, #648]	; (1a80 <spi_init+0x30c>)
    17f8:	4692      	mov	sl, r2
    17fa:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
    17fc:	221f      	movs	r2, #31
    17fe:	4660      	mov	r0, ip
    1800:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    1802:	1898      	adds	r0, r3, r2
    1804:	3040      	adds	r0, #64	; 0x40
    1806:	7800      	ldrb	r0, [r0, #0]
    1808:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    180a:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    180c:	4655      	mov	r5, sl
    180e:	07ed      	lsls	r5, r5, #31
    1810:	d5d9      	bpl.n	17c6 <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    1812:	0852      	lsrs	r2, r2, #1
    1814:	189b      	adds	r3, r3, r2
    1816:	3330      	adds	r3, #48	; 0x30
    1818:	7818      	ldrb	r0, [r3, #0]
    181a:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    181c:	4663      	mov	r3, ip
    181e:	07db      	lsls	r3, r3, #31
    1820:	d5cf      	bpl.n	17c2 <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    1822:	0900      	lsrs	r0, r0, #4
    1824:	e7cf      	b.n	17c6 <spi_init+0x52>
			module->hw = NULL;
    1826:	2300      	movs	r3, #0
    1828:	464a      	mov	r2, r9
    182a:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
    182c:	201c      	movs	r0, #28
    182e:	e7b3      	b.n	1798 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    1830:	2013      	movs	r0, #19
    1832:	4b94      	ldr	r3, [pc, #592]	; (1a84 <spi_init+0x310>)
    1834:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    1836:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    1838:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    183a:	2a01      	cmp	r2, #1
    183c:	d016      	beq.n	186c <spi_init+0xf8>
	if (config->mode == SPI_MODE_SLAVE) {
    183e:	7821      	ldrb	r1, [r4, #0]
    1840:	2900      	cmp	r1, #0
    1842:	d127      	bne.n	1894 <spi_init+0x120>
		if (spi_module->CTRLA.reg != addr) {
    1844:	683b      	ldr	r3, [r7, #0]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    1846:	7fe2      	ldrb	r2, [r4, #31]
    1848:	0412      	lsls	r2, r2, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    184a:	7fa0      	ldrb	r0, [r4, #30]
    184c:	4302      	orrs	r2, r0
			return STATUS_ERR_DENIED;
    184e:	201c      	movs	r0, #28
		if (spi_module->CTRLA.reg != addr) {
    1850:	429a      	cmp	r2, r3
    1852:	d1a1      	bne.n	1798 <spi_init+0x24>
		ctrla |= config->mode_specific.slave.frame_format;
    1854:	69a3      	ldr	r3, [r4, #24]
		ctrlb |= config->mode_specific.slave.address_mode;
    1856:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
    1858:	3004      	adds	r0, #4
    185a:	5c20      	ldrb	r0, [r4, r0]
    185c:	2800      	cmp	r0, #0
    185e:	d001      	beq.n	1864 <spi_init+0xf0>
    1860:	2040      	movs	r0, #64	; 0x40
    1862:	4302      	orrs	r2, r0
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    1864:	2008      	movs	r0, #8
    1866:	4303      	orrs	r3, r0
    1868:	431d      	orrs	r5, r3
    186a:	e014      	b.n	1896 <spi_init+0x122>
		enum status_code error_code = _sercom_get_sync_baud_val(
    186c:	aa04      	add	r2, sp, #16
    186e:	0001      	movs	r1, r0
    1870:	69a0      	ldr	r0, [r4, #24]
    1872:	4b85      	ldr	r3, [pc, #532]	; (1a88 <spi_init+0x314>)
    1874:	4798      	blx	r3
    1876:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    1878:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    187a:	2b00      	cmp	r3, #0
    187c:	d000      	beq.n	1880 <spi_init+0x10c>
    187e:	e78b      	b.n	1798 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    1880:	7b3b      	ldrb	r3, [r7, #12]
    1882:	b2db      	uxtb	r3, r3
    1884:	aa04      	add	r2, sp, #16
    1886:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    1888:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    188a:	429a      	cmp	r2, r3
    188c:	d000      	beq.n	1890 <spi_init+0x11c>
    188e:	e783      	b.n	1798 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    1890:	350c      	adds	r5, #12
    1892:	e7d4      	b.n	183e <spi_init+0xca>
	uint32_t ctrlb = 0;
    1894:	2200      	movs	r2, #0
	ctrla |= config->mux_setting;
    1896:	6863      	ldr	r3, [r4, #4]
    1898:	68a0      	ldr	r0, [r4, #8]
    189a:	4303      	orrs	r3, r0
    189c:	68e0      	ldr	r0, [r4, #12]
    189e:	4303      	orrs	r3, r0
    18a0:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    18a2:	7c20      	ldrb	r0, [r4, #16]
    18a4:	4302      	orrs	r2, r0
	if (config->run_in_standby) {
    18a6:	7c60      	ldrb	r0, [r4, #17]
    18a8:	2800      	cmp	r0, #0
    18aa:	d001      	beq.n	18b0 <spi_init+0x13c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    18ac:	2080      	movs	r0, #128	; 0x80
    18ae:	4303      	orrs	r3, r0
	if (config->receiver_enable) {
    18b0:	7ca0      	ldrb	r0, [r4, #18]
    18b2:	2800      	cmp	r0, #0
    18b4:	d002      	beq.n	18bc <spi_init+0x148>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    18b6:	2080      	movs	r0, #128	; 0x80
    18b8:	0280      	lsls	r0, r0, #10
    18ba:	4302      	orrs	r2, r0
	if (config->select_slave_low_detect_enable) {
    18bc:	7ce0      	ldrb	r0, [r4, #19]
    18be:	2800      	cmp	r0, #0
    18c0:	d002      	beq.n	18c8 <spi_init+0x154>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    18c2:	2080      	movs	r0, #128	; 0x80
    18c4:	0080      	lsls	r0, r0, #2
    18c6:	4302      	orrs	r2, r0
	if (config->master_slave_select_enable) {
    18c8:	7d20      	ldrb	r0, [r4, #20]
    18ca:	2800      	cmp	r0, #0
    18cc:	d002      	beq.n	18d4 <spi_init+0x160>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    18ce:	2080      	movs	r0, #128	; 0x80
    18d0:	0180      	lsls	r0, r0, #6
    18d2:	4302      	orrs	r2, r0
	if (spi_module->CTRLA.reg == ctrla &&
    18d4:	6838      	ldr	r0, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    18d6:	2502      	movs	r5, #2
    18d8:	432b      	orrs	r3, r5
	if (spi_module->CTRLA.reg == ctrla &&
    18da:	4283      	cmp	r3, r0
    18dc:	d004      	beq.n	18e8 <spi_init+0x174>
	module->hw = NULL;
    18de:	2300      	movs	r3, #0
    18e0:	464a      	mov	r2, r9
    18e2:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
    18e4:	201c      	movs	r0, #28
    18e6:	e757      	b.n	1798 <spi_init+0x24>
			spi_module->CTRLB.reg == ctrlb) {
    18e8:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    18ea:	4293      	cmp	r3, r2
    18ec:	d1f7      	bne.n	18de <spi_init+0x16a>
		module->mode           = config->mode;
    18ee:	464b      	mov	r3, r9
    18f0:	7159      	strb	r1, [r3, #5]
		module->character_size = config->character_size;
    18f2:	7c23      	ldrb	r3, [r4, #16]
    18f4:	464a      	mov	r2, r9
    18f6:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    18f8:	2000      	movs	r0, #0
    18fa:	e74d      	b.n	1798 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    18fc:	0008      	movs	r0, r1
    18fe:	4b63      	ldr	r3, [pc, #396]	; (1a8c <spi_init+0x318>)
    1900:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1902:	4a63      	ldr	r2, [pc, #396]	; (1a90 <spi_init+0x31c>)
    1904:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1906:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1908:	2301      	movs	r3, #1
    190a:	40ab      	lsls	r3, r5
    190c:	430b      	orrs	r3, r1
    190e:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1910:	a909      	add	r1, sp, #36	; 0x24
    1912:	2624      	movs	r6, #36	; 0x24
    1914:	5da3      	ldrb	r3, [r4, r6]
    1916:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1918:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    191a:	b2c5      	uxtb	r5, r0
    191c:	0028      	movs	r0, r5
    191e:	4b5d      	ldr	r3, [pc, #372]	; (1a94 <spi_init+0x320>)
    1920:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1922:	0028      	movs	r0, r5
    1924:	4b5c      	ldr	r3, [pc, #368]	; (1a98 <spi_init+0x324>)
    1926:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1928:	5da0      	ldrb	r0, [r4, r6]
    192a:	2100      	movs	r1, #0
    192c:	4b5b      	ldr	r3, [pc, #364]	; (1a9c <spi_init+0x328>)
    192e:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    1930:	7823      	ldrb	r3, [r4, #0]
    1932:	2b01      	cmp	r3, #1
    1934:	d020      	beq.n	1978 <spi_init+0x204>
	if (config->mode == SPI_MODE_SLAVE) {
    1936:	7823      	ldrb	r3, [r4, #0]
    1938:	2b00      	cmp	r3, #0
    193a:	d103      	bne.n	1944 <spi_init+0x1d0>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    193c:	683b      	ldr	r3, [r7, #0]
    193e:	2208      	movs	r2, #8
    1940:	4313      	orrs	r3, r2
    1942:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1944:	464b      	mov	r3, r9
    1946:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1948:	ab04      	add	r3, sp, #16
    194a:	2280      	movs	r2, #128	; 0x80
    194c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    194e:	2200      	movs	r2, #0
    1950:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1952:	2101      	movs	r1, #1
    1954:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    1956:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    1958:	7823      	ldrb	r3, [r4, #0]
    195a:	2b00      	cmp	r3, #0
    195c:	d101      	bne.n	1962 <spi_init+0x1ee>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    195e:	ab04      	add	r3, sp, #16
    1960:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1962:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1964:	9305      	str	r3, [sp, #20]
    1966:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1968:	9306      	str	r3, [sp, #24]
    196a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    196c:	9307      	str	r3, [sp, #28]
    196e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1970:	9308      	str	r3, [sp, #32]
    1972:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1974:	ad05      	add	r5, sp, #20
    1976:	e011      	b.n	199c <spi_init+0x228>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1978:	683b      	ldr	r3, [r7, #0]
    197a:	220c      	movs	r2, #12
    197c:	4313      	orrs	r3, r2
    197e:	603b      	str	r3, [r7, #0]
    1980:	e7d9      	b.n	1936 <spi_init+0x1c2>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1982:	0030      	movs	r0, r6
    1984:	4b3d      	ldr	r3, [pc, #244]	; (1a7c <spi_init+0x308>)
    1986:	4798      	blx	r3
    1988:	e00d      	b.n	19a6 <spi_init+0x232>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    198a:	a904      	add	r1, sp, #16
    198c:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    198e:	0c00      	lsrs	r0, r0, #16
    1990:	b2c0      	uxtb	r0, r0
    1992:	4b43      	ldr	r3, [pc, #268]	; (1aa0 <spi_init+0x32c>)
    1994:	4798      	blx	r3
    1996:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1998:	2f04      	cmp	r7, #4
    199a:	d007      	beq.n	19ac <spi_init+0x238>
    199c:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    199e:	00bb      	lsls	r3, r7, #2
    19a0:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    19a2:	2800      	cmp	r0, #0
    19a4:	d0ed      	beq.n	1982 <spi_init+0x20e>
		if (current_pinmux != PINMUX_UNUSED) {
    19a6:	1c43      	adds	r3, r0, #1
    19a8:	d1ef      	bne.n	198a <spi_init+0x216>
    19aa:	e7f4      	b.n	1996 <spi_init+0x222>
	module->mode             = config->mode;
    19ac:	7823      	ldrb	r3, [r4, #0]
    19ae:	464a      	mov	r2, r9
    19b0:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    19b2:	7c23      	ldrb	r3, [r4, #16]
    19b4:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    19b6:	7ca3      	ldrb	r3, [r4, #18]
    19b8:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    19ba:	7d23      	ldrb	r3, [r4, #20]
    19bc:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
    19be:	2200      	movs	r2, #0
    19c0:	ab02      	add	r3, sp, #8
    19c2:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    19c4:	7823      	ldrb	r3, [r4, #0]
    19c6:	2b01      	cmp	r3, #1
    19c8:	d012      	beq.n	19f0 <spi_init+0x27c>
	if (config->mode == SPI_MODE_SLAVE) {
    19ca:	7823      	ldrb	r3, [r4, #0]
    19cc:	2b00      	cmp	r3, #0
    19ce:	d127      	bne.n	1a20 <spi_init+0x2ac>
		ctrla = config->mode_specific.slave.frame_format;
    19d0:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    19d2:	8ba2      	ldrh	r2, [r4, #28]
		spi_module->ADDR.reg |=
    19d4:	6a73      	ldr	r3, [r6, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    19d6:	7fe1      	ldrb	r1, [r4, #31]
    19d8:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    19da:	7fa5      	ldrb	r5, [r4, #30]
    19dc:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
    19de:	4319      	orrs	r1, r3
    19e0:	6271      	str	r1, [r6, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    19e2:	2320      	movs	r3, #32
    19e4:	5ce3      	ldrb	r3, [r4, r3]
    19e6:	2b00      	cmp	r3, #0
    19e8:	d01c      	beq.n	1a24 <spi_init+0x2b0>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    19ea:	2340      	movs	r3, #64	; 0x40
    19ec:	431a      	orrs	r2, r3
    19ee:	e019      	b.n	1a24 <spi_init+0x2b0>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    19f0:	464b      	mov	r3, r9
    19f2:	6818      	ldr	r0, [r3, #0]
    19f4:	4b25      	ldr	r3, [pc, #148]	; (1a8c <spi_init+0x318>)
    19f6:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    19f8:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    19fa:	b2c0      	uxtb	r0, r0
    19fc:	4b21      	ldr	r3, [pc, #132]	; (1a84 <spi_init+0x310>)
    19fe:	4798      	blx	r3
    1a00:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    1a02:	ab02      	add	r3, sp, #8
    1a04:	1d9a      	adds	r2, r3, #6
    1a06:	69a0      	ldr	r0, [r4, #24]
    1a08:	4b1f      	ldr	r3, [pc, #124]	; (1a88 <spi_init+0x314>)
    1a0a:	4798      	blx	r3
    1a0c:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    1a0e:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    1a10:	2b00      	cmp	r3, #0
    1a12:	d000      	beq.n	1a16 <spi_init+0x2a2>
    1a14:	e6c0      	b.n	1798 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    1a16:	ab02      	add	r3, sp, #8
    1a18:	3306      	adds	r3, #6
    1a1a:	781b      	ldrb	r3, [r3, #0]
    1a1c:	7333      	strb	r3, [r6, #12]
    1a1e:	e7d4      	b.n	19ca <spi_init+0x256>
	uint32_t ctrlb = 0;
    1a20:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    1a22:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    1a24:	6863      	ldr	r3, [r4, #4]
    1a26:	68a1      	ldr	r1, [r4, #8]
    1a28:	430b      	orrs	r3, r1
    1a2a:	68e1      	ldr	r1, [r4, #12]
    1a2c:	430b      	orrs	r3, r1
    1a2e:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    1a30:	7c21      	ldrb	r1, [r4, #16]
    1a32:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    1a34:	7c61      	ldrb	r1, [r4, #17]
    1a36:	2900      	cmp	r1, #0
    1a38:	d103      	bne.n	1a42 <spi_init+0x2ce>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1a3a:	491a      	ldr	r1, [pc, #104]	; (1aa4 <spi_init+0x330>)
    1a3c:	7889      	ldrb	r1, [r1, #2]
    1a3e:	0789      	lsls	r1, r1, #30
    1a40:	d501      	bpl.n	1a46 <spi_init+0x2d2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1a42:	2180      	movs	r1, #128	; 0x80
    1a44:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    1a46:	7ca1      	ldrb	r1, [r4, #18]
    1a48:	2900      	cmp	r1, #0
    1a4a:	d002      	beq.n	1a52 <spi_init+0x2de>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1a4c:	2180      	movs	r1, #128	; 0x80
    1a4e:	0289      	lsls	r1, r1, #10
    1a50:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    1a52:	7ce1      	ldrb	r1, [r4, #19]
    1a54:	2900      	cmp	r1, #0
    1a56:	d002      	beq.n	1a5e <spi_init+0x2ea>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1a58:	2180      	movs	r1, #128	; 0x80
    1a5a:	0089      	lsls	r1, r1, #2
    1a5c:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    1a5e:	7d21      	ldrb	r1, [r4, #20]
    1a60:	2900      	cmp	r1, #0
    1a62:	d002      	beq.n	1a6a <spi_init+0x2f6>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1a64:	2180      	movs	r1, #128	; 0x80
    1a66:	0189      	lsls	r1, r1, #6
    1a68:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    1a6a:	6831      	ldr	r1, [r6, #0]
    1a6c:	430b      	orrs	r3, r1
    1a6e:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
    1a70:	6873      	ldr	r3, [r6, #4]
    1a72:	431a      	orrs	r2, r3
    1a74:	6072      	str	r2, [r6, #4]
	return STATUS_OK;
    1a76:	2000      	movs	r0, #0
    1a78:	e68e      	b.n	1798 <spi_init+0x24>
    1a7a:	46c0      	nop			; (mov r8, r8)
    1a7c:	000015c5 	.word	0x000015c5
    1a80:	41004400 	.word	0x41004400
    1a84:	000026d1 	.word	0x000026d1
    1a88:	00001381 	.word	0x00001381
    1a8c:	0000173d 	.word	0x0000173d
    1a90:	40000400 	.word	0x40000400
    1a94:	000026b5 	.word	0x000026b5
    1a98:	00002629 	.word	0x00002629
    1a9c:	00001579 	.word	0x00001579
    1aa0:	0000024d 	.word	0x0000024d
    1aa4:	41002000 	.word	0x41002000

00001aa8 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    1aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1aaa:	46de      	mov	lr, fp
    1aac:	4657      	mov	r7, sl
    1aae:	464e      	mov	r6, r9
    1ab0:	4645      	mov	r5, r8
    1ab2:	b5e0      	push	{r5, r6, r7, lr}
    1ab4:	4688      	mov	r8, r1
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1ab6:	2117      	movs	r1, #23
	if (length == 0) {
    1ab8:	2a00      	cmp	r2, #0
    1aba:	d078      	beq.n	1bae <spi_read_buffer_wait+0x106>
	}

	if (!(module->receiver_enabled)) {
    1abc:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    1abe:	3105      	adds	r1, #5
	if (!(module->receiver_enabled)) {
    1ac0:	2c00      	cmp	r4, #0
    1ac2:	d074      	beq.n	1bae <spi_read_buffer_wait+0x106>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    1ac4:	7941      	ldrb	r1, [r0, #5]
    1ac6:	2900      	cmp	r1, #0
    1ac8:	d103      	bne.n	1ad2 <spi_read_buffer_wait+0x2a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1aca:	6801      	ldr	r1, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1acc:	7e0c      	ldrb	r4, [r1, #24]
    1ace:	07a4      	lsls	r4, r4, #30
    1ad0:	d40c      	bmi.n	1aec <spi_read_buffer_wait+0x44>
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    1ad2:	3a01      	subs	r2, #1
    1ad4:	b294      	uxth	r4, r2
    1ad6:	2500      	movs	r5, #0

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    1ad8:	2204      	movs	r2, #4
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    1ada:	2102      	movs	r1, #2
    1adc:	468a      	mov	sl, r1
			while (!spi_is_ready_to_write(module)) {
    1ade:	2601      	movs	r6, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1ae0:	05db      	lsls	r3, r3, #23
    1ae2:	0ddb      	lsrs	r3, r3, #23
    1ae4:	4699      	mov	r9, r3

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    1ae6:	2304      	movs	r3, #4
    1ae8:	469b      	mov	fp, r3
    1aea:	e03b      	b.n	1b64 <spi_read_buffer_wait+0xbc>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1aec:	2402      	movs	r4, #2
    1aee:	760c      	strb	r4, [r1, #24]
    1af0:	e7ef      	b.n	1ad2 <spi_read_buffer_wait+0x2a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1af2:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1af4:	7e0b      	ldrb	r3, [r1, #24]
			while (!spi_is_ready_to_write(module)) {
    1af6:	4233      	tst	r3, r6
    1af8:	d0fc      	beq.n	1af4 <spi_read_buffer_wait+0x4c>
    1afa:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_write(module)) {
    1afc:	4233      	tst	r3, r6
    1afe:	d009      	beq.n	1b14 <spi_read_buffer_wait+0x6c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1b00:	464b      	mov	r3, r9
    1b02:	628b      	str	r3, [r1, #40]	; 0x28
    1b04:	e031      	b.n	1b6a <spi_read_buffer_wait+0xc2>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1b06:	7e3b      	ldrb	r3, [r7, #24]
			if (spi_is_write_complete(module)) {
    1b08:	4651      	mov	r1, sl
    1b0a:	420b      	tst	r3, r1
    1b0c:	d13c      	bne.n	1b88 <spi_read_buffer_wait+0xe0>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1b0e:	7e3b      	ldrb	r3, [r7, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
    1b10:	4213      	tst	r3, r2
    1b12:	d049      	beq.n	1ba8 <spi_read_buffer_wait+0x100>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1b14:	6807      	ldr	r7, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1b16:	7e3b      	ldrb	r3, [r7, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    1b18:	4213      	tst	r3, r2
    1b1a:	d0fc      	beq.n	1b16 <spi_read_buffer_wait+0x6e>
    1b1c:	7e3b      	ldrb	r3, [r7, #24]
	if (!spi_is_ready_to_read(module)) {
    1b1e:	4213      	tst	r3, r2
    1b20:	d044      	beq.n	1bac <spi_read_buffer_wait+0x104>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1b22:	8b7b      	ldrh	r3, [r7, #26]
	enum status_code retval = STATUS_OK;
    1b24:	2100      	movs	r1, #0
    1b26:	468c      	mov	ip, r1
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1b28:	4213      	tst	r3, r2
    1b2a:	d006      	beq.n	1b3a <spi_read_buffer_wait+0x92>
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    1b2c:	8b7b      	ldrh	r3, [r7, #26]
    1b2e:	4659      	mov	r1, fp
    1b30:	430b      	orrs	r3, r1
    1b32:	b29b      	uxth	r3, r3
    1b34:	837b      	strh	r3, [r7, #26]
		retval = STATUS_ERR_OVERFLOW;
    1b36:	231e      	movs	r3, #30
    1b38:	469c      	mov	ip, r3
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1b3a:	7983      	ldrb	r3, [r0, #6]
    1b3c:	2b01      	cmp	r3, #1
    1b3e:	d027      	beq.n	1b90 <spi_read_buffer_wait+0xe8>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1b40:	6abf      	ldr	r7, [r7, #40]	; 0x28
    1b42:	b2ff      	uxtb	r7, r7
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    1b44:	4663      	mov	r3, ip
    1b46:	2b00      	cmp	r3, #0
    1b48:	d138      	bne.n	1bbc <spi_read_buffer_wait+0x114>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    1b4a:	1c6b      	adds	r3, r5, #1
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	4641      	mov	r1, r8
    1b50:	554f      	strb	r7, [r1, r5]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1b52:	7981      	ldrb	r1, [r0, #6]
    1b54:	2901      	cmp	r1, #1
    1b56:	d01f      	beq.n	1b98 <spi_read_buffer_wait+0xf0>
		rx_data[rx_pos++] = received_data;
    1b58:	001d      	movs	r5, r3
	while (length--) {
    1b5a:	3c01      	subs	r4, #1
    1b5c:	b2a4      	uxth	r4, r4
    1b5e:	4b18      	ldr	r3, [pc, #96]	; (1bc0 <spi_read_buffer_wait+0x118>)
    1b60:	429c      	cmp	r4, r3
    1b62:	d01f      	beq.n	1ba4 <spi_read_buffer_wait+0xfc>
		if (module->mode == SPI_MODE_MASTER) {
    1b64:	7943      	ldrb	r3, [r0, #5]
    1b66:	2b01      	cmp	r3, #1
    1b68:	d0c3      	beq.n	1af2 <spi_read_buffer_wait+0x4a>
		if (module->mode == SPI_MODE_SLAVE) {
    1b6a:	7943      	ldrb	r3, [r0, #5]
    1b6c:	2b00      	cmp	r3, #0
    1b6e:	d1d1      	bne.n	1b14 <spi_read_buffer_wait+0x6c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1b70:	6807      	ldr	r7, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1b72:	7e3b      	ldrb	r3, [r7, #24]
				if (spi_is_ready_to_read(module)) {
    1b74:	4213      	tst	r3, r2
    1b76:	d1c6      	bne.n	1b06 <spi_read_buffer_wait+0x5e>
    1b78:	4b12      	ldr	r3, [pc, #72]	; (1bc4 <spi_read_buffer_wait+0x11c>)
    1b7a:	7e39      	ldrb	r1, [r7, #24]
    1b7c:	4211      	tst	r1, r2
    1b7e:	d1c2      	bne.n	1b06 <spi_read_buffer_wait+0x5e>
    1b80:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1b82:	2b00      	cmp	r3, #0
    1b84:	d1f9      	bne.n	1b7a <spi_read_buffer_wait+0xd2>
    1b86:	e7be      	b.n	1b06 <spi_read_buffer_wait+0x5e>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1b88:	2302      	movs	r3, #2
    1b8a:	763b      	strb	r3, [r7, #24]
				return STATUS_ABORTED;
    1b8c:	2104      	movs	r1, #4
    1b8e:	e00e      	b.n	1bae <spi_read_buffer_wait+0x106>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1b90:	6abf      	ldr	r7, [r7, #40]	; 0x28
    1b92:	05ff      	lsls	r7, r7, #23
    1b94:	0dff      	lsrs	r7, r7, #23
    1b96:	e7d5      	b.n	1b44 <spi_read_buffer_wait+0x9c>
			rx_data[rx_pos++] = (received_data >> 8);
    1b98:	3502      	adds	r5, #2
    1b9a:	b2ad      	uxth	r5, r5
    1b9c:	0a3f      	lsrs	r7, r7, #8
    1b9e:	4641      	mov	r1, r8
    1ba0:	54cf      	strb	r7, [r1, r3]
    1ba2:	e7da      	b.n	1b5a <spi_read_buffer_wait+0xb2>
    1ba4:	4661      	mov	r1, ip
    1ba6:	e002      	b.n	1bae <spi_read_buffer_wait+0x106>
				return STATUS_ERR_TIMEOUT;
    1ba8:	2112      	movs	r1, #18
    1baa:	e000      	b.n	1bae <spi_read_buffer_wait+0x106>
		return STATUS_ERR_IO;
    1bac:	2110      	movs	r1, #16
		}
	}

	return STATUS_OK;
}
    1bae:	0008      	movs	r0, r1
    1bb0:	bc3c      	pop	{r2, r3, r4, r5}
    1bb2:	4690      	mov	r8, r2
    1bb4:	4699      	mov	r9, r3
    1bb6:	46a2      	mov	sl, r4
    1bb8:	46ab      	mov	fp, r5
    1bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bbc:	4661      	mov	r1, ip
    1bbe:	e7f6      	b.n	1bae <spi_read_buffer_wait+0x106>
    1bc0:	0000ffff 	.word	0x0000ffff
    1bc4:	00002710 	.word	0x00002710

00001bc8 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    1bc8:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    1bca:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    1bcc:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    1bce:	2c01      	cmp	r4, #1
    1bd0:	d001      	beq.n	1bd6 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    1bd2:	0018      	movs	r0, r3
    1bd4:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    1bd6:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    1bd8:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    1bda:	2c00      	cmp	r4, #0
    1bdc:	d1f9      	bne.n	1bd2 <spi_select_slave+0xa>
		if (select) {
    1bde:	2a00      	cmp	r2, #0
    1be0:	d05a      	beq.n	1c98 <spi_select_slave+0xd0>
			if (slave->address_enabled) {
    1be2:	784b      	ldrb	r3, [r1, #1]
    1be4:	2b00      	cmp	r3, #0
    1be6:	d046      	beq.n	1c76 <spi_select_slave+0xae>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1be8:	6803      	ldr	r3, [r0, #0]
    1bea:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    1bec:	07db      	lsls	r3, r3, #31
    1bee:	d410      	bmi.n	1c12 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    1bf0:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1bf2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1bf4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1bf6:	2900      	cmp	r1, #0
    1bf8:	d104      	bne.n	1c04 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    1bfa:	0953      	lsrs	r3, r2, #5
    1bfc:	01db      	lsls	r3, r3, #7
    1bfe:	492f      	ldr	r1, [pc, #188]	; (1cbc <spi_select_slave+0xf4>)
    1c00:	468c      	mov	ip, r1
    1c02:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1c04:	211f      	movs	r1, #31
    1c06:	4011      	ands	r1, r2
    1c08:	2201      	movs	r2, #1
    1c0a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1c0c:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    1c0e:	2305      	movs	r3, #5
    1c10:	e7df      	b.n	1bd2 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    1c12:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1c14:	09d4      	lsrs	r4, r2, #7
		return NULL;
    1c16:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1c18:	2c00      	cmp	r4, #0
    1c1a:	d104      	bne.n	1c26 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    1c1c:	0953      	lsrs	r3, r2, #5
    1c1e:	01db      	lsls	r3, r3, #7
    1c20:	4c26      	ldr	r4, [pc, #152]	; (1cbc <spi_select_slave+0xf4>)
    1c22:	46a4      	mov	ip, r4
    1c24:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1c26:	241f      	movs	r4, #31
    1c28:	4014      	ands	r4, r2
    1c2a:	2201      	movs	r2, #1
    1c2c:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1c2e:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1c30:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1c32:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    1c34:	07d2      	lsls	r2, r2, #31
    1c36:	d501      	bpl.n	1c3c <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1c38:	788a      	ldrb	r2, [r1, #2]
    1c3a:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    1c3c:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    1c3e:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    1c40:	2a00      	cmp	r2, #0
    1c42:	d1c6      	bne.n	1bd2 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1c44:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    1c46:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1c48:	7e13      	ldrb	r3, [r2, #24]
    1c4a:	420b      	tst	r3, r1
    1c4c:	d0fc      	beq.n	1c48 <spi_select_slave+0x80>
    1c4e:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    1c50:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    1c52:	0749      	lsls	r1, r1, #29
    1c54:	d5bd      	bpl.n	1bd2 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1c56:	8b53      	ldrh	r3, [r2, #26]
    1c58:	075b      	lsls	r3, r3, #29
    1c5a:	d503      	bpl.n	1c64 <spi_select_slave+0x9c>
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    1c5c:	8b53      	ldrh	r3, [r2, #26]
    1c5e:	2104      	movs	r1, #4
    1c60:	430b      	orrs	r3, r1
    1c62:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1c64:	7983      	ldrb	r3, [r0, #6]
    1c66:	2b01      	cmp	r3, #1
    1c68:	d002      	beq.n	1c70 <spi_select_slave+0xa8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1c6a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1c6c:	2300      	movs	r3, #0
    1c6e:	e7b0      	b.n	1bd2 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1c70:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1c72:	2300      	movs	r3, #0
    1c74:	e7ad      	b.n	1bd2 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    1c76:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1c78:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1c7a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1c7c:	2900      	cmp	r1, #0
    1c7e:	d104      	bne.n	1c8a <spi_select_slave+0xc2>
		return &(ports[port_index]->Group[group_index]);
    1c80:	0953      	lsrs	r3, r2, #5
    1c82:	01db      	lsls	r3, r3, #7
    1c84:	490d      	ldr	r1, [pc, #52]	; (1cbc <spi_select_slave+0xf4>)
    1c86:	468c      	mov	ip, r1
    1c88:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1c8a:	211f      	movs	r1, #31
    1c8c:	4011      	ands	r1, r2
    1c8e:	2201      	movs	r2, #1
    1c90:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    1c92:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    1c94:	2300      	movs	r3, #0
    1c96:	e79c      	b.n	1bd2 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    1c98:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1c9a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1c9c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1c9e:	2900      	cmp	r1, #0
    1ca0:	d104      	bne.n	1cac <spi_select_slave+0xe4>
		return &(ports[port_index]->Group[group_index]);
    1ca2:	0953      	lsrs	r3, r2, #5
    1ca4:	01db      	lsls	r3, r3, #7
    1ca6:	4905      	ldr	r1, [pc, #20]	; (1cbc <spi_select_slave+0xf4>)
    1ca8:	468c      	mov	ip, r1
    1caa:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1cac:	211f      	movs	r1, #31
    1cae:	4011      	ands	r1, r2
    1cb0:	2201      	movs	r2, #1
    1cb2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1cb4:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    1cb6:	2300      	movs	r3, #0
    1cb8:	e78b      	b.n	1bd2 <spi_select_slave+0xa>
    1cba:	46c0      	nop			; (mov r8, r8)
    1cbc:	41004400 	.word	0x41004400

00001cc0 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    1cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cc2:	46de      	mov	lr, fp
    1cc4:	4657      	mov	r7, sl
    1cc6:	464e      	mov	r6, r9
    1cc8:	4645      	mov	r5, r8
    1cca:	b5e0      	push	{r5, r6, r7, lr}
    1ccc:	b085      	sub	sp, #20
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1cce:	2317      	movs	r3, #23
	if (length == 0) {
    1cd0:	2a00      	cmp	r2, #0
    1cd2:	d107      	bne.n	1ce4 <spi_write_buffer_wait+0x24>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    1cd4:	0018      	movs	r0, r3
    1cd6:	b005      	add	sp, #20
    1cd8:	bc3c      	pop	{r2, r3, r4, r5}
    1cda:	4690      	mov	r8, r2
    1cdc:	4699      	mov	r9, r3
    1cde:	46a2      	mov	sl, r4
    1ce0:	46ab      	mov	fp, r5
    1ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    1ce4:	7943      	ldrb	r3, [r0, #5]
    1ce6:	2b00      	cmp	r3, #0
    1ce8:	d103      	bne.n	1cf2 <spi_write_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1cea:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1cec:	7e1c      	ldrb	r4, [r3, #24]
    1cee:	07a4      	lsls	r4, r4, #30
    1cf0:	d40b      	bmi.n	1d0a <spi_write_buffer_wait+0x4a>
						data_to_send = tx_data[tx_pos++];
    1cf2:	9203      	str	r2, [sp, #12]
    1cf4:	2400      	movs	r4, #0
	while (length--) {
    1cf6:	4b74      	ldr	r3, [pc, #464]	; (1ec8 <spi_write_buffer_wait+0x208>)
    1cf8:	469b      	mov	fp, r3
				if (spi_is_ready_to_write(module)) {
    1cfa:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    1cfc:	2502      	movs	r5, #2
    1cfe:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    1d00:	3502      	adds	r5, #2
    1d02:	46a9      	mov	r9, r5
    1d04:	3a01      	subs	r2, #1
    1d06:	b292      	uxth	r2, r2
    1d08:	e023      	b.n	1d52 <spi_write_buffer_wait+0x92>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1d0a:	2402      	movs	r4, #2
    1d0c:	761c      	strb	r4, [r3, #24]
    1d0e:	e7f0      	b.n	1cf2 <spi_write_buffer_wait+0x32>
    1d10:	7e2e      	ldrb	r6, [r5, #24]
			if (spi_is_write_complete(module)) {
    1d12:	4667      	mov	r7, ip
    1d14:	423e      	tst	r6, r7
    1d16:	d12d      	bne.n	1d74 <spi_write_buffer_wait+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1d18:	7e2d      	ldrb	r5, [r5, #24]
			if (!spi_is_ready_to_write(module)) {
    1d1a:	421d      	tst	r5, r3
    1d1c:	d100      	bne.n	1d20 <spi_write_buffer_wait+0x60>
    1d1e:	e0c9      	b.n	1eb4 <spi_write_buffer_wait+0x1f4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1d20:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1d22:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    1d24:	421d      	tst	r5, r3
    1d26:	d0fc      	beq.n	1d22 <spi_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
    1d28:	1c65      	adds	r5, r4, #1
    1d2a:	b2ad      	uxth	r5, r5
    1d2c:	46a8      	mov	r8, r5
    1d2e:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1d30:	7987      	ldrb	r7, [r0, #6]
    1d32:	2f01      	cmp	r7, #1
    1d34:	d022      	beq.n	1d7c <spi_write_buffer_wait+0xbc>
		uint16_t data_to_send = tx_data[tx_pos++];
    1d36:	b2ad      	uxth	r5, r5
    1d38:	4644      	mov	r4, r8
    1d3a:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    1d3c:	421f      	tst	r7, r3
    1d3e:	d002      	beq.n	1d46 <spi_write_buffer_wait+0x86>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1d40:	05ed      	lsls	r5, r5, #23
    1d42:	0ded      	lsrs	r5, r5, #23
    1d44:	62b5      	str	r5, [r6, #40]	; 0x28
    1d46:	1e55      	subs	r5, r2, #1
    1d48:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    1d4a:	79c6      	ldrb	r6, [r0, #7]
    1d4c:	2e00      	cmp	r6, #0
    1d4e:	d11c      	bne.n	1d8a <spi_write_buffer_wait+0xca>
    1d50:	002a      	movs	r2, r5
	while (length--) {
    1d52:	455a      	cmp	r2, fp
    1d54:	d072      	beq.n	1e3c <spi_write_buffer_wait+0x17c>
		if (module->mode == SPI_MODE_SLAVE) {
    1d56:	7945      	ldrb	r5, [r0, #5]
    1d58:	2d00      	cmp	r5, #0
    1d5a:	d1e1      	bne.n	1d20 <spi_write_buffer_wait+0x60>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1d5c:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1d5e:	7e2e      	ldrb	r6, [r5, #24]
				if (spi_is_ready_to_write(module)) {
    1d60:	421e      	tst	r6, r3
    1d62:	d1d5      	bne.n	1d10 <spi_write_buffer_wait+0x50>
    1d64:	4e59      	ldr	r6, [pc, #356]	; (1ecc <spi_write_buffer_wait+0x20c>)
    1d66:	7e2f      	ldrb	r7, [r5, #24]
    1d68:	421f      	tst	r7, r3
    1d6a:	d1d1      	bne.n	1d10 <spi_write_buffer_wait+0x50>
    1d6c:	3e01      	subs	r6, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1d6e:	2e00      	cmp	r6, #0
    1d70:	d1f9      	bne.n	1d66 <spi_write_buffer_wait+0xa6>
    1d72:	e7cd      	b.n	1d10 <spi_write_buffer_wait+0x50>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1d74:	2302      	movs	r3, #2
    1d76:	762b      	strb	r3, [r5, #24]
				return STATUS_ABORTED;
    1d78:	3302      	adds	r3, #2
    1d7a:	e7ab      	b.n	1cd4 <spi_write_buffer_wait+0x14>
			data_to_send |= (tx_data[tx_pos++] << 8);
    1d7c:	3402      	adds	r4, #2
    1d7e:	b2a4      	uxth	r4, r4
    1d80:	4647      	mov	r7, r8
    1d82:	5dcf      	ldrb	r7, [r1, r7]
    1d84:	023f      	lsls	r7, r7, #8
    1d86:	433d      	orrs	r5, r7
    1d88:	e7d7      	b.n	1d3a <spi_write_buffer_wait+0x7a>
			if (module->mode == SPI_MODE_SLAVE) {
    1d8a:	7945      	ldrb	r5, [r0, #5]
    1d8c:	2d00      	cmp	r5, #0
    1d8e:	d135      	bne.n	1dfc <spi_write_buffer_wait+0x13c>
    1d90:	4f4f      	ldr	r7, [pc, #316]	; (1ed0 <spi_write_buffer_wait+0x210>)
    1d92:	9102      	str	r1, [sp, #8]
    1d94:	e012      	b.n	1dbc <spi_write_buffer_wait+0xfc>
							data_to_send |= (tx_data[tx_pos++] << 8);
    1d96:	3402      	adds	r4, #2
    1d98:	b2a4      	uxth	r4, r4
    1d9a:	4641      	mov	r1, r8
    1d9c:	9e02      	ldr	r6, [sp, #8]
    1d9e:	5c71      	ldrb	r1, [r6, r1]
    1da0:	0209      	lsls	r1, r1, #8
    1da2:	9e01      	ldr	r6, [sp, #4]
    1da4:	430e      	orrs	r6, r1
    1da6:	e019      	b.n	1ddc <spi_write_buffer_wait+0x11c>
						length--;
    1da8:	3a01      	subs	r2, #1
    1daa:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    1dac:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1dae:	7e35      	ldrb	r5, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    1db0:	4649      	mov	r1, r9
    1db2:	420d      	tst	r5, r1
    1db4:	d119      	bne.n	1dea <spi_write_buffer_wait+0x12a>
    1db6:	3f01      	subs	r7, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1db8:	2f00      	cmp	r7, #0
    1dba:	d016      	beq.n	1dea <spi_write_buffer_wait+0x12a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1dbc:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1dbe:	7e2e      	ldrb	r6, [r5, #24]
					if (spi_is_ready_to_write(module)) {
    1dc0:	421e      	tst	r6, r3
    1dc2:	d0f3      	beq.n	1dac <spi_write_buffer_wait+0xec>
						data_to_send = tx_data[tx_pos++];
    1dc4:	1c66      	adds	r6, r4, #1
    1dc6:	b2b1      	uxth	r1, r6
    1dc8:	4688      	mov	r8, r1
    1dca:	9902      	ldr	r1, [sp, #8]
    1dcc:	5d09      	ldrb	r1, [r1, r4]
    1dce:	9101      	str	r1, [sp, #4]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1dd0:	7981      	ldrb	r1, [r0, #6]
    1dd2:	2901      	cmp	r1, #1
    1dd4:	d0df      	beq.n	1d96 <spi_write_buffer_wait+0xd6>
						data_to_send = tx_data[tx_pos++];
    1dd6:	4669      	mov	r1, sp
    1dd8:	888e      	ldrh	r6, [r1, #4]
    1dda:	4644      	mov	r4, r8
    1ddc:	7e29      	ldrb	r1, [r5, #24]
	if (!spi_is_ready_to_write(module)) {
    1dde:	4219      	tst	r1, r3
    1de0:	d0e2      	beq.n	1da8 <spi_write_buffer_wait+0xe8>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1de2:	05f6      	lsls	r6, r6, #23
    1de4:	0df6      	lsrs	r6, r6, #23
    1de6:	62ae      	str	r6, [r5, #40]	; 0x28
    1de8:	e7de      	b.n	1da8 <spi_write_buffer_wait+0xe8>
    1dea:	9902      	ldr	r1, [sp, #8]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1dec:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    1dee:	4667      	mov	r7, ip
    1df0:	423d      	tst	r5, r7
    1df2:	d110      	bne.n	1e16 <spi_write_buffer_wait+0x156>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1df4:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    1df6:	464e      	mov	r6, r9
    1df8:	4235      	tst	r5, r6
    1dfa:	d05d      	beq.n	1eb8 <spi_write_buffer_wait+0x1f8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1dfc:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1dfe:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    1e00:	464f      	mov	r7, r9
    1e02:	423d      	tst	r5, r7
    1e04:	d0fb      	beq.n	1dfe <spi_write_buffer_wait+0x13e>
    1e06:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    1e08:	423d      	tst	r5, r7
    1e0a:	d108      	bne.n	1e1e <spi_write_buffer_wait+0x15e>
			flush_length--;
    1e0c:	9d03      	ldr	r5, [sp, #12]
    1e0e:	3d01      	subs	r5, #1
    1e10:	b2ad      	uxth	r5, r5
    1e12:	9503      	str	r5, [sp, #12]
    1e14:	e776      	b.n	1d04 <spi_write_buffer_wait+0x44>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1e16:	2302      	movs	r3, #2
    1e18:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    1e1a:	3302      	adds	r3, #2
    1e1c:	e75a      	b.n	1cd4 <spi_write_buffer_wait+0x14>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1e1e:	8b75      	ldrh	r5, [r6, #26]
    1e20:	423d      	tst	r5, r7
    1e22:	d004      	beq.n	1e2e <spi_write_buffer_wait+0x16e>
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    1e24:	8b75      	ldrh	r5, [r6, #26]
    1e26:	2704      	movs	r7, #4
    1e28:	433d      	orrs	r5, r7
    1e2a:	b2ad      	uxth	r5, r5
    1e2c:	8375      	strh	r5, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1e2e:	7985      	ldrb	r5, [r0, #6]
    1e30:	2d01      	cmp	r5, #1
    1e32:	d001      	beq.n	1e38 <spi_write_buffer_wait+0x178>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1e34:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    1e36:	e7e9      	b.n	1e0c <spi_write_buffer_wait+0x14c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1e38:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    1e3a:	e7e7      	b.n	1e0c <spi_write_buffer_wait+0x14c>
	if (module->mode == SPI_MODE_MASTER) {
    1e3c:	7943      	ldrb	r3, [r0, #5]
    1e3e:	2b01      	cmp	r3, #1
    1e40:	d00d      	beq.n	1e5e <spi_write_buffer_wait+0x19e>
	if (module->mode == SPI_MODE_SLAVE) {
    1e42:	2b00      	cmp	r3, #0
    1e44:	d13a      	bne.n	1ebc <spi_write_buffer_wait+0x1fc>
		if (module->receiver_enabled) {
    1e46:	79c2      	ldrb	r2, [r0, #7]
    1e48:	2a00      	cmp	r2, #0
    1e4a:	d100      	bne.n	1e4e <spi_write_buffer_wait+0x18e>
    1e4c:	e742      	b.n	1cd4 <spi_write_buffer_wait+0x14>
					if (spi_is_ready_to_read(module)) {
    1e4e:	2404      	movs	r4, #4
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    1e50:	2504      	movs	r5, #4
			while (flush_length) {
    1e52:	9b03      	ldr	r3, [sp, #12]
    1e54:	2b00      	cmp	r3, #0
    1e56:	d100      	bne.n	1e5a <spi_write_buffer_wait+0x19a>
    1e58:	e73c      	b.n	1cd4 <spi_write_buffer_wait+0x14>
    1e5a:	9e03      	ldr	r6, [sp, #12]
    1e5c:	e010      	b.n	1e80 <spi_write_buffer_wait+0x1c0>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1e5e:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    1e60:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1e62:	7e0b      	ldrb	r3, [r1, #24]
    1e64:	4213      	tst	r3, r2
    1e66:	d0fc      	beq.n	1e62 <spi_write_buffer_wait+0x1a2>
	return STATUS_OK;
    1e68:	2300      	movs	r3, #0
    1e6a:	e733      	b.n	1cd4 <spi_write_buffer_wait+0x14>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1e6c:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    1e6e:	4223      	tst	r3, r4
    1e70:	d026      	beq.n	1ec0 <spi_write_buffer_wait+0x200>
    1e72:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    1e74:	4223      	tst	r3, r4
    1e76:	d10f      	bne.n	1e98 <spi_write_buffer_wait+0x1d8>
				flush_length--;
    1e78:	3e01      	subs	r6, #1
    1e7a:	b2b6      	uxth	r6, r6
			while (flush_length) {
    1e7c:	2e00      	cmp	r6, #0
    1e7e:	d021      	beq.n	1ec4 <spi_write_buffer_wait+0x204>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1e80:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1e82:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    1e84:	4223      	tst	r3, r4
    1e86:	d1f1      	bne.n	1e6c <spi_write_buffer_wait+0x1ac>
    1e88:	4b10      	ldr	r3, [pc, #64]	; (1ecc <spi_write_buffer_wait+0x20c>)
    1e8a:	7e0a      	ldrb	r2, [r1, #24]
    1e8c:	4222      	tst	r2, r4
    1e8e:	d1ed      	bne.n	1e6c <spi_write_buffer_wait+0x1ac>
    1e90:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1e92:	2b00      	cmp	r3, #0
    1e94:	d1f9      	bne.n	1e8a <spi_write_buffer_wait+0x1ca>
    1e96:	e7e9      	b.n	1e6c <spi_write_buffer_wait+0x1ac>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1e98:	8b4b      	ldrh	r3, [r1, #26]
    1e9a:	4223      	tst	r3, r4
    1e9c:	d003      	beq.n	1ea6 <spi_write_buffer_wait+0x1e6>
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    1e9e:	8b4b      	ldrh	r3, [r1, #26]
    1ea0:	432b      	orrs	r3, r5
    1ea2:	b29b      	uxth	r3, r3
    1ea4:	834b      	strh	r3, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1ea6:	7983      	ldrb	r3, [r0, #6]
    1ea8:	2b01      	cmp	r3, #1
    1eaa:	d001      	beq.n	1eb0 <spi_write_buffer_wait+0x1f0>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1eac:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    1eae:	e7e3      	b.n	1e78 <spi_write_buffer_wait+0x1b8>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1eb0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    1eb2:	e7e1      	b.n	1e78 <spi_write_buffer_wait+0x1b8>
				return STATUS_ERR_TIMEOUT;
    1eb4:	2312      	movs	r3, #18
    1eb6:	e70d      	b.n	1cd4 <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    1eb8:	2312      	movs	r3, #18
    1eba:	e70b      	b.n	1cd4 <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    1ebc:	2300      	movs	r3, #0
    1ebe:	e709      	b.n	1cd4 <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    1ec0:	2312      	movs	r3, #18
    1ec2:	e707      	b.n	1cd4 <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    1ec4:	2300      	movs	r3, #0
    1ec6:	e705      	b.n	1cd4 <spi_write_buffer_wait+0x14>
    1ec8:	0000ffff 	.word	0x0000ffff
    1ecc:	00002710 	.word	0x00002710
    1ed0:	00002711 	.word	0x00002711

00001ed4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ed6:	46de      	mov	lr, fp
    1ed8:	4657      	mov	r7, sl
    1eda:	464e      	mov	r6, r9
    1edc:	4645      	mov	r5, r8
    1ede:	b5e0      	push	{r5, r6, r7, lr}
    1ee0:	b091      	sub	sp, #68	; 0x44
    1ee2:	0005      	movs	r5, r0
    1ee4:	000c      	movs	r4, r1
    1ee6:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1ee8:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1eea:	0008      	movs	r0, r1
    1eec:	4bb0      	ldr	r3, [pc, #704]	; (21b0 <STACK_SIZE+0x1b0>)
    1eee:	4798      	blx	r3
    1ef0:	0002      	movs	r2, r0
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1ef2:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1ef4:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1ef6:	07db      	lsls	r3, r3, #31
    1ef8:	d506      	bpl.n	1f08 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1efa:	b011      	add	sp, #68	; 0x44
    1efc:	bc3c      	pop	{r2, r3, r4, r5}
    1efe:	4690      	mov	r8, r2
    1f00:	4699      	mov	r9, r3
    1f02:	46a2      	mov	sl, r4
    1f04:	46ab      	mov	fp, r5
    1f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1f08:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    1f0a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1f0c:	079b      	lsls	r3, r3, #30
    1f0e:	d4f4      	bmi.n	1efa <usart_init+0x26>
    1f10:	49a8      	ldr	r1, [pc, #672]	; (21b4 <STACK_SIZE+0x1b4>)
    1f12:	6a08      	ldr	r0, [r1, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1f14:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1f16:	2301      	movs	r3, #1
    1f18:	40bb      	lsls	r3, r7
    1f1a:	4303      	orrs	r3, r0
    1f1c:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1f1e:	a90f      	add	r1, sp, #60	; 0x3c
    1f20:	272d      	movs	r7, #45	; 0x2d
    1f22:	5df3      	ldrb	r3, [r6, r7]
    1f24:	700b      	strb	r3, [r1, #0]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1f26:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1f28:	b2d3      	uxtb	r3, r2
    1f2a:	9303      	str	r3, [sp, #12]
    1f2c:	0018      	movs	r0, r3
    1f2e:	4ba2      	ldr	r3, [pc, #648]	; (21b8 <STACK_SIZE+0x1b8>)
    1f30:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1f32:	9803      	ldr	r0, [sp, #12]
    1f34:	4ba1      	ldr	r3, [pc, #644]	; (21bc <STACK_SIZE+0x1bc>)
    1f36:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1f38:	5df0      	ldrb	r0, [r6, r7]
    1f3a:	2100      	movs	r1, #0
    1f3c:	4ba0      	ldr	r3, [pc, #640]	; (21c0 <STACK_SIZE+0x1c0>)
    1f3e:	4798      	blx	r3
	module->character_size = config->character_size;
    1f40:	7af3      	ldrb	r3, [r6, #11]
    1f42:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1f44:	2324      	movs	r3, #36	; 0x24
    1f46:	5cf3      	ldrb	r3, [r6, r3]
    1f48:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1f4a:	2325      	movs	r3, #37	; 0x25
    1f4c:	5cf3      	ldrb	r3, [r6, r3]
    1f4e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1f50:	7ef3      	ldrb	r3, [r6, #27]
    1f52:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1f54:	7f33      	ldrb	r3, [r6, #28]
    1f56:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1f58:	682b      	ldr	r3, [r5, #0]
    1f5a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1f5c:	0018      	movs	r0, r3
    1f5e:	4b94      	ldr	r3, [pc, #592]	; (21b0 <STACK_SIZE+0x1b0>)
    1f60:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1f62:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    1f64:	2200      	movs	r2, #0
    1f66:	230e      	movs	r3, #14
    1f68:	a906      	add	r1, sp, #24
    1f6a:	468c      	mov	ip, r1
    1f6c:	4463      	add	r3, ip
    1f6e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1f70:	8a32      	ldrh	r2, [r6, #16]
    1f72:	9203      	str	r2, [sp, #12]
    1f74:	2380      	movs	r3, #128	; 0x80
    1f76:	01db      	lsls	r3, r3, #7
    1f78:	429a      	cmp	r2, r3
    1f7a:	d100      	bne.n	1f7e <usart_init+0xaa>
    1f7c:	e0a2      	b.n	20c4 <STACK_SIZE+0xc4>
    1f7e:	d90f      	bls.n	1fa0 <usart_init+0xcc>
    1f80:	23c0      	movs	r3, #192	; 0xc0
    1f82:	01db      	lsls	r3, r3, #7
    1f84:	9a03      	ldr	r2, [sp, #12]
    1f86:	429a      	cmp	r2, r3
    1f88:	d100      	bne.n	1f8c <usart_init+0xb8>
    1f8a:	e096      	b.n	20ba <STACK_SIZE+0xba>
    1f8c:	2380      	movs	r3, #128	; 0x80
    1f8e:	021b      	lsls	r3, r3, #8
    1f90:	429a      	cmp	r2, r3
    1f92:	d000      	beq.n	1f96 <usart_init+0xc2>
    1f94:	e107      	b.n	21a6 <STACK_SIZE+0x1a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1f96:	2303      	movs	r3, #3
    1f98:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1f9a:	2300      	movs	r3, #0
    1f9c:	9307      	str	r3, [sp, #28]
    1f9e:	e008      	b.n	1fb2 <usart_init+0xde>
	switch (config->sample_rate) {
    1fa0:	2380      	movs	r3, #128	; 0x80
    1fa2:	019b      	lsls	r3, r3, #6
    1fa4:	429a      	cmp	r2, r3
    1fa6:	d000      	beq.n	1faa <usart_init+0xd6>
    1fa8:	e0fd      	b.n	21a6 <STACK_SIZE+0x1a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1faa:	2310      	movs	r3, #16
    1fac:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1fae:	3b0f      	subs	r3, #15
    1fb0:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1fb2:	6833      	ldr	r3, [r6, #0]
    1fb4:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
    1fb6:	68f3      	ldr	r3, [r6, #12]
    1fb8:	9305      	str	r3, [sp, #20]
		config->sample_adjustment |
    1fba:	6973      	ldr	r3, [r6, #20]
    1fbc:	469a      	mov	sl, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1fbe:	7e33      	ldrb	r3, [r6, #24]
    1fc0:	4699      	mov	r9, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1fc2:	2326      	movs	r3, #38	; 0x26
    1fc4:	5cf3      	ldrb	r3, [r6, r3]
    1fc6:	9304      	str	r3, [sp, #16]
	switch (config->transfer_mode)
    1fc8:	6873      	ldr	r3, [r6, #4]
    1fca:	2b00      	cmp	r3, #0
    1fcc:	d100      	bne.n	1fd0 <usart_init+0xfc>
    1fce:	e0a4      	b.n	211a <STACK_SIZE+0x11a>
    1fd0:	2280      	movs	r2, #128	; 0x80
    1fd2:	0552      	lsls	r2, r2, #21
    1fd4:	4293      	cmp	r3, r2
    1fd6:	d100      	bne.n	1fda <usart_init+0x106>
    1fd8:	e088      	b.n	20ec <STACK_SIZE+0xec>
	if(config->encoding_format_enable) {
    1fda:	7e73      	ldrb	r3, [r6, #25]
    1fdc:	2b00      	cmp	r3, #0
    1fde:	d002      	beq.n	1fe6 <usart_init+0x112>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1fe0:	7eb3      	ldrb	r3, [r6, #26]
    1fe2:	4642      	mov	r2, r8
    1fe4:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1fe6:	682a      	ldr	r2, [r5, #0]
    1fe8:	9f03      	ldr	r7, [sp, #12]
	return (usart_hw->SYNCBUSY.reg);
    1fea:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1fec:	2b00      	cmp	r3, #0
    1fee:	d1fc      	bne.n	1fea <usart_init+0x116>
	usart_hw->BAUD.reg = baud;
    1ff0:	330e      	adds	r3, #14
    1ff2:	aa06      	add	r2, sp, #24
    1ff4:	4694      	mov	ip, r2
    1ff6:	4463      	add	r3, ip
    1ff8:	881b      	ldrh	r3, [r3, #0]
    1ffa:	4642      	mov	r2, r8
    1ffc:	8193      	strh	r3, [r2, #12]
	ctrla |= config->transfer_mode;
    1ffe:	465b      	mov	r3, fp
    2000:	9a05      	ldr	r2, [sp, #20]
    2002:	4313      	orrs	r3, r2
    2004:	4652      	mov	r2, sl
    2006:	4313      	orrs	r3, r2
    2008:	6872      	ldr	r2, [r6, #4]
    200a:	4313      	orrs	r3, r2
    200c:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    200e:	464b      	mov	r3, r9
    2010:	021b      	lsls	r3, r3, #8
	ctrla |= config->transfer_mode;
    2012:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2014:	9b04      	ldr	r3, [sp, #16]
    2016:	075b      	lsls	r3, r3, #29
	ctrla |= config->transfer_mode;
    2018:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    201a:	2327      	movs	r3, #39	; 0x27
    201c:	5cf3      	ldrb	r3, [r6, r3]
    201e:	2b00      	cmp	r3, #0
    2020:	d101      	bne.n	2026 <STACK_SIZE+0x26>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2022:	3304      	adds	r3, #4
    2024:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2026:	7e72      	ldrb	r2, [r6, #25]
    2028:	0292      	lsls	r2, r2, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    202a:	7f33      	ldrb	r3, [r6, #28]
    202c:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    202e:	431a      	orrs	r2, r3
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    2030:	7ab3      	ldrb	r3, [r6, #10]
    2032:	7af1      	ldrb	r1, [r6, #11]
    2034:	430b      	orrs	r3, r1
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2036:	431a      	orrs	r2, r3
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2038:	7f73      	ldrb	r3, [r6, #29]
    203a:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    203c:	431a      	orrs	r2, r3
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    203e:	2324      	movs	r3, #36	; 0x24
    2040:	5cf3      	ldrb	r3, [r6, r3]
    2042:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2044:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2046:	2325      	movs	r3, #37	; 0x25
    2048:	5cf3      	ldrb	r3, [r6, r3]
    204a:	041b      	lsls	r3, r3, #16
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    204c:	431a      	orrs	r2, r3
	if (config->parity != USART_PARITY_NONE) {
    204e:	8933      	ldrh	r3, [r6, #8]
    2050:	2bff      	cmp	r3, #255	; 0xff
    2052:	d100      	bne.n	2056 <STACK_SIZE+0x56>
    2054:	e089      	b.n	216a <STACK_SIZE+0x16a>
		if(config->lin_slave_enable) {
    2056:	7ef1      	ldrb	r1, [r6, #27]
    2058:	2900      	cmp	r1, #0
    205a:	d100      	bne.n	205e <STACK_SIZE+0x5e>
    205c:	e081      	b.n	2162 <STACK_SIZE+0x162>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
    205e:	21a0      	movs	r1, #160	; 0xa0
    2060:	04c9      	lsls	r1, r1, #19
    2062:	430f      	orrs	r7, r1
		ctrlb |= config->parity;
    2064:	431a      	orrs	r2, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    2066:	232c      	movs	r3, #44	; 0x2c
    2068:	5cf3      	ldrb	r3, [r6, r3]
    206a:	2b00      	cmp	r3, #0
    206c:	d103      	bne.n	2076 <STACK_SIZE+0x76>
    206e:	4b55      	ldr	r3, [pc, #340]	; (21c4 <STACK_SIZE+0x1c4>)
    2070:	789b      	ldrb	r3, [r3, #2]
    2072:	079b      	lsls	r3, r3, #30
    2074:	d501      	bpl.n	207a <STACK_SIZE+0x7a>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2076:	2380      	movs	r3, #128	; 0x80
    2078:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    207a:	6829      	ldr	r1, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    207c:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
    207e:	2b00      	cmp	r3, #0
    2080:	d1fc      	bne.n	207c <STACK_SIZE+0x7c>
	usart_hw->CTRLB.reg = ctrlb;
    2082:	4643      	mov	r3, r8
    2084:	605a      	str	r2, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2086:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2088:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    208a:	2b00      	cmp	r3, #0
    208c:	d1fc      	bne.n	2088 <STACK_SIZE+0x88>
	usart_hw->CTRLA.reg = ctrla;
    208e:	4643      	mov	r3, r8
    2090:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2092:	ab0e      	add	r3, sp, #56	; 0x38
    2094:	2280      	movs	r2, #128	; 0x80
    2096:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2098:	2200      	movs	r2, #0
    209a:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    209c:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    209e:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    20a0:	6b33      	ldr	r3, [r6, #48]	; 0x30
    20a2:	930a      	str	r3, [sp, #40]	; 0x28
    20a4:	6b73      	ldr	r3, [r6, #52]	; 0x34
    20a6:	930b      	str	r3, [sp, #44]	; 0x2c
    20a8:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    20aa:	930c      	str	r3, [sp, #48]	; 0x30
    20ac:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    20ae:	9303      	str	r3, [sp, #12]
    20b0:	930d      	str	r3, [sp, #52]	; 0x34
    20b2:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    20b4:	ad0a      	add	r5, sp, #40	; 0x28
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    20b6:	4e44      	ldr	r6, [pc, #272]	; (21c8 <STACK_SIZE+0x1c8>)
    20b8:	e066      	b.n	2188 <STACK_SIZE+0x188>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    20ba:	2308      	movs	r3, #8
    20bc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    20be:	3b07      	subs	r3, #7
    20c0:	9307      	str	r3, [sp, #28]
    20c2:	e776      	b.n	1fb2 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    20c4:	6833      	ldr	r3, [r6, #0]
    20c6:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
    20c8:	68f3      	ldr	r3, [r6, #12]
    20ca:	9305      	str	r3, [sp, #20]
		config->sample_adjustment |
    20cc:	6973      	ldr	r3, [r6, #20]
    20ce:	469a      	mov	sl, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    20d0:	7e33      	ldrb	r3, [r6, #24]
    20d2:	4699      	mov	r9, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    20d4:	2326      	movs	r3, #38	; 0x26
    20d6:	5cf3      	ldrb	r3, [r6, r3]
    20d8:	9304      	str	r3, [sp, #16]
	switch (config->transfer_mode)
    20da:	6873      	ldr	r3, [r6, #4]
    20dc:	2b00      	cmp	r3, #0
    20de:	d018      	beq.n	2112 <STACK_SIZE+0x112>
    20e0:	2280      	movs	r2, #128	; 0x80
    20e2:	0552      	lsls	r2, r2, #21
    20e4:	4293      	cmp	r3, r2
    20e6:	d001      	beq.n	20ec <STACK_SIZE+0xec>
	enum status_code status_code = STATUS_OK;
    20e8:	2000      	movs	r0, #0
    20ea:	e025      	b.n	2138 <STACK_SIZE+0x138>
			if (!config->use_external_clock) {
    20ec:	2327      	movs	r3, #39	; 0x27
    20ee:	5cf3      	ldrb	r3, [r6, r3]
    20f0:	2b00      	cmp	r3, #0
    20f2:	d000      	beq.n	20f6 <STACK_SIZE+0xf6>
    20f4:	e771      	b.n	1fda <usart_init+0x106>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    20f6:	6a33      	ldr	r3, [r6, #32]
    20f8:	001f      	movs	r7, r3
    20fa:	b2c0      	uxtb	r0, r0
    20fc:	4b33      	ldr	r3, [pc, #204]	; (21cc <STACK_SIZE+0x1cc>)
    20fe:	4798      	blx	r3
    2100:	0001      	movs	r1, r0
    2102:	220e      	movs	r2, #14
    2104:	ab06      	add	r3, sp, #24
    2106:	469c      	mov	ip, r3
    2108:	4462      	add	r2, ip
    210a:	0038      	movs	r0, r7
    210c:	4b30      	ldr	r3, [pc, #192]	; (21d0 <STACK_SIZE+0x1d0>)
    210e:	4798      	blx	r3
    2110:	e012      	b.n	2138 <STACK_SIZE+0x138>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2112:	2308      	movs	r3, #8
    2114:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2116:	2300      	movs	r3, #0
    2118:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    211a:	2327      	movs	r3, #39	; 0x27
    211c:	5cf3      	ldrb	r3, [r6, r3]
    211e:	2b00      	cmp	r3, #0
    2120:	d00e      	beq.n	2140 <STACK_SIZE+0x140>
				status_code =
    2122:	9b06      	ldr	r3, [sp, #24]
    2124:	9300      	str	r3, [sp, #0]
    2126:	9b07      	ldr	r3, [sp, #28]
    2128:	220e      	movs	r2, #14
    212a:	a906      	add	r1, sp, #24
    212c:	468c      	mov	ip, r1
    212e:	4462      	add	r2, ip
    2130:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    2132:	6a30      	ldr	r0, [r6, #32]
    2134:	4f27      	ldr	r7, [pc, #156]	; (21d4 <STACK_SIZE+0x1d4>)
    2136:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    2138:	2800      	cmp	r0, #0
    213a:	d000      	beq.n	213e <STACK_SIZE+0x13e>
    213c:	e6dd      	b.n	1efa <usart_init+0x26>
    213e:	e74c      	b.n	1fda <usart_init+0x106>
						_sercom_get_async_baud_val(config->baudrate,
    2140:	6a33      	ldr	r3, [r6, #32]
    2142:	001f      	movs	r7, r3
    2144:	b2c0      	uxtb	r0, r0
    2146:	4b21      	ldr	r3, [pc, #132]	; (21cc <STACK_SIZE+0x1cc>)
    2148:	4798      	blx	r3
    214a:	0001      	movs	r1, r0
				status_code =
    214c:	9b06      	ldr	r3, [sp, #24]
    214e:	9300      	str	r3, [sp, #0]
    2150:	9b07      	ldr	r3, [sp, #28]
    2152:	220e      	movs	r2, #14
    2154:	a806      	add	r0, sp, #24
    2156:	4684      	mov	ip, r0
    2158:	4462      	add	r2, ip
    215a:	0038      	movs	r0, r7
    215c:	4f1d      	ldr	r7, [pc, #116]	; (21d4 <STACK_SIZE+0x1d4>)
    215e:	47b8      	blx	r7
    2160:	e7ea      	b.n	2138 <STACK_SIZE+0x138>
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2162:	2180      	movs	r1, #128	; 0x80
    2164:	0449      	lsls	r1, r1, #17
    2166:	430f      	orrs	r7, r1
    2168:	e77c      	b.n	2064 <STACK_SIZE+0x64>
		if(config->lin_slave_enable) {
    216a:	7ef3      	ldrb	r3, [r6, #27]
    216c:	2b00      	cmp	r3, #0
    216e:	d100      	bne.n	2172 <STACK_SIZE+0x172>
    2170:	e779      	b.n	2066 <STACK_SIZE+0x66>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2172:	2380      	movs	r3, #128	; 0x80
    2174:	04db      	lsls	r3, r3, #19
    2176:	431f      	orrs	r7, r3
    2178:	e775      	b.n	2066 <STACK_SIZE+0x66>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    217a:	0020      	movs	r0, r4
    217c:	4b16      	ldr	r3, [pc, #88]	; (21d8 <STACK_SIZE+0x1d8>)
    217e:	4798      	blx	r3
    2180:	e007      	b.n	2192 <STACK_SIZE+0x192>
    2182:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2184:	2f04      	cmp	r7, #4
    2186:	d00c      	beq.n	21a2 <STACK_SIZE+0x1a2>
    2188:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    218a:	00bb      	lsls	r3, r7, #2
    218c:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    218e:	2800      	cmp	r0, #0
    2190:	d0f3      	beq.n	217a <STACK_SIZE+0x17a>
		if (current_pinmux != PINMUX_UNUSED) {
    2192:	1c43      	adds	r3, r0, #1
    2194:	d0f5      	beq.n	2182 <STACK_SIZE+0x182>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2196:	a90e      	add	r1, sp, #56	; 0x38
    2198:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    219a:	0c00      	lsrs	r0, r0, #16
    219c:	b2c0      	uxtb	r0, r0
    219e:	47b0      	blx	r6
    21a0:	e7ef      	b.n	2182 <STACK_SIZE+0x182>
	return status_code;
    21a2:	2000      	movs	r0, #0
    21a4:	e6a9      	b.n	1efa <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    21a6:	2310      	movs	r3, #16
    21a8:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    21aa:	2300      	movs	r3, #0
    21ac:	9307      	str	r3, [sp, #28]
    21ae:	e700      	b.n	1fb2 <usart_init+0xde>
    21b0:	0000173d 	.word	0x0000173d
    21b4:	40000400 	.word	0x40000400
    21b8:	000026b5 	.word	0x000026b5
    21bc:	00002629 	.word	0x00002629
    21c0:	00001579 	.word	0x00001579
    21c4:	41002000 	.word	0x41002000
    21c8:	0000024d 	.word	0x0000024d
    21cc:	000026d1 	.word	0x000026d1
    21d0:	00001381 	.word	0x00001381
    21d4:	000013a9 	.word	0x000013a9
    21d8:	000015c5 	.word	0x000015c5

000021dc <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    21dc:	79c3      	ldrb	r3, [r0, #7]
		return STATUS_ERR_DENIED;
    21de:	221c      	movs	r2, #28
	if (!(module->transmitter_enabled)) {
    21e0:	2b00      	cmp	r3, #0
    21e2:	d101      	bne.n	21e8 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    21e4:	0010      	movs	r0, r2
    21e6:	4770      	bx	lr
	SercomUsart *const usart_hw = &(module->hw->USART);
    21e8:	6803      	ldr	r3, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE)) {
    21ea:	7e18      	ldrb	r0, [r3, #24]
		return STATUS_BUSY;
    21ec:	3a17      	subs	r2, #23
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE)) {
    21ee:	07c0      	lsls	r0, r0, #31
    21f0:	d5f8      	bpl.n	21e4 <usart_write_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    21f2:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    21f4:	2a00      	cmp	r2, #0
    21f6:	d1fc      	bne.n	21f2 <usart_write_wait+0x16>
	usart_hw->DATA.reg = tx_data;
    21f8:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    21fa:	2102      	movs	r1, #2
    21fc:	7e1a      	ldrb	r2, [r3, #24]
    21fe:	420a      	tst	r2, r1
    2200:	d0fc      	beq.n	21fc <usart_write_wait+0x20>
	return STATUS_OK;
    2202:	2200      	movs	r2, #0
    2204:	e7ee      	b.n	21e4 <usart_write_wait+0x8>

00002206 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2206:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    2208:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    220a:	2a00      	cmp	r2, #0
    220c:	d101      	bne.n	2212 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    220e:	0018      	movs	r0, r3
    2210:	4770      	bx	lr
	SercomUsart *const usart_hw = &(module->hw->USART);
    2212:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2214:	7e10      	ldrb	r0, [r2, #24]
		return STATUS_BUSY;
    2216:	3b17      	subs	r3, #23
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2218:	0740      	lsls	r0, r0, #29
    221a:	d5f8      	bpl.n	220e <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    221c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    221e:	2b00      	cmp	r3, #0
    2220:	d1fc      	bne.n	221c <usart_read_wait+0x16>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2222:	8b53      	ldrh	r3, [r2, #26]
    2224:	b2db      	uxtb	r3, r3
	if (error_code) {
    2226:	0698      	lsls	r0, r3, #26
    2228:	d021      	beq.n	226e <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    222a:	0798      	lsls	r0, r3, #30
    222c:	d503      	bpl.n	2236 <usart_read_wait+0x30>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    222e:	2302      	movs	r3, #2
    2230:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    2232:	3318      	adds	r3, #24
    2234:	e7eb      	b.n	220e <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2236:	0758      	lsls	r0, r3, #29
    2238:	d503      	bpl.n	2242 <usart_read_wait+0x3c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    223a:	2304      	movs	r3, #4
    223c:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    223e:	331a      	adds	r3, #26
    2240:	e7e5      	b.n	220e <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2242:	07d8      	lsls	r0, r3, #31
    2244:	d503      	bpl.n	224e <usart_read_wait+0x48>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2246:	2301      	movs	r3, #1
    2248:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    224a:	3312      	adds	r3, #18
    224c:	e7df      	b.n	220e <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    224e:	06d8      	lsls	r0, r3, #27
    2250:	d505      	bpl.n	225e <usart_read_wait+0x58>
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    2252:	8b53      	ldrh	r3, [r2, #26]
    2254:	2110      	movs	r1, #16
    2256:	430b      	orrs	r3, r1
    2258:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    225a:	2342      	movs	r3, #66	; 0x42
    225c:	e7d7      	b.n	220e <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    225e:	069b      	lsls	r3, r3, #26
    2260:	d505      	bpl.n	226e <usart_read_wait+0x68>
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    2262:	8b53      	ldrh	r3, [r2, #26]
    2264:	2120      	movs	r1, #32
    2266:	430b      	orrs	r3, r1
    2268:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    226a:	2341      	movs	r3, #65	; 0x41
    226c:	e7cf      	b.n	220e <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    226e:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    2270:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    2272:	2300      	movs	r3, #0
    2274:	e7cb      	b.n	220e <usart_read_wait+0x8>
	...

00002278 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2278:	b510      	push	{r4, lr}
	switch (clock_source) {
    227a:	2808      	cmp	r0, #8
    227c:	d803      	bhi.n	2286 <system_clock_source_get_hz+0xe>
    227e:	0080      	lsls	r0, r0, #2
    2280:	4b1b      	ldr	r3, [pc, #108]	; (22f0 <system_clock_source_get_hz+0x78>)
    2282:	581b      	ldr	r3, [r3, r0]
    2284:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2286:	2000      	movs	r0, #0
    2288:	e030      	b.n	22ec <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    228a:	4b1a      	ldr	r3, [pc, #104]	; (22f4 <system_clock_source_get_hz+0x7c>)
    228c:	6918      	ldr	r0, [r3, #16]
    228e:	e02d      	b.n	22ec <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2290:	4b19      	ldr	r3, [pc, #100]	; (22f8 <system_clock_source_get_hz+0x80>)
    2292:	6a1b      	ldr	r3, [r3, #32]
    2294:	059b      	lsls	r3, r3, #22
    2296:	0f9b      	lsrs	r3, r3, #30
    2298:	4818      	ldr	r0, [pc, #96]	; (22fc <system_clock_source_get_hz+0x84>)
    229a:	40d8      	lsrs	r0, r3
    229c:	e026      	b.n	22ec <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    229e:	4b15      	ldr	r3, [pc, #84]	; (22f4 <system_clock_source_get_hz+0x7c>)
    22a0:	6958      	ldr	r0, [r3, #20]
    22a2:	e023      	b.n	22ec <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    22a4:	4b13      	ldr	r3, [pc, #76]	; (22f4 <system_clock_source_get_hz+0x7c>)
    22a6:	681b      	ldr	r3, [r3, #0]
			return 0;
    22a8:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    22aa:	079b      	lsls	r3, r3, #30
    22ac:	d51e      	bpl.n	22ec <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    22ae:	4912      	ldr	r1, [pc, #72]	; (22f8 <system_clock_source_get_hz+0x80>)
    22b0:	2210      	movs	r2, #16
    22b2:	68cb      	ldr	r3, [r1, #12]
    22b4:	421a      	tst	r2, r3
    22b6:	d0fc      	beq.n	22b2 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    22b8:	4b0e      	ldr	r3, [pc, #56]	; (22f4 <system_clock_source_get_hz+0x7c>)
    22ba:	681b      	ldr	r3, [r3, #0]
    22bc:	075b      	lsls	r3, r3, #29
    22be:	d401      	bmi.n	22c4 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    22c0:	480f      	ldr	r0, [pc, #60]	; (2300 <system_clock_source_get_hz+0x88>)
    22c2:	e013      	b.n	22ec <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    22c4:	2000      	movs	r0, #0
    22c6:	4b0f      	ldr	r3, [pc, #60]	; (2304 <system_clock_source_get_hz+0x8c>)
    22c8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    22ca:	4b0a      	ldr	r3, [pc, #40]	; (22f4 <system_clock_source_get_hz+0x7c>)
    22cc:	689b      	ldr	r3, [r3, #8]
    22ce:	041b      	lsls	r3, r3, #16
    22d0:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    22d2:	4358      	muls	r0, r3
    22d4:	e00a      	b.n	22ec <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    22d6:	2350      	movs	r3, #80	; 0x50
    22d8:	4a07      	ldr	r2, [pc, #28]	; (22f8 <system_clock_source_get_hz+0x80>)
    22da:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    22dc:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    22de:	075b      	lsls	r3, r3, #29
    22e0:	d504      	bpl.n	22ec <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    22e2:	4b04      	ldr	r3, [pc, #16]	; (22f4 <system_clock_source_get_hz+0x7c>)
    22e4:	68d8      	ldr	r0, [r3, #12]
    22e6:	e001      	b.n	22ec <system_clock_source_get_hz+0x74>
		return 32768UL;
    22e8:	2080      	movs	r0, #128	; 0x80
    22ea:	0200      	lsls	r0, r0, #8
	}
}
    22ec:	bd10      	pop	{r4, pc}
    22ee:	46c0      	nop			; (mov r8, r8)
    22f0:	00004a24 	.word	0x00004a24
    22f4:	20000218 	.word	0x20000218
    22f8:	40000800 	.word	0x40000800
    22fc:	007a1200 	.word	0x007a1200
    2300:	02dc6c00 	.word	0x02dc6c00
    2304:	000026d1 	.word	0x000026d1

00002308 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2308:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    230a:	490c      	ldr	r1, [pc, #48]	; (233c <system_clock_source_osc8m_set_config+0x34>)
    230c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    230e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2310:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2312:	7840      	ldrb	r0, [r0, #1]
    2314:	2201      	movs	r2, #1
    2316:	4010      	ands	r0, r2
    2318:	0180      	lsls	r0, r0, #6
    231a:	2640      	movs	r6, #64	; 0x40
    231c:	43b3      	bics	r3, r6
    231e:	4303      	orrs	r3, r0
    2320:	402a      	ands	r2, r5
    2322:	01d2      	lsls	r2, r2, #7
    2324:	2080      	movs	r0, #128	; 0x80
    2326:	4383      	bics	r3, r0
    2328:	4313      	orrs	r3, r2
    232a:	2203      	movs	r2, #3
    232c:	4022      	ands	r2, r4
    232e:	0212      	lsls	r2, r2, #8
    2330:	4803      	ldr	r0, [pc, #12]	; (2340 <system_clock_source_osc8m_set_config+0x38>)
    2332:	4003      	ands	r3, r0
    2334:	4313      	orrs	r3, r2
    2336:	620b      	str	r3, [r1, #32]
}
    2338:	bd70      	pop	{r4, r5, r6, pc}
    233a:	46c0      	nop			; (mov r8, r8)
    233c:	40000800 	.word	0x40000800
    2340:	fffffcff 	.word	0xfffffcff

00002344 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2344:	2808      	cmp	r0, #8
    2346:	d803      	bhi.n	2350 <system_clock_source_enable+0xc>
    2348:	0080      	lsls	r0, r0, #2
    234a:	4b22      	ldr	r3, [pc, #136]	; (23d4 <system_clock_source_enable+0x90>)
    234c:	581b      	ldr	r3, [r3, r0]
    234e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2350:	2017      	movs	r0, #23
    2352:	e03e      	b.n	23d2 <system_clock_source_enable+0x8e>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2354:	4a20      	ldr	r2, [pc, #128]	; (23d8 <system_clock_source_enable+0x94>)
    2356:	6a13      	ldr	r3, [r2, #32]
    2358:	2102      	movs	r1, #2
    235a:	430b      	orrs	r3, r1
    235c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    235e:	2000      	movs	r0, #0
    2360:	e037      	b.n	23d2 <system_clock_source_enable+0x8e>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2362:	4a1d      	ldr	r2, [pc, #116]	; (23d8 <system_clock_source_enable+0x94>)
    2364:	6993      	ldr	r3, [r2, #24]
    2366:	2102      	movs	r1, #2
    2368:	430b      	orrs	r3, r1
    236a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    236c:	2000      	movs	r0, #0
		break;
    236e:	e030      	b.n	23d2 <system_clock_source_enable+0x8e>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2370:	4a19      	ldr	r2, [pc, #100]	; (23d8 <system_clock_source_enable+0x94>)
    2372:	8a13      	ldrh	r3, [r2, #16]
    2374:	2102      	movs	r1, #2
    2376:	430b      	orrs	r3, r1
    2378:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    237a:	2000      	movs	r0, #0
		break;
    237c:	e029      	b.n	23d2 <system_clock_source_enable+0x8e>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    237e:	4a16      	ldr	r2, [pc, #88]	; (23d8 <system_clock_source_enable+0x94>)
    2380:	8a93      	ldrh	r3, [r2, #20]
    2382:	2102      	movs	r1, #2
    2384:	430b      	orrs	r3, r1
    2386:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2388:	2000      	movs	r0, #0
		break;
    238a:	e022      	b.n	23d2 <system_clock_source_enable+0x8e>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    238c:	4b13      	ldr	r3, [pc, #76]	; (23dc <system_clock_source_enable+0x98>)
    238e:	681a      	ldr	r2, [r3, #0]
    2390:	2102      	movs	r1, #2
    2392:	430a      	orrs	r2, r1
    2394:	601a      	str	r2, [r3, #0]
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    2396:	681b      	ldr	r3, [r3, #0]
    2398:	4a11      	ldr	r2, [pc, #68]	; (23e0 <system_clock_source_enable+0x9c>)
    239a:	4013      	ands	r3, r2
    239c:	4a0e      	ldr	r2, [pc, #56]	; (23d8 <system_clock_source_enable+0x94>)
    239e:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    23a0:	0011      	movs	r1, r2
    23a2:	2210      	movs	r2, #16
    23a4:	68cb      	ldr	r3, [r1, #12]
    23a6:	421a      	tst	r2, r3
    23a8:	d0fc      	beq.n	23a4 <system_clock_source_enable+0x60>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    23aa:	4a0c      	ldr	r2, [pc, #48]	; (23dc <system_clock_source_enable+0x98>)
    23ac:	6891      	ldr	r1, [r2, #8]
    23ae:	4b0a      	ldr	r3, [pc, #40]	; (23d8 <system_clock_source_enable+0x94>)
    23b0:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    23b2:	6851      	ldr	r1, [r2, #4]
    23b4:	6299      	str	r1, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    23b6:	6812      	ldr	r2, [r2, #0]
    23b8:	b292      	uxth	r2, r2
    23ba:	849a      	strh	r2, [r3, #36]	; 0x24
	return STATUS_OK;
    23bc:	2000      	movs	r0, #0
    23be:	e008      	b.n	23d2 <system_clock_source_enable+0x8e>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    23c0:	4905      	ldr	r1, [pc, #20]	; (23d8 <system_clock_source_enable+0x94>)
    23c2:	2244      	movs	r2, #68	; 0x44
    23c4:	5c8b      	ldrb	r3, [r1, r2]
    23c6:	2002      	movs	r0, #2
    23c8:	4303      	orrs	r3, r0
    23ca:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    23cc:	2000      	movs	r0, #0
		break;
    23ce:	e000      	b.n	23d2 <system_clock_source_enable+0x8e>
		return STATUS_OK;
    23d0:	2000      	movs	r0, #0
}
    23d2:	4770      	bx	lr
    23d4:	00004a48 	.word	0x00004a48
    23d8:	40000800 	.word	0x40000800
    23dc:	20000218 	.word	0x20000218
    23e0:	0000ff7f 	.word	0x0000ff7f

000023e4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    23e4:	b530      	push	{r4, r5, lr}
    23e6:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    23e8:	22c2      	movs	r2, #194	; 0xc2
    23ea:	00d2      	lsls	r2, r2, #3
    23ec:	4b1a      	ldr	r3, [pc, #104]	; (2458 <system_clock_init+0x74>)
    23ee:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    23f0:	4a1a      	ldr	r2, [pc, #104]	; (245c <system_clock_init+0x78>)
    23f2:	6853      	ldr	r3, [r2, #4]
    23f4:	211e      	movs	r1, #30
    23f6:	438b      	bics	r3, r1
    23f8:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    23fa:	2301      	movs	r3, #1
    23fc:	466a      	mov	r2, sp
    23fe:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2400:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2402:	4d17      	ldr	r5, [pc, #92]	; (2460 <system_clock_init+0x7c>)
    2404:	b2e0      	uxtb	r0, r4
    2406:	4669      	mov	r1, sp
    2408:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    240a:	3401      	adds	r4, #1
    240c:	2c25      	cmp	r4, #37	; 0x25
    240e:	d1f9      	bne.n	2404 <system_clock_init+0x20>
	config->run_in_standby  = false;
    2410:	a803      	add	r0, sp, #12
    2412:	2400      	movs	r4, #0
    2414:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    2416:	2501      	movs	r5, #1
    2418:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    241a:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    241c:	4b11      	ldr	r3, [pc, #68]	; (2464 <system_clock_init+0x80>)
    241e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2420:	2006      	movs	r0, #6
    2422:	4b11      	ldr	r3, [pc, #68]	; (2468 <system_clock_init+0x84>)
    2424:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2426:	4b11      	ldr	r3, [pc, #68]	; (246c <system_clock_init+0x88>)
    2428:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    242a:	4b11      	ldr	r3, [pc, #68]	; (2470 <system_clock_init+0x8c>)
    242c:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    242e:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2430:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    2432:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2434:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    2436:	466b      	mov	r3, sp
    2438:	705c      	strb	r4, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    243a:	2306      	movs	r3, #6
    243c:	466a      	mov	r2, sp
    243e:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    2440:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    2442:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2444:	4669      	mov	r1, sp
    2446:	2000      	movs	r0, #0
    2448:	4b0a      	ldr	r3, [pc, #40]	; (2474 <system_clock_init+0x90>)
    244a:	4798      	blx	r3
    244c:	2000      	movs	r0, #0
    244e:	4b0a      	ldr	r3, [pc, #40]	; (2478 <system_clock_init+0x94>)
    2450:	4798      	blx	r3
#endif
}
    2452:	b005      	add	sp, #20
    2454:	bd30      	pop	{r4, r5, pc}
    2456:	46c0      	nop			; (mov r8, r8)
    2458:	40000800 	.word	0x40000800
    245c:	41004000 	.word	0x41004000
    2460:	000026b5 	.word	0x000026b5
    2464:	00002309 	.word	0x00002309
    2468:	00002345 	.word	0x00002345
    246c:	0000247d 	.word	0x0000247d
    2470:	40000400 	.word	0x40000400
    2474:	000024a1 	.word	0x000024a1
    2478:	00002559 	.word	0x00002559

0000247c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    247c:	4a06      	ldr	r2, [pc, #24]	; (2498 <system_gclk_init+0x1c>)
    247e:	6993      	ldr	r3, [r2, #24]
    2480:	2108      	movs	r1, #8
    2482:	430b      	orrs	r3, r1
    2484:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2486:	2201      	movs	r2, #1
    2488:	4b04      	ldr	r3, [pc, #16]	; (249c <system_gclk_init+0x20>)
    248a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    248c:	0019      	movs	r1, r3
    248e:	780b      	ldrb	r3, [r1, #0]
    2490:	4213      	tst	r3, r2
    2492:	d1fc      	bne.n	248e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2494:	4770      	bx	lr
    2496:	46c0      	nop			; (mov r8, r8)
    2498:	40000400 	.word	0x40000400
    249c:	40000c00 	.word	0x40000c00

000024a0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    24a0:	b570      	push	{r4, r5, r6, lr}
    24a2:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    24a4:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    24a6:	780d      	ldrb	r5, [r1, #0]
    24a8:	022d      	lsls	r5, r5, #8
    24aa:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    24ac:	784b      	ldrb	r3, [r1, #1]
    24ae:	2b00      	cmp	r3, #0
    24b0:	d002      	beq.n	24b8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    24b2:	2380      	movs	r3, #128	; 0x80
    24b4:	02db      	lsls	r3, r3, #11
    24b6:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    24b8:	7a4b      	ldrb	r3, [r1, #9]
    24ba:	2b00      	cmp	r3, #0
    24bc:	d002      	beq.n	24c4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    24be:	2380      	movs	r3, #128	; 0x80
    24c0:	031b      	lsls	r3, r3, #12
    24c2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    24c4:	6848      	ldr	r0, [r1, #4]
    24c6:	2801      	cmp	r0, #1
    24c8:	d910      	bls.n	24ec <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    24ca:	1e43      	subs	r3, r0, #1
    24cc:	4218      	tst	r0, r3
    24ce:	d134      	bne.n	253a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    24d0:	2802      	cmp	r0, #2
    24d2:	d930      	bls.n	2536 <system_gclk_gen_set_config+0x96>
    24d4:	2302      	movs	r3, #2
    24d6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    24d8:	3201      	adds	r2, #1
						mask <<= 1) {
    24da:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    24dc:	4298      	cmp	r0, r3
    24de:	d8fb      	bhi.n	24d8 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    24e0:	0212      	lsls	r2, r2, #8
    24e2:	4332      	orrs	r2, r6
    24e4:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    24e6:	2380      	movs	r3, #128	; 0x80
    24e8:	035b      	lsls	r3, r3, #13
    24ea:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    24ec:	7a0b      	ldrb	r3, [r1, #8]
    24ee:	2b00      	cmp	r3, #0
    24f0:	d002      	beq.n	24f8 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    24f2:	2380      	movs	r3, #128	; 0x80
    24f4:	039b      	lsls	r3, r3, #14
    24f6:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    24f8:	4a13      	ldr	r2, [pc, #76]	; (2548 <system_gclk_gen_set_config+0xa8>)
    24fa:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    24fc:	b25b      	sxtb	r3, r3
    24fe:	2b00      	cmp	r3, #0
    2500:	dbfb      	blt.n	24fa <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2502:	4b12      	ldr	r3, [pc, #72]	; (254c <system_gclk_gen_set_config+0xac>)
    2504:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2506:	4b12      	ldr	r3, [pc, #72]	; (2550 <system_gclk_gen_set_config+0xb0>)
    2508:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    250a:	4a0f      	ldr	r2, [pc, #60]	; (2548 <system_gclk_gen_set_config+0xa8>)
    250c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    250e:	b25b      	sxtb	r3, r3
    2510:	2b00      	cmp	r3, #0
    2512:	dbfb      	blt.n	250c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2514:	4b0c      	ldr	r3, [pc, #48]	; (2548 <system_gclk_gen_set_config+0xa8>)
    2516:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2518:	001a      	movs	r2, r3
    251a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    251c:	b25b      	sxtb	r3, r3
    251e:	2b00      	cmp	r3, #0
    2520:	dbfb      	blt.n	251a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2522:	4a09      	ldr	r2, [pc, #36]	; (2548 <system_gclk_gen_set_config+0xa8>)
    2524:	6853      	ldr	r3, [r2, #4]
    2526:	2180      	movs	r1, #128	; 0x80
    2528:	0249      	lsls	r1, r1, #9
    252a:	400b      	ands	r3, r1
    252c:	431d      	orrs	r5, r3
    252e:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2530:	4b08      	ldr	r3, [pc, #32]	; (2554 <system_gclk_gen_set_config+0xb4>)
    2532:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2534:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    2536:	2200      	movs	r2, #0
    2538:	e7d2      	b.n	24e0 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    253a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    253c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    253e:	2380      	movs	r3, #128	; 0x80
    2540:	029b      	lsls	r3, r3, #10
    2542:	431d      	orrs	r5, r3
    2544:	e7d2      	b.n	24ec <system_gclk_gen_set_config+0x4c>
    2546:	46c0      	nop			; (mov r8, r8)
    2548:	40000c00 	.word	0x40000c00
    254c:	00000111 	.word	0x00000111
    2550:	40000c08 	.word	0x40000c08
    2554:	00000151 	.word	0x00000151

00002558 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2558:	b510      	push	{r4, lr}
    255a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    255c:	4a0b      	ldr	r2, [pc, #44]	; (258c <system_gclk_gen_enable+0x34>)
    255e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2560:	b25b      	sxtb	r3, r3
    2562:	2b00      	cmp	r3, #0
    2564:	dbfb      	blt.n	255e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    2566:	4b0a      	ldr	r3, [pc, #40]	; (2590 <system_gclk_gen_enable+0x38>)
    2568:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    256a:	4b0a      	ldr	r3, [pc, #40]	; (2594 <system_gclk_gen_enable+0x3c>)
    256c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    256e:	4a07      	ldr	r2, [pc, #28]	; (258c <system_gclk_gen_enable+0x34>)
    2570:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2572:	b25b      	sxtb	r3, r3
    2574:	2b00      	cmp	r3, #0
    2576:	dbfb      	blt.n	2570 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2578:	4a04      	ldr	r2, [pc, #16]	; (258c <system_gclk_gen_enable+0x34>)
    257a:	6851      	ldr	r1, [r2, #4]
    257c:	2380      	movs	r3, #128	; 0x80
    257e:	025b      	lsls	r3, r3, #9
    2580:	430b      	orrs	r3, r1
    2582:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2584:	4b04      	ldr	r3, [pc, #16]	; (2598 <system_gclk_gen_enable+0x40>)
    2586:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2588:	bd10      	pop	{r4, pc}
    258a:	46c0      	nop			; (mov r8, r8)
    258c:	40000c00 	.word	0x40000c00
    2590:	00000111 	.word	0x00000111
    2594:	40000c04 	.word	0x40000c04
    2598:	00000151 	.word	0x00000151

0000259c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    259c:	b570      	push	{r4, r5, r6, lr}
    259e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    25a0:	4a1a      	ldr	r2, [pc, #104]	; (260c <system_gclk_gen_get_hz+0x70>)
    25a2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    25a4:	b25b      	sxtb	r3, r3
    25a6:	2b00      	cmp	r3, #0
    25a8:	dbfb      	blt.n	25a2 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    25aa:	4b19      	ldr	r3, [pc, #100]	; (2610 <system_gclk_gen_get_hz+0x74>)
    25ac:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    25ae:	4b19      	ldr	r3, [pc, #100]	; (2614 <system_gclk_gen_get_hz+0x78>)
    25b0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    25b2:	4a16      	ldr	r2, [pc, #88]	; (260c <system_gclk_gen_get_hz+0x70>)
    25b4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    25b6:	b25b      	sxtb	r3, r3
    25b8:	2b00      	cmp	r3, #0
    25ba:	dbfb      	blt.n	25b4 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    25bc:	4e13      	ldr	r6, [pc, #76]	; (260c <system_gclk_gen_get_hz+0x70>)
    25be:	6870      	ldr	r0, [r6, #4]
    25c0:	04c0      	lsls	r0, r0, #19
    25c2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    25c4:	4b14      	ldr	r3, [pc, #80]	; (2618 <system_gclk_gen_get_hz+0x7c>)
    25c6:	4798      	blx	r3
    25c8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    25ca:	4b12      	ldr	r3, [pc, #72]	; (2614 <system_gclk_gen_get_hz+0x78>)
    25cc:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    25ce:	6876      	ldr	r6, [r6, #4]
    25d0:	02f6      	lsls	r6, r6, #11
    25d2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    25d4:	4b11      	ldr	r3, [pc, #68]	; (261c <system_gclk_gen_get_hz+0x80>)
    25d6:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    25d8:	4a0c      	ldr	r2, [pc, #48]	; (260c <system_gclk_gen_get_hz+0x70>)
    25da:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    25dc:	b25b      	sxtb	r3, r3
    25de:	2b00      	cmp	r3, #0
    25e0:	dbfb      	blt.n	25da <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    25e2:	4b0a      	ldr	r3, [pc, #40]	; (260c <system_gclk_gen_get_hz+0x70>)
    25e4:	689c      	ldr	r4, [r3, #8]
    25e6:	0224      	lsls	r4, r4, #8
    25e8:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    25ea:	4b0d      	ldr	r3, [pc, #52]	; (2620 <system_gclk_gen_get_hz+0x84>)
    25ec:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    25ee:	2e00      	cmp	r6, #0
    25f0:	d107      	bne.n	2602 <system_gclk_gen_get_hz+0x66>
    25f2:	2c01      	cmp	r4, #1
    25f4:	d907      	bls.n	2606 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    25f6:	0021      	movs	r1, r4
    25f8:	0028      	movs	r0, r5
    25fa:	4b0a      	ldr	r3, [pc, #40]	; (2624 <system_gclk_gen_get_hz+0x88>)
    25fc:	4798      	blx	r3
    25fe:	0005      	movs	r5, r0
    2600:	e001      	b.n	2606 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2602:	3401      	adds	r4, #1
    2604:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    2606:	0028      	movs	r0, r5
    2608:	bd70      	pop	{r4, r5, r6, pc}
    260a:	46c0      	nop			; (mov r8, r8)
    260c:	40000c00 	.word	0x40000c00
    2610:	00000111 	.word	0x00000111
    2614:	40000c04 	.word	0x40000c04
    2618:	00002279 	.word	0x00002279
    261c:	40000c08 	.word	0x40000c08
    2620:	00000151 	.word	0x00000151
    2624:	000028a9 	.word	0x000028a9

00002628 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2628:	b510      	push	{r4, lr}
    262a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    262c:	4b06      	ldr	r3, [pc, #24]	; (2648 <system_gclk_chan_enable+0x20>)
    262e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2630:	4b06      	ldr	r3, [pc, #24]	; (264c <system_gclk_chan_enable+0x24>)
    2632:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2634:	4a06      	ldr	r2, [pc, #24]	; (2650 <system_gclk_chan_enable+0x28>)
    2636:	8853      	ldrh	r3, [r2, #2]
    2638:	2180      	movs	r1, #128	; 0x80
    263a:	01c9      	lsls	r1, r1, #7
    263c:	430b      	orrs	r3, r1
    263e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2640:	4b04      	ldr	r3, [pc, #16]	; (2654 <system_gclk_chan_enable+0x2c>)
    2642:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2644:	bd10      	pop	{r4, pc}
    2646:	46c0      	nop			; (mov r8, r8)
    2648:	00000111 	.word	0x00000111
    264c:	40000c02 	.word	0x40000c02
    2650:	40000c00 	.word	0x40000c00
    2654:	00000151 	.word	0x00000151

00002658 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2658:	b510      	push	{r4, lr}
    265a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    265c:	4b0f      	ldr	r3, [pc, #60]	; (269c <system_gclk_chan_disable+0x44>)
    265e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2660:	4b0f      	ldr	r3, [pc, #60]	; (26a0 <system_gclk_chan_disable+0x48>)
    2662:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2664:	4a0f      	ldr	r2, [pc, #60]	; (26a4 <system_gclk_chan_disable+0x4c>)
    2666:	8853      	ldrh	r3, [r2, #2]
    2668:	051b      	lsls	r3, r3, #20
    266a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    266c:	8853      	ldrh	r3, [r2, #2]
    266e:	490e      	ldr	r1, [pc, #56]	; (26a8 <system_gclk_chan_disable+0x50>)
    2670:	400b      	ands	r3, r1
    2672:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2674:	8853      	ldrh	r3, [r2, #2]
    2676:	490d      	ldr	r1, [pc, #52]	; (26ac <system_gclk_chan_disable+0x54>)
    2678:	400b      	ands	r3, r1
    267a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    267c:	0011      	movs	r1, r2
    267e:	2280      	movs	r2, #128	; 0x80
    2680:	01d2      	lsls	r2, r2, #7
    2682:	884b      	ldrh	r3, [r1, #2]
    2684:	4213      	tst	r3, r2
    2686:	d1fc      	bne.n	2682 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2688:	4906      	ldr	r1, [pc, #24]	; (26a4 <system_gclk_chan_disable+0x4c>)
    268a:	884a      	ldrh	r2, [r1, #2]
    268c:	0203      	lsls	r3, r0, #8
    268e:	4806      	ldr	r0, [pc, #24]	; (26a8 <system_gclk_chan_disable+0x50>)
    2690:	4002      	ands	r2, r0
    2692:	4313      	orrs	r3, r2
    2694:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    2696:	4b06      	ldr	r3, [pc, #24]	; (26b0 <system_gclk_chan_disable+0x58>)
    2698:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    269a:	bd10      	pop	{r4, pc}
    269c:	00000111 	.word	0x00000111
    26a0:	40000c02 	.word	0x40000c02
    26a4:	40000c00 	.word	0x40000c00
    26a8:	fffff0ff 	.word	0xfffff0ff
    26ac:	ffffbfff 	.word	0xffffbfff
    26b0:	00000151 	.word	0x00000151

000026b4 <system_gclk_chan_set_config>:
{
    26b4:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    26b6:	780c      	ldrb	r4, [r1, #0]
    26b8:	0224      	lsls	r4, r4, #8
    26ba:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    26bc:	4b02      	ldr	r3, [pc, #8]	; (26c8 <system_gclk_chan_set_config+0x14>)
    26be:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    26c0:	b2a4      	uxth	r4, r4
    26c2:	4b02      	ldr	r3, [pc, #8]	; (26cc <system_gclk_chan_set_config+0x18>)
    26c4:	805c      	strh	r4, [r3, #2]
}
    26c6:	bd10      	pop	{r4, pc}
    26c8:	00002659 	.word	0x00002659
    26cc:	40000c00 	.word	0x40000c00

000026d0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    26d0:	b510      	push	{r4, lr}
    26d2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    26d4:	4b06      	ldr	r3, [pc, #24]	; (26f0 <system_gclk_chan_get_hz+0x20>)
    26d6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    26d8:	4b06      	ldr	r3, [pc, #24]	; (26f4 <system_gclk_chan_get_hz+0x24>)
    26da:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    26dc:	4b06      	ldr	r3, [pc, #24]	; (26f8 <system_gclk_chan_get_hz+0x28>)
    26de:	885c      	ldrh	r4, [r3, #2]
    26e0:	0524      	lsls	r4, r4, #20
    26e2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    26e4:	4b05      	ldr	r3, [pc, #20]	; (26fc <system_gclk_chan_get_hz+0x2c>)
    26e6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    26e8:	0020      	movs	r0, r4
    26ea:	4b05      	ldr	r3, [pc, #20]	; (2700 <system_gclk_chan_get_hz+0x30>)
    26ec:	4798      	blx	r3
}
    26ee:	bd10      	pop	{r4, pc}
    26f0:	00000111 	.word	0x00000111
    26f4:	40000c02 	.word	0x40000c02
    26f8:	40000c00 	.word	0x40000c00
    26fc:	00000151 	.word	0x00000151
    2700:	0000259d 	.word	0x0000259d

00002704 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2704:	4770      	bx	lr
	...

00002708 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2708:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    270a:	4b04      	ldr	r3, [pc, #16]	; (271c <system_init+0x14>)
    270c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    270e:	4b04      	ldr	r3, [pc, #16]	; (2720 <system_init+0x18>)
    2710:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2712:	4b04      	ldr	r3, [pc, #16]	; (2724 <system_init+0x1c>)
    2714:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2716:	4b04      	ldr	r3, [pc, #16]	; (2728 <system_init+0x20>)
    2718:	4798      	blx	r3
}
    271a:	bd10      	pop	{r4, pc}
    271c:	000023e5 	.word	0x000023e5
    2720:	00001349 	.word	0x00001349
    2724:	00002705 	.word	0x00002705
    2728:	00002705 	.word	0x00002705

0000272c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    272c:	e7fe      	b.n	272c <Dummy_Handler>
	...

00002730 <Reset_Handler>:
{
    2730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    2732:	4a2a      	ldr	r2, [pc, #168]	; (27dc <Reset_Handler+0xac>)
    2734:	4b2a      	ldr	r3, [pc, #168]	; (27e0 <Reset_Handler+0xb0>)
    2736:	429a      	cmp	r2, r3
    2738:	d011      	beq.n	275e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    273a:	001a      	movs	r2, r3
    273c:	4b29      	ldr	r3, [pc, #164]	; (27e4 <Reset_Handler+0xb4>)
    273e:	429a      	cmp	r2, r3
    2740:	d20d      	bcs.n	275e <Reset_Handler+0x2e>
    2742:	4a29      	ldr	r2, [pc, #164]	; (27e8 <Reset_Handler+0xb8>)
    2744:	3303      	adds	r3, #3
    2746:	1a9b      	subs	r3, r3, r2
    2748:	089b      	lsrs	r3, r3, #2
    274a:	3301      	adds	r3, #1
    274c:	009b      	lsls	r3, r3, #2
    274e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2750:	4823      	ldr	r0, [pc, #140]	; (27e0 <Reset_Handler+0xb0>)
    2752:	4922      	ldr	r1, [pc, #136]	; (27dc <Reset_Handler+0xac>)
    2754:	588c      	ldr	r4, [r1, r2]
    2756:	5084      	str	r4, [r0, r2]
    2758:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    275a:	429a      	cmp	r2, r3
    275c:	d1fa      	bne.n	2754 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    275e:	4a23      	ldr	r2, [pc, #140]	; (27ec <Reset_Handler+0xbc>)
    2760:	4b23      	ldr	r3, [pc, #140]	; (27f0 <Reset_Handler+0xc0>)
    2762:	429a      	cmp	r2, r3
    2764:	d20a      	bcs.n	277c <Reset_Handler+0x4c>
    2766:	43d3      	mvns	r3, r2
    2768:	4921      	ldr	r1, [pc, #132]	; (27f0 <Reset_Handler+0xc0>)
    276a:	185b      	adds	r3, r3, r1
    276c:	2103      	movs	r1, #3
    276e:	438b      	bics	r3, r1
    2770:	3304      	adds	r3, #4
    2772:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2774:	2100      	movs	r1, #0
    2776:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2778:	4293      	cmp	r3, r2
    277a:	d1fc      	bne.n	2776 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    277c:	4a1d      	ldr	r2, [pc, #116]	; (27f4 <Reset_Handler+0xc4>)
    277e:	21ff      	movs	r1, #255	; 0xff
    2780:	4b1d      	ldr	r3, [pc, #116]	; (27f8 <Reset_Handler+0xc8>)
    2782:	438b      	bics	r3, r1
    2784:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2786:	39fd      	subs	r1, #253	; 0xfd
    2788:	2390      	movs	r3, #144	; 0x90
    278a:	005b      	lsls	r3, r3, #1
    278c:	4a1b      	ldr	r2, [pc, #108]	; (27fc <Reset_Handler+0xcc>)
    278e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2790:	4a1b      	ldr	r2, [pc, #108]	; (2800 <Reset_Handler+0xd0>)
    2792:	78d3      	ldrb	r3, [r2, #3]
    2794:	2503      	movs	r5, #3
    2796:	43ab      	bics	r3, r5
    2798:	2402      	movs	r4, #2
    279a:	4323      	orrs	r3, r4
    279c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    279e:	78d3      	ldrb	r3, [r2, #3]
    27a0:	270c      	movs	r7, #12
    27a2:	43bb      	bics	r3, r7
    27a4:	2608      	movs	r6, #8
    27a6:	4333      	orrs	r3, r6
    27a8:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    27aa:	4b16      	ldr	r3, [pc, #88]	; (2804 <Reset_Handler+0xd4>)
    27ac:	7b98      	ldrb	r0, [r3, #14]
    27ae:	2230      	movs	r2, #48	; 0x30
    27b0:	4390      	bics	r0, r2
    27b2:	2220      	movs	r2, #32
    27b4:	4310      	orrs	r0, r2
    27b6:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    27b8:	7b99      	ldrb	r1, [r3, #14]
    27ba:	43b9      	bics	r1, r7
    27bc:	4331      	orrs	r1, r6
    27be:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    27c0:	7b9a      	ldrb	r2, [r3, #14]
    27c2:	43aa      	bics	r2, r5
    27c4:	4322      	orrs	r2, r4
    27c6:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    27c8:	4a0f      	ldr	r2, [pc, #60]	; (2808 <Reset_Handler+0xd8>)
    27ca:	6853      	ldr	r3, [r2, #4]
    27cc:	2180      	movs	r1, #128	; 0x80
    27ce:	430b      	orrs	r3, r1
    27d0:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    27d2:	4b0e      	ldr	r3, [pc, #56]	; (280c <Reset_Handler+0xdc>)
    27d4:	4798      	blx	r3
        main();
    27d6:	4b0e      	ldr	r3, [pc, #56]	; (2810 <Reset_Handler+0xe0>)
    27d8:	4798      	blx	r3
    27da:	e7fe      	b.n	27da <Reset_Handler+0xaa>
    27dc:	00004c58 	.word	0x00004c58
    27e0:	20000000 	.word	0x20000000
    27e4:	200001d8 	.word	0x200001d8
    27e8:	20000004 	.word	0x20000004
    27ec:	200001d8 	.word	0x200001d8
    27f0:	200003d8 	.word	0x200003d8
    27f4:	e000ed00 	.word	0xe000ed00
    27f8:	00000000 	.word	0x00000000
    27fc:	41007000 	.word	0x41007000
    2800:	41005000 	.word	0x41005000
    2804:	41004800 	.word	0x41004800
    2808:	41004000 	.word	0x41004000
    280c:	00002a15 	.word	0x00002a15
    2810:	00000fe9 	.word	0x00000fe9

00002814 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    2814:	b5f0      	push	{r4, r5, r6, r7, lr}
    2816:	46c6      	mov	lr, r8
    2818:	b500      	push	{lr}
    281a:	000c      	movs	r4, r1
    281c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    281e:	2800      	cmp	r0, #0
    2820:	d10f      	bne.n	2842 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    2822:	2a00      	cmp	r2, #0
    2824:	dd11      	ble.n	284a <_read+0x36>
    2826:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    2828:	4e09      	ldr	r6, [pc, #36]	; (2850 <_read+0x3c>)
    282a:	4d0a      	ldr	r5, [pc, #40]	; (2854 <_read+0x40>)
    282c:	6830      	ldr	r0, [r6, #0]
    282e:	0021      	movs	r1, r4
    2830:	682b      	ldr	r3, [r5, #0]
    2832:	4798      	blx	r3
		ptr++;
    2834:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    2836:	42bc      	cmp	r4, r7
    2838:	d1f8      	bne.n	282c <_read+0x18>
		nChars++;
	}
	return nChars;
}
    283a:	4640      	mov	r0, r8
    283c:	bc04      	pop	{r2}
    283e:	4690      	mov	r8, r2
    2840:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    2842:	2301      	movs	r3, #1
    2844:	425b      	negs	r3, r3
    2846:	4698      	mov	r8, r3
    2848:	e7f7      	b.n	283a <_read+0x26>
	for (; len > 0; --len) {
    284a:	4680      	mov	r8, r0
    284c:	e7f5      	b.n	283a <_read+0x26>
    284e:	46c0      	nop			; (mov r8, r8)
    2850:	200003d0 	.word	0x200003d0
    2854:	200003c8 	.word	0x200003c8

00002858 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2858:	b5f0      	push	{r4, r5, r6, r7, lr}
    285a:	46c6      	mov	lr, r8
    285c:	b500      	push	{lr}
    285e:	000e      	movs	r6, r1
    2860:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    2862:	3801      	subs	r0, #1
    2864:	2802      	cmp	r0, #2
    2866:	d810      	bhi.n	288a <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    2868:	2a00      	cmp	r2, #0
    286a:	d011      	beq.n	2890 <_write+0x38>
    286c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    286e:	4b0c      	ldr	r3, [pc, #48]	; (28a0 <_write+0x48>)
    2870:	4698      	mov	r8, r3
    2872:	4f0c      	ldr	r7, [pc, #48]	; (28a4 <_write+0x4c>)
    2874:	4643      	mov	r3, r8
    2876:	6818      	ldr	r0, [r3, #0]
    2878:	5d31      	ldrb	r1, [r6, r4]
    287a:	683b      	ldr	r3, [r7, #0]
    287c:	4798      	blx	r3
    287e:	2800      	cmp	r0, #0
    2880:	db08      	blt.n	2894 <_write+0x3c>
			return -1;
		}
		++nChars;
    2882:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    2884:	42a5      	cmp	r5, r4
    2886:	d1f5      	bne.n	2874 <_write+0x1c>
    2888:	e006      	b.n	2898 <_write+0x40>
		return -1;
    288a:	2401      	movs	r4, #1
    288c:	4264      	negs	r4, r4
    288e:	e003      	b.n	2898 <_write+0x40>
	for (; len != 0; --len) {
    2890:	0014      	movs	r4, r2
    2892:	e001      	b.n	2898 <_write+0x40>
			return -1;
    2894:	2401      	movs	r4, #1
    2896:	4264      	negs	r4, r4
	}
	return nChars;
}
    2898:	0020      	movs	r0, r4
    289a:	bc04      	pop	{r2}
    289c:	4690      	mov	r8, r2
    289e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28a0:	200003d0 	.word	0x200003d0
    28a4:	200003cc 	.word	0x200003cc

000028a8 <__udivsi3>:
    28a8:	2200      	movs	r2, #0
    28aa:	0843      	lsrs	r3, r0, #1
    28ac:	428b      	cmp	r3, r1
    28ae:	d374      	bcc.n	299a <__udivsi3+0xf2>
    28b0:	0903      	lsrs	r3, r0, #4
    28b2:	428b      	cmp	r3, r1
    28b4:	d35f      	bcc.n	2976 <__udivsi3+0xce>
    28b6:	0a03      	lsrs	r3, r0, #8
    28b8:	428b      	cmp	r3, r1
    28ba:	d344      	bcc.n	2946 <__udivsi3+0x9e>
    28bc:	0b03      	lsrs	r3, r0, #12
    28be:	428b      	cmp	r3, r1
    28c0:	d328      	bcc.n	2914 <__udivsi3+0x6c>
    28c2:	0c03      	lsrs	r3, r0, #16
    28c4:	428b      	cmp	r3, r1
    28c6:	d30d      	bcc.n	28e4 <__udivsi3+0x3c>
    28c8:	22ff      	movs	r2, #255	; 0xff
    28ca:	0209      	lsls	r1, r1, #8
    28cc:	ba12      	rev	r2, r2
    28ce:	0c03      	lsrs	r3, r0, #16
    28d0:	428b      	cmp	r3, r1
    28d2:	d302      	bcc.n	28da <__udivsi3+0x32>
    28d4:	1212      	asrs	r2, r2, #8
    28d6:	0209      	lsls	r1, r1, #8
    28d8:	d065      	beq.n	29a6 <__udivsi3+0xfe>
    28da:	0b03      	lsrs	r3, r0, #12
    28dc:	428b      	cmp	r3, r1
    28de:	d319      	bcc.n	2914 <__udivsi3+0x6c>
    28e0:	e000      	b.n	28e4 <__udivsi3+0x3c>
    28e2:	0a09      	lsrs	r1, r1, #8
    28e4:	0bc3      	lsrs	r3, r0, #15
    28e6:	428b      	cmp	r3, r1
    28e8:	d301      	bcc.n	28ee <__udivsi3+0x46>
    28ea:	03cb      	lsls	r3, r1, #15
    28ec:	1ac0      	subs	r0, r0, r3
    28ee:	4152      	adcs	r2, r2
    28f0:	0b83      	lsrs	r3, r0, #14
    28f2:	428b      	cmp	r3, r1
    28f4:	d301      	bcc.n	28fa <__udivsi3+0x52>
    28f6:	038b      	lsls	r3, r1, #14
    28f8:	1ac0      	subs	r0, r0, r3
    28fa:	4152      	adcs	r2, r2
    28fc:	0b43      	lsrs	r3, r0, #13
    28fe:	428b      	cmp	r3, r1
    2900:	d301      	bcc.n	2906 <__udivsi3+0x5e>
    2902:	034b      	lsls	r3, r1, #13
    2904:	1ac0      	subs	r0, r0, r3
    2906:	4152      	adcs	r2, r2
    2908:	0b03      	lsrs	r3, r0, #12
    290a:	428b      	cmp	r3, r1
    290c:	d301      	bcc.n	2912 <__udivsi3+0x6a>
    290e:	030b      	lsls	r3, r1, #12
    2910:	1ac0      	subs	r0, r0, r3
    2912:	4152      	adcs	r2, r2
    2914:	0ac3      	lsrs	r3, r0, #11
    2916:	428b      	cmp	r3, r1
    2918:	d301      	bcc.n	291e <__udivsi3+0x76>
    291a:	02cb      	lsls	r3, r1, #11
    291c:	1ac0      	subs	r0, r0, r3
    291e:	4152      	adcs	r2, r2
    2920:	0a83      	lsrs	r3, r0, #10
    2922:	428b      	cmp	r3, r1
    2924:	d301      	bcc.n	292a <__udivsi3+0x82>
    2926:	028b      	lsls	r3, r1, #10
    2928:	1ac0      	subs	r0, r0, r3
    292a:	4152      	adcs	r2, r2
    292c:	0a43      	lsrs	r3, r0, #9
    292e:	428b      	cmp	r3, r1
    2930:	d301      	bcc.n	2936 <__udivsi3+0x8e>
    2932:	024b      	lsls	r3, r1, #9
    2934:	1ac0      	subs	r0, r0, r3
    2936:	4152      	adcs	r2, r2
    2938:	0a03      	lsrs	r3, r0, #8
    293a:	428b      	cmp	r3, r1
    293c:	d301      	bcc.n	2942 <__udivsi3+0x9a>
    293e:	020b      	lsls	r3, r1, #8
    2940:	1ac0      	subs	r0, r0, r3
    2942:	4152      	adcs	r2, r2
    2944:	d2cd      	bcs.n	28e2 <__udivsi3+0x3a>
    2946:	09c3      	lsrs	r3, r0, #7
    2948:	428b      	cmp	r3, r1
    294a:	d301      	bcc.n	2950 <__udivsi3+0xa8>
    294c:	01cb      	lsls	r3, r1, #7
    294e:	1ac0      	subs	r0, r0, r3
    2950:	4152      	adcs	r2, r2
    2952:	0983      	lsrs	r3, r0, #6
    2954:	428b      	cmp	r3, r1
    2956:	d301      	bcc.n	295c <__udivsi3+0xb4>
    2958:	018b      	lsls	r3, r1, #6
    295a:	1ac0      	subs	r0, r0, r3
    295c:	4152      	adcs	r2, r2
    295e:	0943      	lsrs	r3, r0, #5
    2960:	428b      	cmp	r3, r1
    2962:	d301      	bcc.n	2968 <__udivsi3+0xc0>
    2964:	014b      	lsls	r3, r1, #5
    2966:	1ac0      	subs	r0, r0, r3
    2968:	4152      	adcs	r2, r2
    296a:	0903      	lsrs	r3, r0, #4
    296c:	428b      	cmp	r3, r1
    296e:	d301      	bcc.n	2974 <__udivsi3+0xcc>
    2970:	010b      	lsls	r3, r1, #4
    2972:	1ac0      	subs	r0, r0, r3
    2974:	4152      	adcs	r2, r2
    2976:	08c3      	lsrs	r3, r0, #3
    2978:	428b      	cmp	r3, r1
    297a:	d301      	bcc.n	2980 <__udivsi3+0xd8>
    297c:	00cb      	lsls	r3, r1, #3
    297e:	1ac0      	subs	r0, r0, r3
    2980:	4152      	adcs	r2, r2
    2982:	0883      	lsrs	r3, r0, #2
    2984:	428b      	cmp	r3, r1
    2986:	d301      	bcc.n	298c <__udivsi3+0xe4>
    2988:	008b      	lsls	r3, r1, #2
    298a:	1ac0      	subs	r0, r0, r3
    298c:	4152      	adcs	r2, r2
    298e:	0843      	lsrs	r3, r0, #1
    2990:	428b      	cmp	r3, r1
    2992:	d301      	bcc.n	2998 <__udivsi3+0xf0>
    2994:	004b      	lsls	r3, r1, #1
    2996:	1ac0      	subs	r0, r0, r3
    2998:	4152      	adcs	r2, r2
    299a:	1a41      	subs	r1, r0, r1
    299c:	d200      	bcs.n	29a0 <__udivsi3+0xf8>
    299e:	4601      	mov	r1, r0
    29a0:	4152      	adcs	r2, r2
    29a2:	4610      	mov	r0, r2
    29a4:	4770      	bx	lr
    29a6:	e7ff      	b.n	29a8 <__udivsi3+0x100>
    29a8:	b501      	push	{r0, lr}
    29aa:	2000      	movs	r0, #0
    29ac:	f000 f806 	bl	29bc <__aeabi_idiv0>
    29b0:	bd02      	pop	{r1, pc}
    29b2:	46c0      	nop			; (mov r8, r8)

000029b4 <__aeabi_uidivmod>:
    29b4:	2900      	cmp	r1, #0
    29b6:	d0f7      	beq.n	29a8 <__udivsi3+0x100>
    29b8:	e776      	b.n	28a8 <__udivsi3>
    29ba:	4770      	bx	lr

000029bc <__aeabi_idiv0>:
    29bc:	4770      	bx	lr
    29be:	46c0      	nop			; (mov r8, r8)

000029c0 <__aeabi_lmul>:
    29c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    29c2:	46ce      	mov	lr, r9
    29c4:	4647      	mov	r7, r8
    29c6:	0415      	lsls	r5, r2, #16
    29c8:	0c2d      	lsrs	r5, r5, #16
    29ca:	002e      	movs	r6, r5
    29cc:	b580      	push	{r7, lr}
    29ce:	0407      	lsls	r7, r0, #16
    29d0:	0c14      	lsrs	r4, r2, #16
    29d2:	0c3f      	lsrs	r7, r7, #16
    29d4:	4699      	mov	r9, r3
    29d6:	0c03      	lsrs	r3, r0, #16
    29d8:	437e      	muls	r6, r7
    29da:	435d      	muls	r5, r3
    29dc:	4367      	muls	r7, r4
    29de:	4363      	muls	r3, r4
    29e0:	197f      	adds	r7, r7, r5
    29e2:	0c34      	lsrs	r4, r6, #16
    29e4:	19e4      	adds	r4, r4, r7
    29e6:	469c      	mov	ip, r3
    29e8:	42a5      	cmp	r5, r4
    29ea:	d903      	bls.n	29f4 <__aeabi_lmul+0x34>
    29ec:	2380      	movs	r3, #128	; 0x80
    29ee:	025b      	lsls	r3, r3, #9
    29f0:	4698      	mov	r8, r3
    29f2:	44c4      	add	ip, r8
    29f4:	464b      	mov	r3, r9
    29f6:	4351      	muls	r1, r2
    29f8:	4343      	muls	r3, r0
    29fa:	0436      	lsls	r6, r6, #16
    29fc:	0c36      	lsrs	r6, r6, #16
    29fe:	0c25      	lsrs	r5, r4, #16
    2a00:	0424      	lsls	r4, r4, #16
    2a02:	4465      	add	r5, ip
    2a04:	19a4      	adds	r4, r4, r6
    2a06:	1859      	adds	r1, r3, r1
    2a08:	1949      	adds	r1, r1, r5
    2a0a:	0020      	movs	r0, r4
    2a0c:	bc0c      	pop	{r2, r3}
    2a0e:	4690      	mov	r8, r2
    2a10:	4699      	mov	r9, r3
    2a12:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002a14 <__libc_init_array>:
    2a14:	b570      	push	{r4, r5, r6, lr}
    2a16:	2600      	movs	r6, #0
    2a18:	4d0c      	ldr	r5, [pc, #48]	; (2a4c <__libc_init_array+0x38>)
    2a1a:	4c0d      	ldr	r4, [pc, #52]	; (2a50 <__libc_init_array+0x3c>)
    2a1c:	1b64      	subs	r4, r4, r5
    2a1e:	10a4      	asrs	r4, r4, #2
    2a20:	42a6      	cmp	r6, r4
    2a22:	d109      	bne.n	2a38 <__libc_init_array+0x24>
    2a24:	2600      	movs	r6, #0
    2a26:	f002 f907 	bl	4c38 <_init>
    2a2a:	4d0a      	ldr	r5, [pc, #40]	; (2a54 <__libc_init_array+0x40>)
    2a2c:	4c0a      	ldr	r4, [pc, #40]	; (2a58 <__libc_init_array+0x44>)
    2a2e:	1b64      	subs	r4, r4, r5
    2a30:	10a4      	asrs	r4, r4, #2
    2a32:	42a6      	cmp	r6, r4
    2a34:	d105      	bne.n	2a42 <__libc_init_array+0x2e>
    2a36:	bd70      	pop	{r4, r5, r6, pc}
    2a38:	00b3      	lsls	r3, r6, #2
    2a3a:	58eb      	ldr	r3, [r5, r3]
    2a3c:	4798      	blx	r3
    2a3e:	3601      	adds	r6, #1
    2a40:	e7ee      	b.n	2a20 <__libc_init_array+0xc>
    2a42:	00b3      	lsls	r3, r6, #2
    2a44:	58eb      	ldr	r3, [r5, r3]
    2a46:	4798      	blx	r3
    2a48:	3601      	adds	r6, #1
    2a4a:	e7f2      	b.n	2a32 <__libc_init_array+0x1e>
    2a4c:	00004c44 	.word	0x00004c44
    2a50:	00004c44 	.word	0x00004c44
    2a54:	00004c44 	.word	0x00004c44
    2a58:	00004c48 	.word	0x00004c48

00002a5c <memcmp>:
    2a5c:	b530      	push	{r4, r5, lr}
    2a5e:	2400      	movs	r4, #0
    2a60:	42a2      	cmp	r2, r4
    2a62:	d101      	bne.n	2a68 <memcmp+0xc>
    2a64:	2000      	movs	r0, #0
    2a66:	e005      	b.n	2a74 <memcmp+0x18>
    2a68:	5d03      	ldrb	r3, [r0, r4]
    2a6a:	1c65      	adds	r5, r4, #1
    2a6c:	5d0c      	ldrb	r4, [r1, r4]
    2a6e:	42a3      	cmp	r3, r4
    2a70:	d001      	beq.n	2a76 <memcmp+0x1a>
    2a72:	1b18      	subs	r0, r3, r4
    2a74:	bd30      	pop	{r4, r5, pc}
    2a76:	002c      	movs	r4, r5
    2a78:	e7f2      	b.n	2a60 <memcmp+0x4>

00002a7a <memcpy>:
    2a7a:	2300      	movs	r3, #0
    2a7c:	b510      	push	{r4, lr}
    2a7e:	429a      	cmp	r2, r3
    2a80:	d100      	bne.n	2a84 <memcpy+0xa>
    2a82:	bd10      	pop	{r4, pc}
    2a84:	5ccc      	ldrb	r4, [r1, r3]
    2a86:	54c4      	strb	r4, [r0, r3]
    2a88:	3301      	adds	r3, #1
    2a8a:	e7f8      	b.n	2a7e <memcpy+0x4>

00002a8c <memset>:
    2a8c:	0003      	movs	r3, r0
    2a8e:	1882      	adds	r2, r0, r2
    2a90:	4293      	cmp	r3, r2
    2a92:	d100      	bne.n	2a96 <memset+0xa>
    2a94:	4770      	bx	lr
    2a96:	7019      	strb	r1, [r3, #0]
    2a98:	3301      	adds	r3, #1
    2a9a:	e7f9      	b.n	2a90 <memset+0x4>

00002a9c <iprintf>:
    2a9c:	b40f      	push	{r0, r1, r2, r3}
    2a9e:	4b0b      	ldr	r3, [pc, #44]	; (2acc <iprintf+0x30>)
    2aa0:	b513      	push	{r0, r1, r4, lr}
    2aa2:	681c      	ldr	r4, [r3, #0]
    2aa4:	2c00      	cmp	r4, #0
    2aa6:	d005      	beq.n	2ab4 <iprintf+0x18>
    2aa8:	69a3      	ldr	r3, [r4, #24]
    2aaa:	2b00      	cmp	r3, #0
    2aac:	d102      	bne.n	2ab4 <iprintf+0x18>
    2aae:	0020      	movs	r0, r4
    2ab0:	f000 fb34 	bl	311c <__sinit>
    2ab4:	ab05      	add	r3, sp, #20
    2ab6:	9a04      	ldr	r2, [sp, #16]
    2ab8:	68a1      	ldr	r1, [r4, #8]
    2aba:	0020      	movs	r0, r4
    2abc:	9301      	str	r3, [sp, #4]
    2abe:	f000 fd25 	bl	350c <_vfiprintf_r>
    2ac2:	bc16      	pop	{r1, r2, r4}
    2ac4:	bc08      	pop	{r3}
    2ac6:	b004      	add	sp, #16
    2ac8:	4718      	bx	r3
    2aca:	46c0      	nop			; (mov r8, r8)
    2acc:	20000008 	.word	0x20000008

00002ad0 <putchar>:
    2ad0:	4b08      	ldr	r3, [pc, #32]	; (2af4 <putchar+0x24>)
    2ad2:	b570      	push	{r4, r5, r6, lr}
    2ad4:	681c      	ldr	r4, [r3, #0]
    2ad6:	0005      	movs	r5, r0
    2ad8:	2c00      	cmp	r4, #0
    2ada:	d005      	beq.n	2ae8 <putchar+0x18>
    2adc:	69a3      	ldr	r3, [r4, #24]
    2ade:	2b00      	cmp	r3, #0
    2ae0:	d102      	bne.n	2ae8 <putchar+0x18>
    2ae2:	0020      	movs	r0, r4
    2ae4:	f000 fb1a 	bl	311c <__sinit>
    2ae8:	0029      	movs	r1, r5
    2aea:	68a2      	ldr	r2, [r4, #8]
    2aec:	0020      	movs	r0, r4
    2aee:	f001 fac3 	bl	4078 <_putc_r>
    2af2:	bd70      	pop	{r4, r5, r6, pc}
    2af4:	20000008 	.word	0x20000008

00002af8 <_puts_r>:
    2af8:	b570      	push	{r4, r5, r6, lr}
    2afa:	0005      	movs	r5, r0
    2afc:	000e      	movs	r6, r1
    2afe:	2800      	cmp	r0, #0
    2b00:	d004      	beq.n	2b0c <_puts_r+0x14>
    2b02:	6983      	ldr	r3, [r0, #24]
    2b04:	2b00      	cmp	r3, #0
    2b06:	d101      	bne.n	2b0c <_puts_r+0x14>
    2b08:	f000 fb08 	bl	311c <__sinit>
    2b0c:	69ab      	ldr	r3, [r5, #24]
    2b0e:	68ac      	ldr	r4, [r5, #8]
    2b10:	2b00      	cmp	r3, #0
    2b12:	d102      	bne.n	2b1a <_puts_r+0x22>
    2b14:	0028      	movs	r0, r5
    2b16:	f000 fb01 	bl	311c <__sinit>
    2b1a:	4b24      	ldr	r3, [pc, #144]	; (2bac <_puts_r+0xb4>)
    2b1c:	429c      	cmp	r4, r3
    2b1e:	d10f      	bne.n	2b40 <_puts_r+0x48>
    2b20:	686c      	ldr	r4, [r5, #4]
    2b22:	89a3      	ldrh	r3, [r4, #12]
    2b24:	071b      	lsls	r3, r3, #28
    2b26:	d502      	bpl.n	2b2e <_puts_r+0x36>
    2b28:	6923      	ldr	r3, [r4, #16]
    2b2a:	2b00      	cmp	r3, #0
    2b2c:	d120      	bne.n	2b70 <_puts_r+0x78>
    2b2e:	0021      	movs	r1, r4
    2b30:	0028      	movs	r0, r5
    2b32:	f000 f971 	bl	2e18 <__swsetup_r>
    2b36:	2800      	cmp	r0, #0
    2b38:	d01a      	beq.n	2b70 <_puts_r+0x78>
    2b3a:	2001      	movs	r0, #1
    2b3c:	4240      	negs	r0, r0
    2b3e:	bd70      	pop	{r4, r5, r6, pc}
    2b40:	4b1b      	ldr	r3, [pc, #108]	; (2bb0 <_puts_r+0xb8>)
    2b42:	429c      	cmp	r4, r3
    2b44:	d101      	bne.n	2b4a <_puts_r+0x52>
    2b46:	68ac      	ldr	r4, [r5, #8]
    2b48:	e7eb      	b.n	2b22 <_puts_r+0x2a>
    2b4a:	4b1a      	ldr	r3, [pc, #104]	; (2bb4 <_puts_r+0xbc>)
    2b4c:	429c      	cmp	r4, r3
    2b4e:	d1e8      	bne.n	2b22 <_puts_r+0x2a>
    2b50:	68ec      	ldr	r4, [r5, #12]
    2b52:	e7e6      	b.n	2b22 <_puts_r+0x2a>
    2b54:	3b01      	subs	r3, #1
    2b56:	3601      	adds	r6, #1
    2b58:	60a3      	str	r3, [r4, #8]
    2b5a:	2b00      	cmp	r3, #0
    2b5c:	da04      	bge.n	2b68 <_puts_r+0x70>
    2b5e:	69a2      	ldr	r2, [r4, #24]
    2b60:	4293      	cmp	r3, r2
    2b62:	db16      	blt.n	2b92 <_puts_r+0x9a>
    2b64:	290a      	cmp	r1, #10
    2b66:	d014      	beq.n	2b92 <_puts_r+0x9a>
    2b68:	6823      	ldr	r3, [r4, #0]
    2b6a:	1c5a      	adds	r2, r3, #1
    2b6c:	6022      	str	r2, [r4, #0]
    2b6e:	7019      	strb	r1, [r3, #0]
    2b70:	7831      	ldrb	r1, [r6, #0]
    2b72:	68a3      	ldr	r3, [r4, #8]
    2b74:	2900      	cmp	r1, #0
    2b76:	d1ed      	bne.n	2b54 <_puts_r+0x5c>
    2b78:	3b01      	subs	r3, #1
    2b7a:	60a3      	str	r3, [r4, #8]
    2b7c:	2b00      	cmp	r3, #0
    2b7e:	da0f      	bge.n	2ba0 <_puts_r+0xa8>
    2b80:	0022      	movs	r2, r4
    2b82:	310a      	adds	r1, #10
    2b84:	0028      	movs	r0, r5
    2b86:	f000 f8f1 	bl	2d6c <__swbuf_r>
    2b8a:	1c43      	adds	r3, r0, #1
    2b8c:	d0d5      	beq.n	2b3a <_puts_r+0x42>
    2b8e:	200a      	movs	r0, #10
    2b90:	e7d5      	b.n	2b3e <_puts_r+0x46>
    2b92:	0022      	movs	r2, r4
    2b94:	0028      	movs	r0, r5
    2b96:	f000 f8e9 	bl	2d6c <__swbuf_r>
    2b9a:	1c43      	adds	r3, r0, #1
    2b9c:	d1e8      	bne.n	2b70 <_puts_r+0x78>
    2b9e:	e7cc      	b.n	2b3a <_puts_r+0x42>
    2ba0:	200a      	movs	r0, #10
    2ba2:	6823      	ldr	r3, [r4, #0]
    2ba4:	1c5a      	adds	r2, r3, #1
    2ba6:	6022      	str	r2, [r4, #0]
    2ba8:	7018      	strb	r0, [r3, #0]
    2baa:	e7c8      	b.n	2b3e <_puts_r+0x46>
    2bac:	00004a90 	.word	0x00004a90
    2bb0:	00004ab0 	.word	0x00004ab0
    2bb4:	00004a70 	.word	0x00004a70

00002bb8 <puts>:
    2bb8:	b510      	push	{r4, lr}
    2bba:	4b03      	ldr	r3, [pc, #12]	; (2bc8 <puts+0x10>)
    2bbc:	0001      	movs	r1, r0
    2bbe:	6818      	ldr	r0, [r3, #0]
    2bc0:	f7ff ff9a 	bl	2af8 <_puts_r>
    2bc4:	bd10      	pop	{r4, pc}
    2bc6:	46c0      	nop			; (mov r8, r8)
    2bc8:	20000008 	.word	0x20000008

00002bcc <iscanf>:
    2bcc:	b40f      	push	{r0, r1, r2, r3}
    2bce:	4b0b      	ldr	r3, [pc, #44]	; (2bfc <iscanf+0x30>)
    2bd0:	b513      	push	{r0, r1, r4, lr}
    2bd2:	681c      	ldr	r4, [r3, #0]
    2bd4:	2c00      	cmp	r4, #0
    2bd6:	d005      	beq.n	2be4 <iscanf+0x18>
    2bd8:	69a3      	ldr	r3, [r4, #24]
    2bda:	2b00      	cmp	r3, #0
    2bdc:	d102      	bne.n	2be4 <iscanf+0x18>
    2bde:	0020      	movs	r0, r4
    2be0:	f000 fa9c 	bl	311c <__sinit>
    2be4:	ab05      	add	r3, sp, #20
    2be6:	9a04      	ldr	r2, [sp, #16]
    2be8:	6861      	ldr	r1, [r4, #4]
    2bea:	0020      	movs	r0, r4
    2bec:	9301      	str	r3, [sp, #4]
    2bee:	f001 f8b7 	bl	3d60 <_vfiscanf_r>
    2bf2:	bc16      	pop	{r1, r2, r4}
    2bf4:	bc08      	pop	{r3}
    2bf6:	b004      	add	sp, #16
    2bf8:	4718      	bx	r3
    2bfa:	46c0      	nop			; (mov r8, r8)
    2bfc:	20000008 	.word	0x20000008

00002c00 <setbuf>:
    2c00:	424a      	negs	r2, r1
    2c02:	414a      	adcs	r2, r1
    2c04:	2380      	movs	r3, #128	; 0x80
    2c06:	b510      	push	{r4, lr}
    2c08:	0052      	lsls	r2, r2, #1
    2c0a:	00db      	lsls	r3, r3, #3
    2c0c:	f000 f802 	bl	2c14 <setvbuf>
    2c10:	bd10      	pop	{r4, pc}
	...

00002c14 <setvbuf>:
    2c14:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c16:	001d      	movs	r5, r3
    2c18:	4b4f      	ldr	r3, [pc, #316]	; (2d58 <setvbuf+0x144>)
    2c1a:	b085      	sub	sp, #20
    2c1c:	681e      	ldr	r6, [r3, #0]
    2c1e:	0004      	movs	r4, r0
    2c20:	000f      	movs	r7, r1
    2c22:	9200      	str	r2, [sp, #0]
    2c24:	2e00      	cmp	r6, #0
    2c26:	d005      	beq.n	2c34 <setvbuf+0x20>
    2c28:	69b3      	ldr	r3, [r6, #24]
    2c2a:	2b00      	cmp	r3, #0
    2c2c:	d102      	bne.n	2c34 <setvbuf+0x20>
    2c2e:	0030      	movs	r0, r6
    2c30:	f000 fa74 	bl	311c <__sinit>
    2c34:	4b49      	ldr	r3, [pc, #292]	; (2d5c <setvbuf+0x148>)
    2c36:	429c      	cmp	r4, r3
    2c38:	d150      	bne.n	2cdc <setvbuf+0xc8>
    2c3a:	6874      	ldr	r4, [r6, #4]
    2c3c:	9b00      	ldr	r3, [sp, #0]
    2c3e:	2b02      	cmp	r3, #2
    2c40:	d005      	beq.n	2c4e <setvbuf+0x3a>
    2c42:	2b01      	cmp	r3, #1
    2c44:	d900      	bls.n	2c48 <setvbuf+0x34>
    2c46:	e084      	b.n	2d52 <setvbuf+0x13e>
    2c48:	2d00      	cmp	r5, #0
    2c4a:	da00      	bge.n	2c4e <setvbuf+0x3a>
    2c4c:	e081      	b.n	2d52 <setvbuf+0x13e>
    2c4e:	0021      	movs	r1, r4
    2c50:	0030      	movs	r0, r6
    2c52:	f000 f9e1 	bl	3018 <_fflush_r>
    2c56:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2c58:	2900      	cmp	r1, #0
    2c5a:	d008      	beq.n	2c6e <setvbuf+0x5a>
    2c5c:	0023      	movs	r3, r4
    2c5e:	3344      	adds	r3, #68	; 0x44
    2c60:	4299      	cmp	r1, r3
    2c62:	d002      	beq.n	2c6a <setvbuf+0x56>
    2c64:	0030      	movs	r0, r6
    2c66:	f000 fb81 	bl	336c <_free_r>
    2c6a:	2300      	movs	r3, #0
    2c6c:	6363      	str	r3, [r4, #52]	; 0x34
    2c6e:	2300      	movs	r3, #0
    2c70:	61a3      	str	r3, [r4, #24]
    2c72:	6063      	str	r3, [r4, #4]
    2c74:	89a3      	ldrh	r3, [r4, #12]
    2c76:	061b      	lsls	r3, r3, #24
    2c78:	d503      	bpl.n	2c82 <setvbuf+0x6e>
    2c7a:	6921      	ldr	r1, [r4, #16]
    2c7c:	0030      	movs	r0, r6
    2c7e:	f000 fb75 	bl	336c <_free_r>
    2c82:	89a3      	ldrh	r3, [r4, #12]
    2c84:	4a36      	ldr	r2, [pc, #216]	; (2d60 <setvbuf+0x14c>)
    2c86:	4013      	ands	r3, r2
    2c88:	81a3      	strh	r3, [r4, #12]
    2c8a:	9b00      	ldr	r3, [sp, #0]
    2c8c:	2b02      	cmp	r3, #2
    2c8e:	d05a      	beq.n	2d46 <setvbuf+0x132>
    2c90:	ab03      	add	r3, sp, #12
    2c92:	aa02      	add	r2, sp, #8
    2c94:	0021      	movs	r1, r4
    2c96:	0030      	movs	r0, r6
    2c98:	f000 faf2 	bl	3280 <__swhatbuf_r>
    2c9c:	89a3      	ldrh	r3, [r4, #12]
    2c9e:	4318      	orrs	r0, r3
    2ca0:	81a0      	strh	r0, [r4, #12]
    2ca2:	2d00      	cmp	r5, #0
    2ca4:	d124      	bne.n	2cf0 <setvbuf+0xdc>
    2ca6:	9d02      	ldr	r5, [sp, #8]
    2ca8:	0028      	movs	r0, r5
    2caa:	f000 fb55 	bl	3358 <malloc>
    2cae:	9501      	str	r5, [sp, #4]
    2cb0:	1e07      	subs	r7, r0, #0
    2cb2:	d142      	bne.n	2d3a <setvbuf+0x126>
    2cb4:	9b02      	ldr	r3, [sp, #8]
    2cb6:	9301      	str	r3, [sp, #4]
    2cb8:	42ab      	cmp	r3, r5
    2cba:	d139      	bne.n	2d30 <setvbuf+0x11c>
    2cbc:	2001      	movs	r0, #1
    2cbe:	4240      	negs	r0, r0
    2cc0:	2302      	movs	r3, #2
    2cc2:	89a2      	ldrh	r2, [r4, #12]
    2cc4:	4313      	orrs	r3, r2
    2cc6:	81a3      	strh	r3, [r4, #12]
    2cc8:	2300      	movs	r3, #0
    2cca:	60a3      	str	r3, [r4, #8]
    2ccc:	0023      	movs	r3, r4
    2cce:	3347      	adds	r3, #71	; 0x47
    2cd0:	6023      	str	r3, [r4, #0]
    2cd2:	6123      	str	r3, [r4, #16]
    2cd4:	2301      	movs	r3, #1
    2cd6:	6163      	str	r3, [r4, #20]
    2cd8:	b005      	add	sp, #20
    2cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cdc:	4b21      	ldr	r3, [pc, #132]	; (2d64 <setvbuf+0x150>)
    2cde:	429c      	cmp	r4, r3
    2ce0:	d101      	bne.n	2ce6 <setvbuf+0xd2>
    2ce2:	68b4      	ldr	r4, [r6, #8]
    2ce4:	e7aa      	b.n	2c3c <setvbuf+0x28>
    2ce6:	4b20      	ldr	r3, [pc, #128]	; (2d68 <setvbuf+0x154>)
    2ce8:	429c      	cmp	r4, r3
    2cea:	d1a7      	bne.n	2c3c <setvbuf+0x28>
    2cec:	68f4      	ldr	r4, [r6, #12]
    2cee:	e7a5      	b.n	2c3c <setvbuf+0x28>
    2cf0:	2f00      	cmp	r7, #0
    2cf2:	d0d9      	beq.n	2ca8 <setvbuf+0x94>
    2cf4:	69b3      	ldr	r3, [r6, #24]
    2cf6:	2b00      	cmp	r3, #0
    2cf8:	d102      	bne.n	2d00 <setvbuf+0xec>
    2cfa:	0030      	movs	r0, r6
    2cfc:	f000 fa0e 	bl	311c <__sinit>
    2d00:	9b00      	ldr	r3, [sp, #0]
    2d02:	2b01      	cmp	r3, #1
    2d04:	d103      	bne.n	2d0e <setvbuf+0xfa>
    2d06:	89a3      	ldrh	r3, [r4, #12]
    2d08:	9a00      	ldr	r2, [sp, #0]
    2d0a:	431a      	orrs	r2, r3
    2d0c:	81a2      	strh	r2, [r4, #12]
    2d0e:	2008      	movs	r0, #8
    2d10:	89a3      	ldrh	r3, [r4, #12]
    2d12:	6027      	str	r7, [r4, #0]
    2d14:	6127      	str	r7, [r4, #16]
    2d16:	6165      	str	r5, [r4, #20]
    2d18:	4018      	ands	r0, r3
    2d1a:	d018      	beq.n	2d4e <setvbuf+0x13a>
    2d1c:	2001      	movs	r0, #1
    2d1e:	4018      	ands	r0, r3
    2d20:	2300      	movs	r3, #0
    2d22:	4298      	cmp	r0, r3
    2d24:	d011      	beq.n	2d4a <setvbuf+0x136>
    2d26:	426d      	negs	r5, r5
    2d28:	60a3      	str	r3, [r4, #8]
    2d2a:	61a5      	str	r5, [r4, #24]
    2d2c:	0018      	movs	r0, r3
    2d2e:	e7d3      	b.n	2cd8 <setvbuf+0xc4>
    2d30:	9801      	ldr	r0, [sp, #4]
    2d32:	f000 fb11 	bl	3358 <malloc>
    2d36:	1e07      	subs	r7, r0, #0
    2d38:	d0c0      	beq.n	2cbc <setvbuf+0xa8>
    2d3a:	2380      	movs	r3, #128	; 0x80
    2d3c:	89a2      	ldrh	r2, [r4, #12]
    2d3e:	9d01      	ldr	r5, [sp, #4]
    2d40:	4313      	orrs	r3, r2
    2d42:	81a3      	strh	r3, [r4, #12]
    2d44:	e7d6      	b.n	2cf4 <setvbuf+0xe0>
    2d46:	2000      	movs	r0, #0
    2d48:	e7ba      	b.n	2cc0 <setvbuf+0xac>
    2d4a:	60a5      	str	r5, [r4, #8]
    2d4c:	e7c4      	b.n	2cd8 <setvbuf+0xc4>
    2d4e:	60a0      	str	r0, [r4, #8]
    2d50:	e7c2      	b.n	2cd8 <setvbuf+0xc4>
    2d52:	2001      	movs	r0, #1
    2d54:	4240      	negs	r0, r0
    2d56:	e7bf      	b.n	2cd8 <setvbuf+0xc4>
    2d58:	20000008 	.word	0x20000008
    2d5c:	00004a90 	.word	0x00004a90
    2d60:	fffff35c 	.word	0xfffff35c
    2d64:	00004ab0 	.word	0x00004ab0
    2d68:	00004a70 	.word	0x00004a70

00002d6c <__swbuf_r>:
    2d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d6e:	0005      	movs	r5, r0
    2d70:	000e      	movs	r6, r1
    2d72:	0014      	movs	r4, r2
    2d74:	2800      	cmp	r0, #0
    2d76:	d004      	beq.n	2d82 <__swbuf_r+0x16>
    2d78:	6983      	ldr	r3, [r0, #24]
    2d7a:	2b00      	cmp	r3, #0
    2d7c:	d101      	bne.n	2d82 <__swbuf_r+0x16>
    2d7e:	f000 f9cd 	bl	311c <__sinit>
    2d82:	4b22      	ldr	r3, [pc, #136]	; (2e0c <__swbuf_r+0xa0>)
    2d84:	429c      	cmp	r4, r3
    2d86:	d12d      	bne.n	2de4 <__swbuf_r+0x78>
    2d88:	686c      	ldr	r4, [r5, #4]
    2d8a:	69a3      	ldr	r3, [r4, #24]
    2d8c:	60a3      	str	r3, [r4, #8]
    2d8e:	89a3      	ldrh	r3, [r4, #12]
    2d90:	071b      	lsls	r3, r3, #28
    2d92:	d531      	bpl.n	2df8 <__swbuf_r+0x8c>
    2d94:	6923      	ldr	r3, [r4, #16]
    2d96:	2b00      	cmp	r3, #0
    2d98:	d02e      	beq.n	2df8 <__swbuf_r+0x8c>
    2d9a:	6823      	ldr	r3, [r4, #0]
    2d9c:	6922      	ldr	r2, [r4, #16]
    2d9e:	b2f7      	uxtb	r7, r6
    2da0:	1a98      	subs	r0, r3, r2
    2da2:	6963      	ldr	r3, [r4, #20]
    2da4:	b2f6      	uxtb	r6, r6
    2da6:	4298      	cmp	r0, r3
    2da8:	db05      	blt.n	2db6 <__swbuf_r+0x4a>
    2daa:	0021      	movs	r1, r4
    2dac:	0028      	movs	r0, r5
    2dae:	f000 f933 	bl	3018 <_fflush_r>
    2db2:	2800      	cmp	r0, #0
    2db4:	d126      	bne.n	2e04 <__swbuf_r+0x98>
    2db6:	68a3      	ldr	r3, [r4, #8]
    2db8:	3001      	adds	r0, #1
    2dba:	3b01      	subs	r3, #1
    2dbc:	60a3      	str	r3, [r4, #8]
    2dbe:	6823      	ldr	r3, [r4, #0]
    2dc0:	1c5a      	adds	r2, r3, #1
    2dc2:	6022      	str	r2, [r4, #0]
    2dc4:	701f      	strb	r7, [r3, #0]
    2dc6:	6963      	ldr	r3, [r4, #20]
    2dc8:	4298      	cmp	r0, r3
    2dca:	d004      	beq.n	2dd6 <__swbuf_r+0x6a>
    2dcc:	89a3      	ldrh	r3, [r4, #12]
    2dce:	07db      	lsls	r3, r3, #31
    2dd0:	d51a      	bpl.n	2e08 <__swbuf_r+0x9c>
    2dd2:	2e0a      	cmp	r6, #10
    2dd4:	d118      	bne.n	2e08 <__swbuf_r+0x9c>
    2dd6:	0021      	movs	r1, r4
    2dd8:	0028      	movs	r0, r5
    2dda:	f000 f91d 	bl	3018 <_fflush_r>
    2dde:	2800      	cmp	r0, #0
    2de0:	d012      	beq.n	2e08 <__swbuf_r+0x9c>
    2de2:	e00f      	b.n	2e04 <__swbuf_r+0x98>
    2de4:	4b0a      	ldr	r3, [pc, #40]	; (2e10 <__swbuf_r+0xa4>)
    2de6:	429c      	cmp	r4, r3
    2de8:	d101      	bne.n	2dee <__swbuf_r+0x82>
    2dea:	68ac      	ldr	r4, [r5, #8]
    2dec:	e7cd      	b.n	2d8a <__swbuf_r+0x1e>
    2dee:	4b09      	ldr	r3, [pc, #36]	; (2e14 <__swbuf_r+0xa8>)
    2df0:	429c      	cmp	r4, r3
    2df2:	d1ca      	bne.n	2d8a <__swbuf_r+0x1e>
    2df4:	68ec      	ldr	r4, [r5, #12]
    2df6:	e7c8      	b.n	2d8a <__swbuf_r+0x1e>
    2df8:	0021      	movs	r1, r4
    2dfa:	0028      	movs	r0, r5
    2dfc:	f000 f80c 	bl	2e18 <__swsetup_r>
    2e00:	2800      	cmp	r0, #0
    2e02:	d0ca      	beq.n	2d9a <__swbuf_r+0x2e>
    2e04:	2601      	movs	r6, #1
    2e06:	4276      	negs	r6, r6
    2e08:	0030      	movs	r0, r6
    2e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e0c:	00004a90 	.word	0x00004a90
    2e10:	00004ab0 	.word	0x00004ab0
    2e14:	00004a70 	.word	0x00004a70

00002e18 <__swsetup_r>:
    2e18:	4b36      	ldr	r3, [pc, #216]	; (2ef4 <__swsetup_r+0xdc>)
    2e1a:	b570      	push	{r4, r5, r6, lr}
    2e1c:	681d      	ldr	r5, [r3, #0]
    2e1e:	0006      	movs	r6, r0
    2e20:	000c      	movs	r4, r1
    2e22:	2d00      	cmp	r5, #0
    2e24:	d005      	beq.n	2e32 <__swsetup_r+0x1a>
    2e26:	69ab      	ldr	r3, [r5, #24]
    2e28:	2b00      	cmp	r3, #0
    2e2a:	d102      	bne.n	2e32 <__swsetup_r+0x1a>
    2e2c:	0028      	movs	r0, r5
    2e2e:	f000 f975 	bl	311c <__sinit>
    2e32:	4b31      	ldr	r3, [pc, #196]	; (2ef8 <__swsetup_r+0xe0>)
    2e34:	429c      	cmp	r4, r3
    2e36:	d10f      	bne.n	2e58 <__swsetup_r+0x40>
    2e38:	686c      	ldr	r4, [r5, #4]
    2e3a:	230c      	movs	r3, #12
    2e3c:	5ee2      	ldrsh	r2, [r4, r3]
    2e3e:	b293      	uxth	r3, r2
    2e40:	0719      	lsls	r1, r3, #28
    2e42:	d42d      	bmi.n	2ea0 <__swsetup_r+0x88>
    2e44:	06d9      	lsls	r1, r3, #27
    2e46:	d411      	bmi.n	2e6c <__swsetup_r+0x54>
    2e48:	2309      	movs	r3, #9
    2e4a:	2001      	movs	r0, #1
    2e4c:	6033      	str	r3, [r6, #0]
    2e4e:	3337      	adds	r3, #55	; 0x37
    2e50:	4313      	orrs	r3, r2
    2e52:	81a3      	strh	r3, [r4, #12]
    2e54:	4240      	negs	r0, r0
    2e56:	bd70      	pop	{r4, r5, r6, pc}
    2e58:	4b28      	ldr	r3, [pc, #160]	; (2efc <__swsetup_r+0xe4>)
    2e5a:	429c      	cmp	r4, r3
    2e5c:	d101      	bne.n	2e62 <__swsetup_r+0x4a>
    2e5e:	68ac      	ldr	r4, [r5, #8]
    2e60:	e7eb      	b.n	2e3a <__swsetup_r+0x22>
    2e62:	4b27      	ldr	r3, [pc, #156]	; (2f00 <__swsetup_r+0xe8>)
    2e64:	429c      	cmp	r4, r3
    2e66:	d1e8      	bne.n	2e3a <__swsetup_r+0x22>
    2e68:	68ec      	ldr	r4, [r5, #12]
    2e6a:	e7e6      	b.n	2e3a <__swsetup_r+0x22>
    2e6c:	075b      	lsls	r3, r3, #29
    2e6e:	d513      	bpl.n	2e98 <__swsetup_r+0x80>
    2e70:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2e72:	2900      	cmp	r1, #0
    2e74:	d008      	beq.n	2e88 <__swsetup_r+0x70>
    2e76:	0023      	movs	r3, r4
    2e78:	3344      	adds	r3, #68	; 0x44
    2e7a:	4299      	cmp	r1, r3
    2e7c:	d002      	beq.n	2e84 <__swsetup_r+0x6c>
    2e7e:	0030      	movs	r0, r6
    2e80:	f000 fa74 	bl	336c <_free_r>
    2e84:	2300      	movs	r3, #0
    2e86:	6363      	str	r3, [r4, #52]	; 0x34
    2e88:	2224      	movs	r2, #36	; 0x24
    2e8a:	89a3      	ldrh	r3, [r4, #12]
    2e8c:	4393      	bics	r3, r2
    2e8e:	81a3      	strh	r3, [r4, #12]
    2e90:	2300      	movs	r3, #0
    2e92:	6063      	str	r3, [r4, #4]
    2e94:	6923      	ldr	r3, [r4, #16]
    2e96:	6023      	str	r3, [r4, #0]
    2e98:	2308      	movs	r3, #8
    2e9a:	89a2      	ldrh	r2, [r4, #12]
    2e9c:	4313      	orrs	r3, r2
    2e9e:	81a3      	strh	r3, [r4, #12]
    2ea0:	6923      	ldr	r3, [r4, #16]
    2ea2:	2b00      	cmp	r3, #0
    2ea4:	d10b      	bne.n	2ebe <__swsetup_r+0xa6>
    2ea6:	21a0      	movs	r1, #160	; 0xa0
    2ea8:	2280      	movs	r2, #128	; 0x80
    2eaa:	89a3      	ldrh	r3, [r4, #12]
    2eac:	0089      	lsls	r1, r1, #2
    2eae:	0092      	lsls	r2, r2, #2
    2eb0:	400b      	ands	r3, r1
    2eb2:	4293      	cmp	r3, r2
    2eb4:	d003      	beq.n	2ebe <__swsetup_r+0xa6>
    2eb6:	0021      	movs	r1, r4
    2eb8:	0030      	movs	r0, r6
    2eba:	f000 fa09 	bl	32d0 <__smakebuf_r>
    2ebe:	2301      	movs	r3, #1
    2ec0:	89a2      	ldrh	r2, [r4, #12]
    2ec2:	4013      	ands	r3, r2
    2ec4:	d011      	beq.n	2eea <__swsetup_r+0xd2>
    2ec6:	2300      	movs	r3, #0
    2ec8:	60a3      	str	r3, [r4, #8]
    2eca:	6963      	ldr	r3, [r4, #20]
    2ecc:	425b      	negs	r3, r3
    2ece:	61a3      	str	r3, [r4, #24]
    2ed0:	2000      	movs	r0, #0
    2ed2:	6923      	ldr	r3, [r4, #16]
    2ed4:	4283      	cmp	r3, r0
    2ed6:	d1be      	bne.n	2e56 <__swsetup_r+0x3e>
    2ed8:	230c      	movs	r3, #12
    2eda:	5ee2      	ldrsh	r2, [r4, r3]
    2edc:	0613      	lsls	r3, r2, #24
    2ede:	d5ba      	bpl.n	2e56 <__swsetup_r+0x3e>
    2ee0:	2340      	movs	r3, #64	; 0x40
    2ee2:	4313      	orrs	r3, r2
    2ee4:	81a3      	strh	r3, [r4, #12]
    2ee6:	3801      	subs	r0, #1
    2ee8:	e7b5      	b.n	2e56 <__swsetup_r+0x3e>
    2eea:	0792      	lsls	r2, r2, #30
    2eec:	d400      	bmi.n	2ef0 <__swsetup_r+0xd8>
    2eee:	6963      	ldr	r3, [r4, #20]
    2ef0:	60a3      	str	r3, [r4, #8]
    2ef2:	e7ed      	b.n	2ed0 <__swsetup_r+0xb8>
    2ef4:	20000008 	.word	0x20000008
    2ef8:	00004a90 	.word	0x00004a90
    2efc:	00004ab0 	.word	0x00004ab0
    2f00:	00004a70 	.word	0x00004a70

00002f04 <__sflush_r>:
    2f04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2f06:	898a      	ldrh	r2, [r1, #12]
    2f08:	0005      	movs	r5, r0
    2f0a:	000c      	movs	r4, r1
    2f0c:	0713      	lsls	r3, r2, #28
    2f0e:	d460      	bmi.n	2fd2 <__sflush_r+0xce>
    2f10:	684b      	ldr	r3, [r1, #4]
    2f12:	2b00      	cmp	r3, #0
    2f14:	dc04      	bgt.n	2f20 <__sflush_r+0x1c>
    2f16:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    2f18:	2b00      	cmp	r3, #0
    2f1a:	dc01      	bgt.n	2f20 <__sflush_r+0x1c>
    2f1c:	2000      	movs	r0, #0
    2f1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2f20:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2f22:	2f00      	cmp	r7, #0
    2f24:	d0fa      	beq.n	2f1c <__sflush_r+0x18>
    2f26:	2300      	movs	r3, #0
    2f28:	682e      	ldr	r6, [r5, #0]
    2f2a:	602b      	str	r3, [r5, #0]
    2f2c:	2380      	movs	r3, #128	; 0x80
    2f2e:	015b      	lsls	r3, r3, #5
    2f30:	401a      	ands	r2, r3
    2f32:	d034      	beq.n	2f9e <__sflush_r+0x9a>
    2f34:	6d60      	ldr	r0, [r4, #84]	; 0x54
    2f36:	89a3      	ldrh	r3, [r4, #12]
    2f38:	075b      	lsls	r3, r3, #29
    2f3a:	d506      	bpl.n	2f4a <__sflush_r+0x46>
    2f3c:	6863      	ldr	r3, [r4, #4]
    2f3e:	1ac0      	subs	r0, r0, r3
    2f40:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2f42:	2b00      	cmp	r3, #0
    2f44:	d001      	beq.n	2f4a <__sflush_r+0x46>
    2f46:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2f48:	1ac0      	subs	r0, r0, r3
    2f4a:	0002      	movs	r2, r0
    2f4c:	6a21      	ldr	r1, [r4, #32]
    2f4e:	2300      	movs	r3, #0
    2f50:	0028      	movs	r0, r5
    2f52:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2f54:	47b8      	blx	r7
    2f56:	89a1      	ldrh	r1, [r4, #12]
    2f58:	1c43      	adds	r3, r0, #1
    2f5a:	d106      	bne.n	2f6a <__sflush_r+0x66>
    2f5c:	682b      	ldr	r3, [r5, #0]
    2f5e:	2b1d      	cmp	r3, #29
    2f60:	d831      	bhi.n	2fc6 <__sflush_r+0xc2>
    2f62:	4a2c      	ldr	r2, [pc, #176]	; (3014 <__sflush_r+0x110>)
    2f64:	40da      	lsrs	r2, r3
    2f66:	07d3      	lsls	r3, r2, #31
    2f68:	d52d      	bpl.n	2fc6 <__sflush_r+0xc2>
    2f6a:	2300      	movs	r3, #0
    2f6c:	6063      	str	r3, [r4, #4]
    2f6e:	6923      	ldr	r3, [r4, #16]
    2f70:	6023      	str	r3, [r4, #0]
    2f72:	04cb      	lsls	r3, r1, #19
    2f74:	d505      	bpl.n	2f82 <__sflush_r+0x7e>
    2f76:	1c43      	adds	r3, r0, #1
    2f78:	d102      	bne.n	2f80 <__sflush_r+0x7c>
    2f7a:	682b      	ldr	r3, [r5, #0]
    2f7c:	2b00      	cmp	r3, #0
    2f7e:	d100      	bne.n	2f82 <__sflush_r+0x7e>
    2f80:	6560      	str	r0, [r4, #84]	; 0x54
    2f82:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2f84:	602e      	str	r6, [r5, #0]
    2f86:	2900      	cmp	r1, #0
    2f88:	d0c8      	beq.n	2f1c <__sflush_r+0x18>
    2f8a:	0023      	movs	r3, r4
    2f8c:	3344      	adds	r3, #68	; 0x44
    2f8e:	4299      	cmp	r1, r3
    2f90:	d002      	beq.n	2f98 <__sflush_r+0x94>
    2f92:	0028      	movs	r0, r5
    2f94:	f000 f9ea 	bl	336c <_free_r>
    2f98:	2000      	movs	r0, #0
    2f9a:	6360      	str	r0, [r4, #52]	; 0x34
    2f9c:	e7bf      	b.n	2f1e <__sflush_r+0x1a>
    2f9e:	2301      	movs	r3, #1
    2fa0:	6a21      	ldr	r1, [r4, #32]
    2fa2:	0028      	movs	r0, r5
    2fa4:	47b8      	blx	r7
    2fa6:	1c43      	adds	r3, r0, #1
    2fa8:	d1c5      	bne.n	2f36 <__sflush_r+0x32>
    2faa:	682b      	ldr	r3, [r5, #0]
    2fac:	2b00      	cmp	r3, #0
    2fae:	d0c2      	beq.n	2f36 <__sflush_r+0x32>
    2fb0:	2b1d      	cmp	r3, #29
    2fb2:	d001      	beq.n	2fb8 <__sflush_r+0xb4>
    2fb4:	2b16      	cmp	r3, #22
    2fb6:	d101      	bne.n	2fbc <__sflush_r+0xb8>
    2fb8:	602e      	str	r6, [r5, #0]
    2fba:	e7af      	b.n	2f1c <__sflush_r+0x18>
    2fbc:	2340      	movs	r3, #64	; 0x40
    2fbe:	89a2      	ldrh	r2, [r4, #12]
    2fc0:	4313      	orrs	r3, r2
    2fc2:	81a3      	strh	r3, [r4, #12]
    2fc4:	e7ab      	b.n	2f1e <__sflush_r+0x1a>
    2fc6:	2340      	movs	r3, #64	; 0x40
    2fc8:	430b      	orrs	r3, r1
    2fca:	2001      	movs	r0, #1
    2fcc:	81a3      	strh	r3, [r4, #12]
    2fce:	4240      	negs	r0, r0
    2fd0:	e7a5      	b.n	2f1e <__sflush_r+0x1a>
    2fd2:	690f      	ldr	r7, [r1, #16]
    2fd4:	2f00      	cmp	r7, #0
    2fd6:	d0a1      	beq.n	2f1c <__sflush_r+0x18>
    2fd8:	680b      	ldr	r3, [r1, #0]
    2fda:	600f      	str	r7, [r1, #0]
    2fdc:	1bdb      	subs	r3, r3, r7
    2fde:	9301      	str	r3, [sp, #4]
    2fe0:	2300      	movs	r3, #0
    2fe2:	0792      	lsls	r2, r2, #30
    2fe4:	d100      	bne.n	2fe8 <__sflush_r+0xe4>
    2fe6:	694b      	ldr	r3, [r1, #20]
    2fe8:	60a3      	str	r3, [r4, #8]
    2fea:	9b01      	ldr	r3, [sp, #4]
    2fec:	2b00      	cmp	r3, #0
    2fee:	dc00      	bgt.n	2ff2 <__sflush_r+0xee>
    2ff0:	e794      	b.n	2f1c <__sflush_r+0x18>
    2ff2:	9b01      	ldr	r3, [sp, #4]
    2ff4:	003a      	movs	r2, r7
    2ff6:	6a21      	ldr	r1, [r4, #32]
    2ff8:	0028      	movs	r0, r5
    2ffa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2ffc:	47b0      	blx	r6
    2ffe:	2800      	cmp	r0, #0
    3000:	dc03      	bgt.n	300a <__sflush_r+0x106>
    3002:	2340      	movs	r3, #64	; 0x40
    3004:	89a2      	ldrh	r2, [r4, #12]
    3006:	4313      	orrs	r3, r2
    3008:	e7df      	b.n	2fca <__sflush_r+0xc6>
    300a:	9b01      	ldr	r3, [sp, #4]
    300c:	183f      	adds	r7, r7, r0
    300e:	1a1b      	subs	r3, r3, r0
    3010:	9301      	str	r3, [sp, #4]
    3012:	e7ea      	b.n	2fea <__sflush_r+0xe6>
    3014:	20400001 	.word	0x20400001

00003018 <_fflush_r>:
    3018:	690b      	ldr	r3, [r1, #16]
    301a:	b570      	push	{r4, r5, r6, lr}
    301c:	0005      	movs	r5, r0
    301e:	000c      	movs	r4, r1
    3020:	2b00      	cmp	r3, #0
    3022:	d101      	bne.n	3028 <_fflush_r+0x10>
    3024:	2000      	movs	r0, #0
    3026:	bd70      	pop	{r4, r5, r6, pc}
    3028:	2800      	cmp	r0, #0
    302a:	d004      	beq.n	3036 <_fflush_r+0x1e>
    302c:	6983      	ldr	r3, [r0, #24]
    302e:	2b00      	cmp	r3, #0
    3030:	d101      	bne.n	3036 <_fflush_r+0x1e>
    3032:	f000 f873 	bl	311c <__sinit>
    3036:	4b0b      	ldr	r3, [pc, #44]	; (3064 <_fflush_r+0x4c>)
    3038:	429c      	cmp	r4, r3
    303a:	d109      	bne.n	3050 <_fflush_r+0x38>
    303c:	686c      	ldr	r4, [r5, #4]
    303e:	220c      	movs	r2, #12
    3040:	5ea3      	ldrsh	r3, [r4, r2]
    3042:	2b00      	cmp	r3, #0
    3044:	d0ee      	beq.n	3024 <_fflush_r+0xc>
    3046:	0021      	movs	r1, r4
    3048:	0028      	movs	r0, r5
    304a:	f7ff ff5b 	bl	2f04 <__sflush_r>
    304e:	e7ea      	b.n	3026 <_fflush_r+0xe>
    3050:	4b05      	ldr	r3, [pc, #20]	; (3068 <_fflush_r+0x50>)
    3052:	429c      	cmp	r4, r3
    3054:	d101      	bne.n	305a <_fflush_r+0x42>
    3056:	68ac      	ldr	r4, [r5, #8]
    3058:	e7f1      	b.n	303e <_fflush_r+0x26>
    305a:	4b04      	ldr	r3, [pc, #16]	; (306c <_fflush_r+0x54>)
    305c:	429c      	cmp	r4, r3
    305e:	d1ee      	bne.n	303e <_fflush_r+0x26>
    3060:	68ec      	ldr	r4, [r5, #12]
    3062:	e7ec      	b.n	303e <_fflush_r+0x26>
    3064:	00004a90 	.word	0x00004a90
    3068:	00004ab0 	.word	0x00004ab0
    306c:	00004a70 	.word	0x00004a70

00003070 <fflush>:
    3070:	b510      	push	{r4, lr}
    3072:	1e01      	subs	r1, r0, #0
    3074:	d105      	bne.n	3082 <fflush+0x12>
    3076:	4b05      	ldr	r3, [pc, #20]	; (308c <fflush+0x1c>)
    3078:	4905      	ldr	r1, [pc, #20]	; (3090 <fflush+0x20>)
    307a:	6818      	ldr	r0, [r3, #0]
    307c:	f000 f8de 	bl	323c <_fwalk_reent>
    3080:	bd10      	pop	{r4, pc}
    3082:	4b04      	ldr	r3, [pc, #16]	; (3094 <fflush+0x24>)
    3084:	6818      	ldr	r0, [r3, #0]
    3086:	f7ff ffc7 	bl	3018 <_fflush_r>
    308a:	e7f9      	b.n	3080 <fflush+0x10>
    308c:	00004a6c 	.word	0x00004a6c
    3090:	00003019 	.word	0x00003019
    3094:	20000008 	.word	0x20000008

00003098 <_cleanup_r>:
    3098:	b510      	push	{r4, lr}
    309a:	4902      	ldr	r1, [pc, #8]	; (30a4 <_cleanup_r+0xc>)
    309c:	f000 f8ce 	bl	323c <_fwalk_reent>
    30a0:	bd10      	pop	{r4, pc}
    30a2:	46c0      	nop			; (mov r8, r8)
    30a4:	00003019 	.word	0x00003019

000030a8 <std.isra.0>:
    30a8:	2300      	movs	r3, #0
    30aa:	b510      	push	{r4, lr}
    30ac:	0004      	movs	r4, r0
    30ae:	6003      	str	r3, [r0, #0]
    30b0:	6043      	str	r3, [r0, #4]
    30b2:	6083      	str	r3, [r0, #8]
    30b4:	8181      	strh	r1, [r0, #12]
    30b6:	6643      	str	r3, [r0, #100]	; 0x64
    30b8:	81c2      	strh	r2, [r0, #14]
    30ba:	6103      	str	r3, [r0, #16]
    30bc:	6143      	str	r3, [r0, #20]
    30be:	6183      	str	r3, [r0, #24]
    30c0:	0019      	movs	r1, r3
    30c2:	2208      	movs	r2, #8
    30c4:	305c      	adds	r0, #92	; 0x5c
    30c6:	f7ff fce1 	bl	2a8c <memset>
    30ca:	4b05      	ldr	r3, [pc, #20]	; (30e0 <std.isra.0+0x38>)
    30cc:	6224      	str	r4, [r4, #32]
    30ce:	6263      	str	r3, [r4, #36]	; 0x24
    30d0:	4b04      	ldr	r3, [pc, #16]	; (30e4 <std.isra.0+0x3c>)
    30d2:	62a3      	str	r3, [r4, #40]	; 0x28
    30d4:	4b04      	ldr	r3, [pc, #16]	; (30e8 <std.isra.0+0x40>)
    30d6:	62e3      	str	r3, [r4, #44]	; 0x2c
    30d8:	4b04      	ldr	r3, [pc, #16]	; (30ec <std.isra.0+0x44>)
    30da:	6323      	str	r3, [r4, #48]	; 0x30
    30dc:	bd10      	pop	{r4, pc}
    30de:	46c0      	nop			; (mov r8, r8)
    30e0:	000042a5 	.word	0x000042a5
    30e4:	000042cd 	.word	0x000042cd
    30e8:	00004305 	.word	0x00004305
    30ec:	00004331 	.word	0x00004331

000030f0 <__sfmoreglue>:
    30f0:	b570      	push	{r4, r5, r6, lr}
    30f2:	2568      	movs	r5, #104	; 0x68
    30f4:	1e4a      	subs	r2, r1, #1
    30f6:	4355      	muls	r5, r2
    30f8:	000e      	movs	r6, r1
    30fa:	0029      	movs	r1, r5
    30fc:	3174      	adds	r1, #116	; 0x74
    30fe:	f000 f97f 	bl	3400 <_malloc_r>
    3102:	1e04      	subs	r4, r0, #0
    3104:	d008      	beq.n	3118 <__sfmoreglue+0x28>
    3106:	2100      	movs	r1, #0
    3108:	002a      	movs	r2, r5
    310a:	6001      	str	r1, [r0, #0]
    310c:	6046      	str	r6, [r0, #4]
    310e:	300c      	adds	r0, #12
    3110:	60a0      	str	r0, [r4, #8]
    3112:	3268      	adds	r2, #104	; 0x68
    3114:	f7ff fcba 	bl	2a8c <memset>
    3118:	0020      	movs	r0, r4
    311a:	bd70      	pop	{r4, r5, r6, pc}

0000311c <__sinit>:
    311c:	6983      	ldr	r3, [r0, #24]
    311e:	b513      	push	{r0, r1, r4, lr}
    3120:	0004      	movs	r4, r0
    3122:	2b00      	cmp	r3, #0
    3124:	d128      	bne.n	3178 <__sinit+0x5c>
    3126:	6483      	str	r3, [r0, #72]	; 0x48
    3128:	64c3      	str	r3, [r0, #76]	; 0x4c
    312a:	6503      	str	r3, [r0, #80]	; 0x50
    312c:	4b13      	ldr	r3, [pc, #76]	; (317c <__sinit+0x60>)
    312e:	4a14      	ldr	r2, [pc, #80]	; (3180 <__sinit+0x64>)
    3130:	681b      	ldr	r3, [r3, #0]
    3132:	6282      	str	r2, [r0, #40]	; 0x28
    3134:	9301      	str	r3, [sp, #4]
    3136:	4298      	cmp	r0, r3
    3138:	d101      	bne.n	313e <__sinit+0x22>
    313a:	2301      	movs	r3, #1
    313c:	6183      	str	r3, [r0, #24]
    313e:	0020      	movs	r0, r4
    3140:	f000 f820 	bl	3184 <__sfp>
    3144:	6060      	str	r0, [r4, #4]
    3146:	0020      	movs	r0, r4
    3148:	f000 f81c 	bl	3184 <__sfp>
    314c:	60a0      	str	r0, [r4, #8]
    314e:	0020      	movs	r0, r4
    3150:	f000 f818 	bl	3184 <__sfp>
    3154:	2200      	movs	r2, #0
    3156:	60e0      	str	r0, [r4, #12]
    3158:	2104      	movs	r1, #4
    315a:	6860      	ldr	r0, [r4, #4]
    315c:	f7ff ffa4 	bl	30a8 <std.isra.0>
    3160:	2201      	movs	r2, #1
    3162:	2109      	movs	r1, #9
    3164:	68a0      	ldr	r0, [r4, #8]
    3166:	f7ff ff9f 	bl	30a8 <std.isra.0>
    316a:	2202      	movs	r2, #2
    316c:	2112      	movs	r1, #18
    316e:	68e0      	ldr	r0, [r4, #12]
    3170:	f7ff ff9a 	bl	30a8 <std.isra.0>
    3174:	2301      	movs	r3, #1
    3176:	61a3      	str	r3, [r4, #24]
    3178:	bd13      	pop	{r0, r1, r4, pc}
    317a:	46c0      	nop			; (mov r8, r8)
    317c:	00004a6c 	.word	0x00004a6c
    3180:	00003099 	.word	0x00003099

00003184 <__sfp>:
    3184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3186:	4b1e      	ldr	r3, [pc, #120]	; (3200 <__sfp+0x7c>)
    3188:	0007      	movs	r7, r0
    318a:	681e      	ldr	r6, [r3, #0]
    318c:	69b3      	ldr	r3, [r6, #24]
    318e:	2b00      	cmp	r3, #0
    3190:	d102      	bne.n	3198 <__sfp+0x14>
    3192:	0030      	movs	r0, r6
    3194:	f7ff ffc2 	bl	311c <__sinit>
    3198:	3648      	adds	r6, #72	; 0x48
    319a:	68b4      	ldr	r4, [r6, #8]
    319c:	6873      	ldr	r3, [r6, #4]
    319e:	3b01      	subs	r3, #1
    31a0:	d504      	bpl.n	31ac <__sfp+0x28>
    31a2:	6833      	ldr	r3, [r6, #0]
    31a4:	2b00      	cmp	r3, #0
    31a6:	d007      	beq.n	31b8 <__sfp+0x34>
    31a8:	6836      	ldr	r6, [r6, #0]
    31aa:	e7f6      	b.n	319a <__sfp+0x16>
    31ac:	220c      	movs	r2, #12
    31ae:	5ea5      	ldrsh	r5, [r4, r2]
    31b0:	2d00      	cmp	r5, #0
    31b2:	d00d      	beq.n	31d0 <__sfp+0x4c>
    31b4:	3468      	adds	r4, #104	; 0x68
    31b6:	e7f2      	b.n	319e <__sfp+0x1a>
    31b8:	2104      	movs	r1, #4
    31ba:	0038      	movs	r0, r7
    31bc:	f7ff ff98 	bl	30f0 <__sfmoreglue>
    31c0:	6030      	str	r0, [r6, #0]
    31c2:	2800      	cmp	r0, #0
    31c4:	d1f0      	bne.n	31a8 <__sfp+0x24>
    31c6:	230c      	movs	r3, #12
    31c8:	0004      	movs	r4, r0
    31ca:	603b      	str	r3, [r7, #0]
    31cc:	0020      	movs	r0, r4
    31ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    31d0:	2301      	movs	r3, #1
    31d2:	0020      	movs	r0, r4
    31d4:	425b      	negs	r3, r3
    31d6:	81e3      	strh	r3, [r4, #14]
    31d8:	3302      	adds	r3, #2
    31da:	81a3      	strh	r3, [r4, #12]
    31dc:	6665      	str	r5, [r4, #100]	; 0x64
    31de:	6025      	str	r5, [r4, #0]
    31e0:	60a5      	str	r5, [r4, #8]
    31e2:	6065      	str	r5, [r4, #4]
    31e4:	6125      	str	r5, [r4, #16]
    31e6:	6165      	str	r5, [r4, #20]
    31e8:	61a5      	str	r5, [r4, #24]
    31ea:	2208      	movs	r2, #8
    31ec:	0029      	movs	r1, r5
    31ee:	305c      	adds	r0, #92	; 0x5c
    31f0:	f7ff fc4c 	bl	2a8c <memset>
    31f4:	6365      	str	r5, [r4, #52]	; 0x34
    31f6:	63a5      	str	r5, [r4, #56]	; 0x38
    31f8:	64a5      	str	r5, [r4, #72]	; 0x48
    31fa:	64e5      	str	r5, [r4, #76]	; 0x4c
    31fc:	e7e6      	b.n	31cc <__sfp+0x48>
    31fe:	46c0      	nop			; (mov r8, r8)
    3200:	00004a6c 	.word	0x00004a6c

00003204 <_fwalk>:
    3204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3206:	3048      	adds	r0, #72	; 0x48
    3208:	0004      	movs	r4, r0
    320a:	2600      	movs	r6, #0
    320c:	9101      	str	r1, [sp, #4]
    320e:	2c00      	cmp	r4, #0
    3210:	d101      	bne.n	3216 <_fwalk+0x12>
    3212:	0030      	movs	r0, r6
    3214:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3216:	68a5      	ldr	r5, [r4, #8]
    3218:	6867      	ldr	r7, [r4, #4]
    321a:	3f01      	subs	r7, #1
    321c:	d501      	bpl.n	3222 <_fwalk+0x1e>
    321e:	6824      	ldr	r4, [r4, #0]
    3220:	e7f5      	b.n	320e <_fwalk+0xa>
    3222:	89ab      	ldrh	r3, [r5, #12]
    3224:	2b01      	cmp	r3, #1
    3226:	d907      	bls.n	3238 <_fwalk+0x34>
    3228:	220e      	movs	r2, #14
    322a:	5eab      	ldrsh	r3, [r5, r2]
    322c:	3301      	adds	r3, #1
    322e:	d003      	beq.n	3238 <_fwalk+0x34>
    3230:	0028      	movs	r0, r5
    3232:	9b01      	ldr	r3, [sp, #4]
    3234:	4798      	blx	r3
    3236:	4306      	orrs	r6, r0
    3238:	3568      	adds	r5, #104	; 0x68
    323a:	e7ee      	b.n	321a <_fwalk+0x16>

0000323c <_fwalk_reent>:
    323c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    323e:	0004      	movs	r4, r0
    3240:	0007      	movs	r7, r0
    3242:	2600      	movs	r6, #0
    3244:	9101      	str	r1, [sp, #4]
    3246:	3448      	adds	r4, #72	; 0x48
    3248:	2c00      	cmp	r4, #0
    324a:	d101      	bne.n	3250 <_fwalk_reent+0x14>
    324c:	0030      	movs	r0, r6
    324e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3250:	6863      	ldr	r3, [r4, #4]
    3252:	68a5      	ldr	r5, [r4, #8]
    3254:	9300      	str	r3, [sp, #0]
    3256:	9b00      	ldr	r3, [sp, #0]
    3258:	3b01      	subs	r3, #1
    325a:	9300      	str	r3, [sp, #0]
    325c:	d501      	bpl.n	3262 <_fwalk_reent+0x26>
    325e:	6824      	ldr	r4, [r4, #0]
    3260:	e7f2      	b.n	3248 <_fwalk_reent+0xc>
    3262:	89ab      	ldrh	r3, [r5, #12]
    3264:	2b01      	cmp	r3, #1
    3266:	d908      	bls.n	327a <_fwalk_reent+0x3e>
    3268:	220e      	movs	r2, #14
    326a:	5eab      	ldrsh	r3, [r5, r2]
    326c:	3301      	adds	r3, #1
    326e:	d004      	beq.n	327a <_fwalk_reent+0x3e>
    3270:	0029      	movs	r1, r5
    3272:	0038      	movs	r0, r7
    3274:	9b01      	ldr	r3, [sp, #4]
    3276:	4798      	blx	r3
    3278:	4306      	orrs	r6, r0
    327a:	3568      	adds	r5, #104	; 0x68
    327c:	e7eb      	b.n	3256 <_fwalk_reent+0x1a>
	...

00003280 <__swhatbuf_r>:
    3280:	b570      	push	{r4, r5, r6, lr}
    3282:	000e      	movs	r6, r1
    3284:	001d      	movs	r5, r3
    3286:	230e      	movs	r3, #14
    3288:	5ec9      	ldrsh	r1, [r1, r3]
    328a:	b090      	sub	sp, #64	; 0x40
    328c:	0014      	movs	r4, r2
    328e:	2900      	cmp	r1, #0
    3290:	da07      	bge.n	32a2 <__swhatbuf_r+0x22>
    3292:	2300      	movs	r3, #0
    3294:	602b      	str	r3, [r5, #0]
    3296:	89b3      	ldrh	r3, [r6, #12]
    3298:	061b      	lsls	r3, r3, #24
    329a:	d411      	bmi.n	32c0 <__swhatbuf_r+0x40>
    329c:	2380      	movs	r3, #128	; 0x80
    329e:	00db      	lsls	r3, r3, #3
    32a0:	e00f      	b.n	32c2 <__swhatbuf_r+0x42>
    32a2:	aa01      	add	r2, sp, #4
    32a4:	f001 fa4e 	bl	4744 <_fstat_r>
    32a8:	2800      	cmp	r0, #0
    32aa:	dbf2      	blt.n	3292 <__swhatbuf_r+0x12>
    32ac:	22f0      	movs	r2, #240	; 0xf0
    32ae:	9b02      	ldr	r3, [sp, #8]
    32b0:	0212      	lsls	r2, r2, #8
    32b2:	4013      	ands	r3, r2
    32b4:	4a05      	ldr	r2, [pc, #20]	; (32cc <__swhatbuf_r+0x4c>)
    32b6:	189b      	adds	r3, r3, r2
    32b8:	425a      	negs	r2, r3
    32ba:	4153      	adcs	r3, r2
    32bc:	602b      	str	r3, [r5, #0]
    32be:	e7ed      	b.n	329c <__swhatbuf_r+0x1c>
    32c0:	2340      	movs	r3, #64	; 0x40
    32c2:	2000      	movs	r0, #0
    32c4:	6023      	str	r3, [r4, #0]
    32c6:	b010      	add	sp, #64	; 0x40
    32c8:	bd70      	pop	{r4, r5, r6, pc}
    32ca:	46c0      	nop			; (mov r8, r8)
    32cc:	ffffe000 	.word	0xffffe000

000032d0 <__smakebuf_r>:
    32d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    32d2:	2602      	movs	r6, #2
    32d4:	898b      	ldrh	r3, [r1, #12]
    32d6:	0005      	movs	r5, r0
    32d8:	000c      	movs	r4, r1
    32da:	4233      	tst	r3, r6
    32dc:	d006      	beq.n	32ec <__smakebuf_r+0x1c>
    32de:	0023      	movs	r3, r4
    32e0:	3347      	adds	r3, #71	; 0x47
    32e2:	6023      	str	r3, [r4, #0]
    32e4:	6123      	str	r3, [r4, #16]
    32e6:	2301      	movs	r3, #1
    32e8:	6163      	str	r3, [r4, #20]
    32ea:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    32ec:	ab01      	add	r3, sp, #4
    32ee:	466a      	mov	r2, sp
    32f0:	f7ff ffc6 	bl	3280 <__swhatbuf_r>
    32f4:	9900      	ldr	r1, [sp, #0]
    32f6:	0007      	movs	r7, r0
    32f8:	0028      	movs	r0, r5
    32fa:	f000 f881 	bl	3400 <_malloc_r>
    32fe:	2800      	cmp	r0, #0
    3300:	d108      	bne.n	3314 <__smakebuf_r+0x44>
    3302:	220c      	movs	r2, #12
    3304:	5ea3      	ldrsh	r3, [r4, r2]
    3306:	059a      	lsls	r2, r3, #22
    3308:	d4ef      	bmi.n	32ea <__smakebuf_r+0x1a>
    330a:	2203      	movs	r2, #3
    330c:	4393      	bics	r3, r2
    330e:	431e      	orrs	r6, r3
    3310:	81a6      	strh	r6, [r4, #12]
    3312:	e7e4      	b.n	32de <__smakebuf_r+0xe>
    3314:	4b0f      	ldr	r3, [pc, #60]	; (3354 <__smakebuf_r+0x84>)
    3316:	62ab      	str	r3, [r5, #40]	; 0x28
    3318:	2380      	movs	r3, #128	; 0x80
    331a:	89a2      	ldrh	r2, [r4, #12]
    331c:	6020      	str	r0, [r4, #0]
    331e:	4313      	orrs	r3, r2
    3320:	81a3      	strh	r3, [r4, #12]
    3322:	9b00      	ldr	r3, [sp, #0]
    3324:	6120      	str	r0, [r4, #16]
    3326:	6163      	str	r3, [r4, #20]
    3328:	9b01      	ldr	r3, [sp, #4]
    332a:	2b00      	cmp	r3, #0
    332c:	d00d      	beq.n	334a <__smakebuf_r+0x7a>
    332e:	230e      	movs	r3, #14
    3330:	5ee1      	ldrsh	r1, [r4, r3]
    3332:	0028      	movs	r0, r5
    3334:	f001 fa18 	bl	4768 <_isatty_r>
    3338:	2800      	cmp	r0, #0
    333a:	d006      	beq.n	334a <__smakebuf_r+0x7a>
    333c:	2203      	movs	r2, #3
    333e:	89a3      	ldrh	r3, [r4, #12]
    3340:	4393      	bics	r3, r2
    3342:	001a      	movs	r2, r3
    3344:	2301      	movs	r3, #1
    3346:	4313      	orrs	r3, r2
    3348:	81a3      	strh	r3, [r4, #12]
    334a:	89a0      	ldrh	r0, [r4, #12]
    334c:	4338      	orrs	r0, r7
    334e:	81a0      	strh	r0, [r4, #12]
    3350:	e7cb      	b.n	32ea <__smakebuf_r+0x1a>
    3352:	46c0      	nop			; (mov r8, r8)
    3354:	00003099 	.word	0x00003099

00003358 <malloc>:
    3358:	b510      	push	{r4, lr}
    335a:	4b03      	ldr	r3, [pc, #12]	; (3368 <malloc+0x10>)
    335c:	0001      	movs	r1, r0
    335e:	6818      	ldr	r0, [r3, #0]
    3360:	f000 f84e 	bl	3400 <_malloc_r>
    3364:	bd10      	pop	{r4, pc}
    3366:	46c0      	nop			; (mov r8, r8)
    3368:	20000008 	.word	0x20000008

0000336c <_free_r>:
    336c:	b570      	push	{r4, r5, r6, lr}
    336e:	0005      	movs	r5, r0
    3370:	2900      	cmp	r1, #0
    3372:	d010      	beq.n	3396 <_free_r+0x2a>
    3374:	1f0c      	subs	r4, r1, #4
    3376:	6823      	ldr	r3, [r4, #0]
    3378:	2b00      	cmp	r3, #0
    337a:	da00      	bge.n	337e <_free_r+0x12>
    337c:	18e4      	adds	r4, r4, r3
    337e:	0028      	movs	r0, r5
    3380:	f001 fa47 	bl	4812 <__malloc_lock>
    3384:	4a1d      	ldr	r2, [pc, #116]	; (33fc <_free_r+0x90>)
    3386:	6813      	ldr	r3, [r2, #0]
    3388:	2b00      	cmp	r3, #0
    338a:	d105      	bne.n	3398 <_free_r+0x2c>
    338c:	6063      	str	r3, [r4, #4]
    338e:	6014      	str	r4, [r2, #0]
    3390:	0028      	movs	r0, r5
    3392:	f001 fa3f 	bl	4814 <__malloc_unlock>
    3396:	bd70      	pop	{r4, r5, r6, pc}
    3398:	42a3      	cmp	r3, r4
    339a:	d909      	bls.n	33b0 <_free_r+0x44>
    339c:	6821      	ldr	r1, [r4, #0]
    339e:	1860      	adds	r0, r4, r1
    33a0:	4283      	cmp	r3, r0
    33a2:	d1f3      	bne.n	338c <_free_r+0x20>
    33a4:	6818      	ldr	r0, [r3, #0]
    33a6:	685b      	ldr	r3, [r3, #4]
    33a8:	1841      	adds	r1, r0, r1
    33aa:	6021      	str	r1, [r4, #0]
    33ac:	e7ee      	b.n	338c <_free_r+0x20>
    33ae:	0013      	movs	r3, r2
    33b0:	685a      	ldr	r2, [r3, #4]
    33b2:	2a00      	cmp	r2, #0
    33b4:	d001      	beq.n	33ba <_free_r+0x4e>
    33b6:	42a2      	cmp	r2, r4
    33b8:	d9f9      	bls.n	33ae <_free_r+0x42>
    33ba:	6819      	ldr	r1, [r3, #0]
    33bc:	1858      	adds	r0, r3, r1
    33be:	42a0      	cmp	r0, r4
    33c0:	d10b      	bne.n	33da <_free_r+0x6e>
    33c2:	6820      	ldr	r0, [r4, #0]
    33c4:	1809      	adds	r1, r1, r0
    33c6:	1858      	adds	r0, r3, r1
    33c8:	6019      	str	r1, [r3, #0]
    33ca:	4282      	cmp	r2, r0
    33cc:	d1e0      	bne.n	3390 <_free_r+0x24>
    33ce:	6810      	ldr	r0, [r2, #0]
    33d0:	6852      	ldr	r2, [r2, #4]
    33d2:	1841      	adds	r1, r0, r1
    33d4:	6019      	str	r1, [r3, #0]
    33d6:	605a      	str	r2, [r3, #4]
    33d8:	e7da      	b.n	3390 <_free_r+0x24>
    33da:	42a0      	cmp	r0, r4
    33dc:	d902      	bls.n	33e4 <_free_r+0x78>
    33de:	230c      	movs	r3, #12
    33e0:	602b      	str	r3, [r5, #0]
    33e2:	e7d5      	b.n	3390 <_free_r+0x24>
    33e4:	6821      	ldr	r1, [r4, #0]
    33e6:	1860      	adds	r0, r4, r1
    33e8:	4282      	cmp	r2, r0
    33ea:	d103      	bne.n	33f4 <_free_r+0x88>
    33ec:	6810      	ldr	r0, [r2, #0]
    33ee:	6852      	ldr	r2, [r2, #4]
    33f0:	1841      	adds	r1, r0, r1
    33f2:	6021      	str	r1, [r4, #0]
    33f4:	6062      	str	r2, [r4, #4]
    33f6:	605c      	str	r4, [r3, #4]
    33f8:	e7ca      	b.n	3390 <_free_r+0x24>
    33fa:	46c0      	nop			; (mov r8, r8)
    33fc:	20000230 	.word	0x20000230

00003400 <_malloc_r>:
    3400:	2303      	movs	r3, #3
    3402:	b570      	push	{r4, r5, r6, lr}
    3404:	1ccd      	adds	r5, r1, #3
    3406:	439d      	bics	r5, r3
    3408:	3508      	adds	r5, #8
    340a:	0006      	movs	r6, r0
    340c:	2d0c      	cmp	r5, #12
    340e:	d21e      	bcs.n	344e <_malloc_r+0x4e>
    3410:	250c      	movs	r5, #12
    3412:	42a9      	cmp	r1, r5
    3414:	d81d      	bhi.n	3452 <_malloc_r+0x52>
    3416:	0030      	movs	r0, r6
    3418:	f001 f9fb 	bl	4812 <__malloc_lock>
    341c:	4a25      	ldr	r2, [pc, #148]	; (34b4 <_malloc_r+0xb4>)
    341e:	6814      	ldr	r4, [r2, #0]
    3420:	0021      	movs	r1, r4
    3422:	2900      	cmp	r1, #0
    3424:	d119      	bne.n	345a <_malloc_r+0x5a>
    3426:	4c24      	ldr	r4, [pc, #144]	; (34b8 <_malloc_r+0xb8>)
    3428:	6823      	ldr	r3, [r4, #0]
    342a:	2b00      	cmp	r3, #0
    342c:	d103      	bne.n	3436 <_malloc_r+0x36>
    342e:	0030      	movs	r0, r6
    3430:	f000 fef4 	bl	421c <_sbrk_r>
    3434:	6020      	str	r0, [r4, #0]
    3436:	0029      	movs	r1, r5
    3438:	0030      	movs	r0, r6
    343a:	f000 feef 	bl	421c <_sbrk_r>
    343e:	1c43      	adds	r3, r0, #1
    3440:	d12c      	bne.n	349c <_malloc_r+0x9c>
    3442:	230c      	movs	r3, #12
    3444:	0030      	movs	r0, r6
    3446:	6033      	str	r3, [r6, #0]
    3448:	f001 f9e4 	bl	4814 <__malloc_unlock>
    344c:	e003      	b.n	3456 <_malloc_r+0x56>
    344e:	2d00      	cmp	r5, #0
    3450:	dadf      	bge.n	3412 <_malloc_r+0x12>
    3452:	230c      	movs	r3, #12
    3454:	6033      	str	r3, [r6, #0]
    3456:	2000      	movs	r0, #0
    3458:	bd70      	pop	{r4, r5, r6, pc}
    345a:	680b      	ldr	r3, [r1, #0]
    345c:	1b5b      	subs	r3, r3, r5
    345e:	d41a      	bmi.n	3496 <_malloc_r+0x96>
    3460:	2b0b      	cmp	r3, #11
    3462:	d903      	bls.n	346c <_malloc_r+0x6c>
    3464:	600b      	str	r3, [r1, #0]
    3466:	18cc      	adds	r4, r1, r3
    3468:	6025      	str	r5, [r4, #0]
    346a:	e003      	b.n	3474 <_malloc_r+0x74>
    346c:	428c      	cmp	r4, r1
    346e:	d10e      	bne.n	348e <_malloc_r+0x8e>
    3470:	6863      	ldr	r3, [r4, #4]
    3472:	6013      	str	r3, [r2, #0]
    3474:	0030      	movs	r0, r6
    3476:	f001 f9cd 	bl	4814 <__malloc_unlock>
    347a:	0020      	movs	r0, r4
    347c:	2207      	movs	r2, #7
    347e:	300b      	adds	r0, #11
    3480:	1d23      	adds	r3, r4, #4
    3482:	4390      	bics	r0, r2
    3484:	1ac3      	subs	r3, r0, r3
    3486:	d0e7      	beq.n	3458 <_malloc_r+0x58>
    3488:	425a      	negs	r2, r3
    348a:	50e2      	str	r2, [r4, r3]
    348c:	e7e4      	b.n	3458 <_malloc_r+0x58>
    348e:	684b      	ldr	r3, [r1, #4]
    3490:	6063      	str	r3, [r4, #4]
    3492:	000c      	movs	r4, r1
    3494:	e7ee      	b.n	3474 <_malloc_r+0x74>
    3496:	000c      	movs	r4, r1
    3498:	6849      	ldr	r1, [r1, #4]
    349a:	e7c2      	b.n	3422 <_malloc_r+0x22>
    349c:	2303      	movs	r3, #3
    349e:	1cc4      	adds	r4, r0, #3
    34a0:	439c      	bics	r4, r3
    34a2:	42a0      	cmp	r0, r4
    34a4:	d0e0      	beq.n	3468 <_malloc_r+0x68>
    34a6:	1a21      	subs	r1, r4, r0
    34a8:	0030      	movs	r0, r6
    34aa:	f000 feb7 	bl	421c <_sbrk_r>
    34ae:	1c43      	adds	r3, r0, #1
    34b0:	d1da      	bne.n	3468 <_malloc_r+0x68>
    34b2:	e7c6      	b.n	3442 <_malloc_r+0x42>
    34b4:	20000230 	.word	0x20000230
    34b8:	20000234 	.word	0x20000234

000034bc <__sfputc_r>:
    34bc:	6893      	ldr	r3, [r2, #8]
    34be:	b510      	push	{r4, lr}
    34c0:	3b01      	subs	r3, #1
    34c2:	6093      	str	r3, [r2, #8]
    34c4:	2b00      	cmp	r3, #0
    34c6:	da05      	bge.n	34d4 <__sfputc_r+0x18>
    34c8:	6994      	ldr	r4, [r2, #24]
    34ca:	42a3      	cmp	r3, r4
    34cc:	db08      	blt.n	34e0 <__sfputc_r+0x24>
    34ce:	b2cb      	uxtb	r3, r1
    34d0:	2b0a      	cmp	r3, #10
    34d2:	d005      	beq.n	34e0 <__sfputc_r+0x24>
    34d4:	6813      	ldr	r3, [r2, #0]
    34d6:	1c58      	adds	r0, r3, #1
    34d8:	6010      	str	r0, [r2, #0]
    34da:	7019      	strb	r1, [r3, #0]
    34dc:	b2c8      	uxtb	r0, r1
    34de:	bd10      	pop	{r4, pc}
    34e0:	f7ff fc44 	bl	2d6c <__swbuf_r>
    34e4:	e7fb      	b.n	34de <__sfputc_r+0x22>

000034e6 <__sfputs_r>:
    34e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34e8:	0006      	movs	r6, r0
    34ea:	000f      	movs	r7, r1
    34ec:	0014      	movs	r4, r2
    34ee:	18d5      	adds	r5, r2, r3
    34f0:	42ac      	cmp	r4, r5
    34f2:	d101      	bne.n	34f8 <__sfputs_r+0x12>
    34f4:	2000      	movs	r0, #0
    34f6:	e007      	b.n	3508 <__sfputs_r+0x22>
    34f8:	7821      	ldrb	r1, [r4, #0]
    34fa:	003a      	movs	r2, r7
    34fc:	0030      	movs	r0, r6
    34fe:	f7ff ffdd 	bl	34bc <__sfputc_r>
    3502:	3401      	adds	r4, #1
    3504:	1c43      	adds	r3, r0, #1
    3506:	d1f3      	bne.n	34f0 <__sfputs_r+0xa>
    3508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000350c <_vfiprintf_r>:
    350c:	b5f0      	push	{r4, r5, r6, r7, lr}
    350e:	b09f      	sub	sp, #124	; 0x7c
    3510:	0006      	movs	r6, r0
    3512:	000f      	movs	r7, r1
    3514:	0014      	movs	r4, r2
    3516:	9305      	str	r3, [sp, #20]
    3518:	2800      	cmp	r0, #0
    351a:	d004      	beq.n	3526 <_vfiprintf_r+0x1a>
    351c:	6983      	ldr	r3, [r0, #24]
    351e:	2b00      	cmp	r3, #0
    3520:	d101      	bne.n	3526 <_vfiprintf_r+0x1a>
    3522:	f7ff fdfb 	bl	311c <__sinit>
    3526:	4b7f      	ldr	r3, [pc, #508]	; (3724 <_vfiprintf_r+0x218>)
    3528:	429f      	cmp	r7, r3
    352a:	d15c      	bne.n	35e6 <_vfiprintf_r+0xda>
    352c:	6877      	ldr	r7, [r6, #4]
    352e:	89bb      	ldrh	r3, [r7, #12]
    3530:	071b      	lsls	r3, r3, #28
    3532:	d562      	bpl.n	35fa <_vfiprintf_r+0xee>
    3534:	693b      	ldr	r3, [r7, #16]
    3536:	2b00      	cmp	r3, #0
    3538:	d05f      	beq.n	35fa <_vfiprintf_r+0xee>
    353a:	2300      	movs	r3, #0
    353c:	ad06      	add	r5, sp, #24
    353e:	616b      	str	r3, [r5, #20]
    3540:	3320      	adds	r3, #32
    3542:	766b      	strb	r3, [r5, #25]
    3544:	3310      	adds	r3, #16
    3546:	76ab      	strb	r3, [r5, #26]
    3548:	9402      	str	r4, [sp, #8]
    354a:	9c02      	ldr	r4, [sp, #8]
    354c:	7823      	ldrb	r3, [r4, #0]
    354e:	2b00      	cmp	r3, #0
    3550:	d15d      	bne.n	360e <_vfiprintf_r+0x102>
    3552:	9b02      	ldr	r3, [sp, #8]
    3554:	1ae3      	subs	r3, r4, r3
    3556:	9304      	str	r3, [sp, #16]
    3558:	d00d      	beq.n	3576 <_vfiprintf_r+0x6a>
    355a:	9b04      	ldr	r3, [sp, #16]
    355c:	9a02      	ldr	r2, [sp, #8]
    355e:	0039      	movs	r1, r7
    3560:	0030      	movs	r0, r6
    3562:	f7ff ffc0 	bl	34e6 <__sfputs_r>
    3566:	1c43      	adds	r3, r0, #1
    3568:	d100      	bne.n	356c <_vfiprintf_r+0x60>
    356a:	e0cc      	b.n	3706 <_vfiprintf_r+0x1fa>
    356c:	696a      	ldr	r2, [r5, #20]
    356e:	9b04      	ldr	r3, [sp, #16]
    3570:	4694      	mov	ip, r2
    3572:	4463      	add	r3, ip
    3574:	616b      	str	r3, [r5, #20]
    3576:	7823      	ldrb	r3, [r4, #0]
    3578:	2b00      	cmp	r3, #0
    357a:	d100      	bne.n	357e <_vfiprintf_r+0x72>
    357c:	e0c3      	b.n	3706 <_vfiprintf_r+0x1fa>
    357e:	2201      	movs	r2, #1
    3580:	2300      	movs	r3, #0
    3582:	4252      	negs	r2, r2
    3584:	606a      	str	r2, [r5, #4]
    3586:	a902      	add	r1, sp, #8
    3588:	3254      	adds	r2, #84	; 0x54
    358a:	1852      	adds	r2, r2, r1
    358c:	3401      	adds	r4, #1
    358e:	602b      	str	r3, [r5, #0]
    3590:	60eb      	str	r3, [r5, #12]
    3592:	60ab      	str	r3, [r5, #8]
    3594:	7013      	strb	r3, [r2, #0]
    3596:	65ab      	str	r3, [r5, #88]	; 0x58
    3598:	7821      	ldrb	r1, [r4, #0]
    359a:	2205      	movs	r2, #5
    359c:	4862      	ldr	r0, [pc, #392]	; (3728 <_vfiprintf_r+0x21c>)
    359e:	f001 f92d 	bl	47fc <memchr>
    35a2:	1c63      	adds	r3, r4, #1
    35a4:	469c      	mov	ip, r3
    35a6:	2800      	cmp	r0, #0
    35a8:	d135      	bne.n	3616 <_vfiprintf_r+0x10a>
    35aa:	6829      	ldr	r1, [r5, #0]
    35ac:	06cb      	lsls	r3, r1, #27
    35ae:	d504      	bpl.n	35ba <_vfiprintf_r+0xae>
    35b0:	2353      	movs	r3, #83	; 0x53
    35b2:	aa02      	add	r2, sp, #8
    35b4:	3020      	adds	r0, #32
    35b6:	189b      	adds	r3, r3, r2
    35b8:	7018      	strb	r0, [r3, #0]
    35ba:	070b      	lsls	r3, r1, #28
    35bc:	d504      	bpl.n	35c8 <_vfiprintf_r+0xbc>
    35be:	2353      	movs	r3, #83	; 0x53
    35c0:	202b      	movs	r0, #43	; 0x2b
    35c2:	aa02      	add	r2, sp, #8
    35c4:	189b      	adds	r3, r3, r2
    35c6:	7018      	strb	r0, [r3, #0]
    35c8:	7823      	ldrb	r3, [r4, #0]
    35ca:	2b2a      	cmp	r3, #42	; 0x2a
    35cc:	d02c      	beq.n	3628 <_vfiprintf_r+0x11c>
    35ce:	2000      	movs	r0, #0
    35d0:	210a      	movs	r1, #10
    35d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    35d4:	7822      	ldrb	r2, [r4, #0]
    35d6:	3a30      	subs	r2, #48	; 0x30
    35d8:	2a09      	cmp	r2, #9
    35da:	d800      	bhi.n	35de <_vfiprintf_r+0xd2>
    35dc:	e06b      	b.n	36b6 <_vfiprintf_r+0x1aa>
    35de:	2800      	cmp	r0, #0
    35e0:	d02a      	beq.n	3638 <_vfiprintf_r+0x12c>
    35e2:	9309      	str	r3, [sp, #36]	; 0x24
    35e4:	e028      	b.n	3638 <_vfiprintf_r+0x12c>
    35e6:	4b51      	ldr	r3, [pc, #324]	; (372c <_vfiprintf_r+0x220>)
    35e8:	429f      	cmp	r7, r3
    35ea:	d101      	bne.n	35f0 <_vfiprintf_r+0xe4>
    35ec:	68b7      	ldr	r7, [r6, #8]
    35ee:	e79e      	b.n	352e <_vfiprintf_r+0x22>
    35f0:	4b4f      	ldr	r3, [pc, #316]	; (3730 <_vfiprintf_r+0x224>)
    35f2:	429f      	cmp	r7, r3
    35f4:	d19b      	bne.n	352e <_vfiprintf_r+0x22>
    35f6:	68f7      	ldr	r7, [r6, #12]
    35f8:	e799      	b.n	352e <_vfiprintf_r+0x22>
    35fa:	0039      	movs	r1, r7
    35fc:	0030      	movs	r0, r6
    35fe:	f7ff fc0b 	bl	2e18 <__swsetup_r>
    3602:	2800      	cmp	r0, #0
    3604:	d099      	beq.n	353a <_vfiprintf_r+0x2e>
    3606:	2001      	movs	r0, #1
    3608:	4240      	negs	r0, r0
    360a:	b01f      	add	sp, #124	; 0x7c
    360c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    360e:	2b25      	cmp	r3, #37	; 0x25
    3610:	d09f      	beq.n	3552 <_vfiprintf_r+0x46>
    3612:	3401      	adds	r4, #1
    3614:	e79a      	b.n	354c <_vfiprintf_r+0x40>
    3616:	4b44      	ldr	r3, [pc, #272]	; (3728 <_vfiprintf_r+0x21c>)
    3618:	6829      	ldr	r1, [r5, #0]
    361a:	1ac0      	subs	r0, r0, r3
    361c:	2301      	movs	r3, #1
    361e:	4083      	lsls	r3, r0
    3620:	430b      	orrs	r3, r1
    3622:	602b      	str	r3, [r5, #0]
    3624:	4664      	mov	r4, ip
    3626:	e7b7      	b.n	3598 <_vfiprintf_r+0x8c>
    3628:	9b05      	ldr	r3, [sp, #20]
    362a:	1d18      	adds	r0, r3, #4
    362c:	681b      	ldr	r3, [r3, #0]
    362e:	9005      	str	r0, [sp, #20]
    3630:	2b00      	cmp	r3, #0
    3632:	db3a      	blt.n	36aa <_vfiprintf_r+0x19e>
    3634:	9309      	str	r3, [sp, #36]	; 0x24
    3636:	4664      	mov	r4, ip
    3638:	7823      	ldrb	r3, [r4, #0]
    363a:	2b2e      	cmp	r3, #46	; 0x2e
    363c:	d10b      	bne.n	3656 <_vfiprintf_r+0x14a>
    363e:	7863      	ldrb	r3, [r4, #1]
    3640:	1c62      	adds	r2, r4, #1
    3642:	2b2a      	cmp	r3, #42	; 0x2a
    3644:	d13f      	bne.n	36c6 <_vfiprintf_r+0x1ba>
    3646:	9b05      	ldr	r3, [sp, #20]
    3648:	3402      	adds	r4, #2
    364a:	1d1a      	adds	r2, r3, #4
    364c:	681b      	ldr	r3, [r3, #0]
    364e:	9205      	str	r2, [sp, #20]
    3650:	2b00      	cmp	r3, #0
    3652:	db35      	blt.n	36c0 <_vfiprintf_r+0x1b4>
    3654:	9307      	str	r3, [sp, #28]
    3656:	7821      	ldrb	r1, [r4, #0]
    3658:	2203      	movs	r2, #3
    365a:	4836      	ldr	r0, [pc, #216]	; (3734 <_vfiprintf_r+0x228>)
    365c:	f001 f8ce 	bl	47fc <memchr>
    3660:	2800      	cmp	r0, #0
    3662:	d007      	beq.n	3674 <_vfiprintf_r+0x168>
    3664:	4b33      	ldr	r3, [pc, #204]	; (3734 <_vfiprintf_r+0x228>)
    3666:	682a      	ldr	r2, [r5, #0]
    3668:	1ac0      	subs	r0, r0, r3
    366a:	2340      	movs	r3, #64	; 0x40
    366c:	4083      	lsls	r3, r0
    366e:	4313      	orrs	r3, r2
    3670:	602b      	str	r3, [r5, #0]
    3672:	3401      	adds	r4, #1
    3674:	7821      	ldrb	r1, [r4, #0]
    3676:	1c63      	adds	r3, r4, #1
    3678:	2206      	movs	r2, #6
    367a:	482f      	ldr	r0, [pc, #188]	; (3738 <_vfiprintf_r+0x22c>)
    367c:	9302      	str	r3, [sp, #8]
    367e:	7629      	strb	r1, [r5, #24]
    3680:	f001 f8bc 	bl	47fc <memchr>
    3684:	2800      	cmp	r0, #0
    3686:	d044      	beq.n	3712 <_vfiprintf_r+0x206>
    3688:	4b2c      	ldr	r3, [pc, #176]	; (373c <_vfiprintf_r+0x230>)
    368a:	2b00      	cmp	r3, #0
    368c:	d12f      	bne.n	36ee <_vfiprintf_r+0x1e2>
    368e:	6829      	ldr	r1, [r5, #0]
    3690:	9b05      	ldr	r3, [sp, #20]
    3692:	2207      	movs	r2, #7
    3694:	05c9      	lsls	r1, r1, #23
    3696:	d528      	bpl.n	36ea <_vfiprintf_r+0x1de>
    3698:	189b      	adds	r3, r3, r2
    369a:	4393      	bics	r3, r2
    369c:	3308      	adds	r3, #8
    369e:	9305      	str	r3, [sp, #20]
    36a0:	696b      	ldr	r3, [r5, #20]
    36a2:	9a03      	ldr	r2, [sp, #12]
    36a4:	189b      	adds	r3, r3, r2
    36a6:	616b      	str	r3, [r5, #20]
    36a8:	e74f      	b.n	354a <_vfiprintf_r+0x3e>
    36aa:	425b      	negs	r3, r3
    36ac:	60eb      	str	r3, [r5, #12]
    36ae:	2302      	movs	r3, #2
    36b0:	430b      	orrs	r3, r1
    36b2:	602b      	str	r3, [r5, #0]
    36b4:	e7bf      	b.n	3636 <_vfiprintf_r+0x12a>
    36b6:	434b      	muls	r3, r1
    36b8:	3401      	adds	r4, #1
    36ba:	189b      	adds	r3, r3, r2
    36bc:	2001      	movs	r0, #1
    36be:	e789      	b.n	35d4 <_vfiprintf_r+0xc8>
    36c0:	2301      	movs	r3, #1
    36c2:	425b      	negs	r3, r3
    36c4:	e7c6      	b.n	3654 <_vfiprintf_r+0x148>
    36c6:	2300      	movs	r3, #0
    36c8:	0014      	movs	r4, r2
    36ca:	200a      	movs	r0, #10
    36cc:	001a      	movs	r2, r3
    36ce:	606b      	str	r3, [r5, #4]
    36d0:	7821      	ldrb	r1, [r4, #0]
    36d2:	3930      	subs	r1, #48	; 0x30
    36d4:	2909      	cmp	r1, #9
    36d6:	d903      	bls.n	36e0 <_vfiprintf_r+0x1d4>
    36d8:	2b00      	cmp	r3, #0
    36da:	d0bc      	beq.n	3656 <_vfiprintf_r+0x14a>
    36dc:	9207      	str	r2, [sp, #28]
    36de:	e7ba      	b.n	3656 <_vfiprintf_r+0x14a>
    36e0:	4342      	muls	r2, r0
    36e2:	3401      	adds	r4, #1
    36e4:	1852      	adds	r2, r2, r1
    36e6:	2301      	movs	r3, #1
    36e8:	e7f2      	b.n	36d0 <_vfiprintf_r+0x1c4>
    36ea:	3307      	adds	r3, #7
    36ec:	e7d5      	b.n	369a <_vfiprintf_r+0x18e>
    36ee:	ab05      	add	r3, sp, #20
    36f0:	9300      	str	r3, [sp, #0]
    36f2:	003a      	movs	r2, r7
    36f4:	4b12      	ldr	r3, [pc, #72]	; (3740 <_vfiprintf_r+0x234>)
    36f6:	0029      	movs	r1, r5
    36f8:	0030      	movs	r0, r6
    36fa:	e000      	b.n	36fe <_vfiprintf_r+0x1f2>
    36fc:	bf00      	nop
    36fe:	9003      	str	r0, [sp, #12]
    3700:	9b03      	ldr	r3, [sp, #12]
    3702:	3301      	adds	r3, #1
    3704:	d1cc      	bne.n	36a0 <_vfiprintf_r+0x194>
    3706:	89bb      	ldrh	r3, [r7, #12]
    3708:	065b      	lsls	r3, r3, #25
    370a:	d500      	bpl.n	370e <_vfiprintf_r+0x202>
    370c:	e77b      	b.n	3606 <_vfiprintf_r+0xfa>
    370e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3710:	e77b      	b.n	360a <_vfiprintf_r+0xfe>
    3712:	ab05      	add	r3, sp, #20
    3714:	9300      	str	r3, [sp, #0]
    3716:	003a      	movs	r2, r7
    3718:	4b09      	ldr	r3, [pc, #36]	; (3740 <_vfiprintf_r+0x234>)
    371a:	0029      	movs	r1, r5
    371c:	0030      	movs	r0, r6
    371e:	f000 f87f 	bl	3820 <_printf_i>
    3722:	e7ec      	b.n	36fe <_vfiprintf_r+0x1f2>
    3724:	00004a90 	.word	0x00004a90
    3728:	00004ad0 	.word	0x00004ad0
    372c:	00004ab0 	.word	0x00004ab0
    3730:	00004a70 	.word	0x00004a70
    3734:	00004ad6 	.word	0x00004ad6
    3738:	00004ada 	.word	0x00004ada
    373c:	00000000 	.word	0x00000000
    3740:	000034e7 	.word	0x000034e7

00003744 <_printf_common>:
    3744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3746:	0015      	movs	r5, r2
    3748:	9301      	str	r3, [sp, #4]
    374a:	688a      	ldr	r2, [r1, #8]
    374c:	690b      	ldr	r3, [r1, #16]
    374e:	9000      	str	r0, [sp, #0]
    3750:	000c      	movs	r4, r1
    3752:	4293      	cmp	r3, r2
    3754:	da00      	bge.n	3758 <_printf_common+0x14>
    3756:	0013      	movs	r3, r2
    3758:	0022      	movs	r2, r4
    375a:	602b      	str	r3, [r5, #0]
    375c:	3243      	adds	r2, #67	; 0x43
    375e:	7812      	ldrb	r2, [r2, #0]
    3760:	2a00      	cmp	r2, #0
    3762:	d001      	beq.n	3768 <_printf_common+0x24>
    3764:	3301      	adds	r3, #1
    3766:	602b      	str	r3, [r5, #0]
    3768:	6823      	ldr	r3, [r4, #0]
    376a:	069b      	lsls	r3, r3, #26
    376c:	d502      	bpl.n	3774 <_printf_common+0x30>
    376e:	682b      	ldr	r3, [r5, #0]
    3770:	3302      	adds	r3, #2
    3772:	602b      	str	r3, [r5, #0]
    3774:	2706      	movs	r7, #6
    3776:	6823      	ldr	r3, [r4, #0]
    3778:	401f      	ands	r7, r3
    377a:	d027      	beq.n	37cc <_printf_common+0x88>
    377c:	0023      	movs	r3, r4
    377e:	3343      	adds	r3, #67	; 0x43
    3780:	781b      	ldrb	r3, [r3, #0]
    3782:	1e5a      	subs	r2, r3, #1
    3784:	4193      	sbcs	r3, r2
    3786:	6822      	ldr	r2, [r4, #0]
    3788:	0692      	lsls	r2, r2, #26
    378a:	d430      	bmi.n	37ee <_printf_common+0xaa>
    378c:	0022      	movs	r2, r4
    378e:	9901      	ldr	r1, [sp, #4]
    3790:	3243      	adds	r2, #67	; 0x43
    3792:	9800      	ldr	r0, [sp, #0]
    3794:	9e08      	ldr	r6, [sp, #32]
    3796:	47b0      	blx	r6
    3798:	1c43      	adds	r3, r0, #1
    379a:	d025      	beq.n	37e8 <_printf_common+0xa4>
    379c:	2306      	movs	r3, #6
    379e:	6820      	ldr	r0, [r4, #0]
    37a0:	682a      	ldr	r2, [r5, #0]
    37a2:	68e1      	ldr	r1, [r4, #12]
    37a4:	4003      	ands	r3, r0
    37a6:	2500      	movs	r5, #0
    37a8:	2b04      	cmp	r3, #4
    37aa:	d103      	bne.n	37b4 <_printf_common+0x70>
    37ac:	1a8d      	subs	r5, r1, r2
    37ae:	43eb      	mvns	r3, r5
    37b0:	17db      	asrs	r3, r3, #31
    37b2:	401d      	ands	r5, r3
    37b4:	68a3      	ldr	r3, [r4, #8]
    37b6:	6922      	ldr	r2, [r4, #16]
    37b8:	4293      	cmp	r3, r2
    37ba:	dd01      	ble.n	37c0 <_printf_common+0x7c>
    37bc:	1a9b      	subs	r3, r3, r2
    37be:	18ed      	adds	r5, r5, r3
    37c0:	2700      	movs	r7, #0
    37c2:	42bd      	cmp	r5, r7
    37c4:	d120      	bne.n	3808 <_printf_common+0xc4>
    37c6:	2000      	movs	r0, #0
    37c8:	e010      	b.n	37ec <_printf_common+0xa8>
    37ca:	3701      	adds	r7, #1
    37cc:	68e3      	ldr	r3, [r4, #12]
    37ce:	682a      	ldr	r2, [r5, #0]
    37d0:	1a9b      	subs	r3, r3, r2
    37d2:	429f      	cmp	r7, r3
    37d4:	dad2      	bge.n	377c <_printf_common+0x38>
    37d6:	0022      	movs	r2, r4
    37d8:	2301      	movs	r3, #1
    37da:	3219      	adds	r2, #25
    37dc:	9901      	ldr	r1, [sp, #4]
    37de:	9800      	ldr	r0, [sp, #0]
    37e0:	9e08      	ldr	r6, [sp, #32]
    37e2:	47b0      	blx	r6
    37e4:	1c43      	adds	r3, r0, #1
    37e6:	d1f0      	bne.n	37ca <_printf_common+0x86>
    37e8:	2001      	movs	r0, #1
    37ea:	4240      	negs	r0, r0
    37ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    37ee:	2030      	movs	r0, #48	; 0x30
    37f0:	18e1      	adds	r1, r4, r3
    37f2:	3143      	adds	r1, #67	; 0x43
    37f4:	7008      	strb	r0, [r1, #0]
    37f6:	0021      	movs	r1, r4
    37f8:	1c5a      	adds	r2, r3, #1
    37fa:	3145      	adds	r1, #69	; 0x45
    37fc:	7809      	ldrb	r1, [r1, #0]
    37fe:	18a2      	adds	r2, r4, r2
    3800:	3243      	adds	r2, #67	; 0x43
    3802:	3302      	adds	r3, #2
    3804:	7011      	strb	r1, [r2, #0]
    3806:	e7c1      	b.n	378c <_printf_common+0x48>
    3808:	0022      	movs	r2, r4
    380a:	2301      	movs	r3, #1
    380c:	321a      	adds	r2, #26
    380e:	9901      	ldr	r1, [sp, #4]
    3810:	9800      	ldr	r0, [sp, #0]
    3812:	9e08      	ldr	r6, [sp, #32]
    3814:	47b0      	blx	r6
    3816:	1c43      	adds	r3, r0, #1
    3818:	d0e6      	beq.n	37e8 <_printf_common+0xa4>
    381a:	3701      	adds	r7, #1
    381c:	e7d1      	b.n	37c2 <_printf_common+0x7e>
	...

00003820 <_printf_i>:
    3820:	b5f0      	push	{r4, r5, r6, r7, lr}
    3822:	b08b      	sub	sp, #44	; 0x2c
    3824:	9206      	str	r2, [sp, #24]
    3826:	000a      	movs	r2, r1
    3828:	3243      	adds	r2, #67	; 0x43
    382a:	9307      	str	r3, [sp, #28]
    382c:	9005      	str	r0, [sp, #20]
    382e:	9204      	str	r2, [sp, #16]
    3830:	7e0a      	ldrb	r2, [r1, #24]
    3832:	000c      	movs	r4, r1
    3834:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3836:	2a6e      	cmp	r2, #110	; 0x6e
    3838:	d100      	bne.n	383c <_printf_i+0x1c>
    383a:	e08f      	b.n	395c <_printf_i+0x13c>
    383c:	d817      	bhi.n	386e <_printf_i+0x4e>
    383e:	2a63      	cmp	r2, #99	; 0x63
    3840:	d02c      	beq.n	389c <_printf_i+0x7c>
    3842:	d808      	bhi.n	3856 <_printf_i+0x36>
    3844:	2a00      	cmp	r2, #0
    3846:	d100      	bne.n	384a <_printf_i+0x2a>
    3848:	e099      	b.n	397e <_printf_i+0x15e>
    384a:	2a58      	cmp	r2, #88	; 0x58
    384c:	d054      	beq.n	38f8 <_printf_i+0xd8>
    384e:	0026      	movs	r6, r4
    3850:	3642      	adds	r6, #66	; 0x42
    3852:	7032      	strb	r2, [r6, #0]
    3854:	e029      	b.n	38aa <_printf_i+0x8a>
    3856:	2a64      	cmp	r2, #100	; 0x64
    3858:	d001      	beq.n	385e <_printf_i+0x3e>
    385a:	2a69      	cmp	r2, #105	; 0x69
    385c:	d1f7      	bne.n	384e <_printf_i+0x2e>
    385e:	6821      	ldr	r1, [r4, #0]
    3860:	681a      	ldr	r2, [r3, #0]
    3862:	0608      	lsls	r0, r1, #24
    3864:	d523      	bpl.n	38ae <_printf_i+0x8e>
    3866:	1d11      	adds	r1, r2, #4
    3868:	6019      	str	r1, [r3, #0]
    386a:	6815      	ldr	r5, [r2, #0]
    386c:	e025      	b.n	38ba <_printf_i+0x9a>
    386e:	2a73      	cmp	r2, #115	; 0x73
    3870:	d100      	bne.n	3874 <_printf_i+0x54>
    3872:	e088      	b.n	3986 <_printf_i+0x166>
    3874:	d808      	bhi.n	3888 <_printf_i+0x68>
    3876:	2a6f      	cmp	r2, #111	; 0x6f
    3878:	d029      	beq.n	38ce <_printf_i+0xae>
    387a:	2a70      	cmp	r2, #112	; 0x70
    387c:	d1e7      	bne.n	384e <_printf_i+0x2e>
    387e:	2220      	movs	r2, #32
    3880:	6809      	ldr	r1, [r1, #0]
    3882:	430a      	orrs	r2, r1
    3884:	6022      	str	r2, [r4, #0]
    3886:	e003      	b.n	3890 <_printf_i+0x70>
    3888:	2a75      	cmp	r2, #117	; 0x75
    388a:	d020      	beq.n	38ce <_printf_i+0xae>
    388c:	2a78      	cmp	r2, #120	; 0x78
    388e:	d1de      	bne.n	384e <_printf_i+0x2e>
    3890:	0022      	movs	r2, r4
    3892:	2178      	movs	r1, #120	; 0x78
    3894:	3245      	adds	r2, #69	; 0x45
    3896:	7011      	strb	r1, [r2, #0]
    3898:	4a6c      	ldr	r2, [pc, #432]	; (3a4c <_printf_i+0x22c>)
    389a:	e030      	b.n	38fe <_printf_i+0xde>
    389c:	000e      	movs	r6, r1
    389e:	681a      	ldr	r2, [r3, #0]
    38a0:	3642      	adds	r6, #66	; 0x42
    38a2:	1d11      	adds	r1, r2, #4
    38a4:	6019      	str	r1, [r3, #0]
    38a6:	6813      	ldr	r3, [r2, #0]
    38a8:	7033      	strb	r3, [r6, #0]
    38aa:	2301      	movs	r3, #1
    38ac:	e079      	b.n	39a2 <_printf_i+0x182>
    38ae:	0649      	lsls	r1, r1, #25
    38b0:	d5d9      	bpl.n	3866 <_printf_i+0x46>
    38b2:	1d11      	adds	r1, r2, #4
    38b4:	6019      	str	r1, [r3, #0]
    38b6:	2300      	movs	r3, #0
    38b8:	5ed5      	ldrsh	r5, [r2, r3]
    38ba:	2d00      	cmp	r5, #0
    38bc:	da03      	bge.n	38c6 <_printf_i+0xa6>
    38be:	232d      	movs	r3, #45	; 0x2d
    38c0:	9a04      	ldr	r2, [sp, #16]
    38c2:	426d      	negs	r5, r5
    38c4:	7013      	strb	r3, [r2, #0]
    38c6:	4b62      	ldr	r3, [pc, #392]	; (3a50 <_printf_i+0x230>)
    38c8:	270a      	movs	r7, #10
    38ca:	9303      	str	r3, [sp, #12]
    38cc:	e02f      	b.n	392e <_printf_i+0x10e>
    38ce:	6820      	ldr	r0, [r4, #0]
    38d0:	6819      	ldr	r1, [r3, #0]
    38d2:	0605      	lsls	r5, r0, #24
    38d4:	d503      	bpl.n	38de <_printf_i+0xbe>
    38d6:	1d08      	adds	r0, r1, #4
    38d8:	6018      	str	r0, [r3, #0]
    38da:	680d      	ldr	r5, [r1, #0]
    38dc:	e005      	b.n	38ea <_printf_i+0xca>
    38de:	0640      	lsls	r0, r0, #25
    38e0:	d5f9      	bpl.n	38d6 <_printf_i+0xb6>
    38e2:	680d      	ldr	r5, [r1, #0]
    38e4:	1d08      	adds	r0, r1, #4
    38e6:	6018      	str	r0, [r3, #0]
    38e8:	b2ad      	uxth	r5, r5
    38ea:	4b59      	ldr	r3, [pc, #356]	; (3a50 <_printf_i+0x230>)
    38ec:	2708      	movs	r7, #8
    38ee:	9303      	str	r3, [sp, #12]
    38f0:	2a6f      	cmp	r2, #111	; 0x6f
    38f2:	d018      	beq.n	3926 <_printf_i+0x106>
    38f4:	270a      	movs	r7, #10
    38f6:	e016      	b.n	3926 <_printf_i+0x106>
    38f8:	3145      	adds	r1, #69	; 0x45
    38fa:	700a      	strb	r2, [r1, #0]
    38fc:	4a54      	ldr	r2, [pc, #336]	; (3a50 <_printf_i+0x230>)
    38fe:	9203      	str	r2, [sp, #12]
    3900:	681a      	ldr	r2, [r3, #0]
    3902:	6821      	ldr	r1, [r4, #0]
    3904:	1d10      	adds	r0, r2, #4
    3906:	6018      	str	r0, [r3, #0]
    3908:	6815      	ldr	r5, [r2, #0]
    390a:	0608      	lsls	r0, r1, #24
    390c:	d522      	bpl.n	3954 <_printf_i+0x134>
    390e:	07cb      	lsls	r3, r1, #31
    3910:	d502      	bpl.n	3918 <_printf_i+0xf8>
    3912:	2320      	movs	r3, #32
    3914:	4319      	orrs	r1, r3
    3916:	6021      	str	r1, [r4, #0]
    3918:	2710      	movs	r7, #16
    391a:	2d00      	cmp	r5, #0
    391c:	d103      	bne.n	3926 <_printf_i+0x106>
    391e:	2320      	movs	r3, #32
    3920:	6822      	ldr	r2, [r4, #0]
    3922:	439a      	bics	r2, r3
    3924:	6022      	str	r2, [r4, #0]
    3926:	0023      	movs	r3, r4
    3928:	2200      	movs	r2, #0
    392a:	3343      	adds	r3, #67	; 0x43
    392c:	701a      	strb	r2, [r3, #0]
    392e:	6863      	ldr	r3, [r4, #4]
    3930:	60a3      	str	r3, [r4, #8]
    3932:	2b00      	cmp	r3, #0
    3934:	db5c      	blt.n	39f0 <_printf_i+0x1d0>
    3936:	2204      	movs	r2, #4
    3938:	6821      	ldr	r1, [r4, #0]
    393a:	4391      	bics	r1, r2
    393c:	6021      	str	r1, [r4, #0]
    393e:	2d00      	cmp	r5, #0
    3940:	d158      	bne.n	39f4 <_printf_i+0x1d4>
    3942:	9e04      	ldr	r6, [sp, #16]
    3944:	2b00      	cmp	r3, #0
    3946:	d064      	beq.n	3a12 <_printf_i+0x1f2>
    3948:	0026      	movs	r6, r4
    394a:	9b03      	ldr	r3, [sp, #12]
    394c:	3642      	adds	r6, #66	; 0x42
    394e:	781b      	ldrb	r3, [r3, #0]
    3950:	7033      	strb	r3, [r6, #0]
    3952:	e05e      	b.n	3a12 <_printf_i+0x1f2>
    3954:	0648      	lsls	r0, r1, #25
    3956:	d5da      	bpl.n	390e <_printf_i+0xee>
    3958:	b2ad      	uxth	r5, r5
    395a:	e7d8      	b.n	390e <_printf_i+0xee>
    395c:	6809      	ldr	r1, [r1, #0]
    395e:	681a      	ldr	r2, [r3, #0]
    3960:	0608      	lsls	r0, r1, #24
    3962:	d505      	bpl.n	3970 <_printf_i+0x150>
    3964:	1d11      	adds	r1, r2, #4
    3966:	6019      	str	r1, [r3, #0]
    3968:	6813      	ldr	r3, [r2, #0]
    396a:	6962      	ldr	r2, [r4, #20]
    396c:	601a      	str	r2, [r3, #0]
    396e:	e006      	b.n	397e <_printf_i+0x15e>
    3970:	0649      	lsls	r1, r1, #25
    3972:	d5f7      	bpl.n	3964 <_printf_i+0x144>
    3974:	1d11      	adds	r1, r2, #4
    3976:	6019      	str	r1, [r3, #0]
    3978:	6813      	ldr	r3, [r2, #0]
    397a:	8aa2      	ldrh	r2, [r4, #20]
    397c:	801a      	strh	r2, [r3, #0]
    397e:	2300      	movs	r3, #0
    3980:	9e04      	ldr	r6, [sp, #16]
    3982:	6123      	str	r3, [r4, #16]
    3984:	e054      	b.n	3a30 <_printf_i+0x210>
    3986:	681a      	ldr	r2, [r3, #0]
    3988:	1d11      	adds	r1, r2, #4
    398a:	6019      	str	r1, [r3, #0]
    398c:	6816      	ldr	r6, [r2, #0]
    398e:	2100      	movs	r1, #0
    3990:	6862      	ldr	r2, [r4, #4]
    3992:	0030      	movs	r0, r6
    3994:	f000 ff32 	bl	47fc <memchr>
    3998:	2800      	cmp	r0, #0
    399a:	d001      	beq.n	39a0 <_printf_i+0x180>
    399c:	1b80      	subs	r0, r0, r6
    399e:	6060      	str	r0, [r4, #4]
    39a0:	6863      	ldr	r3, [r4, #4]
    39a2:	6123      	str	r3, [r4, #16]
    39a4:	2300      	movs	r3, #0
    39a6:	9a04      	ldr	r2, [sp, #16]
    39a8:	7013      	strb	r3, [r2, #0]
    39aa:	e041      	b.n	3a30 <_printf_i+0x210>
    39ac:	6923      	ldr	r3, [r4, #16]
    39ae:	0032      	movs	r2, r6
    39b0:	9906      	ldr	r1, [sp, #24]
    39b2:	9805      	ldr	r0, [sp, #20]
    39b4:	9d07      	ldr	r5, [sp, #28]
    39b6:	47a8      	blx	r5
    39b8:	1c43      	adds	r3, r0, #1
    39ba:	d043      	beq.n	3a44 <_printf_i+0x224>
    39bc:	6823      	ldr	r3, [r4, #0]
    39be:	2500      	movs	r5, #0
    39c0:	079b      	lsls	r3, r3, #30
    39c2:	d40f      	bmi.n	39e4 <_printf_i+0x1c4>
    39c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    39c6:	68e0      	ldr	r0, [r4, #12]
    39c8:	4298      	cmp	r0, r3
    39ca:	da3d      	bge.n	3a48 <_printf_i+0x228>
    39cc:	0018      	movs	r0, r3
    39ce:	e03b      	b.n	3a48 <_printf_i+0x228>
    39d0:	0022      	movs	r2, r4
    39d2:	2301      	movs	r3, #1
    39d4:	3219      	adds	r2, #25
    39d6:	9906      	ldr	r1, [sp, #24]
    39d8:	9805      	ldr	r0, [sp, #20]
    39da:	9e07      	ldr	r6, [sp, #28]
    39dc:	47b0      	blx	r6
    39de:	1c43      	adds	r3, r0, #1
    39e0:	d030      	beq.n	3a44 <_printf_i+0x224>
    39e2:	3501      	adds	r5, #1
    39e4:	68e3      	ldr	r3, [r4, #12]
    39e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    39e8:	1a9b      	subs	r3, r3, r2
    39ea:	429d      	cmp	r5, r3
    39ec:	dbf0      	blt.n	39d0 <_printf_i+0x1b0>
    39ee:	e7e9      	b.n	39c4 <_printf_i+0x1a4>
    39f0:	2d00      	cmp	r5, #0
    39f2:	d0a9      	beq.n	3948 <_printf_i+0x128>
    39f4:	9e04      	ldr	r6, [sp, #16]
    39f6:	0028      	movs	r0, r5
    39f8:	0039      	movs	r1, r7
    39fa:	f7fe ffdb 	bl	29b4 <__aeabi_uidivmod>
    39fe:	9b03      	ldr	r3, [sp, #12]
    3a00:	3e01      	subs	r6, #1
    3a02:	5c5b      	ldrb	r3, [r3, r1]
    3a04:	0028      	movs	r0, r5
    3a06:	7033      	strb	r3, [r6, #0]
    3a08:	0039      	movs	r1, r7
    3a0a:	f7fe ff4d 	bl	28a8 <__udivsi3>
    3a0e:	1e05      	subs	r5, r0, #0
    3a10:	d1f1      	bne.n	39f6 <_printf_i+0x1d6>
    3a12:	2f08      	cmp	r7, #8
    3a14:	d109      	bne.n	3a2a <_printf_i+0x20a>
    3a16:	6823      	ldr	r3, [r4, #0]
    3a18:	07db      	lsls	r3, r3, #31
    3a1a:	d506      	bpl.n	3a2a <_printf_i+0x20a>
    3a1c:	6863      	ldr	r3, [r4, #4]
    3a1e:	6922      	ldr	r2, [r4, #16]
    3a20:	4293      	cmp	r3, r2
    3a22:	dc02      	bgt.n	3a2a <_printf_i+0x20a>
    3a24:	2330      	movs	r3, #48	; 0x30
    3a26:	3e01      	subs	r6, #1
    3a28:	7033      	strb	r3, [r6, #0]
    3a2a:	9b04      	ldr	r3, [sp, #16]
    3a2c:	1b9b      	subs	r3, r3, r6
    3a2e:	6123      	str	r3, [r4, #16]
    3a30:	9b07      	ldr	r3, [sp, #28]
    3a32:	aa09      	add	r2, sp, #36	; 0x24
    3a34:	9300      	str	r3, [sp, #0]
    3a36:	0021      	movs	r1, r4
    3a38:	9b06      	ldr	r3, [sp, #24]
    3a3a:	9805      	ldr	r0, [sp, #20]
    3a3c:	f7ff fe82 	bl	3744 <_printf_common>
    3a40:	1c43      	adds	r3, r0, #1
    3a42:	d1b3      	bne.n	39ac <_printf_i+0x18c>
    3a44:	2001      	movs	r0, #1
    3a46:	4240      	negs	r0, r0
    3a48:	b00b      	add	sp, #44	; 0x2c
    3a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a4c:	00004af2 	.word	0x00004af2
    3a50:	00004ae1 	.word	0x00004ae1

00003a54 <__svfiscanf_r>:
    3a54:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a56:	4cbd      	ldr	r4, [pc, #756]	; (3d4c <__svfiscanf_r+0x2f8>)
    3a58:	2586      	movs	r5, #134	; 0x86
    3a5a:	44a5      	add	sp, r4
    3a5c:	9303      	str	r3, [sp, #12]
    3a5e:	2300      	movs	r3, #0
    3a60:	9348      	str	r3, [sp, #288]	; 0x120
    3a62:	9349      	str	r3, [sp, #292]	; 0x124
    3a64:	ab05      	add	r3, sp, #20
    3a66:	934a      	str	r3, [sp, #296]	; 0x128
    3a68:	23be      	movs	r3, #190	; 0xbe
    3a6a:	006d      	lsls	r5, r5, #1
    3a6c:	9000      	str	r0, [sp, #0]
    3a6e:	000c      	movs	r4, r1
    3a70:	a802      	add	r0, sp, #8
    3a72:	49b7      	ldr	r1, [pc, #732]	; (3d50 <__svfiscanf_r+0x2fc>)
    3a74:	005b      	lsls	r3, r3, #1
    3a76:	1940      	adds	r0, r0, r5
    3a78:	27c0      	movs	r7, #192	; 0xc0
    3a7a:	50c1      	str	r1, [r0, r3]
    3a7c:	ab02      	add	r3, sp, #8
    3a7e:	195b      	adds	r3, r3, r5
    3a80:	0015      	movs	r5, r2
    3a82:	49b4      	ldr	r1, [pc, #720]	; (3d54 <__svfiscanf_r+0x300>)
    3a84:	007f      	lsls	r7, r7, #1
    3a86:	51d9      	str	r1, [r3, r7]
    3a88:	782b      	ldrb	r3, [r5, #0]
    3a8a:	2b00      	cmp	r3, #0
    3a8c:	d100      	bne.n	3a90 <__svfiscanf_r+0x3c>
    3a8e:	e15b      	b.n	3d48 <__svfiscanf_r+0x2f4>
    3a90:	f000 fe80 	bl	4794 <__locale_ctype_ptr>
    3a94:	2208      	movs	r2, #8
    3a96:	782b      	ldrb	r3, [r5, #0]
    3a98:	18c0      	adds	r0, r0, r3
    3a9a:	9301      	str	r3, [sp, #4]
    3a9c:	7843      	ldrb	r3, [r0, #1]
    3a9e:	4013      	ands	r3, r2
    3aa0:	d141      	bne.n	3b26 <__svfiscanf_r+0xd2>
    3aa2:	9a01      	ldr	r2, [sp, #4]
    3aa4:	1c6e      	adds	r6, r5, #1
    3aa6:	2a25      	cmp	r2, #37	; 0x25
    3aa8:	d000      	beq.n	3aac <__svfiscanf_r+0x58>
    3aaa:	e0a8      	b.n	3bfe <__svfiscanf_r+0x1aa>
    3aac:	9347      	str	r3, [sp, #284]	; 0x11c
    3aae:	9345      	str	r3, [sp, #276]	; 0x114
    3ab0:	786b      	ldrb	r3, [r5, #1]
    3ab2:	2b2a      	cmp	r3, #42	; 0x2a
    3ab4:	d102      	bne.n	3abc <__svfiscanf_r+0x68>
    3ab6:	3b1a      	subs	r3, #26
    3ab8:	9345      	str	r3, [sp, #276]	; 0x114
    3aba:	1cae      	adds	r6, r5, #2
    3abc:	0035      	movs	r5, r6
    3abe:	220a      	movs	r2, #10
    3ac0:	7829      	ldrb	r1, [r5, #0]
    3ac2:	000b      	movs	r3, r1
    3ac4:	3b30      	subs	r3, #48	; 0x30
    3ac6:	2b09      	cmp	r3, #9
    3ac8:	d948      	bls.n	3b5c <__svfiscanf_r+0x108>
    3aca:	4ea3      	ldr	r6, [pc, #652]	; (3d58 <__svfiscanf_r+0x304>)
    3acc:	2203      	movs	r2, #3
    3ace:	0030      	movs	r0, r6
    3ad0:	f000 fe94 	bl	47fc <memchr>
    3ad4:	2800      	cmp	r0, #0
    3ad6:	d007      	beq.n	3ae8 <__svfiscanf_r+0x94>
    3ad8:	2301      	movs	r3, #1
    3ada:	1b80      	subs	r0, r0, r6
    3adc:	4083      	lsls	r3, r0
    3ade:	9a45      	ldr	r2, [sp, #276]	; 0x114
    3ae0:	3501      	adds	r5, #1
    3ae2:	4313      	orrs	r3, r2
    3ae4:	9202      	str	r2, [sp, #8]
    3ae6:	9345      	str	r3, [sp, #276]	; 0x114
    3ae8:	782b      	ldrb	r3, [r5, #0]
    3aea:	1c6e      	adds	r6, r5, #1
    3aec:	2b67      	cmp	r3, #103	; 0x67
    3aee:	d858      	bhi.n	3ba2 <__svfiscanf_r+0x14e>
    3af0:	2b65      	cmp	r3, #101	; 0x65
    3af2:	d300      	bcc.n	3af6 <__svfiscanf_r+0xa2>
    3af4:	e0dd      	b.n	3cb2 <__svfiscanf_r+0x25e>
    3af6:	2b47      	cmp	r3, #71	; 0x47
    3af8:	d838      	bhi.n	3b6c <__svfiscanf_r+0x118>
    3afa:	2b45      	cmp	r3, #69	; 0x45
    3afc:	d300      	bcc.n	3b00 <__svfiscanf_r+0xac>
    3afe:	e0d8      	b.n	3cb2 <__svfiscanf_r+0x25e>
    3b00:	2b00      	cmp	r3, #0
    3b02:	d100      	bne.n	3b06 <__svfiscanf_r+0xb2>
    3b04:	e11d      	b.n	3d42 <__svfiscanf_r+0x2ee>
    3b06:	2b25      	cmp	r3, #37	; 0x25
    3b08:	d079      	beq.n	3bfe <__svfiscanf_r+0x1aa>
    3b0a:	2303      	movs	r3, #3
    3b0c:	934b      	str	r3, [sp, #300]	; 0x12c
    3b0e:	3307      	adds	r3, #7
    3b10:	9346      	str	r3, [sp, #280]	; 0x118
    3b12:	e053      	b.n	3bbc <__svfiscanf_r+0x168>
    3b14:	9a49      	ldr	r2, [sp, #292]	; 0x124
    3b16:	3301      	adds	r3, #1
    3b18:	9201      	str	r2, [sp, #4]
    3b1a:	3201      	adds	r2, #1
    3b1c:	9249      	str	r2, [sp, #292]	; 0x124
    3b1e:	6862      	ldr	r2, [r4, #4]
    3b20:	6023      	str	r3, [r4, #0]
    3b22:	3a01      	subs	r2, #1
    3b24:	6062      	str	r2, [r4, #4]
    3b26:	6863      	ldr	r3, [r4, #4]
    3b28:	2b00      	cmp	r3, #0
    3b2a:	dd0b      	ble.n	3b44 <__svfiscanf_r+0xf0>
    3b2c:	f000 fe32 	bl	4794 <__locale_ctype_ptr>
    3b30:	2108      	movs	r1, #8
    3b32:	6823      	ldr	r3, [r4, #0]
    3b34:	781a      	ldrb	r2, [r3, #0]
    3b36:	1880      	adds	r0, r0, r2
    3b38:	7842      	ldrb	r2, [r0, #1]
    3b3a:	420a      	tst	r2, r1
    3b3c:	d1ea      	bne.n	3b14 <__svfiscanf_r+0xc0>
    3b3e:	1c6e      	adds	r6, r5, #1
    3b40:	0035      	movs	r5, r6
    3b42:	e7a1      	b.n	3a88 <__svfiscanf_r+0x34>
    3b44:	2286      	movs	r2, #134	; 0x86
    3b46:	ab02      	add	r3, sp, #8
    3b48:	0052      	lsls	r2, r2, #1
    3b4a:	189b      	adds	r3, r3, r2
    3b4c:	59db      	ldr	r3, [r3, r7]
    3b4e:	0021      	movs	r1, r4
    3b50:	9800      	ldr	r0, [sp, #0]
    3b52:	9301      	str	r3, [sp, #4]
    3b54:	4798      	blx	r3
    3b56:	2800      	cmp	r0, #0
    3b58:	d0e8      	beq.n	3b2c <__svfiscanf_r+0xd8>
    3b5a:	e7f0      	b.n	3b3e <__svfiscanf_r+0xea>
    3b5c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    3b5e:	3501      	adds	r5, #1
    3b60:	9302      	str	r3, [sp, #8]
    3b62:	4353      	muls	r3, r2
    3b64:	3b30      	subs	r3, #48	; 0x30
    3b66:	1859      	adds	r1, r3, r1
    3b68:	9147      	str	r1, [sp, #284]	; 0x11c
    3b6a:	e7a9      	b.n	3ac0 <__svfiscanf_r+0x6c>
    3b6c:	2b5b      	cmp	r3, #91	; 0x5b
    3b6e:	d100      	bne.n	3b72 <__svfiscanf_r+0x11e>
    3b70:	e077      	b.n	3c62 <__svfiscanf_r+0x20e>
    3b72:	d80f      	bhi.n	3b94 <__svfiscanf_r+0x140>
    3b74:	2b58      	cmp	r3, #88	; 0x58
    3b76:	d1c8      	bne.n	3b0a <__svfiscanf_r+0xb6>
    3b78:	9a45      	ldr	r2, [sp, #276]	; 0x114
    3b7a:	9201      	str	r2, [sp, #4]
    3b7c:	2280      	movs	r2, #128	; 0x80
    3b7e:	9901      	ldr	r1, [sp, #4]
    3b80:	0092      	lsls	r2, r2, #2
    3b82:	430a      	orrs	r2, r1
    3b84:	9245      	str	r2, [sp, #276]	; 0x114
    3b86:	2210      	movs	r2, #16
    3b88:	9246      	str	r2, [sp, #280]	; 0x118
    3b8a:	2203      	movs	r2, #3
    3b8c:	2b6e      	cmp	r3, #110	; 0x6e
    3b8e:	dd14      	ble.n	3bba <__svfiscanf_r+0x166>
    3b90:	3201      	adds	r2, #1
    3b92:	e012      	b.n	3bba <__svfiscanf_r+0x166>
    3b94:	2b63      	cmp	r3, #99	; 0x63
    3b96:	d100      	bne.n	3b9a <__svfiscanf_r+0x146>
    3b98:	e071      	b.n	3c7e <__svfiscanf_r+0x22a>
    3b9a:	2b64      	cmp	r3, #100	; 0x64
    3b9c:	d1b5      	bne.n	3b0a <__svfiscanf_r+0xb6>
    3b9e:	220a      	movs	r2, #10
    3ba0:	e7f2      	b.n	3b88 <__svfiscanf_r+0x134>
    3ba2:	2b70      	cmp	r3, #112	; 0x70
    3ba4:	d052      	beq.n	3c4c <__svfiscanf_r+0x1f8>
    3ba6:	d822      	bhi.n	3bee <__svfiscanf_r+0x19a>
    3ba8:	2b6e      	cmp	r3, #110	; 0x6e
    3baa:	d100      	bne.n	3bae <__svfiscanf_r+0x15a>
    3bac:	e06f      	b.n	3c8e <__svfiscanf_r+0x23a>
    3bae:	d854      	bhi.n	3c5a <__svfiscanf_r+0x206>
    3bb0:	2b69      	cmp	r3, #105	; 0x69
    3bb2:	d1aa      	bne.n	3b0a <__svfiscanf_r+0xb6>
    3bb4:	2300      	movs	r3, #0
    3bb6:	2203      	movs	r2, #3
    3bb8:	9346      	str	r3, [sp, #280]	; 0x118
    3bba:	924b      	str	r2, [sp, #300]	; 0x12c
    3bbc:	6863      	ldr	r3, [r4, #4]
    3bbe:	2b00      	cmp	r3, #0
    3bc0:	dc00      	bgt.n	3bc4 <__svfiscanf_r+0x170>
    3bc2:	e078      	b.n	3cb6 <__svfiscanf_r+0x262>
    3bc4:	9b45      	ldr	r3, [sp, #276]	; 0x114
    3bc6:	9301      	str	r3, [sp, #4]
    3bc8:	065b      	lsls	r3, r3, #25
    3bca:	d400      	bmi.n	3bce <__svfiscanf_r+0x17a>
    3bcc:	e08b      	b.n	3ce6 <__svfiscanf_r+0x292>
    3bce:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    3bd0:	2b02      	cmp	r3, #2
    3bd2:	dd00      	ble.n	3bd6 <__svfiscanf_r+0x182>
    3bd4:	e09d      	b.n	3d12 <__svfiscanf_r+0x2be>
    3bd6:	ab03      	add	r3, sp, #12
    3bd8:	0022      	movs	r2, r4
    3bda:	a945      	add	r1, sp, #276	; 0x114
    3bdc:	9800      	ldr	r0, [sp, #0]
    3bde:	f000 f8e7 	bl	3db0 <_scanf_chars>
    3be2:	2801      	cmp	r0, #1
    3be4:	d100      	bne.n	3be8 <__svfiscanf_r+0x194>
    3be6:	e0af      	b.n	3d48 <__svfiscanf_r+0x2f4>
    3be8:	2802      	cmp	r0, #2
    3bea:	d1a9      	bne.n	3b40 <__svfiscanf_r+0xec>
    3bec:	e025      	b.n	3c3a <__svfiscanf_r+0x1e6>
    3bee:	2b75      	cmp	r3, #117	; 0x75
    3bf0:	d0d5      	beq.n	3b9e <__svfiscanf_r+0x14a>
    3bf2:	2b78      	cmp	r3, #120	; 0x78
    3bf4:	d0c0      	beq.n	3b78 <__svfiscanf_r+0x124>
    3bf6:	2b73      	cmp	r3, #115	; 0x73
    3bf8:	d187      	bne.n	3b0a <__svfiscanf_r+0xb6>
    3bfa:	2302      	movs	r3, #2
    3bfc:	e03d      	b.n	3c7a <__svfiscanf_r+0x226>
    3bfe:	6863      	ldr	r3, [r4, #4]
    3c00:	2b00      	cmp	r3, #0
    3c02:	dd0f      	ble.n	3c24 <__svfiscanf_r+0x1d0>
    3c04:	6823      	ldr	r3, [r4, #0]
    3c06:	9901      	ldr	r1, [sp, #4]
    3c08:	781a      	ldrb	r2, [r3, #0]
    3c0a:	4291      	cmp	r1, r2
    3c0c:	d000      	beq.n	3c10 <__svfiscanf_r+0x1bc>
    3c0e:	e09b      	b.n	3d48 <__svfiscanf_r+0x2f4>
    3c10:	3301      	adds	r3, #1
    3c12:	6862      	ldr	r2, [r4, #4]
    3c14:	6023      	str	r3, [r4, #0]
    3c16:	9b49      	ldr	r3, [sp, #292]	; 0x124
    3c18:	3a01      	subs	r2, #1
    3c1a:	9301      	str	r3, [sp, #4]
    3c1c:	3301      	adds	r3, #1
    3c1e:	6062      	str	r2, [r4, #4]
    3c20:	9349      	str	r3, [sp, #292]	; 0x124
    3c22:	e78d      	b.n	3b40 <__svfiscanf_r+0xec>
    3c24:	2286      	movs	r2, #134	; 0x86
    3c26:	ab02      	add	r3, sp, #8
    3c28:	0052      	lsls	r2, r2, #1
    3c2a:	189b      	adds	r3, r3, r2
    3c2c:	59db      	ldr	r3, [r3, r7]
    3c2e:	0021      	movs	r1, r4
    3c30:	9800      	ldr	r0, [sp, #0]
    3c32:	9302      	str	r3, [sp, #8]
    3c34:	4798      	blx	r3
    3c36:	2800      	cmp	r0, #0
    3c38:	d0e4      	beq.n	3c04 <__svfiscanf_r+0x1b0>
    3c3a:	9848      	ldr	r0, [sp, #288]	; 0x120
    3c3c:	2800      	cmp	r0, #0
    3c3e:	d000      	beq.n	3c42 <__svfiscanf_r+0x1ee>
    3c40:	e07b      	b.n	3d3a <__svfiscanf_r+0x2e6>
    3c42:	3801      	subs	r0, #1
    3c44:	23a7      	movs	r3, #167	; 0xa7
    3c46:	009b      	lsls	r3, r3, #2
    3c48:	449d      	add	sp, r3
    3c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c4c:	9a45      	ldr	r2, [sp, #276]	; 0x114
    3c4e:	9201      	str	r2, [sp, #4]
    3c50:	2220      	movs	r2, #32
    3c52:	9901      	ldr	r1, [sp, #4]
    3c54:	430a      	orrs	r2, r1
    3c56:	9245      	str	r2, [sp, #276]	; 0x114
    3c58:	e78e      	b.n	3b78 <__svfiscanf_r+0x124>
    3c5a:	2308      	movs	r3, #8
    3c5c:	2204      	movs	r2, #4
    3c5e:	9346      	str	r3, [sp, #280]	; 0x118
    3c60:	e7ab      	b.n	3bba <__svfiscanf_r+0x166>
    3c62:	0031      	movs	r1, r6
    3c64:	a805      	add	r0, sp, #20
    3c66:	f000 faeb 	bl	4240 <__sccl>
    3c6a:	9b45      	ldr	r3, [sp, #276]	; 0x114
    3c6c:	0006      	movs	r6, r0
    3c6e:	9301      	str	r3, [sp, #4]
    3c70:	2340      	movs	r3, #64	; 0x40
    3c72:	9a01      	ldr	r2, [sp, #4]
    3c74:	4313      	orrs	r3, r2
    3c76:	9345      	str	r3, [sp, #276]	; 0x114
    3c78:	2301      	movs	r3, #1
    3c7a:	934b      	str	r3, [sp, #300]	; 0x12c
    3c7c:	e79e      	b.n	3bbc <__svfiscanf_r+0x168>
    3c7e:	9b45      	ldr	r3, [sp, #276]	; 0x114
    3c80:	9301      	str	r3, [sp, #4]
    3c82:	2340      	movs	r3, #64	; 0x40
    3c84:	9a01      	ldr	r2, [sp, #4]
    3c86:	4313      	orrs	r3, r2
    3c88:	9345      	str	r3, [sp, #276]	; 0x114
    3c8a:	2300      	movs	r3, #0
    3c8c:	e7f5      	b.n	3c7a <__svfiscanf_r+0x226>
    3c8e:	9945      	ldr	r1, [sp, #276]	; 0x114
    3c90:	06cb      	lsls	r3, r1, #27
    3c92:	d500      	bpl.n	3c96 <__svfiscanf_r+0x242>
    3c94:	e754      	b.n	3b40 <__svfiscanf_r+0xec>
    3c96:	9b03      	ldr	r3, [sp, #12]
    3c98:	9a49      	ldr	r2, [sp, #292]	; 0x124
    3c9a:	07c8      	lsls	r0, r1, #31
    3c9c:	d504      	bpl.n	3ca8 <__svfiscanf_r+0x254>
    3c9e:	1d19      	adds	r1, r3, #4
    3ca0:	9103      	str	r1, [sp, #12]
    3ca2:	681b      	ldr	r3, [r3, #0]
    3ca4:	801a      	strh	r2, [r3, #0]
    3ca6:	e74b      	b.n	3b40 <__svfiscanf_r+0xec>
    3ca8:	1d19      	adds	r1, r3, #4
    3caa:	9103      	str	r1, [sp, #12]
    3cac:	681b      	ldr	r3, [r3, #0]
    3cae:	601a      	str	r2, [r3, #0]
    3cb0:	e746      	b.n	3b40 <__svfiscanf_r+0xec>
    3cb2:	2305      	movs	r3, #5
    3cb4:	e7e1      	b.n	3c7a <__svfiscanf_r+0x226>
    3cb6:	2286      	movs	r2, #134	; 0x86
    3cb8:	ab02      	add	r3, sp, #8
    3cba:	0052      	lsls	r2, r2, #1
    3cbc:	189b      	adds	r3, r3, r2
    3cbe:	59db      	ldr	r3, [r3, r7]
    3cc0:	0021      	movs	r1, r4
    3cc2:	9800      	ldr	r0, [sp, #0]
    3cc4:	9301      	str	r3, [sp, #4]
    3cc6:	4798      	blx	r3
    3cc8:	2800      	cmp	r0, #0
    3cca:	d100      	bne.n	3cce <__svfiscanf_r+0x27a>
    3ccc:	e77a      	b.n	3bc4 <__svfiscanf_r+0x170>
    3cce:	e7b4      	b.n	3c3a <__svfiscanf_r+0x1e6>
    3cd0:	9a49      	ldr	r2, [sp, #292]	; 0x124
    3cd2:	9201      	str	r2, [sp, #4]
    3cd4:	3201      	adds	r2, #1
    3cd6:	9249      	str	r2, [sp, #292]	; 0x124
    3cd8:	6862      	ldr	r2, [r4, #4]
    3cda:	3a01      	subs	r2, #1
    3cdc:	6062      	str	r2, [r4, #4]
    3cde:	2a00      	cmp	r2, #0
    3ce0:	dd0b      	ble.n	3cfa <__svfiscanf_r+0x2a6>
    3ce2:	3301      	adds	r3, #1
    3ce4:	6023      	str	r3, [r4, #0]
    3ce6:	f000 fd55 	bl	4794 <__locale_ctype_ptr>
    3cea:	2108      	movs	r1, #8
    3cec:	6823      	ldr	r3, [r4, #0]
    3cee:	781a      	ldrb	r2, [r3, #0]
    3cf0:	1880      	adds	r0, r0, r2
    3cf2:	7842      	ldrb	r2, [r0, #1]
    3cf4:	420a      	tst	r2, r1
    3cf6:	d1eb      	bne.n	3cd0 <__svfiscanf_r+0x27c>
    3cf8:	e769      	b.n	3bce <__svfiscanf_r+0x17a>
    3cfa:	2286      	movs	r2, #134	; 0x86
    3cfc:	ab02      	add	r3, sp, #8
    3cfe:	0052      	lsls	r2, r2, #1
    3d00:	189b      	adds	r3, r3, r2
    3d02:	59db      	ldr	r3, [r3, r7]
    3d04:	0021      	movs	r1, r4
    3d06:	9800      	ldr	r0, [sp, #0]
    3d08:	9301      	str	r3, [sp, #4]
    3d0a:	4798      	blx	r3
    3d0c:	2800      	cmp	r0, #0
    3d0e:	d0ea      	beq.n	3ce6 <__svfiscanf_r+0x292>
    3d10:	e793      	b.n	3c3a <__svfiscanf_r+0x1e6>
    3d12:	2b04      	cmp	r3, #4
    3d14:	dc06      	bgt.n	3d24 <__svfiscanf_r+0x2d0>
    3d16:	ab03      	add	r3, sp, #12
    3d18:	0022      	movs	r2, r4
    3d1a:	a945      	add	r1, sp, #276	; 0x114
    3d1c:	9800      	ldr	r0, [sp, #0]
    3d1e:	f000 f8ab 	bl	3e78 <_scanf_i>
    3d22:	e75e      	b.n	3be2 <__svfiscanf_r+0x18e>
    3d24:	4b0d      	ldr	r3, [pc, #52]	; (3d5c <__svfiscanf_r+0x308>)
    3d26:	2b00      	cmp	r3, #0
    3d28:	d100      	bne.n	3d2c <__svfiscanf_r+0x2d8>
    3d2a:	e709      	b.n	3b40 <__svfiscanf_r+0xec>
    3d2c:	ab03      	add	r3, sp, #12
    3d2e:	0022      	movs	r2, r4
    3d30:	a945      	add	r1, sp, #276	; 0x114
    3d32:	9800      	ldr	r0, [sp, #0]
    3d34:	e000      	b.n	3d38 <__svfiscanf_r+0x2e4>
    3d36:	bf00      	nop
    3d38:	e753      	b.n	3be2 <__svfiscanf_r+0x18e>
    3d3a:	89a3      	ldrh	r3, [r4, #12]
    3d3c:	065b      	lsls	r3, r3, #25
    3d3e:	d400      	bmi.n	3d42 <__svfiscanf_r+0x2ee>
    3d40:	e780      	b.n	3c44 <__svfiscanf_r+0x1f0>
    3d42:	2001      	movs	r0, #1
    3d44:	4240      	negs	r0, r0
    3d46:	e77d      	b.n	3c44 <__svfiscanf_r+0x1f0>
    3d48:	9848      	ldr	r0, [sp, #288]	; 0x120
    3d4a:	e77b      	b.n	3c44 <__svfiscanf_r+0x1f0>
    3d4c:	fffffd64 	.word	0xfffffd64
    3d50:	00004615 	.word	0x00004615
    3d54:	000040fd 	.word	0x000040fd
    3d58:	00004ad6 	.word	0x00004ad6
    3d5c:	00000000 	.word	0x00000000

00003d60 <_vfiscanf_r>:
    3d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d62:	0004      	movs	r4, r0
    3d64:	000d      	movs	r5, r1
    3d66:	0016      	movs	r6, r2
    3d68:	001f      	movs	r7, r3
    3d6a:	2800      	cmp	r0, #0
    3d6c:	d004      	beq.n	3d78 <_vfiscanf_r+0x18>
    3d6e:	6983      	ldr	r3, [r0, #24]
    3d70:	2b00      	cmp	r3, #0
    3d72:	d101      	bne.n	3d78 <_vfiscanf_r+0x18>
    3d74:	f7ff f9d2 	bl	311c <__sinit>
    3d78:	4b0a      	ldr	r3, [pc, #40]	; (3da4 <_vfiscanf_r+0x44>)
    3d7a:	429d      	cmp	r5, r3
    3d7c:	d107      	bne.n	3d8e <_vfiscanf_r+0x2e>
    3d7e:	6865      	ldr	r5, [r4, #4]
    3d80:	003b      	movs	r3, r7
    3d82:	0032      	movs	r2, r6
    3d84:	0029      	movs	r1, r5
    3d86:	0020      	movs	r0, r4
    3d88:	f7ff fe64 	bl	3a54 <__svfiscanf_r>
    3d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d8e:	4b06      	ldr	r3, [pc, #24]	; (3da8 <_vfiscanf_r+0x48>)
    3d90:	429d      	cmp	r5, r3
    3d92:	d101      	bne.n	3d98 <_vfiscanf_r+0x38>
    3d94:	68a5      	ldr	r5, [r4, #8]
    3d96:	e7f3      	b.n	3d80 <_vfiscanf_r+0x20>
    3d98:	4b04      	ldr	r3, [pc, #16]	; (3dac <_vfiscanf_r+0x4c>)
    3d9a:	429d      	cmp	r5, r3
    3d9c:	d1f0      	bne.n	3d80 <_vfiscanf_r+0x20>
    3d9e:	68e5      	ldr	r5, [r4, #12]
    3da0:	e7ee      	b.n	3d80 <_vfiscanf_r+0x20>
    3da2:	46c0      	nop			; (mov r8, r8)
    3da4:	00004a90 	.word	0x00004a90
    3da8:	00004ab0 	.word	0x00004ab0
    3dac:	00004a70 	.word	0x00004a70

00003db0 <_scanf_chars>:
    3db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3db2:	0015      	movs	r5, r2
    3db4:	688a      	ldr	r2, [r1, #8]
    3db6:	9001      	str	r0, [sp, #4]
    3db8:	000c      	movs	r4, r1
    3dba:	2a00      	cmp	r2, #0
    3dbc:	d106      	bne.n	3dcc <_scanf_chars+0x1c>
    3dbe:	698a      	ldr	r2, [r1, #24]
    3dc0:	1e51      	subs	r1, r2, #1
    3dc2:	418a      	sbcs	r2, r1
    3dc4:	2101      	movs	r1, #1
    3dc6:	4252      	negs	r2, r2
    3dc8:	430a      	orrs	r2, r1
    3dca:	60a2      	str	r2, [r4, #8]
    3dcc:	6822      	ldr	r2, [r4, #0]
    3dce:	06d2      	lsls	r2, r2, #27
    3dd0:	d403      	bmi.n	3dda <_scanf_chars+0x2a>
    3dd2:	681a      	ldr	r2, [r3, #0]
    3dd4:	1d11      	adds	r1, r2, #4
    3dd6:	6019      	str	r1, [r3, #0]
    3dd8:	6817      	ldr	r7, [r2, #0]
    3dda:	2600      	movs	r6, #0
    3ddc:	69a3      	ldr	r3, [r4, #24]
    3dde:	2b00      	cmp	r3, #0
    3de0:	d01c      	beq.n	3e1c <_scanf_chars+0x6c>
    3de2:	2b01      	cmp	r3, #1
    3de4:	d108      	bne.n	3df8 <_scanf_chars+0x48>
    3de6:	682b      	ldr	r3, [r5, #0]
    3de8:	6962      	ldr	r2, [r4, #20]
    3dea:	781b      	ldrb	r3, [r3, #0]
    3dec:	5cd3      	ldrb	r3, [r2, r3]
    3dee:	2b00      	cmp	r3, #0
    3df0:	d114      	bne.n	3e1c <_scanf_chars+0x6c>
    3df2:	2e00      	cmp	r6, #0
    3df4:	d130      	bne.n	3e58 <_scanf_chars+0xa8>
    3df6:	e006      	b.n	3e06 <_scanf_chars+0x56>
    3df8:	2b02      	cmp	r3, #2
    3dfa:	d006      	beq.n	3e0a <_scanf_chars+0x5a>
    3dfc:	2e00      	cmp	r6, #0
    3dfe:	d12b      	bne.n	3e58 <_scanf_chars+0xa8>
    3e00:	69a3      	ldr	r3, [r4, #24]
    3e02:	2b01      	cmp	r3, #1
    3e04:	d128      	bne.n	3e58 <_scanf_chars+0xa8>
    3e06:	2001      	movs	r0, #1
    3e08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3e0a:	f000 fcc3 	bl	4794 <__locale_ctype_ptr>
    3e0e:	2208      	movs	r2, #8
    3e10:	682b      	ldr	r3, [r5, #0]
    3e12:	781b      	ldrb	r3, [r3, #0]
    3e14:	18c0      	adds	r0, r0, r3
    3e16:	7843      	ldrb	r3, [r0, #1]
    3e18:	4213      	tst	r3, r2
    3e1a:	d1ef      	bne.n	3dfc <_scanf_chars+0x4c>
    3e1c:	2210      	movs	r2, #16
    3e1e:	6823      	ldr	r3, [r4, #0]
    3e20:	3601      	adds	r6, #1
    3e22:	4213      	tst	r3, r2
    3e24:	d103      	bne.n	3e2e <_scanf_chars+0x7e>
    3e26:	682b      	ldr	r3, [r5, #0]
    3e28:	781b      	ldrb	r3, [r3, #0]
    3e2a:	703b      	strb	r3, [r7, #0]
    3e2c:	3701      	adds	r7, #1
    3e2e:	682a      	ldr	r2, [r5, #0]
    3e30:	686b      	ldr	r3, [r5, #4]
    3e32:	3201      	adds	r2, #1
    3e34:	602a      	str	r2, [r5, #0]
    3e36:	68a2      	ldr	r2, [r4, #8]
    3e38:	3b01      	subs	r3, #1
    3e3a:	3a01      	subs	r2, #1
    3e3c:	606b      	str	r3, [r5, #4]
    3e3e:	60a2      	str	r2, [r4, #8]
    3e40:	2a00      	cmp	r2, #0
    3e42:	d009      	beq.n	3e58 <_scanf_chars+0xa8>
    3e44:	2b00      	cmp	r3, #0
    3e46:	dcc9      	bgt.n	3ddc <_scanf_chars+0x2c>
    3e48:	23c0      	movs	r3, #192	; 0xc0
    3e4a:	005b      	lsls	r3, r3, #1
    3e4c:	58e3      	ldr	r3, [r4, r3]
    3e4e:	0029      	movs	r1, r5
    3e50:	9801      	ldr	r0, [sp, #4]
    3e52:	4798      	blx	r3
    3e54:	2800      	cmp	r0, #0
    3e56:	d0c1      	beq.n	3ddc <_scanf_chars+0x2c>
    3e58:	2310      	movs	r3, #16
    3e5a:	6822      	ldr	r2, [r4, #0]
    3e5c:	4013      	ands	r3, r2
    3e5e:	d106      	bne.n	3e6e <_scanf_chars+0xbe>
    3e60:	68e2      	ldr	r2, [r4, #12]
    3e62:	3201      	adds	r2, #1
    3e64:	60e2      	str	r2, [r4, #12]
    3e66:	69a2      	ldr	r2, [r4, #24]
    3e68:	2a00      	cmp	r2, #0
    3e6a:	d000      	beq.n	3e6e <_scanf_chars+0xbe>
    3e6c:	703b      	strb	r3, [r7, #0]
    3e6e:	6923      	ldr	r3, [r4, #16]
    3e70:	2000      	movs	r0, #0
    3e72:	199e      	adds	r6, r3, r6
    3e74:	6126      	str	r6, [r4, #16]
    3e76:	e7c7      	b.n	3e08 <_scanf_chars+0x58>

00003e78 <_scanf_i>:
    3e78:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e7a:	000c      	movs	r4, r1
    3e7c:	b08d      	sub	sp, #52	; 0x34
    3e7e:	9302      	str	r3, [sp, #8]
    3e80:	4b77      	ldr	r3, [pc, #476]	; (4060 <_scanf_i+0x1e8>)
    3e82:	9005      	str	r0, [sp, #20]
    3e84:	0016      	movs	r6, r2
    3e86:	aa09      	add	r2, sp, #36	; 0x24
    3e88:	cb23      	ldmia	r3!, {r0, r1, r5}
    3e8a:	c223      	stmia	r2!, {r0, r1, r5}
    3e8c:	4b75      	ldr	r3, [pc, #468]	; (4064 <_scanf_i+0x1ec>)
    3e8e:	9306      	str	r3, [sp, #24]
    3e90:	69a3      	ldr	r3, [r4, #24]
    3e92:	2b03      	cmp	r3, #3
    3e94:	d001      	beq.n	3e9a <_scanf_i+0x22>
    3e96:	4b74      	ldr	r3, [pc, #464]	; (4068 <_scanf_i+0x1f0>)
    3e98:	9306      	str	r3, [sp, #24]
    3e9a:	22ae      	movs	r2, #174	; 0xae
    3e9c:	2000      	movs	r0, #0
    3e9e:	68a3      	ldr	r3, [r4, #8]
    3ea0:	0052      	lsls	r2, r2, #1
    3ea2:	1e59      	subs	r1, r3, #1
    3ea4:	9004      	str	r0, [sp, #16]
    3ea6:	4291      	cmp	r1, r2
    3ea8:	d905      	bls.n	3eb6 <_scanf_i+0x3e>
    3eaa:	3b5e      	subs	r3, #94	; 0x5e
    3eac:	3bff      	subs	r3, #255	; 0xff
    3eae:	9304      	str	r3, [sp, #16]
    3eb0:	235e      	movs	r3, #94	; 0x5e
    3eb2:	33ff      	adds	r3, #255	; 0xff
    3eb4:	60a3      	str	r3, [r4, #8]
    3eb6:	0023      	movs	r3, r4
    3eb8:	331c      	adds	r3, #28
    3eba:	9301      	str	r3, [sp, #4]
    3ebc:	23d0      	movs	r3, #208	; 0xd0
    3ebe:	2700      	movs	r7, #0
    3ec0:	6822      	ldr	r2, [r4, #0]
    3ec2:	011b      	lsls	r3, r3, #4
    3ec4:	4313      	orrs	r3, r2
    3ec6:	6023      	str	r3, [r4, #0]
    3ec8:	9b01      	ldr	r3, [sp, #4]
    3eca:	9303      	str	r3, [sp, #12]
    3ecc:	6833      	ldr	r3, [r6, #0]
    3ece:	a809      	add	r0, sp, #36	; 0x24
    3ed0:	7819      	ldrb	r1, [r3, #0]
    3ed2:	00bb      	lsls	r3, r7, #2
    3ed4:	2202      	movs	r2, #2
    3ed6:	5818      	ldr	r0, [r3, r0]
    3ed8:	f000 fc90 	bl	47fc <memchr>
    3edc:	2800      	cmp	r0, #0
    3ede:	d02b      	beq.n	3f38 <_scanf_i+0xc0>
    3ee0:	2f01      	cmp	r7, #1
    3ee2:	d15f      	bne.n	3fa4 <_scanf_i+0x12c>
    3ee4:	6863      	ldr	r3, [r4, #4]
    3ee6:	2b00      	cmp	r3, #0
    3ee8:	d106      	bne.n	3ef8 <_scanf_i+0x80>
    3eea:	3308      	adds	r3, #8
    3eec:	6822      	ldr	r2, [r4, #0]
    3eee:	6063      	str	r3, [r4, #4]
    3ef0:	33f9      	adds	r3, #249	; 0xf9
    3ef2:	33ff      	adds	r3, #255	; 0xff
    3ef4:	4313      	orrs	r3, r2
    3ef6:	6023      	str	r3, [r4, #0]
    3ef8:	4b5c      	ldr	r3, [pc, #368]	; (406c <_scanf_i+0x1f4>)
    3efa:	6822      	ldr	r2, [r4, #0]
    3efc:	4013      	ands	r3, r2
    3efe:	6023      	str	r3, [r4, #0]
    3f00:	68a3      	ldr	r3, [r4, #8]
    3f02:	1e5a      	subs	r2, r3, #1
    3f04:	60a2      	str	r2, [r4, #8]
    3f06:	2b00      	cmp	r3, #0
    3f08:	d016      	beq.n	3f38 <_scanf_i+0xc0>
    3f0a:	9b03      	ldr	r3, [sp, #12]
    3f0c:	1c5d      	adds	r5, r3, #1
    3f0e:	6833      	ldr	r3, [r6, #0]
    3f10:	1c5a      	adds	r2, r3, #1
    3f12:	6032      	str	r2, [r6, #0]
    3f14:	781b      	ldrb	r3, [r3, #0]
    3f16:	9a03      	ldr	r2, [sp, #12]
    3f18:	9503      	str	r5, [sp, #12]
    3f1a:	7013      	strb	r3, [r2, #0]
    3f1c:	6873      	ldr	r3, [r6, #4]
    3f1e:	3b01      	subs	r3, #1
    3f20:	6073      	str	r3, [r6, #4]
    3f22:	2b00      	cmp	r3, #0
    3f24:	dc08      	bgt.n	3f38 <_scanf_i+0xc0>
    3f26:	23c0      	movs	r3, #192	; 0xc0
    3f28:	005b      	lsls	r3, r3, #1
    3f2a:	58e3      	ldr	r3, [r4, r3]
    3f2c:	0031      	movs	r1, r6
    3f2e:	9805      	ldr	r0, [sp, #20]
    3f30:	9307      	str	r3, [sp, #28]
    3f32:	4798      	blx	r3
    3f34:	2800      	cmp	r0, #0
    3f36:	d17d      	bne.n	4034 <_scanf_i+0x1bc>
    3f38:	3701      	adds	r7, #1
    3f3a:	2f03      	cmp	r7, #3
    3f3c:	d1c6      	bne.n	3ecc <_scanf_i+0x54>
    3f3e:	6863      	ldr	r3, [r4, #4]
    3f40:	2b00      	cmp	r3, #0
    3f42:	d101      	bne.n	3f48 <_scanf_i+0xd0>
    3f44:	330a      	adds	r3, #10
    3f46:	6063      	str	r3, [r4, #4]
    3f48:	2110      	movs	r1, #16
    3f4a:	2700      	movs	r7, #0
    3f4c:	6863      	ldr	r3, [r4, #4]
    3f4e:	6960      	ldr	r0, [r4, #20]
    3f50:	1ac9      	subs	r1, r1, r3
    3f52:	4b47      	ldr	r3, [pc, #284]	; (4070 <_scanf_i+0x1f8>)
    3f54:	18c9      	adds	r1, r1, r3
    3f56:	f000 f973 	bl	4240 <__sccl>
    3f5a:	9d03      	ldr	r5, [sp, #12]
    3f5c:	68a3      	ldr	r3, [r4, #8]
    3f5e:	2b00      	cmp	r3, #0
    3f60:	d041      	beq.n	3fe6 <_scanf_i+0x16e>
    3f62:	6832      	ldr	r2, [r6, #0]
    3f64:	6960      	ldr	r0, [r4, #20]
    3f66:	7811      	ldrb	r1, [r2, #0]
    3f68:	5c40      	ldrb	r0, [r0, r1]
    3f6a:	2800      	cmp	r0, #0
    3f6c:	d03b      	beq.n	3fe6 <_scanf_i+0x16e>
    3f6e:	2930      	cmp	r1, #48	; 0x30
    3f70:	d128      	bne.n	3fc4 <_scanf_i+0x14c>
    3f72:	2080      	movs	r0, #128	; 0x80
    3f74:	6821      	ldr	r1, [r4, #0]
    3f76:	0100      	lsls	r0, r0, #4
    3f78:	4201      	tst	r1, r0
    3f7a:	d023      	beq.n	3fc4 <_scanf_i+0x14c>
    3f7c:	9a04      	ldr	r2, [sp, #16]
    3f7e:	3701      	adds	r7, #1
    3f80:	2a00      	cmp	r2, #0
    3f82:	d003      	beq.n	3f8c <_scanf_i+0x114>
    3f84:	3a01      	subs	r2, #1
    3f86:	3301      	adds	r3, #1
    3f88:	9204      	str	r2, [sp, #16]
    3f8a:	60a3      	str	r3, [r4, #8]
    3f8c:	6873      	ldr	r3, [r6, #4]
    3f8e:	3b01      	subs	r3, #1
    3f90:	6073      	str	r3, [r6, #4]
    3f92:	2b00      	cmp	r3, #0
    3f94:	dd1e      	ble.n	3fd4 <_scanf_i+0x15c>
    3f96:	6833      	ldr	r3, [r6, #0]
    3f98:	3301      	adds	r3, #1
    3f9a:	6033      	str	r3, [r6, #0]
    3f9c:	68a3      	ldr	r3, [r4, #8]
    3f9e:	3b01      	subs	r3, #1
    3fa0:	60a3      	str	r3, [r4, #8]
    3fa2:	e7db      	b.n	3f5c <_scanf_i+0xe4>
    3fa4:	2f02      	cmp	r7, #2
    3fa6:	d1ab      	bne.n	3f00 <_scanf_i+0x88>
    3fa8:	21c0      	movs	r1, #192	; 0xc0
    3faa:	2380      	movs	r3, #128	; 0x80
    3fac:	6822      	ldr	r2, [r4, #0]
    3fae:	00c9      	lsls	r1, r1, #3
    3fb0:	4011      	ands	r1, r2
    3fb2:	009b      	lsls	r3, r3, #2
    3fb4:	4299      	cmp	r1, r3
    3fb6:	d1c2      	bne.n	3f3e <_scanf_i+0xc6>
    3fb8:	3bf1      	subs	r3, #241	; 0xf1
    3fba:	3bff      	subs	r3, #255	; 0xff
    3fbc:	6063      	str	r3, [r4, #4]
    3fbe:	33f0      	adds	r3, #240	; 0xf0
    3fc0:	4313      	orrs	r3, r2
    3fc2:	e79c      	b.n	3efe <_scanf_i+0x86>
    3fc4:	6821      	ldr	r1, [r4, #0]
    3fc6:	4b2b      	ldr	r3, [pc, #172]	; (4074 <_scanf_i+0x1fc>)
    3fc8:	400b      	ands	r3, r1
    3fca:	6023      	str	r3, [r4, #0]
    3fcc:	7813      	ldrb	r3, [r2, #0]
    3fce:	702b      	strb	r3, [r5, #0]
    3fd0:	3501      	adds	r5, #1
    3fd2:	e7db      	b.n	3f8c <_scanf_i+0x114>
    3fd4:	23c0      	movs	r3, #192	; 0xc0
    3fd6:	005b      	lsls	r3, r3, #1
    3fd8:	58e3      	ldr	r3, [r4, r3]
    3fda:	0031      	movs	r1, r6
    3fdc:	9805      	ldr	r0, [sp, #20]
    3fde:	9303      	str	r3, [sp, #12]
    3fe0:	4798      	blx	r3
    3fe2:	2800      	cmp	r0, #0
    3fe4:	d0da      	beq.n	3f9c <_scanf_i+0x124>
    3fe6:	6823      	ldr	r3, [r4, #0]
    3fe8:	05db      	lsls	r3, r3, #23
    3fea:	d50e      	bpl.n	400a <_scanf_i+0x192>
    3fec:	9b01      	ldr	r3, [sp, #4]
    3fee:	429d      	cmp	r5, r3
    3ff0:	d907      	bls.n	4002 <_scanf_i+0x18a>
    3ff2:	23be      	movs	r3, #190	; 0xbe
    3ff4:	3d01      	subs	r5, #1
    3ff6:	005b      	lsls	r3, r3, #1
    3ff8:	7829      	ldrb	r1, [r5, #0]
    3ffa:	58e3      	ldr	r3, [r4, r3]
    3ffc:	0032      	movs	r2, r6
    3ffe:	9805      	ldr	r0, [sp, #20]
    4000:	4798      	blx	r3
    4002:	9b01      	ldr	r3, [sp, #4]
    4004:	2001      	movs	r0, #1
    4006:	429d      	cmp	r5, r3
    4008:	d027      	beq.n	405a <_scanf_i+0x1e2>
    400a:	2210      	movs	r2, #16
    400c:	6823      	ldr	r3, [r4, #0]
    400e:	401a      	ands	r2, r3
    4010:	d11c      	bne.n	404c <_scanf_i+0x1d4>
    4012:	702a      	strb	r2, [r5, #0]
    4014:	6863      	ldr	r3, [r4, #4]
    4016:	9901      	ldr	r1, [sp, #4]
    4018:	9805      	ldr	r0, [sp, #20]
    401a:	9e06      	ldr	r6, [sp, #24]
    401c:	47b0      	blx	r6
    401e:	9b02      	ldr	r3, [sp, #8]
    4020:	6822      	ldr	r2, [r4, #0]
    4022:	681b      	ldr	r3, [r3, #0]
    4024:	0691      	lsls	r1, r2, #26
    4026:	d507      	bpl.n	4038 <_scanf_i+0x1c0>
    4028:	9902      	ldr	r1, [sp, #8]
    402a:	1d1a      	adds	r2, r3, #4
    402c:	600a      	str	r2, [r1, #0]
    402e:	681b      	ldr	r3, [r3, #0]
    4030:	6018      	str	r0, [r3, #0]
    4032:	e008      	b.n	4046 <_scanf_i+0x1ce>
    4034:	2700      	movs	r7, #0
    4036:	e7d6      	b.n	3fe6 <_scanf_i+0x16e>
    4038:	07d1      	lsls	r1, r2, #31
    403a:	d5f5      	bpl.n	4028 <_scanf_i+0x1b0>
    403c:	9902      	ldr	r1, [sp, #8]
    403e:	1d1a      	adds	r2, r3, #4
    4040:	600a      	str	r2, [r1, #0]
    4042:	681b      	ldr	r3, [r3, #0]
    4044:	8018      	strh	r0, [r3, #0]
    4046:	68e3      	ldr	r3, [r4, #12]
    4048:	3301      	adds	r3, #1
    404a:	60e3      	str	r3, [r4, #12]
    404c:	2000      	movs	r0, #0
    404e:	9b01      	ldr	r3, [sp, #4]
    4050:	1aed      	subs	r5, r5, r3
    4052:	6923      	ldr	r3, [r4, #16]
    4054:	19ef      	adds	r7, r5, r7
    4056:	19df      	adds	r7, r3, r7
    4058:	6127      	str	r7, [r4, #16]
    405a:	b00d      	add	sp, #52	; 0x34
    405c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    405e:	46c0      	nop			; (mov r8, r8)
    4060:	00004b04 	.word	0x00004b04
    4064:	00004449 	.word	0x00004449
    4068:	00004579 	.word	0x00004579
    406c:	fffffaff 	.word	0xfffffaff
    4070:	00004b10 	.word	0x00004b10
    4074:	fffff6ff 	.word	0xfffff6ff

00004078 <_putc_r>:
    4078:	b570      	push	{r4, r5, r6, lr}
    407a:	0006      	movs	r6, r0
    407c:	000d      	movs	r5, r1
    407e:	0014      	movs	r4, r2
    4080:	2800      	cmp	r0, #0
    4082:	d004      	beq.n	408e <_putc_r+0x16>
    4084:	6983      	ldr	r3, [r0, #24]
    4086:	2b00      	cmp	r3, #0
    4088:	d101      	bne.n	408e <_putc_r+0x16>
    408a:	f7ff f847 	bl	311c <__sinit>
    408e:	4b12      	ldr	r3, [pc, #72]	; (40d8 <_putc_r+0x60>)
    4090:	429c      	cmp	r4, r3
    4092:	d111      	bne.n	40b8 <_putc_r+0x40>
    4094:	6874      	ldr	r4, [r6, #4]
    4096:	68a3      	ldr	r3, [r4, #8]
    4098:	3b01      	subs	r3, #1
    409a:	60a3      	str	r3, [r4, #8]
    409c:	2b00      	cmp	r3, #0
    409e:	da05      	bge.n	40ac <_putc_r+0x34>
    40a0:	69a2      	ldr	r2, [r4, #24]
    40a2:	4293      	cmp	r3, r2
    40a4:	db12      	blt.n	40cc <_putc_r+0x54>
    40a6:	b2eb      	uxtb	r3, r5
    40a8:	2b0a      	cmp	r3, #10
    40aa:	d00f      	beq.n	40cc <_putc_r+0x54>
    40ac:	6823      	ldr	r3, [r4, #0]
    40ae:	b2e8      	uxtb	r0, r5
    40b0:	1c5a      	adds	r2, r3, #1
    40b2:	6022      	str	r2, [r4, #0]
    40b4:	701d      	strb	r5, [r3, #0]
    40b6:	bd70      	pop	{r4, r5, r6, pc}
    40b8:	4b08      	ldr	r3, [pc, #32]	; (40dc <_putc_r+0x64>)
    40ba:	429c      	cmp	r4, r3
    40bc:	d101      	bne.n	40c2 <_putc_r+0x4a>
    40be:	68b4      	ldr	r4, [r6, #8]
    40c0:	e7e9      	b.n	4096 <_putc_r+0x1e>
    40c2:	4b07      	ldr	r3, [pc, #28]	; (40e0 <_putc_r+0x68>)
    40c4:	429c      	cmp	r4, r3
    40c6:	d1e6      	bne.n	4096 <_putc_r+0x1e>
    40c8:	68f4      	ldr	r4, [r6, #12]
    40ca:	e7e4      	b.n	4096 <_putc_r+0x1e>
    40cc:	0022      	movs	r2, r4
    40ce:	0029      	movs	r1, r5
    40d0:	0030      	movs	r0, r6
    40d2:	f7fe fe4b 	bl	2d6c <__swbuf_r>
    40d6:	e7ee      	b.n	40b6 <_putc_r+0x3e>
    40d8:	00004a90 	.word	0x00004a90
    40dc:	00004ab0 	.word	0x00004ab0
    40e0:	00004a70 	.word	0x00004a70

000040e4 <lflush>:
    40e4:	2209      	movs	r2, #9
    40e6:	b510      	push	{r4, lr}
    40e8:	8983      	ldrh	r3, [r0, #12]
    40ea:	4013      	ands	r3, r2
    40ec:	2200      	movs	r2, #0
    40ee:	2b09      	cmp	r3, #9
    40f0:	d102      	bne.n	40f8 <lflush+0x14>
    40f2:	f7fe ffbd 	bl	3070 <fflush>
    40f6:	0002      	movs	r2, r0
    40f8:	0010      	movs	r0, r2
    40fa:	bd10      	pop	{r4, pc}

000040fc <__srefill_r>:
    40fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40fe:	0005      	movs	r5, r0
    4100:	000c      	movs	r4, r1
    4102:	2800      	cmp	r0, #0
    4104:	d004      	beq.n	4110 <__srefill_r+0x14>
    4106:	6983      	ldr	r3, [r0, #24]
    4108:	2b00      	cmp	r3, #0
    410a:	d101      	bne.n	4110 <__srefill_r+0x14>
    410c:	f7ff f806 	bl	311c <__sinit>
    4110:	4b3d      	ldr	r3, [pc, #244]	; (4208 <__srefill_r+0x10c>)
    4112:	429c      	cmp	r4, r3
    4114:	d10a      	bne.n	412c <__srefill_r+0x30>
    4116:	686c      	ldr	r4, [r5, #4]
    4118:	2300      	movs	r3, #0
    411a:	6063      	str	r3, [r4, #4]
    411c:	230c      	movs	r3, #12
    411e:	5ee2      	ldrsh	r2, [r4, r3]
    4120:	b293      	uxth	r3, r2
    4122:	0699      	lsls	r1, r3, #26
    4124:	d50c      	bpl.n	4140 <__srefill_r+0x44>
    4126:	2001      	movs	r0, #1
    4128:	4240      	negs	r0, r0
    412a:	e068      	b.n	41fe <__srefill_r+0x102>
    412c:	4b37      	ldr	r3, [pc, #220]	; (420c <__srefill_r+0x110>)
    412e:	429c      	cmp	r4, r3
    4130:	d101      	bne.n	4136 <__srefill_r+0x3a>
    4132:	68ac      	ldr	r4, [r5, #8]
    4134:	e7f0      	b.n	4118 <__srefill_r+0x1c>
    4136:	4b36      	ldr	r3, [pc, #216]	; (4210 <__srefill_r+0x114>)
    4138:	429c      	cmp	r4, r3
    413a:	d1ed      	bne.n	4118 <__srefill_r+0x1c>
    413c:	68ec      	ldr	r4, [r5, #12]
    413e:	e7eb      	b.n	4118 <__srefill_r+0x1c>
    4140:	0759      	lsls	r1, r3, #29
    4142:	d44a      	bmi.n	41da <__srefill_r+0xde>
    4144:	06d9      	lsls	r1, r3, #27
    4146:	d405      	bmi.n	4154 <__srefill_r+0x58>
    4148:	2309      	movs	r3, #9
    414a:	602b      	str	r3, [r5, #0]
    414c:	3337      	adds	r3, #55	; 0x37
    414e:	4313      	orrs	r3, r2
    4150:	81a3      	strh	r3, [r4, #12]
    4152:	e7e8      	b.n	4126 <__srefill_r+0x2a>
    4154:	2608      	movs	r6, #8
    4156:	4233      	tst	r3, r6
    4158:	d00a      	beq.n	4170 <__srefill_r+0x74>
    415a:	0021      	movs	r1, r4
    415c:	0028      	movs	r0, r5
    415e:	f7fe ff5b 	bl	3018 <_fflush_r>
    4162:	2800      	cmp	r0, #0
    4164:	d1df      	bne.n	4126 <__srefill_r+0x2a>
    4166:	89a3      	ldrh	r3, [r4, #12]
    4168:	60a0      	str	r0, [r4, #8]
    416a:	43b3      	bics	r3, r6
    416c:	81a3      	strh	r3, [r4, #12]
    416e:	61a0      	str	r0, [r4, #24]
    4170:	2304      	movs	r3, #4
    4172:	89a2      	ldrh	r2, [r4, #12]
    4174:	4313      	orrs	r3, r2
    4176:	81a3      	strh	r3, [r4, #12]
    4178:	6923      	ldr	r3, [r4, #16]
    417a:	2b00      	cmp	r3, #0
    417c:	d103      	bne.n	4186 <__srefill_r+0x8a>
    417e:	0021      	movs	r1, r4
    4180:	0028      	movs	r0, r5
    4182:	f7ff f8a5 	bl	32d0 <__smakebuf_r>
    4186:	230c      	movs	r3, #12
    4188:	5ee7      	ldrsh	r7, [r4, r3]
    418a:	b2be      	uxth	r6, r7
    418c:	07b3      	lsls	r3, r6, #30
    418e:	d00f      	beq.n	41b0 <__srefill_r+0xb4>
    4190:	2301      	movs	r3, #1
    4192:	81a3      	strh	r3, [r4, #12]
    4194:	4b1f      	ldr	r3, [pc, #124]	; (4214 <__srefill_r+0x118>)
    4196:	4920      	ldr	r1, [pc, #128]	; (4218 <__srefill_r+0x11c>)
    4198:	6818      	ldr	r0, [r3, #0]
    419a:	f7ff f833 	bl	3204 <_fwalk>
    419e:	2309      	movs	r3, #9
    41a0:	81a7      	strh	r7, [r4, #12]
    41a2:	401e      	ands	r6, r3
    41a4:	429e      	cmp	r6, r3
    41a6:	d103      	bne.n	41b0 <__srefill_r+0xb4>
    41a8:	0021      	movs	r1, r4
    41aa:	0028      	movs	r0, r5
    41ac:	f7fe feaa 	bl	2f04 <__sflush_r>
    41b0:	6923      	ldr	r3, [r4, #16]
    41b2:	6922      	ldr	r2, [r4, #16]
    41b4:	6023      	str	r3, [r4, #0]
    41b6:	0028      	movs	r0, r5
    41b8:	6963      	ldr	r3, [r4, #20]
    41ba:	6a21      	ldr	r1, [r4, #32]
    41bc:	6a65      	ldr	r5, [r4, #36]	; 0x24
    41be:	47a8      	blx	r5
    41c0:	0002      	movs	r2, r0
    41c2:	6060      	str	r0, [r4, #4]
    41c4:	2000      	movs	r0, #0
    41c6:	4282      	cmp	r2, r0
    41c8:	dc19      	bgt.n	41fe <__srefill_r+0x102>
    41ca:	89a1      	ldrh	r1, [r4, #12]
    41cc:	4282      	cmp	r2, r0
    41ce:	d117      	bne.n	4200 <__srefill_r+0x104>
    41d0:	2320      	movs	r3, #32
    41d2:	430b      	orrs	r3, r1
    41d4:	81a3      	strh	r3, [r4, #12]
    41d6:	3801      	subs	r0, #1
    41d8:	e011      	b.n	41fe <__srefill_r+0x102>
    41da:	6b61      	ldr	r1, [r4, #52]	; 0x34
    41dc:	2900      	cmp	r1, #0
    41de:	d0cb      	beq.n	4178 <__srefill_r+0x7c>
    41e0:	0023      	movs	r3, r4
    41e2:	3344      	adds	r3, #68	; 0x44
    41e4:	4299      	cmp	r1, r3
    41e6:	d002      	beq.n	41ee <__srefill_r+0xf2>
    41e8:	0028      	movs	r0, r5
    41ea:	f7ff f8bf 	bl	336c <_free_r>
    41ee:	2000      	movs	r0, #0
    41f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    41f2:	6360      	str	r0, [r4, #52]	; 0x34
    41f4:	6063      	str	r3, [r4, #4]
    41f6:	4283      	cmp	r3, r0
    41f8:	d0be      	beq.n	4178 <__srefill_r+0x7c>
    41fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    41fc:	6023      	str	r3, [r4, #0]
    41fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4200:	2340      	movs	r3, #64	; 0x40
    4202:	6060      	str	r0, [r4, #4]
    4204:	430b      	orrs	r3, r1
    4206:	e7a3      	b.n	4150 <__srefill_r+0x54>
    4208:	00004a90 	.word	0x00004a90
    420c:	00004ab0 	.word	0x00004ab0
    4210:	00004a70 	.word	0x00004a70
    4214:	00004a6c 	.word	0x00004a6c
    4218:	000040e5 	.word	0x000040e5

0000421c <_sbrk_r>:
    421c:	2300      	movs	r3, #0
    421e:	b570      	push	{r4, r5, r6, lr}
    4220:	4c06      	ldr	r4, [pc, #24]	; (423c <_sbrk_r+0x20>)
    4222:	0005      	movs	r5, r0
    4224:	0008      	movs	r0, r1
    4226:	6023      	str	r3, [r4, #0]
    4228:	f7fc f828 	bl	27c <_sbrk>
    422c:	1c43      	adds	r3, r0, #1
    422e:	d103      	bne.n	4238 <_sbrk_r+0x1c>
    4230:	6823      	ldr	r3, [r4, #0]
    4232:	2b00      	cmp	r3, #0
    4234:	d000      	beq.n	4238 <_sbrk_r+0x1c>
    4236:	602b      	str	r3, [r5, #0]
    4238:	bd70      	pop	{r4, r5, r6, pc}
    423a:	46c0      	nop			; (mov r8, r8)
    423c:	200003d4 	.word	0x200003d4

00004240 <__sccl>:
    4240:	b570      	push	{r4, r5, r6, lr}
    4242:	780b      	ldrb	r3, [r1, #0]
    4244:	2b5e      	cmp	r3, #94	; 0x5e
    4246:	d00d      	beq.n	4264 <__sccl+0x24>
    4248:	1c4a      	adds	r2, r1, #1
    424a:	2100      	movs	r1, #0
    424c:	0004      	movs	r4, r0
    424e:	1c45      	adds	r5, r0, #1
    4250:	35ff      	adds	r5, #255	; 0xff
    4252:	7021      	strb	r1, [r4, #0]
    4254:	3401      	adds	r4, #1
    4256:	42a5      	cmp	r5, r4
    4258:	d1fb      	bne.n	4252 <__sccl+0x12>
    425a:	2b00      	cmp	r3, #0
    425c:	d106      	bne.n	426c <__sccl+0x2c>
    425e:	3a01      	subs	r2, #1
    4260:	0010      	movs	r0, r2
    4262:	bd70      	pop	{r4, r5, r6, pc}
    4264:	1c8a      	adds	r2, r1, #2
    4266:	784b      	ldrb	r3, [r1, #1]
    4268:	2101      	movs	r1, #1
    426a:	e7ef      	b.n	424c <__sccl+0xc>
    426c:	2401      	movs	r4, #1
    426e:	404c      	eors	r4, r1
    4270:	0011      	movs	r1, r2
    4272:	54c4      	strb	r4, [r0, r3]
    4274:	780d      	ldrb	r5, [r1, #0]
    4276:	1c4a      	adds	r2, r1, #1
    4278:	2d2d      	cmp	r5, #45	; 0x2d
    427a:	d007      	beq.n	428c <__sccl+0x4c>
    427c:	2d5d      	cmp	r5, #93	; 0x5d
    427e:	d0ef      	beq.n	4260 <__sccl+0x20>
    4280:	2d00      	cmp	r5, #0
    4282:	d101      	bne.n	4288 <__sccl+0x48>
    4284:	000a      	movs	r2, r1
    4286:	e7eb      	b.n	4260 <__sccl+0x20>
    4288:	002b      	movs	r3, r5
    428a:	e7f1      	b.n	4270 <__sccl+0x30>
    428c:	784e      	ldrb	r6, [r1, #1]
    428e:	2e5d      	cmp	r6, #93	; 0x5d
    4290:	d0fa      	beq.n	4288 <__sccl+0x48>
    4292:	42b3      	cmp	r3, r6
    4294:	dcf8      	bgt.n	4288 <__sccl+0x48>
    4296:	3102      	adds	r1, #2
    4298:	3301      	adds	r3, #1
    429a:	54c4      	strb	r4, [r0, r3]
    429c:	429e      	cmp	r6, r3
    429e:	dcfb      	bgt.n	4298 <__sccl+0x58>
    42a0:	e7e8      	b.n	4274 <__sccl+0x34>
	...

000042a4 <__sread>:
    42a4:	b570      	push	{r4, r5, r6, lr}
    42a6:	000c      	movs	r4, r1
    42a8:	250e      	movs	r5, #14
    42aa:	5f49      	ldrsh	r1, [r1, r5]
    42ac:	f000 fada 	bl	4864 <_read_r>
    42b0:	2800      	cmp	r0, #0
    42b2:	db03      	blt.n	42bc <__sread+0x18>
    42b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    42b6:	181b      	adds	r3, r3, r0
    42b8:	6563      	str	r3, [r4, #84]	; 0x54
    42ba:	bd70      	pop	{r4, r5, r6, pc}
    42bc:	89a3      	ldrh	r3, [r4, #12]
    42be:	4a02      	ldr	r2, [pc, #8]	; (42c8 <__sread+0x24>)
    42c0:	4013      	ands	r3, r2
    42c2:	81a3      	strh	r3, [r4, #12]
    42c4:	e7f9      	b.n	42ba <__sread+0x16>
    42c6:	46c0      	nop			; (mov r8, r8)
    42c8:	ffffefff 	.word	0xffffefff

000042cc <__swrite>:
    42cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42ce:	001f      	movs	r7, r3
    42d0:	898b      	ldrh	r3, [r1, #12]
    42d2:	0005      	movs	r5, r0
    42d4:	000c      	movs	r4, r1
    42d6:	0016      	movs	r6, r2
    42d8:	05db      	lsls	r3, r3, #23
    42da:	d505      	bpl.n	42e8 <__swrite+0x1c>
    42dc:	230e      	movs	r3, #14
    42de:	5ec9      	ldrsh	r1, [r1, r3]
    42e0:	2200      	movs	r2, #0
    42e2:	2302      	movs	r3, #2
    42e4:	f000 fa64 	bl	47b0 <_lseek_r>
    42e8:	89a3      	ldrh	r3, [r4, #12]
    42ea:	4a05      	ldr	r2, [pc, #20]	; (4300 <__swrite+0x34>)
    42ec:	0028      	movs	r0, r5
    42ee:	4013      	ands	r3, r2
    42f0:	81a3      	strh	r3, [r4, #12]
    42f2:	0032      	movs	r2, r6
    42f4:	230e      	movs	r3, #14
    42f6:	5ee1      	ldrsh	r1, [r4, r3]
    42f8:	003b      	movs	r3, r7
    42fa:	f000 f9fd 	bl	46f8 <_write_r>
    42fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4300:	ffffefff 	.word	0xffffefff

00004304 <__sseek>:
    4304:	b570      	push	{r4, r5, r6, lr}
    4306:	000c      	movs	r4, r1
    4308:	250e      	movs	r5, #14
    430a:	5f49      	ldrsh	r1, [r1, r5]
    430c:	f000 fa50 	bl	47b0 <_lseek_r>
    4310:	89a3      	ldrh	r3, [r4, #12]
    4312:	1c42      	adds	r2, r0, #1
    4314:	d103      	bne.n	431e <__sseek+0x1a>
    4316:	4a05      	ldr	r2, [pc, #20]	; (432c <__sseek+0x28>)
    4318:	4013      	ands	r3, r2
    431a:	81a3      	strh	r3, [r4, #12]
    431c:	bd70      	pop	{r4, r5, r6, pc}
    431e:	2280      	movs	r2, #128	; 0x80
    4320:	0152      	lsls	r2, r2, #5
    4322:	4313      	orrs	r3, r2
    4324:	81a3      	strh	r3, [r4, #12]
    4326:	6560      	str	r0, [r4, #84]	; 0x54
    4328:	e7f8      	b.n	431c <__sseek+0x18>
    432a:	46c0      	nop			; (mov r8, r8)
    432c:	ffffefff 	.word	0xffffefff

00004330 <__sclose>:
    4330:	b510      	push	{r4, lr}
    4332:	230e      	movs	r3, #14
    4334:	5ec9      	ldrsh	r1, [r1, r3]
    4336:	f000 f9f3 	bl	4720 <_close_r>
    433a:	bd10      	pop	{r4, pc}

0000433c <_strtol_l.isra.0>:
    433c:	b5f0      	push	{r4, r5, r6, r7, lr}
    433e:	001f      	movs	r7, r3
    4340:	000e      	movs	r6, r1
    4342:	b087      	sub	sp, #28
    4344:	9005      	str	r0, [sp, #20]
    4346:	9103      	str	r1, [sp, #12]
    4348:	9202      	str	r2, [sp, #8]
    434a:	980c      	ldr	r0, [sp, #48]	; 0x30
    434c:	7834      	ldrb	r4, [r6, #0]
    434e:	f000 fa1d 	bl	478c <__locale_ctype_ptr_l>
    4352:	2208      	movs	r2, #8
    4354:	1900      	adds	r0, r0, r4
    4356:	7843      	ldrb	r3, [r0, #1]
    4358:	1c75      	adds	r5, r6, #1
    435a:	4013      	ands	r3, r2
    435c:	d10c      	bne.n	4378 <_strtol_l.isra.0+0x3c>
    435e:	2c2d      	cmp	r4, #45	; 0x2d
    4360:	d10c      	bne.n	437c <_strtol_l.isra.0+0x40>
    4362:	3301      	adds	r3, #1
    4364:	782c      	ldrb	r4, [r5, #0]
    4366:	9301      	str	r3, [sp, #4]
    4368:	1cb5      	adds	r5, r6, #2
    436a:	2f00      	cmp	r7, #0
    436c:	d00c      	beq.n	4388 <_strtol_l.isra.0+0x4c>
    436e:	2f10      	cmp	r7, #16
    4370:	d114      	bne.n	439c <_strtol_l.isra.0+0x60>
    4372:	2c30      	cmp	r4, #48	; 0x30
    4374:	d00a      	beq.n	438c <_strtol_l.isra.0+0x50>
    4376:	e011      	b.n	439c <_strtol_l.isra.0+0x60>
    4378:	002e      	movs	r6, r5
    437a:	e7e6      	b.n	434a <_strtol_l.isra.0+0xe>
    437c:	9301      	str	r3, [sp, #4]
    437e:	2c2b      	cmp	r4, #43	; 0x2b
    4380:	d1f3      	bne.n	436a <_strtol_l.isra.0+0x2e>
    4382:	782c      	ldrb	r4, [r5, #0]
    4384:	1cb5      	adds	r5, r6, #2
    4386:	e7f0      	b.n	436a <_strtol_l.isra.0+0x2e>
    4388:	2c30      	cmp	r4, #48	; 0x30
    438a:	d12f      	bne.n	43ec <_strtol_l.isra.0+0xb0>
    438c:	2220      	movs	r2, #32
    438e:	782b      	ldrb	r3, [r5, #0]
    4390:	4393      	bics	r3, r2
    4392:	2b58      	cmp	r3, #88	; 0x58
    4394:	d151      	bne.n	443a <_strtol_l.isra.0+0xfe>
    4396:	2710      	movs	r7, #16
    4398:	786c      	ldrb	r4, [r5, #1]
    439a:	3502      	adds	r5, #2
    439c:	9b01      	ldr	r3, [sp, #4]
    439e:	4a29      	ldr	r2, [pc, #164]	; (4444 <_strtol_l.isra.0+0x108>)
    43a0:	0039      	movs	r1, r7
    43a2:	189e      	adds	r6, r3, r2
    43a4:	0030      	movs	r0, r6
    43a6:	f7fe fb05 	bl	29b4 <__aeabi_uidivmod>
    43aa:	0030      	movs	r0, r6
    43ac:	9104      	str	r1, [sp, #16]
    43ae:	0039      	movs	r1, r7
    43b0:	f7fe fa7a 	bl	28a8 <__udivsi3>
    43b4:	2101      	movs	r1, #1
    43b6:	2300      	movs	r3, #0
    43b8:	4249      	negs	r1, r1
    43ba:	0002      	movs	r2, r0
    43bc:	468c      	mov	ip, r1
    43be:	0018      	movs	r0, r3
    43c0:	0021      	movs	r1, r4
    43c2:	3930      	subs	r1, #48	; 0x30
    43c4:	2909      	cmp	r1, #9
    43c6:	d813      	bhi.n	43f0 <_strtol_l.isra.0+0xb4>
    43c8:	000c      	movs	r4, r1
    43ca:	42a7      	cmp	r7, r4
    43cc:	dd1c      	ble.n	4408 <_strtol_l.isra.0+0xcc>
    43ce:	1c59      	adds	r1, r3, #1
    43d0:	d009      	beq.n	43e6 <_strtol_l.isra.0+0xaa>
    43d2:	4663      	mov	r3, ip
    43d4:	4282      	cmp	r2, r0
    43d6:	d306      	bcc.n	43e6 <_strtol_l.isra.0+0xaa>
    43d8:	d102      	bne.n	43e0 <_strtol_l.isra.0+0xa4>
    43da:	9904      	ldr	r1, [sp, #16]
    43dc:	42a1      	cmp	r1, r4
    43de:	db02      	blt.n	43e6 <_strtol_l.isra.0+0xaa>
    43e0:	2301      	movs	r3, #1
    43e2:	4378      	muls	r0, r7
    43e4:	1820      	adds	r0, r4, r0
    43e6:	782c      	ldrb	r4, [r5, #0]
    43e8:	3501      	adds	r5, #1
    43ea:	e7e9      	b.n	43c0 <_strtol_l.isra.0+0x84>
    43ec:	270a      	movs	r7, #10
    43ee:	e7d5      	b.n	439c <_strtol_l.isra.0+0x60>
    43f0:	0021      	movs	r1, r4
    43f2:	3941      	subs	r1, #65	; 0x41
    43f4:	2919      	cmp	r1, #25
    43f6:	d801      	bhi.n	43fc <_strtol_l.isra.0+0xc0>
    43f8:	3c37      	subs	r4, #55	; 0x37
    43fa:	e7e6      	b.n	43ca <_strtol_l.isra.0+0x8e>
    43fc:	0021      	movs	r1, r4
    43fe:	3961      	subs	r1, #97	; 0x61
    4400:	2919      	cmp	r1, #25
    4402:	d801      	bhi.n	4408 <_strtol_l.isra.0+0xcc>
    4404:	3c57      	subs	r4, #87	; 0x57
    4406:	e7e0      	b.n	43ca <_strtol_l.isra.0+0x8e>
    4408:	1c5a      	adds	r2, r3, #1
    440a:	d108      	bne.n	441e <_strtol_l.isra.0+0xe2>
    440c:	9a05      	ldr	r2, [sp, #20]
    440e:	3323      	adds	r3, #35	; 0x23
    4410:	6013      	str	r3, [r2, #0]
    4412:	9b02      	ldr	r3, [sp, #8]
    4414:	0030      	movs	r0, r6
    4416:	2b00      	cmp	r3, #0
    4418:	d10b      	bne.n	4432 <_strtol_l.isra.0+0xf6>
    441a:	b007      	add	sp, #28
    441c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    441e:	9a01      	ldr	r2, [sp, #4]
    4420:	2a00      	cmp	r2, #0
    4422:	d000      	beq.n	4426 <_strtol_l.isra.0+0xea>
    4424:	4240      	negs	r0, r0
    4426:	9a02      	ldr	r2, [sp, #8]
    4428:	2a00      	cmp	r2, #0
    442a:	d0f6      	beq.n	441a <_strtol_l.isra.0+0xde>
    442c:	9a03      	ldr	r2, [sp, #12]
    442e:	2b00      	cmp	r3, #0
    4430:	d000      	beq.n	4434 <_strtol_l.isra.0+0xf8>
    4432:	1e6a      	subs	r2, r5, #1
    4434:	9b02      	ldr	r3, [sp, #8]
    4436:	601a      	str	r2, [r3, #0]
    4438:	e7ef      	b.n	441a <_strtol_l.isra.0+0xde>
    443a:	2430      	movs	r4, #48	; 0x30
    443c:	2f00      	cmp	r7, #0
    443e:	d1ad      	bne.n	439c <_strtol_l.isra.0+0x60>
    4440:	3708      	adds	r7, #8
    4442:	e7ab      	b.n	439c <_strtol_l.isra.0+0x60>
    4444:	7fffffff 	.word	0x7fffffff

00004448 <_strtol_r>:
    4448:	b513      	push	{r0, r1, r4, lr}
    444a:	4c05      	ldr	r4, [pc, #20]	; (4460 <_strtol_r+0x18>)
    444c:	6824      	ldr	r4, [r4, #0]
    444e:	6a24      	ldr	r4, [r4, #32]
    4450:	2c00      	cmp	r4, #0
    4452:	d100      	bne.n	4456 <_strtol_r+0xe>
    4454:	4c03      	ldr	r4, [pc, #12]	; (4464 <_strtol_r+0x1c>)
    4456:	9400      	str	r4, [sp, #0]
    4458:	f7ff ff70 	bl	433c <_strtol_l.isra.0>
    445c:	bd16      	pop	{r1, r2, r4, pc}
    445e:	46c0      	nop			; (mov r8, r8)
    4460:	20000008 	.word	0x20000008
    4464:	2000006c 	.word	0x2000006c

00004468 <_strtoul_l.isra.0>:
    4468:	b5f0      	push	{r4, r5, r6, r7, lr}
    446a:	001f      	movs	r7, r3
    446c:	000e      	movs	r6, r1
    446e:	b087      	sub	sp, #28
    4470:	9005      	str	r0, [sp, #20]
    4472:	9103      	str	r1, [sp, #12]
    4474:	9201      	str	r2, [sp, #4]
    4476:	980c      	ldr	r0, [sp, #48]	; 0x30
    4478:	7834      	ldrb	r4, [r6, #0]
    447a:	f000 f987 	bl	478c <__locale_ctype_ptr_l>
    447e:	2208      	movs	r2, #8
    4480:	1900      	adds	r0, r0, r4
    4482:	7843      	ldrb	r3, [r0, #1]
    4484:	1c75      	adds	r5, r6, #1
    4486:	4013      	ands	r3, r2
    4488:	d10c      	bne.n	44a4 <_strtoul_l.isra.0+0x3c>
    448a:	2c2d      	cmp	r4, #45	; 0x2d
    448c:	d10c      	bne.n	44a8 <_strtoul_l.isra.0+0x40>
    448e:	3301      	adds	r3, #1
    4490:	782c      	ldrb	r4, [r5, #0]
    4492:	9302      	str	r3, [sp, #8]
    4494:	1cb5      	adds	r5, r6, #2
    4496:	2f00      	cmp	r7, #0
    4498:	d00c      	beq.n	44b4 <_strtoul_l.isra.0+0x4c>
    449a:	2f10      	cmp	r7, #16
    449c:	d114      	bne.n	44c8 <_strtoul_l.isra.0+0x60>
    449e:	2c30      	cmp	r4, #48	; 0x30
    44a0:	d00a      	beq.n	44b8 <_strtoul_l.isra.0+0x50>
    44a2:	e011      	b.n	44c8 <_strtoul_l.isra.0+0x60>
    44a4:	002e      	movs	r6, r5
    44a6:	e7e6      	b.n	4476 <_strtoul_l.isra.0+0xe>
    44a8:	9302      	str	r3, [sp, #8]
    44aa:	2c2b      	cmp	r4, #43	; 0x2b
    44ac:	d1f3      	bne.n	4496 <_strtoul_l.isra.0+0x2e>
    44ae:	782c      	ldrb	r4, [r5, #0]
    44b0:	1cb5      	adds	r5, r6, #2
    44b2:	e7f0      	b.n	4496 <_strtoul_l.isra.0+0x2e>
    44b4:	2c30      	cmp	r4, #48	; 0x30
    44b6:	d12f      	bne.n	4518 <_strtoul_l.isra.0+0xb0>
    44b8:	2220      	movs	r2, #32
    44ba:	782b      	ldrb	r3, [r5, #0]
    44bc:	4393      	bics	r3, r2
    44be:	2b58      	cmp	r3, #88	; 0x58
    44c0:	d154      	bne.n	456c <_strtoul_l.isra.0+0x104>
    44c2:	2710      	movs	r7, #16
    44c4:	786c      	ldrb	r4, [r5, #1]
    44c6:	3502      	adds	r5, #2
    44c8:	2001      	movs	r0, #1
    44ca:	0039      	movs	r1, r7
    44cc:	4240      	negs	r0, r0
    44ce:	f7fe f9eb 	bl	28a8 <__udivsi3>
    44d2:	0006      	movs	r6, r0
    44d4:	2001      	movs	r0, #1
    44d6:	0039      	movs	r1, r7
    44d8:	4240      	negs	r0, r0
    44da:	f7fe fa6b 	bl	29b4 <__aeabi_uidivmod>
    44de:	2300      	movs	r3, #0
    44e0:	9104      	str	r1, [sp, #16]
    44e2:	2101      	movs	r1, #1
    44e4:	2201      	movs	r2, #1
    44e6:	0018      	movs	r0, r3
    44e8:	468c      	mov	ip, r1
    44ea:	4252      	negs	r2, r2
    44ec:	0021      	movs	r1, r4
    44ee:	3930      	subs	r1, #48	; 0x30
    44f0:	2909      	cmp	r1, #9
    44f2:	d813      	bhi.n	451c <_strtoul_l.isra.0+0xb4>
    44f4:	000c      	movs	r4, r1
    44f6:	42a7      	cmp	r7, r4
    44f8:	dd1e      	ble.n	4538 <_strtoul_l.isra.0+0xd0>
    44fa:	2b00      	cmp	r3, #0
    44fc:	db1a      	blt.n	4534 <_strtoul_l.isra.0+0xcc>
    44fe:	0013      	movs	r3, r2
    4500:	4286      	cmp	r6, r0
    4502:	d306      	bcc.n	4512 <_strtoul_l.isra.0+0xaa>
    4504:	d102      	bne.n	450c <_strtoul_l.isra.0+0xa4>
    4506:	9904      	ldr	r1, [sp, #16]
    4508:	42a1      	cmp	r1, r4
    450a:	db02      	blt.n	4512 <_strtoul_l.isra.0+0xaa>
    450c:	4663      	mov	r3, ip
    450e:	4378      	muls	r0, r7
    4510:	1820      	adds	r0, r4, r0
    4512:	782c      	ldrb	r4, [r5, #0]
    4514:	3501      	adds	r5, #1
    4516:	e7e9      	b.n	44ec <_strtoul_l.isra.0+0x84>
    4518:	270a      	movs	r7, #10
    451a:	e7d5      	b.n	44c8 <_strtoul_l.isra.0+0x60>
    451c:	0021      	movs	r1, r4
    451e:	3941      	subs	r1, #65	; 0x41
    4520:	2919      	cmp	r1, #25
    4522:	d801      	bhi.n	4528 <_strtoul_l.isra.0+0xc0>
    4524:	3c37      	subs	r4, #55	; 0x37
    4526:	e7e6      	b.n	44f6 <_strtoul_l.isra.0+0x8e>
    4528:	0021      	movs	r1, r4
    452a:	3961      	subs	r1, #97	; 0x61
    452c:	2919      	cmp	r1, #25
    452e:	d803      	bhi.n	4538 <_strtoul_l.isra.0+0xd0>
    4530:	3c57      	subs	r4, #87	; 0x57
    4532:	e7e0      	b.n	44f6 <_strtoul_l.isra.0+0x8e>
    4534:	0013      	movs	r3, r2
    4536:	e7ec      	b.n	4512 <_strtoul_l.isra.0+0xaa>
    4538:	2b00      	cmp	r3, #0
    453a:	da09      	bge.n	4550 <_strtoul_l.isra.0+0xe8>
    453c:	2322      	movs	r3, #34	; 0x22
    453e:	2001      	movs	r0, #1
    4540:	9a05      	ldr	r2, [sp, #20]
    4542:	4240      	negs	r0, r0
    4544:	6013      	str	r3, [r2, #0]
    4546:	9b01      	ldr	r3, [sp, #4]
    4548:	2b00      	cmp	r3, #0
    454a:	d10b      	bne.n	4564 <_strtoul_l.isra.0+0xfc>
    454c:	b007      	add	sp, #28
    454e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4550:	9a02      	ldr	r2, [sp, #8]
    4552:	2a00      	cmp	r2, #0
    4554:	d000      	beq.n	4558 <_strtoul_l.isra.0+0xf0>
    4556:	4240      	negs	r0, r0
    4558:	9a01      	ldr	r2, [sp, #4]
    455a:	2a00      	cmp	r2, #0
    455c:	d0f6      	beq.n	454c <_strtoul_l.isra.0+0xe4>
    455e:	9a03      	ldr	r2, [sp, #12]
    4560:	2b00      	cmp	r3, #0
    4562:	d000      	beq.n	4566 <_strtoul_l.isra.0+0xfe>
    4564:	1e6a      	subs	r2, r5, #1
    4566:	9b01      	ldr	r3, [sp, #4]
    4568:	601a      	str	r2, [r3, #0]
    456a:	e7ef      	b.n	454c <_strtoul_l.isra.0+0xe4>
    456c:	2430      	movs	r4, #48	; 0x30
    456e:	2f00      	cmp	r7, #0
    4570:	d1aa      	bne.n	44c8 <_strtoul_l.isra.0+0x60>
    4572:	3708      	adds	r7, #8
    4574:	e7a8      	b.n	44c8 <_strtoul_l.isra.0+0x60>
	...

00004578 <_strtoul_r>:
    4578:	b513      	push	{r0, r1, r4, lr}
    457a:	4c05      	ldr	r4, [pc, #20]	; (4590 <_strtoul_r+0x18>)
    457c:	6824      	ldr	r4, [r4, #0]
    457e:	6a24      	ldr	r4, [r4, #32]
    4580:	2c00      	cmp	r4, #0
    4582:	d100      	bne.n	4586 <_strtoul_r+0xe>
    4584:	4c03      	ldr	r4, [pc, #12]	; (4594 <_strtoul_r+0x1c>)
    4586:	9400      	str	r4, [sp, #0]
    4588:	f7ff ff6e 	bl	4468 <_strtoul_l.isra.0>
    458c:	bd16      	pop	{r1, r2, r4, pc}
    458e:	46c0      	nop			; (mov r8, r8)
    4590:	20000008 	.word	0x20000008
    4594:	2000006c 	.word	0x2000006c

00004598 <__submore>:
    4598:	000b      	movs	r3, r1
    459a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    459c:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    459e:	3344      	adds	r3, #68	; 0x44
    45a0:	000c      	movs	r4, r1
    45a2:	429d      	cmp	r5, r3
    45a4:	d11c      	bne.n	45e0 <__submore+0x48>
    45a6:	2680      	movs	r6, #128	; 0x80
    45a8:	00f6      	lsls	r6, r6, #3
    45aa:	0031      	movs	r1, r6
    45ac:	f7fe ff28 	bl	3400 <_malloc_r>
    45b0:	2800      	cmp	r0, #0
    45b2:	d102      	bne.n	45ba <__submore+0x22>
    45b4:	2001      	movs	r0, #1
    45b6:	4240      	negs	r0, r0
    45b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    45ba:	0023      	movs	r3, r4
    45bc:	6360      	str	r0, [r4, #52]	; 0x34
    45be:	63a6      	str	r6, [r4, #56]	; 0x38
    45c0:	3346      	adds	r3, #70	; 0x46
    45c2:	781a      	ldrb	r2, [r3, #0]
    45c4:	4b10      	ldr	r3, [pc, #64]	; (4608 <__submore+0x70>)
    45c6:	54c2      	strb	r2, [r0, r3]
    45c8:	0023      	movs	r3, r4
    45ca:	3345      	adds	r3, #69	; 0x45
    45cc:	781a      	ldrb	r2, [r3, #0]
    45ce:	4b0f      	ldr	r3, [pc, #60]	; (460c <__submore+0x74>)
    45d0:	54c2      	strb	r2, [r0, r3]
    45d2:	782a      	ldrb	r2, [r5, #0]
    45d4:	4b0e      	ldr	r3, [pc, #56]	; (4610 <__submore+0x78>)
    45d6:	54c2      	strb	r2, [r0, r3]
    45d8:	18c0      	adds	r0, r0, r3
    45da:	6020      	str	r0, [r4, #0]
    45dc:	2000      	movs	r0, #0
    45de:	e7eb      	b.n	45b8 <__submore+0x20>
    45e0:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    45e2:	0029      	movs	r1, r5
    45e4:	0073      	lsls	r3, r6, #1
    45e6:	001a      	movs	r2, r3
    45e8:	9301      	str	r3, [sp, #4]
    45ea:	f000 f914 	bl	4816 <_realloc_r>
    45ee:	1e05      	subs	r5, r0, #0
    45f0:	d0e0      	beq.n	45b4 <__submore+0x1c>
    45f2:	1987      	adds	r7, r0, r6
    45f4:	0001      	movs	r1, r0
    45f6:	0032      	movs	r2, r6
    45f8:	0038      	movs	r0, r7
    45fa:	f7fe fa3e 	bl	2a7a <memcpy>
    45fe:	9b01      	ldr	r3, [sp, #4]
    4600:	6027      	str	r7, [r4, #0]
    4602:	6365      	str	r5, [r4, #52]	; 0x34
    4604:	63a3      	str	r3, [r4, #56]	; 0x38
    4606:	e7e9      	b.n	45dc <__submore+0x44>
    4608:	000003ff 	.word	0x000003ff
    460c:	000003fe 	.word	0x000003fe
    4610:	000003fd 	.word	0x000003fd

00004614 <_ungetc_r>:
    4614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4616:	0005      	movs	r5, r0
    4618:	000e      	movs	r6, r1
    461a:	0014      	movs	r4, r2
    461c:	1c4b      	adds	r3, r1, #1
    461e:	d103      	bne.n	4628 <_ungetc_r+0x14>
    4620:	2601      	movs	r6, #1
    4622:	4276      	negs	r6, r6
    4624:	0030      	movs	r0, r6
    4626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4628:	2800      	cmp	r0, #0
    462a:	d004      	beq.n	4636 <_ungetc_r+0x22>
    462c:	6983      	ldr	r3, [r0, #24]
    462e:	2b00      	cmp	r3, #0
    4630:	d101      	bne.n	4636 <_ungetc_r+0x22>
    4632:	f7fe fd73 	bl	311c <__sinit>
    4636:	4b2d      	ldr	r3, [pc, #180]	; (46ec <_ungetc_r+0xd8>)
    4638:	429c      	cmp	r4, r3
    463a:	d12d      	bne.n	4698 <_ungetc_r+0x84>
    463c:	686c      	ldr	r4, [r5, #4]
    463e:	2220      	movs	r2, #32
    4640:	89a3      	ldrh	r3, [r4, #12]
    4642:	4393      	bics	r3, r2
    4644:	b21b      	sxth	r3, r3
    4646:	81a3      	strh	r3, [r4, #12]
    4648:	b29b      	uxth	r3, r3
    464a:	075a      	lsls	r2, r3, #29
    464c:	d413      	bmi.n	4676 <_ungetc_r+0x62>
    464e:	06da      	lsls	r2, r3, #27
    4650:	d5e6      	bpl.n	4620 <_ungetc_r+0xc>
    4652:	2708      	movs	r7, #8
    4654:	423b      	tst	r3, r7
    4656:	d00a      	beq.n	466e <_ungetc_r+0x5a>
    4658:	0021      	movs	r1, r4
    465a:	0028      	movs	r0, r5
    465c:	f7fe fcdc 	bl	3018 <_fflush_r>
    4660:	2800      	cmp	r0, #0
    4662:	d1dd      	bne.n	4620 <_ungetc_r+0xc>
    4664:	89a3      	ldrh	r3, [r4, #12]
    4666:	60a0      	str	r0, [r4, #8]
    4668:	43bb      	bics	r3, r7
    466a:	81a3      	strh	r3, [r4, #12]
    466c:	61a0      	str	r0, [r4, #24]
    466e:	2304      	movs	r3, #4
    4670:	89a2      	ldrh	r2, [r4, #12]
    4672:	4313      	orrs	r3, r2
    4674:	81a3      	strh	r3, [r4, #12]
    4676:	6b62      	ldr	r2, [r4, #52]	; 0x34
    4678:	b2f7      	uxtb	r7, r6
    467a:	6863      	ldr	r3, [r4, #4]
    467c:	b2f6      	uxtb	r6, r6
    467e:	2a00      	cmp	r2, #0
    4680:	d01b      	beq.n	46ba <_ungetc_r+0xa6>
    4682:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    4684:	4293      	cmp	r3, r2
    4686:	da11      	bge.n	46ac <_ungetc_r+0x98>
    4688:	6823      	ldr	r3, [r4, #0]
    468a:	3b01      	subs	r3, #1
    468c:	6023      	str	r3, [r4, #0]
    468e:	701f      	strb	r7, [r3, #0]
    4690:	6863      	ldr	r3, [r4, #4]
    4692:	3301      	adds	r3, #1
    4694:	6063      	str	r3, [r4, #4]
    4696:	e7c5      	b.n	4624 <_ungetc_r+0x10>
    4698:	4b15      	ldr	r3, [pc, #84]	; (46f0 <_ungetc_r+0xdc>)
    469a:	429c      	cmp	r4, r3
    469c:	d101      	bne.n	46a2 <_ungetc_r+0x8e>
    469e:	68ac      	ldr	r4, [r5, #8]
    46a0:	e7cd      	b.n	463e <_ungetc_r+0x2a>
    46a2:	4b14      	ldr	r3, [pc, #80]	; (46f4 <_ungetc_r+0xe0>)
    46a4:	429c      	cmp	r4, r3
    46a6:	d1ca      	bne.n	463e <_ungetc_r+0x2a>
    46a8:	68ec      	ldr	r4, [r5, #12]
    46aa:	e7c8      	b.n	463e <_ungetc_r+0x2a>
    46ac:	0021      	movs	r1, r4
    46ae:	0028      	movs	r0, r5
    46b0:	f7ff ff72 	bl	4598 <__submore>
    46b4:	2800      	cmp	r0, #0
    46b6:	d0e7      	beq.n	4688 <_ungetc_r+0x74>
    46b8:	e7b2      	b.n	4620 <_ungetc_r+0xc>
    46ba:	6921      	ldr	r1, [r4, #16]
    46bc:	6822      	ldr	r2, [r4, #0]
    46be:	2900      	cmp	r1, #0
    46c0:	d007      	beq.n	46d2 <_ungetc_r+0xbe>
    46c2:	4291      	cmp	r1, r2
    46c4:	d205      	bcs.n	46d2 <_ungetc_r+0xbe>
    46c6:	1e51      	subs	r1, r2, #1
    46c8:	7808      	ldrb	r0, [r1, #0]
    46ca:	4286      	cmp	r6, r0
    46cc:	d101      	bne.n	46d2 <_ungetc_r+0xbe>
    46ce:	6021      	str	r1, [r4, #0]
    46d0:	e7df      	b.n	4692 <_ungetc_r+0x7e>
    46d2:	6423      	str	r3, [r4, #64]	; 0x40
    46d4:	0023      	movs	r3, r4
    46d6:	3344      	adds	r3, #68	; 0x44
    46d8:	6363      	str	r3, [r4, #52]	; 0x34
    46da:	2303      	movs	r3, #3
    46dc:	63a3      	str	r3, [r4, #56]	; 0x38
    46de:	0023      	movs	r3, r4
    46e0:	3346      	adds	r3, #70	; 0x46
    46e2:	63e2      	str	r2, [r4, #60]	; 0x3c
    46e4:	701f      	strb	r7, [r3, #0]
    46e6:	6023      	str	r3, [r4, #0]
    46e8:	2301      	movs	r3, #1
    46ea:	e7d3      	b.n	4694 <_ungetc_r+0x80>
    46ec:	00004a90 	.word	0x00004a90
    46f0:	00004ab0 	.word	0x00004ab0
    46f4:	00004a70 	.word	0x00004a70

000046f8 <_write_r>:
    46f8:	b570      	push	{r4, r5, r6, lr}
    46fa:	0005      	movs	r5, r0
    46fc:	0008      	movs	r0, r1
    46fe:	0011      	movs	r1, r2
    4700:	2200      	movs	r2, #0
    4702:	4c06      	ldr	r4, [pc, #24]	; (471c <_write_r+0x24>)
    4704:	6022      	str	r2, [r4, #0]
    4706:	001a      	movs	r2, r3
    4708:	f7fe f8a6 	bl	2858 <_write>
    470c:	1c43      	adds	r3, r0, #1
    470e:	d103      	bne.n	4718 <_write_r+0x20>
    4710:	6823      	ldr	r3, [r4, #0]
    4712:	2b00      	cmp	r3, #0
    4714:	d000      	beq.n	4718 <_write_r+0x20>
    4716:	602b      	str	r3, [r5, #0]
    4718:	bd70      	pop	{r4, r5, r6, pc}
    471a:	46c0      	nop			; (mov r8, r8)
    471c:	200003d4 	.word	0x200003d4

00004720 <_close_r>:
    4720:	2300      	movs	r3, #0
    4722:	b570      	push	{r4, r5, r6, lr}
    4724:	4c06      	ldr	r4, [pc, #24]	; (4740 <_close_r+0x20>)
    4726:	0005      	movs	r5, r0
    4728:	0008      	movs	r0, r1
    472a:	6023      	str	r3, [r4, #0]
    472c:	f7fb fdb8 	bl	2a0 <_close>
    4730:	1c43      	adds	r3, r0, #1
    4732:	d103      	bne.n	473c <_close_r+0x1c>
    4734:	6823      	ldr	r3, [r4, #0]
    4736:	2b00      	cmp	r3, #0
    4738:	d000      	beq.n	473c <_close_r+0x1c>
    473a:	602b      	str	r3, [r5, #0]
    473c:	bd70      	pop	{r4, r5, r6, pc}
    473e:	46c0      	nop			; (mov r8, r8)
    4740:	200003d4 	.word	0x200003d4

00004744 <_fstat_r>:
    4744:	2300      	movs	r3, #0
    4746:	b570      	push	{r4, r5, r6, lr}
    4748:	4c06      	ldr	r4, [pc, #24]	; (4764 <_fstat_r+0x20>)
    474a:	0005      	movs	r5, r0
    474c:	0008      	movs	r0, r1
    474e:	0011      	movs	r1, r2
    4750:	6023      	str	r3, [r4, #0]
    4752:	f7fb fda8 	bl	2a6 <_fstat>
    4756:	1c43      	adds	r3, r0, #1
    4758:	d103      	bne.n	4762 <_fstat_r+0x1e>
    475a:	6823      	ldr	r3, [r4, #0]
    475c:	2b00      	cmp	r3, #0
    475e:	d000      	beq.n	4762 <_fstat_r+0x1e>
    4760:	602b      	str	r3, [r5, #0]
    4762:	bd70      	pop	{r4, r5, r6, pc}
    4764:	200003d4 	.word	0x200003d4

00004768 <_isatty_r>:
    4768:	2300      	movs	r3, #0
    476a:	b570      	push	{r4, r5, r6, lr}
    476c:	4c06      	ldr	r4, [pc, #24]	; (4788 <_isatty_r+0x20>)
    476e:	0005      	movs	r5, r0
    4770:	0008      	movs	r0, r1
    4772:	6023      	str	r3, [r4, #0]
    4774:	f7fb fd9c 	bl	2b0 <_isatty>
    4778:	1c43      	adds	r3, r0, #1
    477a:	d103      	bne.n	4784 <_isatty_r+0x1c>
    477c:	6823      	ldr	r3, [r4, #0]
    477e:	2b00      	cmp	r3, #0
    4780:	d000      	beq.n	4784 <_isatty_r+0x1c>
    4782:	602b      	str	r3, [r5, #0]
    4784:	bd70      	pop	{r4, r5, r6, pc}
    4786:	46c0      	nop			; (mov r8, r8)
    4788:	200003d4 	.word	0x200003d4

0000478c <__locale_ctype_ptr_l>:
    478c:	30ec      	adds	r0, #236	; 0xec
    478e:	6800      	ldr	r0, [r0, #0]
    4790:	4770      	bx	lr
	...

00004794 <__locale_ctype_ptr>:
    4794:	4b04      	ldr	r3, [pc, #16]	; (47a8 <__locale_ctype_ptr+0x14>)
    4796:	681b      	ldr	r3, [r3, #0]
    4798:	6a1b      	ldr	r3, [r3, #32]
    479a:	2b00      	cmp	r3, #0
    479c:	d100      	bne.n	47a0 <__locale_ctype_ptr+0xc>
    479e:	4b03      	ldr	r3, [pc, #12]	; (47ac <__locale_ctype_ptr+0x18>)
    47a0:	33ec      	adds	r3, #236	; 0xec
    47a2:	6818      	ldr	r0, [r3, #0]
    47a4:	4770      	bx	lr
    47a6:	46c0      	nop			; (mov r8, r8)
    47a8:	20000008 	.word	0x20000008
    47ac:	2000006c 	.word	0x2000006c

000047b0 <_lseek_r>:
    47b0:	b570      	push	{r4, r5, r6, lr}
    47b2:	0005      	movs	r5, r0
    47b4:	0008      	movs	r0, r1
    47b6:	0011      	movs	r1, r2
    47b8:	2200      	movs	r2, #0
    47ba:	4c06      	ldr	r4, [pc, #24]	; (47d4 <_lseek_r+0x24>)
    47bc:	6022      	str	r2, [r4, #0]
    47be:	001a      	movs	r2, r3
    47c0:	f7fb fd78 	bl	2b4 <_lseek>
    47c4:	1c43      	adds	r3, r0, #1
    47c6:	d103      	bne.n	47d0 <_lseek_r+0x20>
    47c8:	6823      	ldr	r3, [r4, #0]
    47ca:	2b00      	cmp	r3, #0
    47cc:	d000      	beq.n	47d0 <_lseek_r+0x20>
    47ce:	602b      	str	r3, [r5, #0]
    47d0:	bd70      	pop	{r4, r5, r6, pc}
    47d2:	46c0      	nop			; (mov r8, r8)
    47d4:	200003d4 	.word	0x200003d4

000047d8 <__ascii_mbtowc>:
    47d8:	b082      	sub	sp, #8
    47da:	2900      	cmp	r1, #0
    47dc:	d100      	bne.n	47e0 <__ascii_mbtowc+0x8>
    47de:	a901      	add	r1, sp, #4
    47e0:	1e10      	subs	r0, r2, #0
    47e2:	d006      	beq.n	47f2 <__ascii_mbtowc+0x1a>
    47e4:	2b00      	cmp	r3, #0
    47e6:	d006      	beq.n	47f6 <__ascii_mbtowc+0x1e>
    47e8:	7813      	ldrb	r3, [r2, #0]
    47ea:	600b      	str	r3, [r1, #0]
    47ec:	7810      	ldrb	r0, [r2, #0]
    47ee:	1e43      	subs	r3, r0, #1
    47f0:	4198      	sbcs	r0, r3
    47f2:	b002      	add	sp, #8
    47f4:	4770      	bx	lr
    47f6:	2002      	movs	r0, #2
    47f8:	4240      	negs	r0, r0
    47fa:	e7fa      	b.n	47f2 <__ascii_mbtowc+0x1a>

000047fc <memchr>:
    47fc:	b2c9      	uxtb	r1, r1
    47fe:	1882      	adds	r2, r0, r2
    4800:	4290      	cmp	r0, r2
    4802:	d101      	bne.n	4808 <memchr+0xc>
    4804:	2000      	movs	r0, #0
    4806:	4770      	bx	lr
    4808:	7803      	ldrb	r3, [r0, #0]
    480a:	428b      	cmp	r3, r1
    480c:	d0fb      	beq.n	4806 <memchr+0xa>
    480e:	3001      	adds	r0, #1
    4810:	e7f6      	b.n	4800 <memchr+0x4>

00004812 <__malloc_lock>:
    4812:	4770      	bx	lr

00004814 <__malloc_unlock>:
    4814:	4770      	bx	lr

00004816 <_realloc_r>:
    4816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4818:	0007      	movs	r7, r0
    481a:	000d      	movs	r5, r1
    481c:	0016      	movs	r6, r2
    481e:	2900      	cmp	r1, #0
    4820:	d105      	bne.n	482e <_realloc_r+0x18>
    4822:	0011      	movs	r1, r2
    4824:	f7fe fdec 	bl	3400 <_malloc_r>
    4828:	0004      	movs	r4, r0
    482a:	0020      	movs	r0, r4
    482c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    482e:	2a00      	cmp	r2, #0
    4830:	d103      	bne.n	483a <_realloc_r+0x24>
    4832:	f7fe fd9b 	bl	336c <_free_r>
    4836:	0034      	movs	r4, r6
    4838:	e7f7      	b.n	482a <_realloc_r+0x14>
    483a:	f000 f833 	bl	48a4 <_malloc_usable_size_r>
    483e:	002c      	movs	r4, r5
    4840:	4286      	cmp	r6, r0
    4842:	d9f2      	bls.n	482a <_realloc_r+0x14>
    4844:	0031      	movs	r1, r6
    4846:	0038      	movs	r0, r7
    4848:	f7fe fdda 	bl	3400 <_malloc_r>
    484c:	1e04      	subs	r4, r0, #0
    484e:	d0ec      	beq.n	482a <_realloc_r+0x14>
    4850:	0029      	movs	r1, r5
    4852:	0032      	movs	r2, r6
    4854:	f7fe f911 	bl	2a7a <memcpy>
    4858:	0029      	movs	r1, r5
    485a:	0038      	movs	r0, r7
    485c:	f7fe fd86 	bl	336c <_free_r>
    4860:	e7e3      	b.n	482a <_realloc_r+0x14>
	...

00004864 <_read_r>:
    4864:	b570      	push	{r4, r5, r6, lr}
    4866:	0005      	movs	r5, r0
    4868:	0008      	movs	r0, r1
    486a:	0011      	movs	r1, r2
    486c:	2200      	movs	r2, #0
    486e:	4c06      	ldr	r4, [pc, #24]	; (4888 <_read_r+0x24>)
    4870:	6022      	str	r2, [r4, #0]
    4872:	001a      	movs	r2, r3
    4874:	f7fd ffce 	bl	2814 <_read>
    4878:	1c43      	adds	r3, r0, #1
    487a:	d103      	bne.n	4884 <_read_r+0x20>
    487c:	6823      	ldr	r3, [r4, #0]
    487e:	2b00      	cmp	r3, #0
    4880:	d000      	beq.n	4884 <_read_r+0x20>
    4882:	602b      	str	r3, [r5, #0]
    4884:	bd70      	pop	{r4, r5, r6, pc}
    4886:	46c0      	nop			; (mov r8, r8)
    4888:	200003d4 	.word	0x200003d4

0000488c <__ascii_wctomb>:
    488c:	1e0b      	subs	r3, r1, #0
    488e:	d004      	beq.n	489a <__ascii_wctomb+0xe>
    4890:	2aff      	cmp	r2, #255	; 0xff
    4892:	d904      	bls.n	489e <__ascii_wctomb+0x12>
    4894:	238a      	movs	r3, #138	; 0x8a
    4896:	6003      	str	r3, [r0, #0]
    4898:	3b8b      	subs	r3, #139	; 0x8b
    489a:	0018      	movs	r0, r3
    489c:	4770      	bx	lr
    489e:	700a      	strb	r2, [r1, #0]
    48a0:	2301      	movs	r3, #1
    48a2:	e7fa      	b.n	489a <__ascii_wctomb+0xe>

000048a4 <_malloc_usable_size_r>:
    48a4:	1f0b      	subs	r3, r1, #4
    48a6:	681b      	ldr	r3, [r3, #0]
    48a8:	1f18      	subs	r0, r3, #4
    48aa:	2b00      	cmp	r3, #0
    48ac:	da01      	bge.n	48b2 <_malloc_usable_size_r+0xe>
    48ae:	580b      	ldr	r3, [r1, r0]
    48b0:	18c0      	adds	r0, r0, r3
    48b2:	4770      	bx	lr
    48b4:	62205854 	.word	0x62205854
    48b8:	65666675 	.word	0x65666675
    48bc:	203d2072 	.word	0x203d2072
    48c0:	00007830 	.word	0x00007830
    48c4:	62205852 	.word	0x62205852
    48c8:	65666675 	.word	0x65666675
    48cc:	203d2072 	.word	0x203d2072
    48d0:	00007830 	.word	0x00007830
    48d4:	6c696146 	.word	0x6c696146
    48d8:	20216465 	.word	0x20216465
    48dc:	5f746572 	.word	0x5f746572
    48e0:	65646f63 	.word	0x65646f63
    48e4:	30203d20 	.word	0x30203d20
    48e8:	322e2578 	.word	0x322e2578
    48ec:	00000a58 	.word	0x00000a58
    48f0:	636f6c42 	.word	0x636f6c42
    48f4:	6552206b 	.word	0x6552206b
    48f8:	6d206461 	.word	0x6d206461
    48fc:	726f6d65 	.word	0x726f6d65
    4900:	61662079 	.word	0x61662079
    4904:	64656c69 	.word	0x64656c69
    4908:	00000d21 	.word	0x00000d21
    490c:	636f6c42 	.word	0x636f6c42
    4910:	6552206b 	.word	0x6552206b
    4914:	6d206461 	.word	0x6d206461
    4918:	726f6d65 	.word	0x726f6d65
    491c:	75732079 	.word	0x75732079
    4920:	73656363 	.word	0x73656363
    4924:	000d2173 	.word	0x000d2173
    4928:	2a2a2a2a 	.word	0x2a2a2a2a
    492c:	5345412a 	.word	0x5345412a
    4930:	20323331 	.word	0x20323331
    4934:	54534554 	.word	0x54534554
    4938:	2a2a2a2a 	.word	0x2a2a2a2a
    493c:	00000d2a 	.word	0x00000d2a
    4940:	00006325 	.word	0x00006325
    4944:	75706e49 	.word	0x75706e49
    4948:	253a2074 	.word	0x253a2074
    494c:	00000063 	.word	0x00000063
    4950:	6f727245 	.word	0x6f727245
    4954:	75622072 	.word	0x75622072
    4958:	72656666 	.word	0x72656666
    495c:	65766f20 	.word	0x65766f20
    4960:	6f6c6672 	.word	0x6f6c6672
    4964:	00000077 	.word	0x00000077
    4968:	58322e25 	.word	0x58322e25
    496c:	00000000 	.word	0x00000000
    4970:	64616552 	.word	0x64616552
    4974:	6d656d20 	.word	0x6d656d20
    4978:	2079726f 	.word	0x2079726f
    497c:	6c696166 	.word	0x6c696166
    4980:	0d216465 	.word	0x0d216465
    4984:	00000000 	.word	0x00000000
    4988:	64616552 	.word	0x64616552
    498c:	6d656d20 	.word	0x6d656d20
    4990:	2079726f 	.word	0x2079726f
    4994:	63637573 	.word	0x63637573
    4998:	21737365 	.word	0x21737365
    499c:	0000000d 	.word	0x0000000d
    49a0:	706d6f43 	.word	0x706d6f43
    49a4:	20657261 	.word	0x20657261
    49a8:	6f6d654d 	.word	0x6f6d654d
    49ac:	6d207972 	.word	0x6d207972
    49b0:	616d7369 	.word	0x616d7369
    49b4:	21686374 	.word	0x21686374
    49b8:	0000000d 	.word	0x0000000d
    49bc:	706d6f43 	.word	0x706d6f43
    49c0:	20657261 	.word	0x20657261
    49c4:	6f6d654d 	.word	0x6f6d654d
    49c8:	6d207972 	.word	0x6d207972
    49cc:	68637461 	.word	0x68637461
    49d0:	00000d21 	.word	0x00000d21
    49d4:	74697257 	.word	0x74697257
    49d8:	656d2065 	.word	0x656d2065
    49dc:	79726f6d 	.word	0x79726f6d
    49e0:	69616620 	.word	0x69616620
    49e4:	2164656c 	.word	0x2164656c
    49e8:	0000000d 	.word	0x0000000d
    49ec:	74697257 	.word	0x74697257
    49f0:	656d2065 	.word	0x656d2065
    49f4:	79726f6d 	.word	0x79726f6d
    49f8:	63757320 	.word	0x63757320
    49fc:	73736563 	.word	0x73736563
    4a00:	00000d21 	.word	0x00000d21
    4a04:	61746144 	.word	0x61746144
    4a08:	0000203a 	.word	0x0000203a
    4a0c:	42000800 	.word	0x42000800
    4a10:	42000c00 	.word	0x42000c00
    4a14:	42001000 	.word	0x42001000
    4a18:	42001400 	.word	0x42001400
    4a1c:	42001800 	.word	0x42001800
    4a20:	42001c00 	.word	0x42001c00
    4a24:	0000228a 	.word	0x0000228a
    4a28:	00002286 	.word	0x00002286
    4a2c:	00002286 	.word	0x00002286
    4a30:	000022e8 	.word	0x000022e8
    4a34:	000022e8 	.word	0x000022e8
    4a38:	0000229e 	.word	0x0000229e
    4a3c:	00002290 	.word	0x00002290
    4a40:	000022a4 	.word	0x000022a4
    4a44:	000022d6 	.word	0x000022d6
    4a48:	00002370 	.word	0x00002370
    4a4c:	00002350 	.word	0x00002350
    4a50:	00002350 	.word	0x00002350
    4a54:	000023d0 	.word	0x000023d0
    4a58:	00002362 	.word	0x00002362
    4a5c:	0000237e 	.word	0x0000237e
    4a60:	00002354 	.word	0x00002354
    4a64:	0000238c 	.word	0x0000238c
    4a68:	000023c0 	.word	0x000023c0

00004a6c <_global_impure_ptr>:
    4a6c:	2000000c                                ... 

00004a70 <__sf_fake_stderr>:
	...

00004a90 <__sf_fake_stdin>:
	...

00004ab0 <__sf_fake_stdout>:
	...
    4ad0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    4ae0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    4af0:	31300046 35343332 39383736 64636261     F.0123456789abcd
    4b00:	00006665 00004b22 00004b25 00004b28     ef.."K..%K..(K..
    4b10:	61462d41 3938662d 33323130 37363534     A-Fa-f8901234567
    4b20:	2d2b005d 00303000 43005878 534f5000     ].+-.00.xX.C.POS
    4b30:	2e005849 20200000                                IX...

00004b35 <_ctype_>:
    4b35:	20202000 20202020 28282020 20282828     .         ((((( 
    4b45:	20202020 20202020 20202020 20202020                     
    4b55:	10108820 10101010 10101010 10101010      ...............
    4b65:	04040410 04040404 10040404 10101010     ................
    4b75:	41411010 41414141 01010101 01010101     ..AAAAAA........
    4b85:	01010101 01010101 01010101 10101010     ................
    4b95:	42421010 42424242 02020202 02020202     ..BBBBBB........
    4ba5:	02020202 02020202 02020202 10101010     ................
    4bb5:	00000020 00000000 00000000 00000000      ...............
	...

00004c38 <_init>:
    4c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c3a:	46c0      	nop			; (mov r8, r8)
    4c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4c3e:	bc08      	pop	{r3}
    4c40:	469e      	mov	lr, r3
    4c42:	4770      	bx	lr

00004c44 <__init_array_start>:
    4c44:	000000d9 	.word	0x000000d9

00004c48 <_fini>:
    4c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c4a:	46c0      	nop			; (mov r8, r8)
    4c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4c4e:	bc08      	pop	{r3}
    4c50:	469e      	mov	lr, r3
    4c52:	4770      	bx	lr

00004c54 <__fini_array_start>:
    4c54:	000000b1 	.word	0x000000b1
